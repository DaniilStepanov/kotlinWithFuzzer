2021-03-11 11:51:19,987 [main:66] - Compilation checking started
2021-03-11 11:51:21,817 [main:52] - Trying to change 29 nodes
2021-03-11 11:51:21,818 [main:56] - replacing (1, Int)
2021-03-11 11:51:21,819 [main:38] - replacing 1 Int
2021-03-11 11:51:21,819 [main:42] - Getting value of type Int
2021-03-11 11:51:21,935 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:51:21,937 [main:46] - GENERATED VALUE OF TYPE Int = 2042895572
2021-03-11 11:51:21,937 [main:49] - GENERATED IS CALL =false
2021-03-11 11:51:22,499 [main:55] - randomType = Set<Int>
2021-03-11 11:51:22,499 [main:63] - replacement of 1 of type Int is 2042895572
2021-03-11 11:51:22,641 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 11:51:22,642 [main:66] - Compilation checking started
2021-03-11 11:51:23,086 [main:53] - Result = true
Text:
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(2042895572)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}
2021-03-11 11:51:23,089 [main:56] - replacing ("s", String)
2021-03-11 11:51:23,090 [main:38] - replacing "s" String
2021-03-11 11:51:23,090 [main:42] - Getting value of type String
2021-03-11 11:51:23,228 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:51:23,231 [main:46] - GENERATED VALUE OF TYPE String = "uwtui"
2021-03-11 11:51:23,231 [main:49] - GENERATED IS CALL =false
2021-03-11 11:51:23,359 [main:55] - randomType = UByte
2021-03-11 11:51:23,478 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:51:23,624 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5a43d7e4]
2021-03-11 11:51:23,715 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:51:23,717 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bf0270]
2021-03-11 11:51:23,800 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:51:23,801 [main:66] - Generated call from random type = (96.toUByte()).div(55.toUByte()).toString(1895561166)
2021-03-11 11:51:23,801 [main:63] - replacement of "s" of type String is (96.toUByte()).div(55.toUByte()).toString(1895561166)
2021-03-11 11:51:23,890 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:51:23,891 [main:66] - Compilation checking started
2021-03-11 11:51:24,417 [main:53] - Result = true
Text:
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String((96.toUByte()).div(55.toUByte()).toString(1895561166)).toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(2042895572)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}
2021-03-11 11:51:24,419 [main:56] - replacing (15, Int)
2021-03-11 11:51:24,420 [main:38] - replacing 15 Int
2021-03-11 11:51:24,420 [main:42] - Getting value of type Int
2021-03-11 11:51:24,564 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:51:24,564 [main:46] - GENERATED VALUE OF TYPE Int = 921092182
2021-03-11 11:51:24,565 [main:49] - GENERATED IS CALL =false
2021-03-11 11:51:24,681 [main:55] - randomType = ULong
2021-03-11 11:51:24,778 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 11:51:24,862 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@2c10b85f]
2021-03-11 11:51:24,862 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@323946d9]
2021-03-11 11:51:24,967 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:51:24,969 [main:66] - Generated call from random type = (7734446355736257644.toULong()).toByte().div(-73)
2021-03-11 11:51:24,969 [main:63] - replacement of 15 of type Int is (7734446355736257644.toULong()).toByte().div(-73)
2021-03-11 11:51:25,073 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:51:25,074 [main:66] - Compilation checking started
2021-03-11 11:51:25,568 [main:53] - Result = true
Text:
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String((96.toUByte()).div(55.toUByte()).toString(1895561166)).toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf((7734446355736257644.toULong()).toByte().div(-73))
    val s = java.lang.String.valueOf(2042895572)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}
2021-03-11 11:51:25,570 [main:56] - replacing ("OK", String)
2021-03-11 11:51:25,570 [main:38] - replacing "OK" String
2021-03-11 11:51:25,570 [main:42] - Getting value of type String
2021-03-11 11:51:25,681 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:51:25,681 [main:46] - GENERATED VALUE OF TYPE String = "ddaoy"
2021-03-11 11:51:25,682 [main:49] - GENERATED IS CALL =false
2021-03-11 11:51:25,683 [main:55] - randomType = String
2021-03-11 11:51:25,779 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:51:25,807 [main:137] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5efbe895]
2021-03-11 11:51:25,913 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:51:25,915 [main:66] - Generated call from random type = ("xbzsa").take(552407486)
2021-03-11 11:51:25,915 [main:63] - replacement of "OK" of type String is ("xbzsa").take(552407486)
2021-03-11 11:51:26,016 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:51:26,017 [main:66] - Compilation checking started
2021-03-11 11:51:26,436 [main:53] - Result = true
Text:
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String((96.toUByte()).div(55.toUByte()).toString(1895561166)).toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf((7734446355736257644.toULong()).toByte().div(-73))
    val s = java.lang.String.valueOf(2042895572)
    val l = java.util.Collections.emptyList<Int>()
    return ("xbzsa").take(552407486)
}
2021-03-11 11:51:26,570 [main:90] - TRYING TO REPLACE CONSTANT 96
2021-03-11 11:51:26,673 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-11 11:51:26,674 [main:66] - Compilation checking started
2021-03-11 11:51:26,966 [main:49] - Result = false
Text:
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String((div(-73).toUByte()).div(55.toUByte()).toString(1895561166)).toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf((7734446355736257644.toULong()).toByte().div(-73))
    val s = java.lang.String.valueOf(2042895572)
    val l = java.util.Collections.emptyList<Int>()
    return ("xbzsa").take(552407486)
}
2021-03-11 11:51:26,966 [main:90] - TRYING TO REPLACE CONSTANT 1895561166
2021-03-11 11:51:27,064 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 11:51:27,065 [main:66] - Compilation checking started
2021-03-11 11:51:27,440 [main:53] - Result = true
Text:
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String((96.toUByte()).div(55.toUByte()).toString(2042895572)).toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf((7734446355736257644.toULong()).toByte().div(-73))
    val s = java.lang.String.valueOf(2042895572)
    val l = java.util.Collections.emptyList<Int>()
    return ("xbzsa").take(552407486)
}
2021-03-11 11:51:27,440 [main:90] - TRYING TO REPLACE CONSTANT 55
2021-03-11 11:51:27,541 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-11 11:51:27,542 [main:66] - Compilation checking started
2021-03-11 11:51:27,820 [main:49] - Result = false
Text:
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String((96.toUByte()).div(-73.toUByte()).toString(2042895572)).toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf((7734446355736257644.toULong()).toByte().div(-73))
    val s = java.lang.String.valueOf(2042895572)
    val l = java.util.Collections.emptyList<Int>()
    return ("xbzsa").take(552407486)
}
2021-03-11 11:51:27,820 [main:90] - TRYING TO REPLACE CONSTANT 7734446355736257644
2021-03-11 11:51:27,913 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 11:51:27,913 [main:66] - Compilation checking started
2021-03-11 11:51:28,243 [main:90] - TRYING TO REPLACE CONSTANT 73
2021-03-11 11:51:28,333 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 11:51:28,333 [main:66] - Compilation checking started
2021-03-11 11:51:28,712 [main:53] - Result = true
Text:
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String((96.toUByte()).div(55.toUByte()).toString(2042895572)).toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf((7734446355736257644.toULong()).toByte().div(55))
    val s = java.lang.String.valueOf(2042895572)
    val l = java.util.Collections.emptyList<Int>()
    return ("xbzsa").take(552407486)
}
2021-03-11 11:51:28,712 [main:90] - TRYING TO REPLACE CONSTANT 552407486
2021-03-11 11:51:28,810 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 11:51:28,811 [main:66] - Compilation checking started
2021-03-11 11:51:29,112 [main:53] - Result = true
Text:
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String((96.toUByte()).div(55.toUByte()).toString(2042895572)).toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf((7734446355736257644.toULong()).toByte().div(55))
    val s = java.lang.String.valueOf(2042895572)
    val l = java.util.Collections.emptyList<Int>()
    return ("xbzsa").take(2042895572)
}
2021-03-11 11:51:29,135 [main:46] - AFTER TRY 0 res = fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}
2021-03-11 11:51:29,448 [main:48] - Try №0
2021-03-11 11:51:42,443 [main:48] - Already checked
2021-03-11 11:51:46,680 [main:71] - Trying to insert fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
2021-03-11 11:51:46,947 [main:66] - Compilation checking started
2021-03-11 11:51:48,003 [main:99] - Trying to change 164 nodes
2021-03-11 11:51:48,003 [main:103] - replacing (true, Boolean)
2021-03-11 11:51:48,003 [main:38] - replacing true Boolean
2021-03-11 11:51:48,004 [main:42] - Getting value of type Boolean
2021-03-11 11:51:48,179 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:51:48,182 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:51:48,182 [main:49] - GENERATED IS CALL =false
2021-03-11 11:51:48,193 [main:55] - randomType = Kla1
2021-03-11 11:51:48,339 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 11:51:48,341 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}
2021-03-11 11:51:48,479 [main:194] - Type params = []
2021-03-11 11:51:48,641 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 11:51:48,798 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:51:48,802 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:51:49,139 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 11:51:49,307 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:51:49,311 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:51:49,876 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:51:49,876 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:51:49,901 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@7f5b0ae0]
2021-03-11 11:51:50,049 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:51:50,050 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e0b3dde]
2021-03-11 11:51:50,192 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:51:50,192 [main:66] - Generated call from random type = (Kla1()).equals("vdvzo").equals("umgvf")
2021-03-11 11:51:50,192 [main:110] - replacement of true of type Boolean is true
2021-03-11 11:51:50,320 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 11:51:50,323 [main:103] - replacing (c, Continuation<Unit>)
2021-03-11 11:51:50,323 [main:38] - replacing c Continuation<Unit>
2021-03-11 11:51:50,323 [main:42] - Getting value of type Continuation<Unit>
2021-03-11 11:51:50,468 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-11 11:51:50,632 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 11:51:50,635 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 11:51:51,184 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 11:51:51,332 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:51:51,335 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:51:51,675 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 11:51:51,836 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:51:51,840 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:51:52,368 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-11 11:51:52,543 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:51:52,549 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:51:53,017 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:51:53,017 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:51:53,018 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:51:53,018 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 11:51:53,018 [main:46] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-11 11:51:53,169 [main:55] - randomType = Kla3<Boolean>
2021-03-11 11:51:53,305 [main:302] - generating value of type = Kla3<Boolean> false depth = 0
2021-03-11 11:51:53,308 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 11:51:53,902 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 11:51:53,904 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:51:53,922 [main:107] - Cant find and generate replacement for c type Continuation<Unit>
2021-03-11 11:51:53,922 [main:103] - replacing (isSuccess, Boolean)
2021-03-11 11:51:53,922 [main:38] - replacing isSuccess Boolean
2021-03-11 11:51:53,922 [main:42] - Getting value of type Boolean
2021-03-11 11:51:54,054 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:51:54,056 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:51:54,057 [main:49] - GENERATED IS CALL =false
2021-03-11 11:51:54,206 [main:55] - randomType = Short
2021-03-11 11:51:54,334 [main:302] - generating value of type = Short true depth = 0
2021-03-11 11:51:54,387 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@7eba01f5]
2021-03-11 11:51:54,388 [main:137] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41de35d8]
2021-03-11 11:51:54,388 [main:66] - Generated call from random type = (-12478).toChar().isWhitespace()
2021-03-11 11:51:54,388 [main:110] - replacement of isSuccess of type Boolean is true
2021-03-11 11:51:54,554 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-11 11:51:54,556 [main:103] - replacing ("Wrong state-machine generated: it is finished early", String)
2021-03-11 11:51:54,557 [main:38] - replacing "Wrong state-machine generated: it is finished early" String
2021-03-11 11:51:54,557 [main:42] - Getting value of type String
2021-03-11 11:51:54,695 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:51:54,697 [main:46] - GENERATED VALUE OF TYPE String = "xkewj"
2021-03-11 11:51:54,698 [main:49] - GENERATED IS CALL =false
2021-03-11 11:51:54,836 [main:55] - randomType = ULong
2021-03-11 11:51:54,971 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 11:51:55,020 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@343e982d]
2021-03-11 11:51:55,020 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ea8ab5e]
2021-03-11 11:51:55,147 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:51:55,150 [main:66] - Generated call from random type = (6605136401679491436.toULong()).toShort().toString(592303126)
2021-03-11 11:51:55,150 [main:110] - replacement of "Wrong state-machine generated: it is finished early" of type String is (6605136401679491436.toULong()).toShort().toString(592303126)
2021-03-11 11:51:55,299 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:51:55,299 [main:66] - Compilation checking started
2021-03-11 11:51:55,984 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(prope3) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 {
            fu5 {
                fu4 {
                    prope2 = fu1()
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:51:55,986 [main:103] - replacing (prope4.getOrThrow(), Ty0)
2021-03-11 11:51:55,986 [main:38] - replacing prope4.getOrThrow() Ty0
2021-03-11 11:51:55,986 [main:42] - Getting value of type Ty0
2021-03-11 11:51:56,122 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 11:51:56,130 [main:46] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 11:51:57,235 [main:55] - randomType = Triple<Double?, LinkedHashMap<Byte, Int>, Char>?
2021-03-11 11:51:57,401 [main:302] - generating value of type = Triple<Double?, LinkedHashMap<Byte, Int>, Char> false depth = 0
2021-03-11 11:51:57,592 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Double?, second: LinkedHashMap<Byte, Int>, third: Char): Triple<Double?, LinkedHashMap<Byte, Int>, Char> = TODO()
2021-03-11 11:51:57,596 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Double?, second: LinkedHashMap<Byte, Int>, third: Char): Triple<Double?, LinkedHashMap<Byte, Int>, Char> = TODO()
2021-03-11 11:51:57,744 [main:302] - generating value of type = Double true depth = 3
2021-03-11 11:51:57,747 [main:302] - generating value of type = LinkedHashMap<Byte, Int> false depth = 3
2021-03-11 11:51:57,878 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Byte, Int>): LkedHashMap<Byte, Int> = TODO()
2021-03-11 11:51:57,881 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Byte, Int>): LkedHashMap<Byte, Int> = TODO()
2021-03-11 11:51:58,013 [main:302] - generating value of type = Pair<Byte, Int> false depth = 6
2021-03-11 11:51:58,200 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Byte, second: Int): Pair<Byte, Int> = TODO()
2021-03-11 11:51:58,203 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Byte, second: Int): Pair<Byte, Int> = TODO()
2021-03-11 11:51:58,357 [main:302] - generating value of type = Byte true depth = 9
2021-03-11 11:51:58,360 [main:302] - generating value of type = Int true depth = 9
2021-03-11 11:51:58,362 [main:95] - GENERATED = Pair<Byte, Int>(-68, 397614406)
2021-03-11 11:51:58,363 [main:95] - GENERATED = linkedMapOf<Byte, Int>(Pair<Byte, Int>(-68, 397614406))
2021-03-11 11:51:58,363 [main:302] - generating value of type = Char true depth = 3
2021-03-11 11:51:58,366 [main:95] - GENERATED = Triple<Double?, LinkedHashMap<Byte, Int>, Char>(0.8952322884565305, linkedMapOf<Byte, Int>(Pair<Byte, Int>(-68, 397614406)), '㐢')
2021-03-11 11:51:58,462 [main:107] - Cant find and generate replacement for prope4.getOrThrow() type Ty0
2021-03-11 11:51:58,462 [main:103] - replacing (it?.methodName?.startsWith(method) == true, Boolean)
2021-03-11 11:51:58,463 [main:38] - replacing it?.methodName?.startsWith(method) == true Boolean
2021-03-11 11:51:58,463 [main:42] - Getting value of type Boolean
2021-03-11 11:51:58,610 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:51:58,612 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:51:58,612 [main:49] - GENERATED IS CALL =false
2021-03-11 11:51:58,621 [main:55] - randomType = Kla4
2021-03-11 11:51:58,755 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 11:51:58,757 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}
2021-03-11 11:51:58,770 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla4[DeserializedSimpleFunctionDescriptor@1ba7caed]
2021-03-11 11:51:58,904 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:51:58,904 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@506d92ca]
2021-03-11 11:51:58,904 [main:66] - Generated call from random type = (Kla4()).equals("fhwes").not()
2021-03-11 11:51:58,904 [main:110] - replacement of it?.methodName?.startsWith(method) == true of type Boolean is (Kla4()).equals("fhwes").not()
2021-03-11 11:51:59,030 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:51:59,030 [main:66] - Compilation checking started
2021-03-11 11:51:59,697 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(prope3) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 {
            fu5 {
                fu4 {
                    prope2 = fu1()
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { (Kla4()).equals("fhwes").not() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:51:59,700 [main:103] - replacing (prope3, Kla0)
2021-03-11 11:51:59,700 [main:38] - replacing prope3 Kla0
2021-03-11 11:51:59,700 [main:42] - Getting value of type Kla0
2021-03-11 11:51:59,834 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 11:51:59,836 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}
2021-03-11 11:51:59,837 [main:46] - GENERATED VALUE OF TYPE Kla0 = Kla0()
2021-03-11 11:51:59,837 [main:49] - GENERATED IS CALL =true
2021-03-11 11:52:01,709 [main:55] - randomType = Triple<Function2<Map<Short?, Function2<Int, Kla1, Kla1>>, String?, Char>, MutableMap<Byte, Kla5>, HashSet<Boolean?>>?
2021-03-11 11:52:01,833 [main:302] - generating value of type = Triple<Function2<Map<Short?, Function2<Int, Kla1, Kla1>>, String?, Char>, MutableMap<Byte, Kla5>, HashSet<Boolean?>> false depth = 0
2021-03-11 11:52:01,966 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Function2<Map<Short?, Function2<Int, Kla1, Kla1>>, String?, Char>, second: MutableMap<Byte, Kla5>, third: HashSet<Boolean?>): Triple<Function2<Map<Short?, Function2<Int, Kla1, Kla1>>, String?, Char>, MutableMap<Byte, Kla5>, HashSet<Boolean?>> = TODO()
2021-03-11 11:52:01,969 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Function2<Map<Short?, Function2<Int, Kla1, Kla1>>, String?, Char>, second: MutableMap<Byte, Kla5>, third: HashSet<Boolean?>): Triple<Function2<Map<Short?, Function2<Int, Kla1, Kla1>>, String?, Char>, MutableMap<Byte, Kla5>, HashSet<Boolean?>> = TODO()
2021-03-11 11:52:02,169 [main:302] - generating value of type = Function2<Map<Short?, Function2<Int, Kla1, Kla1>>, String?, Char> false depth = 3
2021-03-11 11:52:02,173 [main:302] - generating value of type = Char true depth = 4
2021-03-11 11:52:02,176 [main:302] - generating value of type = MutableMap<Byte, Kla5> false depth = 3
2021-03-11 11:52:02,317 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): MutableMap<Byte, Kla5> = TODO()
2021-03-11 11:52:02,320 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): MutableMap<Byte, Kla5> = TODO()
2021-03-11 11:52:02,445 [main:95] - GENERATED = hashMapOf<Byte, Kla5>()
2021-03-11 11:52:02,445 [main:302] - generating value of type = HashSet<Boolean?> false depth = 3
2021-03-11 11:52:02,582 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Boolean?): HashSet<Boolean?> = TODO()
2021-03-11 11:52:02,585 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Boolean?): HashSet<Boolean?> = TODO()
2021-03-11 11:52:02,717 [main:302] - generating value of type = Boolean true depth = 6
2021-03-11 11:52:02,719 [main:95] - GENERATED = hashSetOf<Boolean?>(false)
2021-03-11 11:52:02,720 [main:95] - GENERATED = Triple<Function2<Map<Short?, Function2<Int, Kla1, Kla1>>, String?, Char>, MutableMap<Byte, Kla5>, HashSet<Boolean?>>({a: Map<Short?, Function2<Int, Kla1, Kla1>>, b: String? -> ''}, hashMapOf<Byte, Kla5>(), hashSetOf<Boolean?>(false))
2021-03-11 11:52:02,788 [main:110] - replacement of prope3 of type Kla0 is Kla0()
2021-03-11 11:52:02,919 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:52:02,919 [main:66] - Compilation checking started
2021-03-11 11:52:03,643 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 {
            fu5 {
                fu4 {
                    prope2 = fu1()
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { (Kla4()).equals("fhwes").not() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:52:03,646 [main:103] - replacing (c, Continuation<*>)
2021-03-11 11:52:03,646 [main:38] - replacing c Continuation<*>
2021-03-11 11:52:03,647 [main:42] - Getting value of type Continuation<*>
2021-03-11 11:52:03,806 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 11:52:03,928 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:52:03,931 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:52:04,337 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 11:52:04,463 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:52:04,466 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:52:04,729 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 11:52:04,854 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:52:04,857 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:52:05,292 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:52:05,292 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:52:05,292 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:52:05,292 [main:46] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 11:52:05,720 [main:55] - randomType = Map<Double, Double>
2021-03-11 11:52:05,720 [main:107] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 11:52:05,720 [main:103] - replacing (getOrThrow(), Any?)
2021-03-11 11:52:05,720 [main:38] - replacing getOrThrow() Any?
2021-03-11 11:52:05,720 [main:42] - Getting value of type Any?
2021-03-11 11:52:05,836 [main:46] - GENERATED VALUE OF TYPE Any? = null
2021-03-11 11:52:05,837 [main:49] - GENERATED IS CALL =false
2021-03-11 11:52:05,845 [main:55] - randomType = Kla2
2021-03-11 11:52:05,961 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 11:52:05,963 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}
2021-03-11 11:52:05,987 [main:66] - Generated call from random type = (Kla2()).prope4
2021-03-11 11:52:05,987 [main:110] - replacement of getOrThrow() of type Any? is null
2021-03-11 11:52:06,106 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(NULL)
2021-03-11 11:52:06,107 [main:66] - Compilation checking started
2021-03-11 11:52:06,496 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 {
            fu5 {
                fu4 {
                    prope2 = fu1()
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.null
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { (Kla4()).equals("fhwes").not() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:52:06,498 [main:103] - replacing (this, Kla2)
2021-03-11 11:52:06,498 [main:38] - replacing this Kla2
2021-03-11 11:52:06,499 [main:42] - Getting value of type Kla2
2021-03-11 11:52:06,613 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 11:52:06,615 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}
2021-03-11 11:52:06,615 [main:46] - GENERATED VALUE OF TYPE Kla2 = Kla2()
2021-03-11 11:52:06,615 [main:49] - GENERATED IS CALL =true
2021-03-11 11:52:06,620 [main:55] - randomType = String
2021-03-11 11:52:06,734 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:52:06,757 [main:110] - replacement of this of type Kla2 is Kla2()
2021-03-11 11:52:06,872 [main:33] - Trying to replace Element(THIS_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:52:06,872 [main:66] - Compilation checking started
2021-03-11 11:52:07,504 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 {
            fu5 {
                fu4 {
                    prope2 = fu1()
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { (Kla4()).equals("fhwes").not() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:52:07,507 [main:103] - replacing (Kla2().prope4, Any?)
2021-03-11 11:52:07,507 [main:38] - replacing Kla2().prope4 Any?
2021-03-11 11:52:07,507 [main:42] - Getting value of type Any?
2021-03-11 11:52:07,642 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:52:07,642 [main:46] - GENERATED VALUE OF TYPE Any? = "mzdjd"
2021-03-11 11:52:07,642 [main:49] - GENERATED IS CALL =false
2021-03-11 11:52:07,656 [main:55] - randomType = Kla4
2021-03-11 11:52:07,771 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 11:52:07,775 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { (Kla4()).equals("fhwes").not() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}
2021-03-11 11:52:07,780 [main:110] - replacement of Kla2().prope4 of type Any? is "mzdjd"
2021-03-11 11:52:07,894 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:52:07,895 [main:66] - Compilation checking started
2021-03-11 11:52:08,268 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 {
            fu5 {
                fu4 {
                    prope2 = fu1()
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        "mzdjd" = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { (Kla4()).equals("fhwes").not() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:52:08,272 [main:103] - replacing ("tail-call optimization hit: method " + method + " has no state-machine ", String)
2021-03-11 11:52:08,272 [main:38] - replacing "tail-call optimization hit: method " + method + " has no state-machine " String
2021-03-11 11:52:08,272 [main:42] - Getting value of type String
2021-03-11 11:52:08,407 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:52:08,409 [main:46] - GENERATED VALUE OF TYPE String = "loksw"
2021-03-11 11:52:08,410 [main:49] - GENERATED IS CALL =false
2021-03-11 11:52:08,677 [main:55] - randomType = Kla6?
2021-03-11 11:52:08,797 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 11:52:08,799 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:52:08,826 [main:110] - replacement of "tail-call optimization hit: method " + method + " has no state-machine " of type String is "loksw"
2021-03-11 11:52:08,942 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:52:08,942 [main:66] - Compilation checking started
2021-03-11 11:52:09,522 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 {
            fu5 {
                fu4 {
                    prope2 = fu1()
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { (Kla4()).equals("fhwes").not() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:52:09,526 [main:103] - replacing (prope4, Any?)
2021-03-11 11:52:09,526 [main:38] - replacing prope4 Any?
2021-03-11 11:52:09,526 [main:42] - Getting value of type Any?
2021-03-11 11:52:09,656 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:52:09,656 [main:46] - GENERATED VALUE OF TYPE Any? = "bmarx"
2021-03-11 11:52:09,657 [main:49] - GENERATED IS CALL =false
2021-03-11 11:52:10,050 [main:55] - randomType = Kla3<Kla2>
2021-03-11 11:52:10,170 [main:302] - generating value of type = Kla3<Kla2> false depth = 0
2021-03-11 11:52:10,172 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 11:52:12,419 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 11:52:12,421 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:52:12,436 [main:110] - replacement of prope4 of type Any? is "bmarx"
2021-03-11 11:52:12,551 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:52:12,551 [main:66] - Compilation checking started
2021-03-11 11:52:12,885 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 {
            fu5 {
                fu4 {
                    prope2 = fu1()
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2()."bmarx" = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { (Kla4()).equals("fhwes").not() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:52:12,889 [main:103] - replacing (getOrThrow(), Any?)
2021-03-11 11:52:12,889 [main:38] - replacing getOrThrow() Any?
2021-03-11 11:52:12,889 [main:42] - Getting value of type Any?
2021-03-11 11:52:13,003 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:52:13,004 [main:46] - GENERATED VALUE OF TYPE Any? = "woosy"
2021-03-11 11:52:13,004 [main:49] - GENERATED IS CALL =false
2021-03-11 11:52:13,152 [main:55] - randomType = Kla1?
2021-03-11 11:52:13,275 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 11:52:13,277 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}
2021-03-11 11:52:13,389 [main:194] - Type params = []
2021-03-11 11:52:13,500 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 11:52:13,622 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:52:13,625 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:52:13,879 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 11:52:14,002 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:52:14,005 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:52:14,431 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:52:14,431 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:52:14,450 [main:110] - replacement of getOrThrow() of type Any? is "woosy"
2021-03-11 11:52:14,560 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:52:14,561 [main:66] - Compilation checking started
2021-03-11 11:52:14,895 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 {
            fu5 {
                fu4 {
                    prope2 = fu1()
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = prope4."woosy"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { (Kla4()).equals("fhwes").not() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:52:14,897 [main:103] - replacing (!prope7, Boolean)
2021-03-11 11:52:14,897 [main:38] - replacing !prope7 Boolean
2021-03-11 11:52:14,897 [main:42] - Getting value of type Boolean
2021-03-11 11:52:15,009 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:52:15,011 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:52:15,012 [main:49] - GENERATED IS CALL =false
2021-03-11 11:52:15,148 [main:55] - randomType = UShort
2021-03-11 11:52:15,259 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:52:15,301 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@62d08430]
2021-03-11 11:52:15,415 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:52:15,415 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e0b3dde]
2021-03-11 11:52:15,530 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:52:15,530 [main:66] - Generated call from random type = (15821.toUShort()).equals("lpnnf").equals("ggvar")
2021-03-11 11:52:15,531 [main:110] - replacement of !prope7 of type Boolean is false
2021-03-11 11:52:15,643 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-11 11:52:15,643 [main:66] - Compilation checking started
2021-03-11 11:52:16,189 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 {
            fu5 {
                fu4 {
                    prope2 = fu1()
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { (Kla4()).equals("fhwes").not() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if (checkFinished && false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:52:16,192 [main:103] - replacing (Kla5(), Kla5)
2021-03-11 11:52:16,192 [main:38] - replacing Kla5() Kla5
2021-03-11 11:52:16,192 [main:42] - Getting value of type Kla5
2021-03-11 11:52:16,320 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 11:52:16,322 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if (checkFinished && false) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 11:52:16,323 [main:46] - GENERATED VALUE OF TYPE Kla5 = Kla5()
2021-03-11 11:52:16,323 [main:49] - GENERATED IS CALL =true
2021-03-11 11:52:16,597 [main:55] - randomType = ArrayList<Byte>
2021-03-11 11:52:16,716 [main:302] - generating value of type = ArrayList<Byte> false depth = 0
2021-03-11 11:52:16,835 [main:43] - GENERATING CALL OF fun <E> ArrayList(): ArrayList<Byte> = TODO()
2021-03-11 11:52:16,838 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(): ArrayList<Byte> = TODO()
2021-03-11 11:52:16,953 [main:95] - GENERATED = ArrayList<Byte>()
2021-03-11 11:52:17,134 [main:110] - replacement of Kla5() of type Kla5 is Kla5()
2021-03-11 11:52:17,255 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:52:17,257 [main:103] - replacing ({ c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }, Function1<Continuation<Unit>, Unit>)
2021-03-11 11:52:17,257 [main:38] - replacing { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    } Function1<Continuation<Unit>, Unit>
2021-03-11 11:52:17,257 [main:42] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-11 11:52:17,373 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-11 11:52:17,375 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:52:17,382 [main:46] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> println()}
2021-03-11 11:52:17,382 [main:49] - GENERATED IS CALL =false
2021-03-11 11:52:17,958 [main:55] - randomType = ArrayDeque<Function2<Boolean, ULong, Boolean?>>?
2021-03-11 11:52:18,075 [main:302] - generating value of type = ArrayDeque<Function2<Boolean, ULong, Boolean?>> false depth = 0
2021-03-11 11:52:18,195 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Function2<Boolean, ULong, Boolean?>>): ArrayDeque<Function2<Boolean, ULong, Boolean?>> = TODO()
2021-03-11 11:52:18,198 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Function2<Boolean, ULong, Boolean?>>): ArrayDeque<Function2<Boolean, ULong, Boolean?>> = TODO()
2021-03-11 11:52:18,475 [main:302] - generating value of type = Collection<Function2<Boolean, ULong, Boolean?>> false depth = 3
2021-03-11 11:52:18,615 [main:43] - GENERATING CALL OF fun <T> emptySet(): Collection<Function2<Boolean, ULong, Boolean?>> = TODO()
2021-03-11 11:52:18,618 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptySet(): Collection<Function2<Boolean, ULong, Boolean?>> = TODO()
2021-03-11 11:52:18,743 [main:95] - GENERATED = emptySet<Function2<Boolean, ULong, Boolean?>>()
2021-03-11 11:52:18,744 [main:95] - GENERATED = ArrayDeque<Function2<Boolean, ULong, Boolean?>>(emptySet<Function2<Boolean, ULong, Boolean?>>())
2021-03-11 11:52:18,975 [main:110] - replacement of { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> println()}
2021-03-11 11:52:19,091 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:52:19,091 [main:66] - Compilation checking started
2021-03-11 11:52:19,655 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 {
            fu5 {
                fu4 {
                    prope2 = fu1()
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { (Kla4()).equals("fhwes").not() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if (checkFinished && false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:52:19,657 [main:103] - replacing ({ c() }, [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit>)
2021-03-11 11:52:19,657 [main:38] - replacing { c() } [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit>
2021-03-11 11:52:19,657 [main:42] - Getting value of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit>
2021-03-11 11:52:19,777 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> false depth = 0
2021-03-11 11:52:19,779 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:52:19,904 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:52:19,907 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:52:20,143 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:52:20,143 [main:95] - GENERATED = print("jlltc")
2021-03-11 11:52:20,143 [main:46] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> = {a: Kla0 -> print("jlltc")}
2021-03-11 11:52:20,143 [main:49] - GENERATED IS CALL =false
2021-03-11 11:52:20,296 [main:55] - randomType = Map<String, Kla2>
2021-03-11 11:52:20,296 [main:110] - replacement of { c() } of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> is {a: Kla0 -> print("jlltc")}
2021-03-11 11:52:20,412 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:52:20,413 [main:66] - Compilation checking started
2021-03-11 11:52:20,763 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) {a: Kla0 -> print("jlltc")}
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 {
            fu5 {
                fu4 {
                    prope2 = fu1()
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { (Kla4()).equals("fhwes").not() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if (checkFinished && false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:52:20,765 [main:103] - replacing (it?.methodName?.startsWith(method) == true, Boolean)
2021-03-11 11:52:20,765 [main:38] - replacing it?.methodName?.startsWith(method) == true Boolean
2021-03-11 11:52:20,765 [main:42] - Getting value of type Boolean
2021-03-11 11:52:20,879 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:52:20,882 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:52:20,882 [main:49] - GENERATED IS CALL =false
2021-03-11 11:52:21,017 [main:55] - randomType = Kla3<Int>
2021-03-11 11:52:21,127 [main:302] - generating value of type = Kla3<Int> false depth = 0
2021-03-11 11:52:21,129 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 11:52:21,628 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 11:52:21,630 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:52:21,645 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla3[DeserializedSimpleFunctionDescriptor@53ca8ba9]
2021-03-11 11:52:21,758 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:52:21,758 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e0b3dde]
2021-03-11 11:52:21,875 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:52:21,875 [main:66] - Generated call from random type = (Kla6).equals("fwrsa").equals("nutlq")
2021-03-11 11:52:21,875 [main:110] - replacement of it?.methodName?.startsWith(method) == true of type Boolean is (Kla6).equals("fwrsa").equals("nutlq")
2021-03-11 11:52:21,988 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:52:21,988 [main:66] - Compilation checking started
2021-03-11 11:52:22,550 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 {
            fu5 {
                fu4 {
                    prope2 = fu1()
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { (Kla4()).equals("fhwes").not() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope5.find { (Kla6).equals("fwrsa").equals("nutlq") } ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if (checkFinished && false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:52:22,552 [main:103] - replacing (Kla0(), Kla0)
2021-03-11 11:52:22,552 [main:38] - replacing Kla0() Kla0
2021-03-11 11:52:22,553 [main:42] - Getting value of type Kla0
2021-03-11 11:52:22,672 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 11:52:22,674 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}
2021-03-11 11:52:22,674 [main:46] - GENERATED VALUE OF TYPE Kla0 = Kla0()
2021-03-11 11:52:22,674 [main:49] - GENERATED IS CALL =true
2021-03-11 11:52:22,930 [main:55] - randomType = Kla3<ULong?>
2021-03-11 11:52:23,039 [main:302] - generating value of type = Kla3<ULong?> false depth = 0
2021-03-11 11:52:23,041 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 11:52:23,456 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 11:52:23,458 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:52:23,489 [main:110] - replacement of Kla0() of type Kla0 is Kla0()
2021-03-11 11:52:23,599 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:52:23,601 [main:103] - replacing ("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n"), String)
2021-03-11 11:52:23,601 [main:38] - replacing "tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n") String
2021-03-11 11:52:23,601 [main:42] - Getting value of type String
2021-03-11 11:52:23,708 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:52:23,710 [main:46] - GENERATED VALUE OF TYPE String = "ysaee"
2021-03-11 11:52:23,710 [main:49] - GENERATED IS CALL =false
2021-03-11 11:52:24,377 [main:55] - randomType = Pair<HashSet<Kla0?>, Byte>?
2021-03-11 11:52:24,499 [main:302] - generating value of type = Pair<HashSet<Kla0?>, Byte> false depth = 0
2021-03-11 11:52:24,614 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: HashSet<Kla0?>, second: Byte): Pair<HashSet<Kla0?>, Byte> = TODO()
2021-03-11 11:52:24,617 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: HashSet<Kla0?>, second: Byte): Pair<HashSet<Kla0?>, Byte> = TODO()
2021-03-11 11:52:24,731 [main:302] - generating value of type = HashSet<Kla0?> false depth = 3
2021-03-11 11:52:24,850 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Kla0?): HashSet<Kla0?> = TODO()
2021-03-11 11:52:24,853 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Kla0?): HashSet<Kla0?> = TODO()
2021-03-11 11:52:24,966 [main:302] - generating value of type = Kla0 false depth = 6
2021-03-11 11:52:24,968 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}
2021-03-11 11:52:24,968 [main:95] - GENERATED = hashSetOf<Kla0?>(Kla0())
2021-03-11 11:52:24,968 [main:302] - generating value of type = Byte true depth = 3
2021-03-11 11:52:24,970 [main:95] - GENERATED = Pair<HashSet<Kla0?>, Byte>(hashSetOf<Kla0?>(Kla0()), -65)
2021-03-11 11:52:24,993 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24abb2e5]
2021-03-11 11:52:25,123 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:52:25,125 [main:66] - Generated call from random type = (Pair<HashSet<Kla0?>, Byte>(hashSetOf<Kla0?>(Kla0()), -65))?.second.toString(-1018663393)
2021-03-11 11:52:25,125 [main:110] - replacement of "tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n") of type String is (Pair<HashSet<Kla0?>, Byte>(hashSetOf<Kla0?>(Kla0()), -65))?.second.toString(-1018663393)
2021-03-11 11:52:25,249 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:52:25,250 [main:66] - Compilation checking started
2021-03-11 11:52:25,828 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 {
            fu5 {
                fu4 {
                    prope2 = fu1()
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { (Kla4()).equals("fhwes").not() }?.let { error((Pair<HashSet<Kla0?>, Byte>(hashSetOf<Kla0?>(Kla0()), -65))?.second.toString(-1018663393)) }
    }

    fun fu10(method: String) {
        prope5.find { (Kla6).equals("fwrsa").equals("nutlq") } ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if (checkFinished && false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:52:25,830 [main:103] - replacing (checkFinished && false, Boolean)
2021-03-11 11:52:25,830 [main:38] - replacing checkFinished && false Boolean
2021-03-11 11:52:25,830 [main:42] - Getting value of type Boolean
2021-03-11 11:52:25,966 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:52:25,969 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:52:25,969 [main:49] - GENERATED IS CALL =false
2021-03-11 11:52:26,108 [main:55] - randomType = UInt
2021-03-11 11:52:26,237 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 11:52:26,298 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@6e8075d1]
2021-03-11 11:52:26,426 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:52:26,429 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5f8c60f0]
2021-03-11 11:52:26,552 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:52:26,552 [main:66] - Generated call from random type = (1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")
2021-03-11 11:52:26,552 [main:110] - replacement of checkFinished && false of type Boolean is (1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")
2021-03-11 11:52:26,677 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:52:26,678 [main:66] - Compilation checking started
2021-03-11 11:52:27,289 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 {
            fu5 {
                fu4 {
                    prope2 = fu1()
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { (Kla4()).equals("fhwes").not() }?.let { error((Pair<HashSet<Kla0?>, Byte>(hashSetOf<Kla0?>(Kla0()), -65))?.second.toString(-1018663393)) }
    }

    fun fu10(method: String) {
        prope5.find { (Kla6).equals("fwrsa").equals("nutlq") } ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:52:27,291 [main:103] - replacing (prope7, Boolean)
2021-03-11 11:52:27,292 [main:38] - replacing prope7 Boolean
2021-03-11 11:52:27,292 [main:42] - Getting value of type Boolean
2021-03-11 11:52:27,423 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:52:27,425 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:52:27,426 [main:49] - GENERATED IS CALL =false
2021-03-11 11:52:27,439 [main:55] - randomType = Kla5
2021-03-11 11:52:27,581 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 11:52:27,584 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 11:52:27,600 [main:66] - Generated call from random type = (Kla5()).prope7
2021-03-11 11:52:27,600 [main:110] - replacement of prope7 of type Boolean is (Kla5()).prope7
2021-03-11 11:52:27,720 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:52:27,720 [main:66] - Compilation checking started
2021-03-11 11:52:28,367 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 {
            fu5 {
                fu4 {
                    prope2 = fu1()
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { (Kla4()).equals("fhwes").not() }?.let { error((Pair<HashSet<Kla0?>, Byte>(hashSetOf<Kla0?>(Kla0()), -65))?.second.toString(-1018663393)) }
    }

    fun fu10(method: String) {
        prope5.find { (Kla6).equals("fwrsa").equals("nutlq") } ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:52:28,370 [main:103] - replacing ({ error((Pair<HashSet<Kla0?>, Byte>(hashSetOf<Kla0?>(Kla0()), -65))?.second.toString(-1018663393)) }, Function0<Nothing>)
2021-03-11 11:52:28,370 [main:38] - replacing { error((Pair<HashSet<Kla0?>, Byte>(hashSetOf<Kla0?>(Kla0()), -65))?.second.toString(-1018663393)) } Function0<Nothing>
2021-03-11 11:52:28,370 [main:42] - Getting value of type Function0<Nothing>
2021-03-11 11:52:28,555 [main:302] - generating value of type = Function0<Nothing> false depth = 0
2021-03-11 11:52:28,560 [main:302] - generating value of type = Nothing false depth = 1
2021-03-11 11:52:28,753 [main:43] - GENERATING CALL OF fun error(message: kotlin.Any): Nothg = TODO()
2021-03-11 11:52:28,758 [main:61] - WITHOUT TYPE PARAMS = fun error(message: kotlin.Any): Nothg = TODO()
2021-03-11 11:52:29,033 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:52:29,034 [main:95] - GENERATED = error("wsihj")
2021-03-11 11:52:29,034 [main:46] - GENERATED VALUE OF TYPE Function0<Nothing> = { error("wsihj")}
2021-03-11 11:52:29,034 [main:49] - GENERATED IS CALL =false
2021-03-11 11:52:29,171 [main:55] - randomType = Kla5?
2021-03-11 11:52:29,282 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 11:52:29,285 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 11:52:29,294 [main:110] - replacement of { error((Pair<HashSet<Kla0?>, Byte>(hashSetOf<Kla0?>(Kla0()), -65))?.second.toString(-1018663393)) } of type Function0<Nothing> is { error("wsihj")}
2021-03-11 11:52:29,410 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:52:29,410 [main:66] - Compilation checking started
2021-03-11 11:52:29,981 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 {
            fu5 {
                fu4 {
                    prope2 = fu1()
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { (Kla4()).equals("fhwes").not() }?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { (Kla6).equals("fwrsa").equals("nutlq") } ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:52:29,982 [main:103] - replacing (prope1, Kla5)
2021-03-11 11:52:29,982 [main:38] - replacing prope1 Kla5
2021-03-11 11:52:29,983 [main:42] - Getting value of type Kla5
2021-03-11 11:52:30,099 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 11:52:30,102 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 11:52:30,102 [main:46] - GENERATED VALUE OF TYPE Kla5 = Kla5()
2021-03-11 11:52:30,102 [main:49] - GENERATED IS CALL =true
2021-03-11 11:52:30,542 [main:55] - randomType = MutableMap<MutableMap<ULong, Boolean?>, Boolean>
2021-03-11 11:52:30,542 [main:110] - replacement of prope1 of type Kla5 is Kla5()
2021-03-11 11:52:30,655 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:52:30,656 [main:66] - Compilation checking started
2021-03-11 11:52:31,225 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 {
            fu5 {
                fu4 {
                    prope2 = fu1()
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { (Kla4()).equals("fhwes").not() }?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { (Kla6).equals("fwrsa").equals("nutlq") } ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:52:31,228 [main:103] - replacing (prope4.getOrThrow(), Any?)
2021-03-11 11:52:31,228 [main:38] - replacing prope4.getOrThrow() Any?
2021-03-11 11:52:31,228 [main:42] - Getting value of type Any?
2021-03-11 11:52:31,376 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:52:31,376 [main:46] - GENERATED VALUE OF TYPE Any? = "dawxo"
2021-03-11 11:52:31,376 [main:49] - GENERATED IS CALL =false
2021-03-11 11:52:31,393 [main:55] - randomType = Boolean
2021-03-11 11:52:31,504 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:52:31,521 [main:110] - replacement of prope4.getOrThrow() of type Any? is "dawxo"
2021-03-11 11:52:31,632 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:52:31,632 [main:66] - Compilation checking started
2021-03-11 11:52:32,155 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 {
            fu5 {
                fu4 {
                    prope2 = fu1()
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { (Kla4()).equals("fhwes").not() }?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { (Kla6).equals("fwrsa").equals("nutlq") } ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:52:32,157 [main:103] - replacing ({ (Kla4()).equals("fhwes").not() }, Function0<Boolean>)
2021-03-11 11:52:32,158 [main:38] - replacing { (Kla4()).equals("fhwes").not() } Function0<Boolean>
2021-03-11 11:52:32,158 [main:42] - Getting value of type Function0<Boolean>
2021-03-11 11:52:32,279 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 11:52:32,281 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:52:32,283 [main:46] - GENERATED VALUE OF TYPE Function0<Boolean> = { true}
2021-03-11 11:52:32,284 [main:49] - GENERATED IS CALL =false
2021-03-11 11:52:33,473 [main:55] - randomType = Pair<Function2<String, Sequence<Function1<Char, UShort?>>, Kla1?>, Kla1>?
2021-03-11 11:52:33,606 [main:302] - generating value of type = Pair<Function2<String, Sequence<Function1<Char, UShort?>>, Kla1?>, Kla1> false depth = 0
2021-03-11 11:52:33,743 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Function2<String, Sequence<Function1<Char, UShort?>>, Kla1?>, second: Kla1): Pair<Function2<String, Sequence<Function1<Char, UShort?>>, Kla1?>, Kla1> = TODO()
2021-03-11 11:52:33,747 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Function2<String, Sequence<Function1<Char, UShort?>>, Kla1?>, second: Kla1): Pair<Function2<String, Sequence<Function1<Char, UShort?>>, Kla1?>, Kla1> = TODO()
2021-03-11 11:52:33,865 [main:302] - generating value of type = Function2<String, Sequence<Function1<Char, UShort?>>, Kla1?> false depth = 3
2021-03-11 11:52:33,867 [main:302] - generating value of type = Kla1 false depth = 4
2021-03-11 11:52:33,869 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}
2021-03-11 11:52:33,976 [main:194] - Type params = []
2021-03-11 11:52:34,084 [main:302] - generating value of type = CoroutineContext false depth = 6
2021-03-11 11:52:34,201 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:52:34,204 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:52:34,481 [main:302] - generating value of type = Key<*> false depth = 9
2021-03-11 11:52:34,611 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:52:34,614 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:52:34,979 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:52:34,979 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:52:34,980 [main:302] - generating value of type = Kla1 false depth = 3
2021-03-11 11:52:34,982 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}
2021-03-11 11:52:35,090 [main:194] - Type params = []
2021-03-11 11:52:35,197 [main:302] - generating value of type = CoroutineContext false depth = 5
2021-03-11 11:52:35,337 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:52:35,340 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:52:35,614 [main:302] - generating value of type = Key<*> false depth = 8
2021-03-11 11:52:35,731 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:52:35,734 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:52:36,140 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:52:36,141 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:52:36,141 [main:95] - GENERATED = Pair<Function2<String, Sequence<Function1<Char, UShort?>>, Kla1?>, Kla1>({a: String, b: Sequence<Function1<Char, UShort?>> -> Kla1()}, Kla1())
2021-03-11 11:52:36,176 [main:110] - replacement of { (Kla4()).equals("fhwes").not() } of type Function0<Boolean> is { true}
2021-03-11 11:52:36,305 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:52:36,305 [main:66] - Compilation checking started
2021-03-11 11:52:36,827 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 {
            fu5 {
                fu4 {
                    prope2 = fu1()
                }
            }
        }
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { (Kla6).equals("fwrsa").equals("nutlq") } ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:52:36,829 [main:103] - replacing ({
            fu5 {
                fu4 {
                    prope2 = fu1()
                }
            }
        }, [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit>)
2021-03-11 11:52:36,829 [main:38] - replacing {
            fu5 {
                fu4 {
                    prope2 = fu1()
                }
            }
        } [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit>
2021-03-11 11:52:36,829 [main:42] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit>
2021-03-11 11:52:36,939 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit> false depth = 0
2021-03-11 11:52:36,941 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:52:37,056 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:52:37,059 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:52:37,306 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:52:37,306 [main:95] - GENERATED = print("ugfkf")
2021-03-11 11:52:37,307 [main:46] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit> = { print("ugfkf")}
2021-03-11 11:52:37,307 [main:49] - GENERATED IS CALL =false
2021-03-11 11:52:37,426 [main:55] - randomType = Char
2021-03-11 11:52:37,533 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:52:37,554 [main:110] - replacement of {
            fu5 {
                fu4 {
                    prope2 = fu1()
                }
            }
        } of type [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit> is { print("ugfkf")}
2021-03-11 11:52:37,661 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:52:37,661 [main:66] - Compilation checking started
2021-03-11 11:52:38,198 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 { print("ugfkf")}
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { (Kla6).equals("fwrsa").equals("nutlq") } ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:52:38,201 [main:103] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions, String)
2021-03-11 11:52:38,201 [main:38] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions String
2021-03-11 11:52:38,201 [main:42] - Getting value of type String
2021-03-11 11:52:38,349 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:52:38,350 [main:46] - GENERATED VALUE OF TYPE String = "sdugk"
2021-03-11 11:52:38,351 [main:49] - GENERATED IS CALL =false
2021-03-11 11:52:38,477 [main:55] - randomType = Array<Kla2>
2021-03-11 11:52:38,583 [main:302] - generating value of type = Array<Kla2> false depth = 0
2021-03-11 11:52:38,700 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: Kla2): Array<Kla2> = TODO()
2021-03-11 11:52:38,702 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: Kla2): Array<Kla2> = TODO()
2021-03-11 11:52:38,818 [main:302] - generating value of type = Kla2 false depth = 3
2021-03-11 11:52:38,820 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}
2021-03-11 11:52:38,820 [main:95] - GENERATED = arrayOf<Kla2>(Kla2())
2021-03-11 11:52:38,836 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:52:38,942 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:52:38,944 [main:66] - Generated call from random type = (arrayOf<Kla2>(Kla2())).size.toString(1639356286)
2021-03-11 11:52:38,944 [main:110] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions of type String is (arrayOf<Kla2>(Kla2())).size.toString(1639356286)
2021-03-11 11:52:39,049 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:52:39,050 [main:66] - Compilation checking started
2021-03-11 11:52:39,593 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 { print("ugfkf")}
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { (Kla6).equals("fwrsa").equals("nutlq") } ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:52:39,596 [main:103] - replacing (0, Int)
2021-03-11 11:52:39,596 [main:38] - replacing 0 Int
2021-03-11 11:52:39,596 [main:42] - Getting value of type Int
2021-03-11 11:52:39,727 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:52:39,729 [main:46] - GENERATED VALUE OF TYPE Int = 848936537
2021-03-11 11:52:39,729 [main:49] - GENERATED IS CALL =false
2021-03-11 11:52:39,733 [main:55] - randomType = UInt
2021-03-11 11:52:39,842 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 11:52:39,876 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@793eb4c2]
2021-03-11 11:52:39,986 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:52:39,988 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1f2da372]
2021-03-11 11:52:40,096 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:52:40,098 [main:66] - Generated call from random type = (492018343.toUInt()).compareTo(99.toUByte()).or(-905172826)
2021-03-11 11:52:40,098 [main:110] - replacement of 0 of type Int is 848936537
2021-03-11 11:52:40,207 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 11:52:40,207 [main:66] - Compilation checking started
2021-03-11 11:52:40,723 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 { print("ugfkf")}
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { (Kla6).equals("fwrsa").equals("nutlq") } ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:52:40,725 [main:103] - replacing ({ (Kla6).equals("fwrsa").equals("nutlq") }, Function0<Boolean>)
2021-03-11 11:52:40,725 [main:38] - replacing { (Kla6).equals("fwrsa").equals("nutlq") } Function0<Boolean>
2021-03-11 11:52:40,725 [main:42] - Getting value of type Function0<Boolean>
2021-03-11 11:52:40,842 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 11:52:40,844 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:52:40,846 [main:46] - GENERATED VALUE OF TYPE Function0<Boolean> = { true}
2021-03-11 11:52:40,846 [main:49] - GENERATED IS CALL =false
2021-03-11 11:52:41,092 [main:55] - randomType = UShort?
2021-03-11 11:52:41,202 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:52:41,240 [main:110] - replacement of { (Kla6).equals("fwrsa").equals("nutlq") } of type Function0<Boolean> is { true}
2021-03-11 11:52:41,350 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:52:41,350 [main:66] - Compilation checking started
2021-03-11 11:52:41,856 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 { print("ugfkf")}
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:52:41,859 [main:103] - replacing (prope7, Boolean)
2021-03-11 11:52:41,859 [main:38] - replacing prope7 Boolean
2021-03-11 11:52:41,859 [main:42] - Getting value of type Boolean
2021-03-11 11:52:41,993 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:52:41,995 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:52:41,995 [main:49] - GENERATED IS CALL =false
2021-03-11 11:52:42,001 [main:55] - randomType = Kla4
2021-03-11 11:52:42,112 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 11:52:42,113 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}
2021-03-11 11:52:42,120 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla4[DeserializedSimpleFunctionDescriptor@7aaa657f]
2021-03-11 11:52:42,228 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:52:42,228 [main:66] - Generated call from random type = (Kla4()).equals("ubveu")
2021-03-11 11:52:42,228 [main:110] - replacement of prope7 of type Boolean is (Kla4()).equals("ubveu")
2021-03-11 11:52:42,334 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:52:42,335 [main:66] - Compilation checking started
2021-03-11 11:52:42,650 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 { print("ugfkf")}
    }
    return prope3.prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 848936537
        (Kla4()).equals("ubveu") = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:52:42,652 [main:103] - replacing (prope3, Kla0)
2021-03-11 11:52:42,652 [main:38] - replacing prope3 Kla0
2021-03-11 11:52:42,652 [main:42] - Getting value of type Kla0
2021-03-11 11:52:42,758 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 11:52:42,760 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}
2021-03-11 11:52:42,760 [main:46] - GENERATED VALUE OF TYPE Kla0 = Kla0()
2021-03-11 11:52:42,760 [main:49] - GENERATED IS CALL =true
2021-03-11 11:52:43,148 [main:55] - randomType = MutableMap<UByte?, Kla4?>
2021-03-11 11:52:43,148 [main:110] - replacement of prope3 of type Kla0 is Kla0()
2021-03-11 11:52:43,257 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:52:43,257 [main:66] - Compilation checking started
2021-03-11 11:52:43,789 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:52:43,791 [main:103] - replacing (prope2, String)
2021-03-11 11:52:43,791 [main:38] - replacing prope2 String
2021-03-11 11:52:43,791 [main:42] - Getting value of type String
2021-03-11 11:52:43,903 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:52:43,904 [main:46] - GENERATED VALUE OF TYPE String = "qpeem"
2021-03-11 11:52:43,905 [main:49] - GENERATED IS CALL =false
2021-03-11 11:52:43,911 [main:55] - randomType = Kla5
2021-03-11 11:52:44,018 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 11:52:44,020 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 11:52:44,030 [main:110] - replacement of prope2 of type String is "qpeem"
2021-03-11 11:52:44,146 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:52:44,146 [main:66] - Compilation checking started
2021-03-11 11:52:44,506 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3."qpeem"
    fu0(prope3) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:52:44,508 [main:103] - replacing (c, Continuation<*>)
2021-03-11 11:52:44,508 [main:38] - replacing c Continuation<*>
2021-03-11 11:52:44,508 [main:42] - Getting value of type Continuation<*>
2021-03-11 11:52:44,620 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 11:52:44,733 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:52:44,736 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:52:45,098 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 11:52:45,216 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:52:45,219 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:52:45,493 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 11:52:45,626 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:52:45,628 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:52:45,994 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-11 11:52:46,109 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:52:46,112 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:52:46,520 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 12
2021-03-11 11:52:46,658 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:52:46,661 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:52:47,032 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 15
2021-03-11 11:52:47,152 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:52:47,155 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:52:47,579 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:52:47,580 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:52:47,580 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:52:47,580 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:52:47,580 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:52:47,580 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:52:47,580 [main:46] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 11:52:47,712 [main:55] - randomType = Array<Kla4>
2021-03-11 11:52:47,818 [main:302] - generating value of type = Array<Kla4> false depth = 0
2021-03-11 11:52:47,928 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Kla4> = TODO()
2021-03-11 11:52:47,930 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Kla4> = TODO()
2021-03-11 11:52:48,043 [main:95] - GENERATED = emptyArray<Kla4>()
2021-03-11 11:52:48,056 [main:107] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 11:52:48,056 [main:103] - replacing (i, Int)
2021-03-11 11:52:48,056 [main:38] - replacing i Int
2021-03-11 11:52:48,057 [main:42] - Getting value of type Int
2021-03-11 11:52:48,163 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:52:48,164 [main:46] - GENERATED VALUE OF TYPE Int = 486818368
2021-03-11 11:52:48,164 [main:49] - GENERATED IS CALL =false
2021-03-11 11:52:48,171 [main:55] - randomType = Kla1
2021-03-11 11:52:48,295 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 11:52:48,297 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}
2021-03-11 11:52:48,415 [main:194] - Type params = []
2021-03-11 11:52:48,521 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 11:52:48,633 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:52:48,635 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:52:48,867 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 11:52:48,981 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:52:48,984 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:52:49,378 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 8
2021-03-11 11:52:49,491 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:52:49,494 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:52:49,849 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 11
2021-03-11 11:52:49,963 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:52:49,966 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:52:50,372 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:52:50,373 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:52:50,373 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:52:50,373 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:52:50,386 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@72da38ce]
2021-03-11 11:52:50,497 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:52:50,498 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@69292ca6]
2021-03-11 11:52:50,607 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:52:50,609 [main:66] - Generated call from random type = (Kla1()).equals("ywqci").compareTo(false)
2021-03-11 11:52:50,609 [main:110] - replacement of i of type Int is 486818368
2021-03-11 11:52:50,715 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 11:52:50,715 [main:66] - Compilation checking started
2021-03-11 11:52:51,194 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != 486818368) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:52:51,196 [main:103] - replacing (x, Function1<Ty0, Unit>)
2021-03-11 11:52:51,196 [main:38] - replacing x Function1<Ty0, Unit>
2021-03-11 11:52:51,197 [main:42] - Getting value of type Function1<Ty0, Unit>
2021-03-11 11:52:51,328 [main:302] - generating value of type = Function1<Ty0, Unit> false depth = 0
2021-03-11 11:52:51,330 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:52:51,335 [main:46] - GENERATED VALUE OF TYPE Function1<Ty0, Unit> = {a: Ty0 -> println()}
2021-03-11 11:52:51,336 [main:49] - GENERATED IS CALL =false
2021-03-11 11:52:51,342 [main:55] - randomType = Kla5
2021-03-11 11:52:51,449 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 11:52:51,450 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != 486818368) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 11:52:51,459 [main:110] - replacement of x of type Function1<Ty0, Unit> is {a: Ty0 -> println()}
2021-03-11 11:52:51,564 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:52:51,564 [main:66] - Compilation checking started
2021-03-11 11:52:52,077 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != 486818368) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:52:52,079 [main:103] - replacing (prope4, Any?)
2021-03-11 11:52:52,079 [main:38] - replacing prope4 Any?
2021-03-11 11:52:52,079 [main:42] - Getting value of type Any?
2021-03-11 11:52:52,187 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:52:52,187 [main:46] - GENERATED VALUE OF TYPE Any? = "usrnt"
2021-03-11 11:52:52,188 [main:49] - GENERATED IS CALL =false
2021-03-11 11:52:52,323 [main:55] - randomType = Byte
2021-03-11 11:52:52,441 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:52:52,499 [main:110] - replacement of prope4 of type Any? is "usrnt"
2021-03-11 11:52:52,609 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:52:52,609 [main:66] - Compilation checking started
2021-03-11 11:52:52,933 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2()."usrnt" = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != 486818368) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:52:52,935 [main:103] - replacing ("Continuation " + c + " is not subtype of CoroutineStackFrame", String)
2021-03-11 11:52:52,935 [main:38] - replacing "Continuation " + c + " is not subtype of CoroutineStackFrame" String
2021-03-11 11:52:52,935 [main:42] - Getting value of type String
2021-03-11 11:52:53,042 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:52:53,044 [main:46] - GENERATED VALUE OF TYPE String = "gspwc"
2021-03-11 11:52:53,044 [main:49] - GENERATED IS CALL =false
2021-03-11 11:52:53,284 [main:55] - randomType = Float?
2021-03-11 11:52:53,392 [main:302] - generating value of type = Float true depth = 0
2021-03-11 11:52:53,435 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e0fbc9]
2021-03-11 11:52:53,435 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:52:53,541 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:52:53,543 [main:66] - Generated call from random type = (0.64188164f)?.toInt().toString(-1576980400)
2021-03-11 11:52:53,543 [main:110] - replacement of "Continuation " + c + " is not subtype of CoroutineStackFrame" of type String is "gspwc"
2021-03-11 11:52:53,649 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:52:53,649 [main:66] - Compilation checking started
2021-03-11 11:52:54,141 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != 486818368) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:52:54,143 [main:103] - replacing (prope3.prope2 != "OK", Boolean)
2021-03-11 11:52:54,144 [main:38] - replacing prope3.prope2 != "OK" Boolean
2021-03-11 11:52:54,144 [main:42] - Getting value of type Boolean
2021-03-11 11:52:54,279 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:52:54,281 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:52:54,281 [main:49] - GENERATED IS CALL =false
2021-03-11 11:52:54,287 [main:55] - randomType = Kla0
2021-03-11 11:52:54,395 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 11:52:54,397 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}
2021-03-11 11:52:54,403 [main:137] - GENERATING call of type public final suspend inline fun fu4(c: Kla0.() -> kotlin.Unit): kotlin.Unit defined in Kla0[SimpleFunctionDescriptorImpl@5e45ba60]
2021-03-11 11:52:54,509 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit> false depth = 0
2021-03-11 11:52:54,511 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:52:54,622 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:52:54,624 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:52:54,977 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:52:54,978 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:52:54,980 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:52:55,092 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:52:55,094 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:52:55,533 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 11:52:55,535 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-11 11:52:55,536 [main:302] - generating value of type = Any false depth = 9
2021-03-11 11:52:55,537 [main:95] - GENERATED = check(false, { "wwkcl"})
2021-03-11 11:52:55,537 [main:95] - GENERATED = repeat(-1404918806, {a: Int -> check(false, { "wwkcl"})})
2021-03-11 11:52:55,537 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@494e94d1]
2021-03-11 11:52:55,646 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:52:55,646 [main:66] - Generated call from random type = (Kla0()).fu4({ repeat(-1404918806, {a: Int -> check(false, { "wwkcl"})})}).equals("edilw")
2021-03-11 11:52:55,646 [main:110] - replacement of prope3.prope2 != "OK" of type Boolean is (Kla0()).fu4({ repeat(-1404918806, {a: Int -> check(false, { "wwkcl"})})}).equals("edilw")
2021-03-11 11:52:55,758 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:52:55,758 [main:66] - Compilation checking started
2021-03-11 11:52:56,093 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if ((Kla0()).fu4({ repeat(-1404918806, {a: Int -> check(false, { "wwkcl"})})}).equals("edilw")) return prope3.prope2
    fu0(prope3) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != 486818368) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:52:56,095 [main:103] - replacing (let(x), Unit?)
2021-03-11 11:52:56,095 [main:38] - replacing let(x) Unit?
2021-03-11 11:52:56,095 [main:42] - Getting value of type Unit?
2021-03-11 11:52:56,204 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 11:52:56,315 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:52:56,318 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:52:56,677 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:52:56,679 [main:302] - generating value of type = Function1<Int, Unit> false depth = 3
2021-03-11 11:52:56,680 [main:302] - generating value of type = Unit false depth = 4
2021-03-11 11:52:56,796 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:52:56,798 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:52:57,029 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 7
2021-03-11 11:52:57,031 [main:302] - generating value of type = Unit false depth = 8
2021-03-11 11:52:57,144 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:52:57,147 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:52:57,374 [main:302] - generating value of type = Any false depth = 11
2021-03-11 11:52:57,375 [main:95] - GENERATED = print("birlj")
2021-03-11 11:52:57,375 [main:95] - GENERATED = contract({ print("birlj")})
2021-03-11 11:52:57,375 [main:95] - GENERATED = repeat(-549298828, {a: Int -> contract({ print("birlj")})})
2021-03-11 11:52:57,375 [main:46] - GENERATED VALUE OF TYPE Unit? = repeat(-549298828, {a: Int -> contract({ print("birlj")})})
2021-03-11 11:52:57,376 [main:49] - GENERATED IS CALL =true
2021-03-11 11:52:57,382 [main:55] - randomType = Kla0
2021-03-11 11:52:57,507 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 11:52:57,509 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}
2021-03-11 11:52:57,517 [main:137] - GENERATING call of type public final inline fun fu5(crossinline c: suspend Kla0.() -> kotlin.Unit): kotlin.Unit defined in Kla0[SimpleFunctionDescriptorImpl@2c969b5b]
2021-03-11 11:52:57,637 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> false depth = 0
2021-03-11 11:52:57,639 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:52:57,751 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:52:57,753 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:52:57,979 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:52:57,981 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:52:58,090 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:52:58,092 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:52:58,318 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 11:52:58,319 [main:95] - GENERATED = check(true)
2021-03-11 11:52:58,320 [main:95] - GENERATED = contract({ check(true)})
2021-03-11 11:52:58,320 [main:66] - Generated call from random type = (Kla0()).fu5({a: Kla0 -> contract({ check(true)})})
2021-03-11 11:52:58,320 [main:110] - replacement of let(x) of type Unit? is repeat(-549298828, {a: Int -> contract({ print("birlj")})})
2021-03-11 11:52:58,424 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:52:58,424 [main:66] - Compilation checking started
2021-03-11 11:52:58,749 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.repeat(-549298828, {a: Int -> contract({ print("birlj")})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != 486818368) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:52:58,752 [main:103] - replacing (prope4, Any?)
2021-03-11 11:52:58,752 [main:38] - replacing prope4 Any?
2021-03-11 11:52:58,752 [main:42] - Getting value of type Any?
2021-03-11 11:52:58,866 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:52:58,866 [main:46] - GENERATED VALUE OF TYPE Any? = "taqmm"
2021-03-11 11:52:58,866 [main:49] - GENERATED IS CALL =false
2021-03-11 11:52:58,987 [main:55] - randomType = Double
2021-03-11 11:52:59,092 [main:302] - generating value of type = Double true depth = 0
2021-03-11 11:52:59,129 [main:110] - replacement of prope4 of type Any? is "taqmm"
2021-03-11 11:52:59,251 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:52:59,252 [main:66] - Compilation checking started
2021-03-11 11:52:59,574 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2()."taqmm" = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != 486818368) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:52:59,575 [main:103] - replacing (prope4, Result<Ty0>)
2021-03-11 11:52:59,576 [main:38] - replacing prope4 Result<Ty0>
2021-03-11 11:52:59,576 [main:42] - Getting value of type Result<Ty0>
2021-03-11 11:52:59,681 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 11:52:59,811 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:52:59,814 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:53:00,084 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:53:00,085 [main:46] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 11:53:00,092 [main:55] - randomType = Kla2
2021-03-11 11:53:00,201 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 11:53:00,203 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}
2021-03-11 11:53:00,222 [main:107] - Cant find and generate replacement for prope4 type Result<Ty0>
2021-03-11 11:53:00,222 [main:103] - replacing (getOrThrow(), Ty0)
2021-03-11 11:53:00,222 [main:38] - replacing getOrThrow() Ty0
2021-03-11 11:53:00,222 [main:42] - Getting value of type Ty0
2021-03-11 11:53:00,327 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 11:53:00,331 [main:46] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 11:53:00,454 [main:55] - randomType = UByte?
2021-03-11 11:53:00,558 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:53:00,590 [main:107] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-11 11:53:00,590 [main:103] - replacing (prope4.getOrThrow(), Ty0)
2021-03-11 11:53:00,590 [main:38] - replacing prope4.getOrThrow() Ty0
2021-03-11 11:53:00,590 [main:42] - Getting value of type Ty0
2021-03-11 11:53:00,697 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 11:53:00,701 [main:46] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 11:53:00,705 [main:55] - randomType = Long
2021-03-11 11:53:00,809 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:53:00,842 [main:107] - Cant find and generate replacement for prope4.getOrThrow() type Ty0
2021-03-11 11:53:00,842 [main:103] - replacing ("Wrong state-machine generated: it is not finished yet", String)
2021-03-11 11:53:00,842 [main:38] - replacing "Wrong state-machine generated: it is not finished yet" String
2021-03-11 11:53:00,842 [main:42] - Getting value of type String
2021-03-11 11:53:00,947 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:53:00,949 [main:46] - GENERATED VALUE OF TYPE String = "ymojm"
2021-03-11 11:53:00,949 [main:49] - GENERATED IS CALL =false
2021-03-11 11:53:00,952 [main:55] - randomType = Long
2021-03-11 11:53:01,056 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:53:01,088 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@51b635fc]
2021-03-11 11:53:01,194 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:53:01,195 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:53:01,320 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:53:01,322 [main:66] - Generated call from random type = (809580522780189041).compareTo(32).toString(1593848040)
2021-03-11 11:53:01,322 [main:110] - replacement of "Wrong state-machine generated: it is not finished yet" of type String is "ymojm"
2021-03-11 11:53:01,445 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 11:53:01,445 [main:66] - Compilation checking started
2021-03-11 11:53:01,969 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != 486818368) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:53:01,971 [main:103] - replacing (getOrThrow(), Ty0)
2021-03-11 11:53:01,971 [main:38] - replacing getOrThrow() Ty0
2021-03-11 11:53:01,971 [main:42] - Getting value of type Ty0
2021-03-11 11:53:02,086 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 11:53:02,091 [main:46] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 11:53:02,208 [main:55] - randomType = Char
2021-03-11 11:53:02,313 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:53:02,335 [main:107] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-11 11:53:02,335 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:53:02,335 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:53:02,335 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:53:02,441 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:53:02,446 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:53:02,956 [main:55] - randomType = Pair<Long, Double?>?
2021-03-11 11:53:03,060 [main:302] - generating value of type = Pair<Long, Double?> false depth = 0
2021-03-11 11:53:03,169 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Long, second: Double?): Pair<Long, Double?> = TODO()
2021-03-11 11:53:03,171 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Long, second: Double?): Pair<Long, Double?> = TODO()
2021-03-11 11:53:03,281 [main:302] - generating value of type = Long true depth = 3
2021-03-11 11:53:03,283 [main:302] - generating value of type = Double true depth = 3
2021-03-11 11:53:03,285 [main:95] - GENERATED = Pair<Long, Double?>(9091744910159780055, 0.7460784783892446)
2021-03-11 11:53:03,302 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 11:53:03,303 [main:103] - replacing (exceptionOrNull(), Throwable?)
2021-03-11 11:53:03,303 [main:38] - replacing exceptionOrNull() Throwable?
2021-03-11 11:53:03,303 [main:42] - Getting value of type Throwable?
2021-03-11 11:53:03,415 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 11:53:03,526 [main:43] - GENERATING CALL OF fun ConcurrentModificationException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 11:53:03,529 [main:61] - WITHOUT TYPE PARAMS = fun ConcurrentModificationException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 11:53:03,869 [main:302] - generating value of type = Throwable false depth = 3
2021-03-11 11:53:03,978 [main:43] - GENERATING CALL OF fun RuntimeException(message: kotlin.String?): Throwable = TODO()
2021-03-11 11:53:03,981 [main:61] - WITHOUT TYPE PARAMS = fun RuntimeException(message: kotlin.String?): Throwable = TODO()
2021-03-11 11:53:04,259 [main:302] - generating value of type = String true depth = 6
2021-03-11 11:53:04,261 [main:95] - GENERATED = RuntimeException("pmcjq")
2021-03-11 11:53:04,261 [main:95] - GENERATED = ConcurrentModificationException(null, RuntimeException("pmcjq"))
2021-03-11 11:53:04,261 [main:46] - GENERATED VALUE OF TYPE Throwable? = ConcurrentModificationException(null, RuntimeException("pmcjq"))
2021-03-11 11:53:04,261 [main:49] - GENERATED IS CALL =true
2021-03-11 11:53:04,381 [main:55] - randomType = UInt?
2021-03-11 11:53:04,487 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 11:53:04,526 [main:110] - replacement of exceptionOrNull() of type Throwable? is ConcurrentModificationException(null, RuntimeException("pmcjq"))
2021-03-11 11:53:04,631 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:53:04,632 [main:66] - Compilation checking started
2021-03-11 11:53:04,943 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.ConcurrentModificationException(null, RuntimeException("pmcjq"))?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != 486818368) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:53:04,944 [main:103] - replacing (", got ", String)
2021-03-11 11:53:04,944 [main:38] - replacing ", got " String
2021-03-11 11:53:04,945 [main:42] - Getting value of type String
2021-03-11 11:53:05,053 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:53:05,054 [main:46] - GENERATED VALUE OF TYPE String = "ahice"
2021-03-11 11:53:05,055 [main:49] - GENERATED IS CALL =false
2021-03-11 11:53:05,061 [main:55] - randomType = Kla1
2021-03-11 11:53:05,172 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 11:53:05,174 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}
2021-03-11 11:53:05,279 [main:194] - Type params = []
2021-03-11 11:53:05,384 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 11:53:05,510 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:53:05,512 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:53:05,746 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 11:53:05,857 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:53:05,860 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:53:06,209 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:53:06,209 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:53:06,222 [main:110] - replacement of ", got " of type String is "ahice"
2021-03-11 11:53:06,326 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 11:53:06,326 [main:66] - Compilation checking started
2021-03-11 11:53:06,840 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != 486818368) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + "ahice" + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:53:06,842 [main:103] - replacing (prope4, Result<Any?>)
2021-03-11 11:53:06,842 [main:38] - replacing prope4 Result<Any?>
2021-03-11 11:53:06,843 [main:42] - Getting value of type Result<Any?>
2021-03-11 11:53:06,977 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-11 11:53:07,105 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 11:53:07,108 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 11:53:07,341 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-11 11:53:07,342 [main:95] - GENERATED = runCatching<Any?>({ null})
2021-03-11 11:53:07,342 [main:46] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ null})
2021-03-11 11:53:07,343 [main:49] - GENERATED IS CALL =true
2021-03-11 11:53:07,466 [main:55] - randomType = Char
2021-03-11 11:53:07,569 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:53:07,589 [main:110] - replacement of prope4 of type Result<Any?> is runCatching<Any?>({ null})
2021-03-11 11:53:07,694 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:53:07,695 [main:66] - Compilation checking started
2021-03-11 11:53:08,192 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != 486818368) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + "ahice" + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:53:08,194 [main:103] - replacing (prope1.prope7, Boolean)
2021-03-11 11:53:08,194 [main:38] - replacing prope1.prope7 Boolean
2021-03-11 11:53:08,194 [main:42] - Getting value of type Boolean
2021-03-11 11:53:08,311 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:53:08,313 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:53:08,313 [main:49] - GENERATED IS CALL =false
2021-03-11 11:53:08,320 [main:55] - randomType = Kla5
2021-03-11 11:53:08,434 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 11:53:08,436 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != 486818368) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + "ahice" + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}
2021-03-11 11:53:08,446 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7606cd62]
2021-03-11 11:53:08,562 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:53:08,564 [main:66] - Generated call from random type = (Kla5()).prope7.xor(false)
2021-03-11 11:53:08,564 [main:110] - replacement of prope1.prope7 of type Boolean is (Kla5()).prope7.xor(false)
2021-03-11 11:53:08,685 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:53:08,685 [main:66] - Compilation checking started
2021-03-11 11:53:08,994 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 {
            prope2 = fu1()
        }
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != 486818368) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + "ahice" + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            (Kla5()).prope7.xor(false) = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:53:08,997 [main:103] - replacing ({
            prope2 = fu1()
        }, [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit>)
2021-03-11 11:53:08,997 [main:38] - replacing {
            prope2 = fu1()
        } [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit>
2021-03-11 11:53:08,997 [main:42] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit>
2021-03-11 11:53:09,125 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit> false depth = 0
2021-03-11 11:53:09,127 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:53:09,236 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:53:09,238 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:53:09,467 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:53:09,469 [main:95] - GENERATED = require(true)
2021-03-11 11:53:09,469 [main:46] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit> = { require(true)}
2021-03-11 11:53:09,469 [main:49] - GENERATED IS CALL =false
2021-03-11 11:53:09,588 [main:55] - randomType = Boolean?
2021-03-11 11:53:09,692 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:53:09,704 [main:110] - replacement of {
            prope2 = fu1()
        } of type [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit> is { require(true)}
2021-03-11 11:53:09,808 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:53:09,809 [main:66] - Compilation checking started
2021-03-11 11:53:10,319 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (prope3.prope2 != "OK") return prope3.prope2
    fu0(prope3) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != 486818368) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + "ahice" + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:53:10,320 [main:103] - replacing ("OK", String)
2021-03-11 11:53:10,320 [main:38] - replacing "OK" String
2021-03-11 11:53:10,320 [main:42] - Getting value of type String
2021-03-11 11:53:10,426 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:53:10,428 [main:46] - GENERATED VALUE OF TYPE String = "gvkjb"
2021-03-11 11:53:10,428 [main:49] - GENERATED IS CALL =false
2021-03-11 11:53:12,039 [main:55] - randomType = Function1<Function1<Pair<Kla0, Char>, Function1<ArrayList<Array<UShort>>, Kla3<Kla5>>>, Map<ULong, Double>>
2021-03-11 11:53:12,040 [main:110] - replacement of "OK" of type String is "gvkjb"
2021-03-11 11:53:12,149 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 11:53:12,150 [main:66] - Compilation checking started
2021-03-11 11:53:12,630 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (prope3.prope2 != "gvkjb") return prope3.prope2
    fu0(prope3) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != 486818368) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + "ahice" + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:53:12,632 [main:103] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + "ahice", String)
2021-03-11 11:53:12,632 [main:38] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + "ahice" String
2021-03-11 11:53:12,632 [main:42] - Getting value of type String
2021-03-11 11:53:12,737 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:53:12,739 [main:46] - GENERATED VALUE OF TYPE String = "ueqra"
2021-03-11 11:53:12,739 [main:49] - GENERATED IS CALL =false
2021-03-11 11:53:12,858 [main:55] - randomType = Kla6
2021-03-11 11:53:12,961 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 11:53:12,963 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:53:12,984 [main:110] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + "ahice" of type String is "ueqra"
2021-03-11 11:53:13,094 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:53:13,094 [main:66] - Compilation checking started
2021-03-11 11:53:13,581 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (prope3.prope2 != "gvkjb") return prope3.prope2
    fu0(prope3) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != 486818368) error("ueqra" + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:53:13,583 [main:103] - replacing (prope6, Int)
2021-03-11 11:53:13,583 [main:38] - replacing prope6 Int
2021-03-11 11:53:13,583 [main:42] - Getting value of type Int
2021-03-11 11:53:13,715 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:53:13,717 [main:46] - GENERATED VALUE OF TYPE Int = 892665227
2021-03-11 11:53:13,717 [main:49] - GENERATED IS CALL =false
2021-03-11 11:53:13,721 [main:55] - randomType = Int
2021-03-11 11:53:13,832 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:53:13,867 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@b790f3d]
2021-03-11 11:53:13,972 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:53:13,974 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4bd97e7e]
2021-03-11 11:53:13,974 [main:66] - Generated call from random type = (1464314131).compareTo(-1242295978).dec()
2021-03-11 11:53:13,974 [main:110] - replacement of prope6 of type Int is (1464314131).compareTo(-1242295978).dec()
2021-03-11 11:53:14,077 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:53:14,077 [main:66] - Compilation checking started
2021-03-11 11:53:14,540 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (prope3.prope2 != "gvkjb") return prope3.prope2
    fu0(prope3) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != 486818368) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:53:14,542 [main:103] - replacing ({}, Function0<Unit>)
2021-03-11 11:53:14,543 [main:38] - replacing {} Function0<Unit>
2021-03-11 11:53:14,543 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:53:14,673 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:53:14,675 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:53:14,680 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 11:53:14,680 [main:49] - GENERATED IS CALL =false
2021-03-11 11:53:14,798 [main:55] - randomType = UShort
2021-03-11 11:53:14,903 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:53:14,933 [main:110] - replacement of {} of type Function0<Unit> is { println()}
2021-03-11 11:53:15,038 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:53:15,039 [main:66] - Compilation checking started
2021-03-11 11:53:15,537 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (prope3.prope2 != "gvkjb") return prope3.prope2
    fu0(prope3) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != 486818368) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:53:15,539 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:53:15,539 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:53:15,539 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:53:15,646 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:53:15,651 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:53:15,788 [main:55] - randomType = Triple<Short, Kla2, Kla2>
2021-03-11 11:53:15,894 [main:302] - generating value of type = Triple<Short, Kla2, Kla2> false depth = 0
2021-03-11 11:53:16,003 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Short, second: Kla2, third: Kla2): Triple<Short, Kla2, Kla2> = TODO()
2021-03-11 11:53:16,006 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Short, second: Kla2, third: Kla2): Triple<Short, Kla2, Kla2> = TODO()
2021-03-11 11:53:16,115 [main:302] - generating value of type = Short true depth = 3
2021-03-11 11:53:16,117 [main:302] - generating value of type = Kla2 false depth = 3
2021-03-11 11:53:16,118 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}
2021-03-11 11:53:16,119 [main:302] - generating value of type = Kla2 false depth = 3
2021-03-11 11:53:16,120 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}
2021-03-11 11:53:16,120 [main:95] - GENERATED = Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())
2021-03-11 11:53:16,137 [main:66] - Generated call from random type = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context
2021-03-11 11:53:16,137 [main:110] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context
2021-03-11 11:53:16,252 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:53:16,252 [main:66] - Compilation checking started
2021-03-11 11:53:16,762 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (prope3.prope2 != "gvkjb") return prope3.prope2
    fu0(prope3) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != 486818368) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:53:16,763 [main:103] - replacing (1, Int)
2021-03-11 11:53:16,763 [main:38] - replacing 1 Int
2021-03-11 11:53:16,763 [main:42] - Getting value of type Int
2021-03-11 11:53:16,889 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:53:16,891 [main:46] - GENERATED VALUE OF TYPE Int = 867106068
2021-03-11 11:53:16,891 [main:49] - GENERATED IS CALL =false
2021-03-11 11:53:17,028 [main:55] - randomType = LinkedHashMap<Kla4, Kla0>
2021-03-11 11:53:17,138 [main:302] - generating value of type = LinkedHashMap<Kla4, Kla0> false depth = 0
2021-03-11 11:53:17,253 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int): LinkedHashMap<Kla4, Kla0> = TODO()
2021-03-11 11:53:17,255 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int): LinkedHashMap<Kla4, Kla0> = TODO()
2021-03-11 11:53:17,493 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:53:17,495 [main:95] - GENERATED = LinkedHashMap<Kla4, Kla0>(-625663861)
2021-03-11 11:53:17,612 [main:66] - Generated call from random type = (LinkedHashMap<Kla4, Kla0>(-625663861)).size.sign
2021-03-11 11:53:17,613 [main:110] - replacement of 1 of type Int is 867106068
2021-03-11 11:53:17,718 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 11:53:17,719 [main:66] - Compilation checking started
2021-03-11 11:53:18,208 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (prope3.prope2 != "gvkjb") return prope3.prope2
    fu0(prope3) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..numberOfSuspensions) {
            if (prope6 != 486818368) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:53:18,209 [main:103] - replacing (prope1, Kla5)
2021-03-11 11:53:18,210 [main:38] - replacing prope1 Kla5
2021-03-11 11:53:18,210 [main:42] - Getting value of type Kla5
2021-03-11 11:53:18,321 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 11:53:18,323 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..numberOfSuspensions) {
            if (prope6 != 486818368) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}
2021-03-11 11:53:18,323 [main:46] - GENERATED VALUE OF TYPE Kla5 = Kla5()
2021-03-11 11:53:18,323 [main:49] - GENERATED IS CALL =true
2021-03-11 11:53:18,446 [main:55] - randomType = Kla5?
2021-03-11 11:53:18,573 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 11:53:18,575 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..numberOfSuspensions) {
            if (prope6 != 486818368) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}
2021-03-11 11:53:18,582 [main:110] - replacement of prope1 of type Kla5 is Kla5()
2021-03-11 11:53:18,688 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:53:18,689 [main:66] - Compilation checking started
2021-03-11 11:53:19,158 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (prope3.prope2 != "gvkjb") return prope3.prope2
    fu0(prope3) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..numberOfSuspensions) {
            if (prope6 != 486818368) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:53:19,160 [main:103] - replacing (prope3, Kla0)
2021-03-11 11:53:19,160 [main:38] - replacing prope3 Kla0
2021-03-11 11:53:19,160 [main:42] - Getting value of type Kla0
2021-03-11 11:53:19,268 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 11:53:19,270 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}
2021-03-11 11:53:19,270 [main:46] - GENERATED VALUE OF TYPE Kla0 = Kla0()
2021-03-11 11:53:19,270 [main:49] - GENERATED IS CALL =true
2021-03-11 11:53:19,274 [main:55] - randomType = ULong
2021-03-11 11:53:19,381 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 11:53:19,421 [main:110] - replacement of prope3 of type Kla0 is Kla0()
2021-03-11 11:53:19,528 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:53:19,528 [main:66] - Compilation checking started
2021-03-11 11:53:19,994 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (prope3.prope2 != "gvkjb") return prope3.prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..numberOfSuspensions) {
            if (prope6 != 486818368) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:53:19,996 [main:103] - replacing ((arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got ", String)
2021-03-11 11:53:19,996 [main:38] - replacing (arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " String
2021-03-11 11:53:19,996 [main:42] - Getting value of type String
2021-03-11 11:53:20,110 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:53:20,112 [main:46] - GENERATED VALUE OF TYPE String = "rguae"
2021-03-11 11:53:20,112 [main:49] - GENERATED IS CALL =false
2021-03-11 11:53:20,623 [main:55] - randomType = HashMap<Char?, UInt>?
2021-03-11 11:53:20,730 [main:302] - generating value of type = HashMap<Char?, UInt> false depth = 0
2021-03-11 11:53:20,842 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<Char?, UInt> = TODO()
2021-03-11 11:53:20,845 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<Char?, UInt> = TODO()
2021-03-11 11:53:20,954 [main:95] - GENERATED = linkedMapOf<Char?, UInt>()
2021-03-11 11:53:21,050 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:53:21,155 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:53:21,157 [main:66] - Generated call from random type = (linkedMapOf<Char?, UInt>())?.size.toString(-368422440)
2021-03-11 11:53:21,157 [main:110] - replacement of (arrayOf<Kla2>(Kla2())).size.toString(1639356286) + ", got " of type String is "rguae"
2021-03-11 11:53:21,264 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:53:21,264 [main:66] - Compilation checking started
2021-03-11 11:53:21,744 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (prope3.prope2 != "gvkjb") return prope3.prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..numberOfSuspensions) {
            if (prope6 != 486818368) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("rguae" + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:53:21,746 [main:103] - replacing (prope3, Kla0)
2021-03-11 11:53:21,746 [main:38] - replacing prope3 Kla0
2021-03-11 11:53:21,746 [main:42] - Getting value of type Kla0
2021-03-11 11:53:21,859 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 11:53:21,861 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}
2021-03-11 11:53:21,861 [main:46] - GENERATED VALUE OF TYPE Kla0 = Kla0()
2021-03-11 11:53:21,861 [main:49] - GENERATED IS CALL =true
2021-03-11 11:53:21,867 [main:55] - randomType = Kla5
2021-03-11 11:53:21,989 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 11:53:21,990 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..numberOfSuspensions) {
            if (prope6 != 486818368) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("rguae" + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}
2021-03-11 11:53:21,999 [main:110] - replacement of prope3 of type Kla0 is Kla0()
2021-03-11 11:53:22,102 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:53:22,103 [main:66] - Compilation checking started
2021-03-11 11:53:22,562 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (prope3.prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..numberOfSuspensions) {
            if (prope6 != 486818368) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("rguae" + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:53:22,564 [main:103] - replacing (true, Boolean)
2021-03-11 11:53:22,564 [main:38] - replacing true Boolean
2021-03-11 11:53:22,564 [main:42] - Getting value of type Boolean
2021-03-11 11:53:22,668 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:53:22,669 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:53:22,670 [main:49] - GENERATED IS CALL =false
2021-03-11 11:53:22,796 [main:55] - randomType = MutableMap<String, UInt>
2021-03-11 11:53:22,796 [main:110] - replacement of true of type Boolean is true
2021-03-11 11:53:22,900 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 11:53:22,902 [main:103] - replacing (getOrThrow(), Ty0)
2021-03-11 11:53:22,902 [main:38] - replacing getOrThrow() Ty0
2021-03-11 11:53:22,902 [main:42] - Getting value of type Ty0
2021-03-11 11:53:23,006 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 11:53:23,011 [main:46] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 11:53:23,129 [main:55] - randomType = UInt?
2021-03-11 11:53:23,232 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 11:53:23,263 [main:107] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-11 11:53:23,263 [main:103] - replacing (exceptionOrNull(), Throwable?)
2021-03-11 11:53:23,263 [main:38] - replacing exceptionOrNull() Throwable?
2021-03-11 11:53:23,263 [main:42] - Getting value of type Throwable?
2021-03-11 11:53:23,367 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 11:53:23,372 [main:46] - GENERATED VALUE OF TYPE Throwable? = AssertionError()
2021-03-11 11:53:23,372 [main:49] - GENERATED IS CALL =true
2021-03-11 11:53:23,877 [main:55] - randomType = Triple<UByte?, Kla1, Set<Kla6>>
2021-03-11 11:53:23,981 [main:302] - generating value of type = Triple<UByte?, Kla1, Set<Kla6>> false depth = 0
2021-03-11 11:53:24,094 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: UByte?, second: Kla1, third: Set<Kla6>): Triple<UByte?, Kla1, Set<Kla6>> = TODO()
2021-03-11 11:53:24,096 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: UByte?, second: Kla1, third: Set<Kla6>): Triple<UByte?, Kla1, Set<Kla6>> = TODO()
2021-03-11 11:53:24,207 [main:302] - generating value of type = UByte true depth = 3
2021-03-11 11:53:24,209 [main:302] - generating value of type = Kla1 false depth = 3
2021-03-11 11:53:24,210 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}
2021-03-11 11:53:24,317 [main:194] - Type params = []
2021-03-11 11:53:24,421 [main:302] - generating value of type = CoroutineContext false depth = 5
2021-03-11 11:53:24,528 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:53:24,531 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:53:24,762 [main:302] - generating value of type = Key<*> false depth = 8
2021-03-11 11:53:24,874 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:53:24,877 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:53:25,295 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 11
2021-03-11 11:53:25,409 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:53:25,412 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:53:25,761 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 14
2021-03-11 11:53:25,872 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:53:25,874 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:53:26,222 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 17
2021-03-11 11:53:26,222 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:53:26,222 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:53:26,222 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:53:26,222 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:53:26,222 [main:302] - generating value of type = Set<Kla6> false depth = 3
2021-03-11 11:53:26,332 [main:43] - GENERATING CALL OF fun <T> setOf(element: Kla6): Set<Kla6> = TODO()
2021-03-11 11:53:26,334 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(element: Kla6): Set<Kla6> = TODO()
2021-03-11 11:53:26,448 [main:302] - generating value of type = Kla6 false depth = 6
2021-03-11 11:53:26,450 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:53:26,450 [main:95] - GENERATED = setOf<Kla6>(Kla6)
2021-03-11 11:53:26,451 [main:95] - GENERATED = Triple<UByte?, Kla1, Set<Kla6>>(35.toUByte(), Kla1(), setOf<Kla6>(Kla6))
2021-03-11 11:53:26,471 [main:110] - replacement of exceptionOrNull() of type Throwable? is AssertionError()
2021-03-11 11:53:26,594 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:53:26,595 [main:66] - Compilation checking started
2021-03-11 11:53:26,898 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (prope3.prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.AssertionError()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..numberOfSuspensions) {
            if (prope6 != 486818368) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("rguae" + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:53:26,900 [main:103] - replacing ({}, Function0<Unit>)
2021-03-11 11:53:26,900 [main:38] - replacing {} Function0<Unit>
2021-03-11 11:53:26,900 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:53:27,005 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:53:27,007 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:53:27,116 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:53:27,119 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:53:27,457 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:53:27,458 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:53:27,460 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:53:27,567 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:53:27,570 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:53:27,793 [main:302] - generating value of type = Any false depth = 8
2021-03-11 11:53:27,793 [main:95] - GENERATED = print("wofwl")
2021-03-11 11:53:27,793 [main:95] - GENERATED = repeat(-1818823411, {a: Int -> print("wofwl")})
2021-03-11 11:53:27,793 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(-1818823411, {a: Int -> print("wofwl")})}
2021-03-11 11:53:27,793 [main:49] - GENERATED IS CALL =false
2021-03-11 11:53:27,800 [main:55] - randomType = Kla1
2021-03-11 11:53:27,902 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 11:53:27,904 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}
2021-03-11 11:53:28,007 [main:194] - Type params = []
2021-03-11 11:53:28,111 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 11:53:28,237 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:53:28,239 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:53:28,471 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 11:53:28,582 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:53:28,585 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:53:28,955 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:53:28,955 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:53:28,969 [main:110] - replacement of {} of type Function0<Unit> is { repeat(-1818823411, {a: Int -> print("wofwl")})}
2021-03-11 11:53:29,072 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:53:29,073 [main:66] - Compilation checking started
2021-03-11 11:53:29,546 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (prope3.prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..numberOfSuspensions) {
            if (prope6 != 486818368) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("rguae" + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:53:29,548 [main:103] - replacing (prope4, Result<Ty0>)
2021-03-11 11:53:29,548 [main:38] - replacing prope4 Result<Ty0>
2021-03-11 11:53:29,548 [main:42] - Getting value of type Result<Ty0>
2021-03-11 11:53:29,655 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 11:53:29,766 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:53:29,768 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:53:30,003 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:53:30,003 [main:46] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 11:53:30,007 [main:55] - randomType = String
2021-03-11 11:53:30,132 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:53:30,152 [main:107] - Cant find and generate replacement for prope4 type Result<Ty0>
2021-03-11 11:53:30,152 [main:103] - replacing (prope6 != numberOfSuspensions, Boolean)
2021-03-11 11:53:30,152 [main:38] - replacing prope6 != numberOfSuspensions Boolean
2021-03-11 11:53:30,152 [main:42] - Getting value of type Boolean
2021-03-11 11:53:30,268 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:53:30,269 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:53:30,270 [main:49] - GENERATED IS CALL =false
2021-03-11 11:53:30,276 [main:55] - randomType = Kla4
2021-03-11 11:53:30,381 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 11:53:30,382 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}
2021-03-11 11:53:30,387 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla4[DeserializedSimpleFunctionDescriptor@2e0b03cb]
2021-03-11 11:53:30,492 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:53:30,492 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e0b3dde]
2021-03-11 11:53:30,596 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:53:30,597 [main:66] - Generated call from random type = (Kla4()).equals("ipfes").equals("xnjqo")
2021-03-11 11:53:30,597 [main:110] - replacement of prope6 != numberOfSuspensions of type Boolean is (Kla4()).equals("ipfes").equals("xnjqo")
2021-03-11 11:53:30,701 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:53:30,701 [main:66] - Compilation checking started
2021-03-11 11:53:31,176 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (prope3.prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..numberOfSuspensions) {
            if (prope6 != 486818368) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error("rguae" + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:53:31,177 [main:103] - replacing (prope6 != 486818368, Boolean)
2021-03-11 11:53:31,178 [main:38] - replacing prope6 != 486818368 Boolean
2021-03-11 11:53:31,178 [main:42] - Getting value of type Boolean
2021-03-11 11:53:31,292 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:53:31,294 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:53:31,294 [main:49] - GENERATED IS CALL =false
2021-03-11 11:53:31,653 [main:55] - randomType = MutableMap<UByte, Double?>
2021-03-11 11:53:31,653 [main:110] - replacement of prope6 != 486818368 of type Boolean is true
2021-03-11 11:53:31,768 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-11 11:53:31,768 [main:66] - Compilation checking started
2021-03-11 11:53:32,304 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (prope3.prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..numberOfSuspensions) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error("rguae" + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:53:32,305 [main:103] - replacing (this, Kla0)
2021-03-11 11:53:32,305 [main:38] - replacing this Kla0
2021-03-11 11:53:32,305 [main:42] - Getting value of type Kla0
2021-03-11 11:53:32,422 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 11:53:32,424 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(this) { c() }
    }
}
2021-03-11 11:53:32,424 [main:46] - GENERATED VALUE OF TYPE Kla0 = Kla0()
2021-03-11 11:53:32,424 [main:49] - GENERATED IS CALL =true
2021-03-11 11:53:32,659 [main:55] - randomType = Kla6?
2021-03-11 11:53:32,764 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 11:53:32,766 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:53:32,792 [main:110] - replacement of this of type Kla0 is Kla0()
2021-03-11 11:53:32,898 [main:33] - Trying to replace Element(THIS_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:53:32,899 [main:66] - Compilation checking started
2021-03-11 11:53:33,356 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (prope3.prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..numberOfSuspensions) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error("rguae" + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:53:33,358 [main:103] - replacing (exceptionOrNull(), Throwable?)
2021-03-11 11:53:33,358 [main:38] - replacing exceptionOrNull() Throwable?
2021-03-11 11:53:33,358 [main:42] - Getting value of type Throwable?
2021-03-11 11:53:33,480 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 11:53:33,589 [main:43] - GENERATING CALL OF fun RuntimeException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 11:53:33,591 [main:61] - WITHOUT TYPE PARAMS = fun RuntimeException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 11:53:33,931 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:53:33,933 [main:302] - generating value of type = Throwable false depth = 3
2021-03-11 11:53:34,056 [main:43] - GENERATING CALL OF fun ClassCastException(message: kotlin.String?): Throwable = TODO()
2021-03-11 11:53:34,059 [main:61] - WITHOUT TYPE PARAMS = fun ClassCastException(message: kotlin.String?): Throwable = TODO()
2021-03-11 11:53:34,283 [main:95] - GENERATED = ClassCastException(null)
2021-03-11 11:53:34,283 [main:95] - GENERATED = RuntimeException("affch", ClassCastException(null))
2021-03-11 11:53:34,283 [main:46] - GENERATED VALUE OF TYPE Throwable? = RuntimeException("affch", ClassCastException(null))
2021-03-11 11:53:34,283 [main:49] - GENERATED IS CALL =true
2021-03-11 11:53:34,898 [main:55] - randomType = MutableMap<Function1<Short, Kla3<Char>>, Int>
2021-03-11 11:53:34,898 [main:110] - replacement of exceptionOrNull() of type Throwable? is RuntimeException("affch", ClassCastException(null))
2021-03-11 11:53:35,007 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:53:35,007 [main:66] - Compilation checking started
2021-03-11 11:53:35,336 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        c()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (prope3.prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.RuntimeException("affch", ClassCastException(null))?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..numberOfSuspensions) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error("rguae" + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:53:35,338 [main:103] - replacing (prope4, Result<Ty0>)
2021-03-11 11:53:35,338 [main:38] - replacing prope4 Result<Ty0>
2021-03-11 11:53:35,338 [main:42] - Getting value of type Result<Ty0>
2021-03-11 11:53:35,443 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 11:53:35,552 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:53:35,554 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:53:35,780 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:53:35,780 [main:46] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 11:53:35,922 [main:55] - randomType = Char
2021-03-11 11:53:36,027 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:53:36,048 [main:107] - Cant find and generate replacement for prope4 type Result<Ty0>
2021-03-11 11:53:36,048 [main:103] - replacing (getOrThrow(), Ty0)
2021-03-11 11:53:36,048 [main:38] - replacing getOrThrow() Ty0
2021-03-11 11:53:36,048 [main:42] - Getting value of type Ty0
2021-03-11 11:53:36,151 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 11:53:36,156 [main:46] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 11:53:36,159 [main:55] - randomType = String
2021-03-11 11:53:36,265 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:53:36,287 [main:107] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-11 11:53:36,287 [main:103] - replacing (c, [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit>)
2021-03-11 11:53:36,287 [main:38] - replacing c [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit>
2021-03-11 11:53:36,287 [main:42] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit>
2021-03-11 11:53:36,392 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit> false depth = 0
2021-03-11 11:53:36,394 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:53:36,502 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:53:36,505 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:53:36,846 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:53:36,847 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:53:36,849 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:53:36,849 [main:95] - GENERATED = require(true, { "yzvau"})
2021-03-11 11:53:36,849 [main:46] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit> = { require(true, { "yzvau"})}
2021-03-11 11:53:36,849 [main:49] - GENERATED IS CALL =false
2021-03-11 11:53:36,856 [main:55] - randomType = Kla1
2021-03-11 11:53:36,968 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 11:53:36,970 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}
2021-03-11 11:53:37,076 [main:194] - Type params = []
2021-03-11 11:53:37,179 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 11:53:37,287 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:53:37,289 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:53:37,562 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 11:53:37,700 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:53:37,703 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:53:38,055 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 8
2021-03-11 11:53:38,166 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:53:38,168 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:53:38,516 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 11
2021-03-11 11:53:38,627 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:53:38,630 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:53:39,045 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 14
2021-03-11 11:53:39,175 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:53:39,177 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:53:39,531 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 17
2021-03-11 11:53:39,531 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:53:39,531 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:53:39,531 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:53:39,531 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:53:39,531 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:53:39,543 [main:110] - replacement of c of type [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit> is { require(true, { "yzvau"})}
2021-03-11 11:53:39,646 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:53:39,646 [main:66] - Compilation checking started
2021-03-11 11:53:40,109 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (prope3.prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..numberOfSuspensions) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error("rguae" + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:53:40,110 [main:103] - replacing (prope4.exceptionOrNull(), Throwable?)
2021-03-11 11:53:40,110 [main:38] - replacing prope4.exceptionOrNull() Throwable?
2021-03-11 11:53:40,110 [main:42] - Getting value of type Throwable?
2021-03-11 11:53:40,217 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 11:53:40,327 [main:43] - GENERATING CALL OF fun NullPointerException(message: kotlin.String?): Throwable = TODO()
2021-03-11 11:53:40,330 [main:61] - WITHOUT TYPE PARAMS = fun NullPointerException(message: kotlin.String?): Throwable = TODO()
2021-03-11 11:53:40,565 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:53:40,567 [main:95] - GENERATED = NullPointerException("cqrhl")
2021-03-11 11:53:40,567 [main:46] - GENERATED VALUE OF TYPE Throwable? = NullPointerException("cqrhl")
2021-03-11 11:53:40,567 [main:49] - GENERATED IS CALL =true
2021-03-11 11:53:40,570 [main:55] - randomType = ULong
2021-03-11 11:53:40,696 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 11:53:40,726 [main:110] - replacement of prope4.exceptionOrNull() of type Throwable? is NullPointerException("cqrhl")
2021-03-11 11:53:40,833 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:53:40,835 [main:103] - replacing (prope4, Any?)
2021-03-11 11:53:40,835 [main:38] - replacing prope4 Any?
2021-03-11 11:53:40,835 [main:42] - Getting value of type Any?
2021-03-11 11:53:40,939 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:53:40,939 [main:46] - GENERATED VALUE OF TYPE Any? = "qukip"
2021-03-11 11:53:40,939 [main:49] - GENERATED IS CALL =false
2021-03-11 11:53:41,524 [main:55] - randomType = Function1<ArrayDeque<UShort>, UShort?>
2021-03-11 11:53:41,524 [main:110] - replacement of prope4 of type Any? is "qukip"
2021-03-11 11:53:41,629 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:53:41,629 [main:66] - Compilation checking started
2021-03-11 11:53:41,933 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (prope3.prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2()."qukip" = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..numberOfSuspensions) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error("rguae" + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:53:41,935 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:53:41,935 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:53:41,935 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:53:42,047 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:53:42,052 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:53:42,173 [main:55] - randomType = ArrayDeque<ULong>
2021-03-11 11:53:42,279 [main:302] - generating value of type = ArrayDeque<ULong> false depth = 0
2021-03-11 11:53:42,398 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<ULong>): ArrayDeque<ULong> = TODO()
2021-03-11 11:53:42,400 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<ULong>): ArrayDeque<ULong> = TODO()
2021-03-11 11:53:42,630 [main:302] - generating value of type = Collection<ULong> false depth = 3
2021-03-11 11:53:42,741 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<ULong>): Collection<ULong> = TODO()
2021-03-11 11:53:42,743 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<ULong>): Collection<ULong> = TODO()
2021-03-11 11:53:42,972 [main:302] - generating value of type = Collection<ULong> false depth = 6
2021-03-11 11:53:43,082 [main:43] - GENERATING CALL OF fun <T> setOfNotNull(element: ULong): Collection<ULong> = TODO()
2021-03-11 11:53:43,085 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOfNotNull(element: ULong): Collection<ULong> = TODO()
2021-03-11 11:53:43,194 [main:302] - generating value of type = ULong true depth = 9
2021-03-11 11:53:43,196 [main:95] - GENERATED = setOfNotNull<ULong>(7313023546342100240.toULong())
2021-03-11 11:53:43,196 [main:95] - GENERATED = ArrayDeque<ULong>(setOfNotNull<ULong>(7313023546342100240.toULong()))
2021-03-11 11:53:43,196 [main:95] - GENERATED = ArrayDeque<ULong>(ArrayDeque<ULong>(setOfNotNull<ULong>(7313023546342100240.toULong())))
2021-03-11 11:53:43,320 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 11:53:43,320 [main:103] - replacing (prope4, Result<Ty0>)
2021-03-11 11:53:43,320 [main:38] - replacing prope4 Result<Ty0>
2021-03-11 11:53:43,320 [main:42] - Getting value of type Result<Ty0>
2021-03-11 11:53:43,425 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 11:53:43,544 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:53:43,547 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:53:43,772 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:53:43,772 [main:46] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 11:53:43,891 [main:55] - randomType = Short?
2021-03-11 11:53:44,007 [main:302] - generating value of type = Short true depth = 0
2021-03-11 11:53:44,044 [main:107] - Cant find and generate replacement for prope4 type Result<Ty0>
2021-03-11 11:53:44,044 [main:103] - replacing (prope4.true, Boolean)
2021-03-11 11:53:44,044 [main:38] - replacing prope4.true Boolean
2021-03-11 11:53:44,044 [main:42] - Getting value of type Boolean
2021-03-11 11:53:44,149 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:53:44,150 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:53:44,150 [main:49] - GENERATED IS CALL =false
2021-03-11 11:53:44,157 [main:55] - randomType = Kla5
2021-03-11 11:53:44,262 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 11:53:44,264 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..numberOfSuspensions) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error("rguae" + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}
2021-03-11 11:53:44,271 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7606cd62]
2021-03-11 11:53:44,375 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:53:44,377 [main:66] - Generated call from random type = (Kla5()).prope7.xor(true)
2021-03-11 11:53:44,377 [main:110] - replacement of prope4.true of type Boolean is (Kla5()).prope7.xor(true)
2021-03-11 11:53:44,482 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:53:44,483 [main:103] - replacing (Kla4(), Kla4)
2021-03-11 11:53:44,483 [main:38] - replacing Kla4() Kla4
2021-03-11 11:53:44,483 [main:42] - Getting value of type Kla4
2021-03-11 11:53:44,588 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 11:53:44,589 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}
2021-03-11 11:53:44,590 [main:46] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-11 11:53:44,590 [main:49] - GENERATED IS CALL =true
2021-03-11 11:53:44,829 [main:55] - randomType = Kla3<Boolean>
2021-03-11 11:53:44,933 [main:302] - generating value of type = Kla3<Boolean> false depth = 0
2021-03-11 11:53:44,935 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 11:53:45,405 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 11:53:45,407 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:53:45,420 [main:110] - replacement of Kla4() of type Kla4 is Kla4()
2021-03-11 11:53:45,525 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:53:45,526 [main:103] - replacing (getOrThrow(), Ty0)
2021-03-11 11:53:45,526 [main:38] - replacing getOrThrow() Ty0
2021-03-11 11:53:45,526 [main:42] - Getting value of type Ty0
2021-03-11 11:53:45,648 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 11:53:45,653 [main:46] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 11:53:45,660 [main:55] - randomType = Kla5
2021-03-11 11:53:45,801 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 11:53:45,804 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..numberOfSuspensions) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error("rguae" + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}
2021-03-11 11:53:45,818 [main:107] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-11 11:53:45,818 [main:103] - replacing (getOrThrow(), Ty0)
2021-03-11 11:53:45,818 [main:38] - replacing getOrThrow() Ty0
2021-03-11 11:53:45,818 [main:42] - Getting value of type Ty0
2021-03-11 11:53:45,926 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 11:53:45,930 [main:46] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 11:53:45,934 [main:55] - randomType = Int
2021-03-11 11:53:46,038 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:53:46,072 [main:107] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-11 11:53:46,072 [main:103] - replacing (prope4.getOrThrow(), Ty0)
2021-03-11 11:53:46,072 [main:38] - replacing prope4.getOrThrow() Ty0
2021-03-11 11:53:46,072 [main:42] - Getting value of type Ty0
2021-03-11 11:53:46,177 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 11:53:46,181 [main:46] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 11:53:46,297 [main:55] - randomType = Double
2021-03-11 11:53:46,402 [main:302] - generating value of type = Double true depth = 0
2021-03-11 11:53:46,433 [main:107] - Cant find and generate replacement for prope4.getOrThrow() type Ty0
2021-03-11 11:53:46,433 [main:103] - replacing (x, Function1<Throwable, Unit>)
2021-03-11 11:53:46,433 [main:38] - replacing x Function1<Throwable, Unit>
2021-03-11 11:53:46,433 [main:42] - Getting value of type Function1<Throwable, Unit>
2021-03-11 11:53:46,537 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 0
2021-03-11 11:53:46,538 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:53:46,817 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:53:46,820 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:53:47,056 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:53:47,056 [main:95] - GENERATED = println("ztyvt")
2021-03-11 11:53:47,056 [main:46] - GENERATED VALUE OF TYPE Function1<Throwable, Unit> = {a: Throwable -> println("ztyvt")}
2021-03-11 11:53:47,057 [main:49] - GENERATED IS CALL =false
2021-03-11 11:53:47,060 [main:55] - randomType = Long
2021-03-11 11:53:47,191 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:53:47,247 [main:110] - replacement of x of type Function1<Throwable, Unit> is {a: Throwable -> println("ztyvt")}
2021-03-11 11:53:47,367 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:53:47,367 [main:66] - Compilation checking started
2021-03-11 11:53:47,831 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (prope3.prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..numberOfSuspensions) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error("rguae" + prope6)
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:53:47,833 [main:103] - replacing ("rguae" + prope6, String)
2021-03-11 11:53:47,833 [main:38] - replacing "rguae" + prope6 String
2021-03-11 11:53:47,833 [main:42] - Getting value of type String
2021-03-11 11:53:47,950 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:53:47,952 [main:46] - GENERATED VALUE OF TYPE String = "awdvp"
2021-03-11 11:53:47,952 [main:49] - GENERATED IS CALL =false
2021-03-11 11:53:48,317 [main:55] - randomType = Array<Array<String>>
2021-03-11 11:53:48,422 [main:302] - generating value of type = Array<Array<String>> false depth = 0
2021-03-11 11:53:48,540 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<Array<Strg>> = TODO()
2021-03-11 11:53:48,542 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<Array<Strg>> = TODO()
2021-03-11 11:53:48,766 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:53:48,768 [main:95] - GENERATED = arrayOfNulls<Array<String>>(-399295028)
2021-03-11 11:53:48,787 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@630d4d7f]
2021-03-11 11:53:48,787 [main:66] - Generated call from random type = (arrayOfNulls<Array<String>>(-399295028)).contentDeepToString()
2021-03-11 11:53:48,787 [main:110] - replacement of "rguae" + prope6 of type String is (arrayOfNulls<Array<String>>(-399295028)).contentDeepToString()
2021-03-11 11:53:48,913 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:53:48,914 [main:66] - Compilation checking started
2021-03-11 11:53:49,427 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (prope3.prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..numberOfSuspensions) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:53:49,428 [main:103] - replacing (c, [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit>)
2021-03-11 11:53:49,428 [main:38] - replacing c [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit>
2021-03-11 11:53:49,428 [main:42] - Getting value of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit>
2021-03-11 11:53:49,542 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> false depth = 0
2021-03-11 11:53:49,544 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:53:49,663 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:53:49,665 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:53:49,902 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:53:49,904 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:53:49,909 [main:95] - GENERATED = contract({ println()})
2021-03-11 11:53:49,909 [main:46] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> = {a: Kla0 -> contract({ println()})}
2021-03-11 11:53:49,909 [main:49] - GENERATED IS CALL =false
2021-03-11 11:53:49,916 [main:55] - randomType = Kla1
2021-03-11 11:53:50,025 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 11:53:50,027 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}
2021-03-11 11:53:50,133 [main:194] - Type params = []
2021-03-11 11:53:50,242 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 11:53:50,355 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:53:50,357 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:53:50,600 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 11:53:50,742 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:53:50,745 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:53:51,105 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-11 11:53:51,220 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:53:51,222 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:53:51,582 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 11
2021-03-11 11:53:51,699 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:53:51,702 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:53:52,063 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 14
2021-03-11 11:53:52,177 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:53:52,180 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:53:52,628 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:53:52,628 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:53:52,628 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:53:52,628 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:53:52,628 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:53:52,642 [main:110] - replacement of c of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> is {a: Kla0 -> contract({ println()})}
2021-03-11 11:53:52,748 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:53:52,749 [main:66] - Compilation checking started
2021-03-11 11:53:53,084 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { {a: Kla0 -> contract({ println()})}() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (prope3.prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..numberOfSuspensions) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:53:53,086 [main:103] - replacing (numberOfSuspensions, Int)
2021-03-11 11:53:53,086 [main:38] - replacing numberOfSuspensions Int
2021-03-11 11:53:53,086 [main:42] - Getting value of type Int
2021-03-11 11:53:53,195 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:53:53,197 [main:46] - GENERATED VALUE OF TYPE Int = -1920708239
2021-03-11 11:53:53,197 [main:49] - GENERATED IS CALL =false
2021-03-11 11:53:53,433 [main:55] - randomType = Float?
2021-03-11 11:53:53,539 [main:302] - generating value of type = Float true depth = 0
2021-03-11 11:53:53,584 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Float defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@4dcaab6b]
2021-03-11 11:53:53,584 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7779d208]
2021-03-11 11:53:53,584 [main:66] - Generated call from random type = (0.3064453f)?.dec().toBits()
2021-03-11 11:53:53,584 [main:110] - replacement of numberOfSuspensions of type Int is (0.3064453f)?.dec().toBits()
2021-03-11 11:53:53,696 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:53:53,697 [main:66] - Compilation checking started
2021-03-11 11:53:54,233 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (prope3.prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:53:54,236 [main:103] - replacing (prope2, String)
2021-03-11 11:53:54,236 [main:38] - replacing prope2 String
2021-03-11 11:53:54,236 [main:42] - Getting value of type String
2021-03-11 11:53:54,373 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:53:54,375 [main:46] - GENERATED VALUE OF TYPE String = "xvutf"
2021-03-11 11:53:54,375 [main:49] - GENERATED IS CALL =false
2021-03-11 11:53:54,504 [main:55] - randomType = Kla1
2021-03-11 11:53:54,616 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 11:53:54,618 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}
2021-03-11 11:53:54,727 [main:194] - Type params = []
2021-03-11 11:53:54,835 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 11:53:54,947 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:53:54,949 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:53:55,186 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 11:53:55,299 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:53:55,302 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:53:55,663 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:53:55,664 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:53:55,678 [main:110] - replacement of prope2 of type String is "xvutf"
2021-03-11 11:53:55,803 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:53:55,804 [main:66] - Compilation checking started
2021-03-11 11:53:56,169 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "OK"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (prope3.prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0()."xvutf"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:53:56,171 [main:103] - replacing ("OK", String)
2021-03-11 11:53:56,171 [main:38] - replacing "OK" String
2021-03-11 11:53:56,171 [main:42] - Getting value of type String
2021-03-11 11:53:56,281 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:53:56,283 [main:46] - GENERATED VALUE OF TYPE String = "svova"
2021-03-11 11:53:56,283 [main:49] - GENERATED IS CALL =false
2021-03-11 11:53:56,524 [main:55] - randomType = HashSet<Float?>
2021-03-11 11:53:56,630 [main:302] - generating value of type = HashSet<Float?> false depth = 0
2021-03-11 11:53:56,741 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): HashSet<Float?> = TODO()
2021-03-11 11:53:56,744 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): HashSet<Float?> = TODO()
2021-03-11 11:53:56,854 [main:95] - GENERATED = hashSetOf<Float?>()
2021-03-11 11:53:56,977 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:53:57,083 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:53:57,085 [main:66] - Generated call from random type = (hashSetOf<Float?>()).size.toString(569362844)
2021-03-11 11:53:57,085 [main:110] - replacement of "OK" of type String is "svova"
2021-03-11 11:53:57,191 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 11:53:57,191 [main:66] - Compilation checking started
2021-03-11 11:53:57,706 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (prope3.prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:53:57,708 [main:103] - replacing (prope3, Kla0)
2021-03-11 11:53:57,708 [main:38] - replacing prope3 Kla0
2021-03-11 11:53:57,708 [main:42] - Getting value of type Kla0
2021-03-11 11:53:57,817 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 11:53:57,819 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}
2021-03-11 11:53:57,819 [main:46] - GENERATED VALUE OF TYPE Kla0 = Kla0()
2021-03-11 11:53:57,819 [main:49] - GENERATED IS CALL =true
2021-03-11 11:53:58,567 [main:55] - randomType = Collection<Function1<Double, Triple<UShort, Long?, Kla5>>>
2021-03-11 11:53:58,567 [main:110] - replacement of prope3 of type Kla0 is Kla0()
2021-03-11 11:53:58,672 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:53:58,673 [main:66] - Compilation checking started
2021-03-11 11:53:59,172 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:53:59,174 [main:103] - replacing (false, Boolean)
2021-03-11 11:53:59,174 [main:38] - replacing false Boolean
2021-03-11 11:53:59,174 [main:42] - Getting value of type Boolean
2021-03-11 11:53:59,291 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:53:59,293 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:53:59,294 [main:49] - GENERATED IS CALL =false
2021-03-11 11:53:59,413 [main:55] - randomType = UShort
2021-03-11 11:53:59,521 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:53:59,550 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@35325e05]
2021-03-11 11:53:59,657 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:53:59,659 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2b4a8d8f]
2021-03-11 11:53:59,766 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:53:59,766 [main:66] - Generated call from random type = (9926.toUShort()).div(15.toUByte()).equals("oizrf")
2021-03-11 11:53:59,766 [main:110] - replacement of false of type Boolean is true
2021-03-11 11:53:59,871 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 11:53:59,872 [main:66] - Compilation checking started
2021-03-11 11:54:00,338 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:54:00,340 [main:103] - replacing (it, Continuation<Unit>)
2021-03-11 11:54:00,340 [main:38] - replacing it Continuation<Unit>
2021-03-11 11:54:00,340 [main:42] - Getting value of type Continuation<Unit>
2021-03-11 11:54:00,446 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-11 11:54:00,557 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 11:54:00,560 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 11:54:00,916 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 11:54:01,045 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:54:01,047 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:54:01,282 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 11:54:01,395 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:54:01,398 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:54:01,753 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:54:01,753 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:54:01,753 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 11:54:01,753 [main:46] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-11 11:54:01,876 [main:55] - randomType = Double
2021-03-11 11:54:01,981 [main:302] - generating value of type = Double true depth = 0
2021-03-11 11:54:02,011 [main:107] - Cant find and generate replacement for it type Continuation<Unit>
2021-03-11 11:54:02,012 [main:103] - replacing (prope7, Boolean)
2021-03-11 11:54:02,012 [main:38] - replacing prope7 Boolean
2021-03-11 11:54:02,012 [main:42] - Getting value of type Boolean
2021-03-11 11:54:02,118 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:54:02,119 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:54:02,120 [main:49] - GENERATED IS CALL =false
2021-03-11 11:54:02,379 [main:55] - randomType = Array<ULong?>
2021-03-11 11:54:02,494 [main:302] - generating value of type = Array<ULong?> false depth = 0
2021-03-11 11:54:02,621 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->ULong?): Array<ULong?> = TODO()
2021-03-11 11:54:02,624 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->ULong?): Array<ULong?> = TODO()
2021-03-11 11:54:02,973 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:54:02,975 [main:302] - generating value of type = Function1<Int, ULong?> false depth = 3
2021-03-11 11:54:02,977 [main:302] - generating value of type = ULong true depth = 4
2021-03-11 11:54:02,979 [main:95] - GENERATED = Array<ULong?>(1789910451, {a: Int -> 809582459152800505.toULong()})
2021-03-11 11:54:02,993 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@436d5802]
2021-03-11 11:54:03,098 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:54:03,098 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e0b3dde]
2021-03-11 11:54:03,203 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:54:03,204 [main:66] - Generated call from random type = (Array<ULong?>(1789910451, {a: Int -> 809582459152800505.toULong()})).equals("jmxqg").equals("kadlc")
2021-03-11 11:54:03,204 [main:110] - replacement of prope7 of type Boolean is (Array<ULong?>(1789910451, {a: Int -> 809582459152800505.toULong()})).equals("jmxqg").equals("kadlc")
2021-03-11 11:54:03,309 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:54:03,310 [main:66] - Compilation checking started
2021-03-11 11:54:03,630 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = "FAIL 1"

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        (Array<ULong?>(1789910451, {a: Int -> 809582459152800505.toULong()})).equals("jmxqg").equals("kadlc") = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:54:03,632 [main:103] - replacing ("FAIL 1", String)
2021-03-11 11:54:03,632 [main:38] - replacing "FAIL 1" String
2021-03-11 11:54:03,632 [main:42] - Getting value of type String
2021-03-11 11:54:03,738 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:54:03,740 [main:46] - GENERATED VALUE OF TYPE String = "zsbik"
2021-03-11 11:54:03,740 [main:49] - GENERATED IS CALL =false
2021-03-11 11:54:03,744 [main:55] - randomType = Short
2021-03-11 11:54:03,850 [main:302] - generating value of type = Short true depth = 0
2021-03-11 11:54:03,884 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@7eba01f5]
2021-03-11 11:54:03,884 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3183fb09]
2021-03-11 11:54:03,884 [main:66] - Generated call from random type = (2588).toChar().titlecase()
2021-03-11 11:54:03,884 [main:110] - replacement of "FAIL 1" of type String is (2588).toChar().titlecase()
2021-03-11 11:54:04,011 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:54:04,011 [main:66] - Compilation checking started
2021-03-11 11:54:04,529 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (2588).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:54:04,531 [main:103] - replacing (prope2, String)
2021-03-11 11:54:04,531 [main:38] - replacing prope2 String
2021-03-11 11:54:04,531 [main:42] - Getting value of type String
2021-03-11 11:54:04,637 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:54:04,639 [main:46] - GENERATED VALUE OF TYPE String = "higjg"
2021-03-11 11:54:04,639 [main:49] - GENERATED IS CALL =false
2021-03-11 11:54:04,642 [main:55] - randomType = Int
2021-03-11 11:54:04,762 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:54:04,803 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:54:04,915 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:54:04,917 [main:66] - Generated call from random type = (-737984366).toString(1155898030)
2021-03-11 11:54:04,917 [main:110] - replacement of prope2 of type String is (-737984366).toString(1155898030)
2021-03-11 11:54:05,024 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:54:05,025 [main:66] - Compilation checking started
2021-03-11 11:54:05,362 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (2588).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().(-737984366).toString(1155898030)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:54:05,364 [main:103] - replacing (getOrThrow(), Any?)
2021-03-11 11:54:05,364 [main:38] - replacing getOrThrow() Any?
2021-03-11 11:54:05,364 [main:42] - Getting value of type Any?
2021-03-11 11:54:05,473 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:54:05,473 [main:46] - GENERATED VALUE OF TYPE Any? = "prtas"
2021-03-11 11:54:05,473 [main:49] - GENERATED IS CALL =false
2021-03-11 11:54:05,599 [main:55] - randomType = Long?
2021-03-11 11:54:05,706 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:54:05,754 [main:110] - replacement of getOrThrow() of type Any? is "prtas"
2021-03-11 11:54:05,860 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:54:05,861 [main:66] - Compilation checking started
2021-03-11 11:54:06,188 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (2588).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null})."prtas"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:54:06,190 [main:103] - replacing (prope4.exceptionOrNull(), Throwable?)
2021-03-11 11:54:06,190 [main:38] - replacing prope4.exceptionOrNull() Throwable?
2021-03-11 11:54:06,190 [main:42] - Getting value of type Throwable?
2021-03-11 11:54:06,298 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 11:54:06,410 [main:43] - GENERATING CALL OF fun UnsupportedOperationException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 11:54:06,413 [main:61] - WITHOUT TYPE PARAMS = fun UnsupportedOperationException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 11:54:06,642 [main:302] - generating value of type = Throwable false depth = 3
2021-03-11 11:54:06,753 [main:43] - GENERATING CALL OF fun IllegalArgumentException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 11:54:06,755 [main:61] - WITHOUT TYPE PARAMS = fun IllegalArgumentException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 11:54:06,987 [main:302] - generating value of type = Throwable false depth = 6
2021-03-11 11:54:07,098 [main:43] - GENERATING CALL OF fun Throwable(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 11:54:07,101 [main:61] - WITHOUT TYPE PARAMS = fun Throwable(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 11:54:07,369 [main:302] - generating value of type = Throwable false depth = 9
2021-03-11 11:54:07,491 [main:43] - GENERATING CALL OF fun UnsupportedOperationException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 11:54:07,494 [main:61] - WITHOUT TYPE PARAMS = fun UnsupportedOperationException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 11:54:07,740 [main:302] - generating value of type = Throwable false depth = 12
2021-03-11 11:54:07,745 [main:95] - GENERATED = UnsupportedOperationException(NullPointerException())
2021-03-11 11:54:07,745 [main:95] - GENERATED = Throwable(UnsupportedOperationException(NullPointerException()))
2021-03-11 11:54:07,746 [main:95] - GENERATED = IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException())))
2021-03-11 11:54:07,746 [main:95] - GENERATED = UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))
2021-03-11 11:54:07,746 [main:46] - GENERATED VALUE OF TYPE Throwable? = UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))
2021-03-11 11:54:07,746 [main:49] - GENERATED IS CALL =true
2021-03-11 11:54:07,753 [main:55] - randomType = Kla4
2021-03-11 11:54:07,863 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 11:54:07,865 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}
2021-03-11 11:54:07,872 [main:110] - replacement of prope4.exceptionOrNull() of type Throwable? is UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))
2021-03-11 11:54:07,983 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:54:07,984 [main:66] - Compilation checking started
2021-03-11 11:54:08,481 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (2588).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:54:08,482 [main:103] - replacing (prope8, Function0<Unit>)
2021-03-11 11:54:08,483 [main:38] - replacing prope8 Function0<Unit>
2021-03-11 11:54:08,483 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:54:08,591 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:54:08,593 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:54:08,706 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:54:08,709 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:54:08,943 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:54:08,943 [main:95] - GENERATED = println("abucj")
2021-03-11 11:54:08,943 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("abucj")}
2021-03-11 11:54:08,943 [main:49] - GENERATED IS CALL =false
2021-03-11 11:54:08,947 [main:55] - randomType = String
2021-03-11 11:54:09,068 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:54:09,088 [main:110] - replacement of prope8 of type Function0<Unit> is { println("abucj")}
2021-03-11 11:54:09,194 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:54:09,195 [main:66] - Compilation checking started
2021-03-11 11:54:09,536 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (2588).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(prope3, Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().{ println("abucj")} = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:54:09,538 [main:103] - replacing (prope3, Kla0)
2021-03-11 11:54:09,538 [main:38] - replacing prope3 Kla0
2021-03-11 11:54:09,538 [main:42] - Getting value of type Kla0
2021-03-11 11:54:09,649 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 11:54:09,651 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2 = (2588).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}
2021-03-11 11:54:09,651 [main:46] - GENERATED VALUE OF TYPE Kla0 = Kla0()
2021-03-11 11:54:09,651 [main:49] - GENERATED IS CALL =true
2021-03-11 11:54:09,780 [main:55] - randomType = Kla3<Int>
2021-03-11 11:54:09,888 [main:302] - generating value of type = Kla3<Int> false depth = 0
2021-03-11 11:54:09,890 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 11:54:10,503 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 11:54:10,505 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:54:10,522 [main:110] - replacement of prope3 of type Kla0 is Kla0()
2021-03-11 11:54:10,628 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:54:10,629 [main:66] - Compilation checking started
2021-03-11 11:54:11,148 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (2588).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:54:11,150 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:54:11,150 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:54:11,150 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:54:11,264 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:54:11,269 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:54:11,394 [main:55] - randomType = Short?
2021-03-11 11:54:11,504 [main:302] - generating value of type = Short true depth = 0
2021-03-11 11:54:11,539 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 11:54:11,539 [main:103] - replacing (prope7, Boolean)
2021-03-11 11:54:11,539 [main:38] - replacing prope7 Boolean
2021-03-11 11:54:11,539 [main:42] - Getting value of type Boolean
2021-03-11 11:54:11,646 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:54:11,648 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:54:11,648 [main:49] - GENERATED IS CALL =false
2021-03-11 11:54:11,893 [main:55] - randomType = ArrayDeque<UInt?>
2021-03-11 11:54:12,001 [main:302] - generating value of type = ArrayDeque<UInt?> false depth = 0
2021-03-11 11:54:12,115 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<UInt?> = TODO()
2021-03-11 11:54:12,118 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<UInt?> = TODO()
2021-03-11 11:54:12,231 [main:95] - GENERATED = ArrayDeque<UInt?>()
2021-03-11 11:54:12,355 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@30813d8d]
2021-03-11 11:54:12,463 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:54:12,464 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7606cd62]
2021-03-11 11:54:12,593 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:54:12,595 [main:66] - Generated call from random type = (ArrayDeque<UInt?>()).equals("dmben").xor(false)
2021-03-11 11:54:12,595 [main:110] - replacement of prope7 of type Boolean is false
2021-03-11 11:54:12,709 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-11 11:54:12,710 [main:66] - Compilation checking started
2021-03-11 11:54:13,046 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (2588).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().false = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:54:13,048 [main:103] - replacing ({
        fu8(it)
    }, Function1<Continuation<Unit>, Unit>)
2021-03-11 11:54:13,048 [main:38] - replacing {
        fu8(it)
    } Function1<Continuation<Unit>, Unit>
2021-03-11 11:54:13,048 [main:42] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-11 11:54:13,157 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-11 11:54:13,159 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:54:13,164 [main:46] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> println()}
2021-03-11 11:54:13,164 [main:49] - GENERATED IS CALL =false
2021-03-11 11:54:13,296 [main:55] - randomType = Kla3<Kla2>
2021-03-11 11:54:13,403 [main:302] - generating value of type = Kla3<Kla2> false depth = 0
2021-03-11 11:54:13,405 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 11:54:13,876 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 11:54:13,878 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:54:13,891 [main:110] - replacement of {
        fu8(it)
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> println()}
2021-03-11 11:54:14,001 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:54:14,001 [main:66] - Compilation checking started
2021-03-11 11:54:14,522 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (2588).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:54:14,524 [main:103] - replacing (c !is CoroutineStackFrame, Boolean)
2021-03-11 11:54:14,524 [main:38] - replacing c !is CoroutineStackFrame Boolean
2021-03-11 11:54:14,525 [main:42] - Getting value of type Boolean
2021-03-11 11:54:14,653 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:54:14,655 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:54:14,655 [main:49] - GENERATED IS CALL =false
2021-03-11 11:54:14,780 [main:55] - randomType = Float?
2021-03-11 11:54:14,888 [main:302] - generating value of type = Float true depth = 0
2021-03-11 11:54:14,923 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@54d8147d]
2021-03-11 11:54:14,923 [main:137] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@680e44bd]
2021-03-11 11:54:15,031 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:54:15,143 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:54:15,145 [main:66] - Generated call from random type = (0.9841658f)?.toChar().equals('䒂', true)
2021-03-11 11:54:15,145 [main:110] - replacement of c !is CoroutineStackFrame of type Boolean is (0.9841658f)?.toChar().equals('䒂', true)
2021-03-11 11:54:15,253 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:54:15,253 [main:66] - Compilation checking started
2021-03-11 11:54:15,609 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (2588).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if ((0.9841658f)?.toChar().equals('䒂', true)) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:54:15,610 [main:103] - replacing ({ c() }, [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit>)
2021-03-11 11:54:15,611 [main:38] - replacing { c() } [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit>
2021-03-11 11:54:15,611 [main:42] - Getting value of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit>
2021-03-11 11:54:15,719 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> false depth = 0
2021-03-11 11:54:15,721 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:54:15,839 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:54:15,842 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:54:16,209 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:54:16,211 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:54:16,213 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:54:16,213 [main:95] - GENERATED = require(true, { "hrkjc"})
2021-03-11 11:54:16,213 [main:46] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> = {a: Kla0 -> require(true, { "hrkjc"})}
2021-03-11 11:54:16,213 [main:49] - GENERATED IS CALL =false
2021-03-11 11:54:16,478 [main:55] - randomType = Array<ULong>
2021-03-11 11:54:16,587 [main:302] - generating value of type = Array<ULong> false depth = 0
2021-03-11 11:54:16,701 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<ULong> = TODO()
2021-03-11 11:54:16,704 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<ULong> = TODO()
2021-03-11 11:54:16,817 [main:95] - GENERATED = emptyArray<ULong>()
2021-03-11 11:54:16,829 [main:110] - replacement of { c() } of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> is {a: Kla0 -> require(true, { "hrkjc"})}
2021-03-11 11:54:16,938 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:54:16,939 [main:66] - Compilation checking started
2021-03-11 11:54:17,272 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (2588).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) {a: Kla0 -> require(true, { "hrkjc"})}
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:54:17,275 [main:103] - replacing (prope7, Boolean)
2021-03-11 11:54:17,275 [main:38] - replacing prope7 Boolean
2021-03-11 11:54:17,275 [main:42] - Getting value of type Boolean
2021-03-11 11:54:17,387 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:54:17,389 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:54:17,389 [main:49] - GENERATED IS CALL =false
2021-03-11 11:54:17,396 [main:55] - randomType = Kla5
2021-03-11 11:54:17,506 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 11:54:17,508 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}
2021-03-11 11:54:17,516 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@506d92ca]
2021-03-11 11:54:17,517 [main:66] - Generated call from random type = (Kla5()).prope7.not()
2021-03-11 11:54:17,517 [main:110] - replacement of prope7 of type Boolean is false
2021-03-11 11:54:17,629 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-11 11:54:17,630 [main:66] - Compilation checking started
2021-03-11 11:54:17,965 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (2588).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        false = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:54:17,967 [main:103] - replacing (prope2, String)
2021-03-11 11:54:17,967 [main:38] - replacing prope2 String
2021-03-11 11:54:17,968 [main:42] - Getting value of type String
2021-03-11 11:54:18,077 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:54:18,079 [main:46] - GENERATED VALUE OF TYPE String = "cnhml"
2021-03-11 11:54:18,079 [main:49] - GENERATED IS CALL =false
2021-03-11 11:54:18,357 [main:55] - randomType = Pair<Kla4, Short>
2021-03-11 11:54:18,466 [main:302] - generating value of type = Pair<Kla4, Short> false depth = 0
2021-03-11 11:54:18,579 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla4, second: Short): Pair<Kla4, Short> = TODO()
2021-03-11 11:54:18,582 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla4, second: Short): Pair<Kla4, Short> = TODO()
2021-03-11 11:54:18,694 [main:302] - generating value of type = Kla4 false depth = 3
2021-03-11 11:54:18,696 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}
2021-03-11 11:54:18,697 [main:302] - generating value of type = Short true depth = 3
2021-03-11 11:54:18,699 [main:95] - GENERATED = Pair<Kla4, Short>(Kla4(), 15086)
2021-03-11 11:54:18,710 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ea8ab5e]
2021-03-11 11:54:18,817 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:54:18,819 [main:66] - Generated call from random type = (Pair<Kla4, Short>(Kla4(), 15086)).second.toString(-1546323466)
2021-03-11 11:54:18,819 [main:110] - replacement of prope2 of type String is "cnhml"
2021-03-11 11:54:18,925 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:54:18,926 [main:66] - Compilation checking started
2021-03-11 11:54:19,261 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (2588).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0()."cnhml"
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:54:19,262 [main:103] - replacing (prope2, String)
2021-03-11 11:54:19,263 [main:38] - replacing prope2 String
2021-03-11 11:54:19,263 [main:42] - Getting value of type String
2021-03-11 11:54:19,372 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:54:19,374 [main:46] - GENERATED VALUE OF TYPE String = "zgyxc"
2021-03-11 11:54:19,374 [main:49] - GENERATED IS CALL =false
2021-03-11 11:54:19,502 [main:55] - randomType = Kla1?
2021-03-11 11:54:19,610 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 11:54:19,612 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}
2021-03-11 11:54:19,719 [main:194] - Type params = []
2021-03-11 11:54:19,825 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 11:54:19,937 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:54:19,940 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:54:20,210 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 11:54:20,324 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:54:20,327 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:54:20,688 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:54:20,688 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:54:20,703 [main:110] - replacement of prope2 of type String is "zgyxc"
2021-03-11 11:54:20,810 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:54:20,811 [main:66] - Compilation checking started
2021-03-11 11:54:21,140 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (2588).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0()."zgyxc" != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:54:21,141 [main:103] - replacing ({
        fu4 { require(true)}
    }, [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit>)
2021-03-11 11:54:21,141 [main:38] - replacing {
        fu4 { require(true)}
    } [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit>
2021-03-11 11:54:21,142 [main:42] - Getting value of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit>
2021-03-11 11:54:21,248 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> false depth = 0
2021-03-11 11:54:21,250 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:54:21,362 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:54:21,365 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:54:21,601 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:54:21,603 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:54:21,715 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:54:21,718 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:54:22,107 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 11:54:22,109 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-11 11:54:22,111 [main:302] - generating value of type = Any false depth = 9
2021-03-11 11:54:22,111 [main:95] - GENERATED = check(false, { "fhqrw"})
2021-03-11 11:54:22,111 [main:95] - GENERATED = contract({ check(false, { "fhqrw"})})
2021-03-11 11:54:22,111 [main:46] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> = {a: Kla0 -> contract({ check(false, { "fhqrw"})})}
2021-03-11 11:54:22,112 [main:49] - GENERATED IS CALL =false
2021-03-11 11:54:22,236 [main:55] - randomType = Char?
2021-03-11 11:54:22,343 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:54:22,365 [main:110] - replacement of {
        fu4 { require(true)}
    } of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> is {a: Kla0 -> contract({ check(false, { "fhqrw"})})}
2021-03-11 11:54:22,474 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:54:22,474 [main:66] - Compilation checking started
2021-03-11 11:54:22,803 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (2588).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {a: Kla0 -> contract({ check(false, { "fhqrw"})})}
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:54:22,805 [main:103] - replacing (prope9 != null, Boolean)
2021-03-11 11:54:22,805 [main:38] - replacing prope9 != null Boolean
2021-03-11 11:54:22,805 [main:42] - Getting value of type Boolean
2021-03-11 11:54:22,915 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:54:22,917 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:54:22,917 [main:49] - GENERATED IS CALL =false
2021-03-11 11:54:23,038 [main:55] - randomType = UShort
2021-03-11 11:54:23,156 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:54:23,187 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@395e9065]
2021-03-11 11:54:23,187 [main:137] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@c844d52]
2021-03-11 11:54:23,187 [main:66] - Generated call from random type = (23449.toUShort()).toFloat().isFinite()
2021-03-11 11:54:23,188 [main:110] - replacement of prope9 != null of type Boolean is true
2021-03-11 11:54:23,295 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-11 11:54:23,295 [main:66] - Compilation checking started
2021-03-11 11:54:23,624 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (2588).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (true) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:54:23,625 [main:103] - replacing (prope2, String)
2021-03-11 11:54:23,626 [main:38] - replacing prope2 String
2021-03-11 11:54:23,626 [main:42] - Getting value of type String
2021-03-11 11:54:23,735 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:54:23,737 [main:46] - GENERATED VALUE OF TYPE String = "htonn"
2021-03-11 11:54:23,737 [main:49] - GENERATED IS CALL =false
2021-03-11 11:54:23,860 [main:55] - randomType = ULong?
2021-03-11 11:54:23,990 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 11:54:24,022 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@73a47bbd]
2021-03-11 11:54:24,022 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ea8ab5e]
2021-03-11 11:54:24,130 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:54:24,132 [main:66] - Generated call from random type = (5214394163324287418.toULong())?.toShort().toString(-576612921)
2021-03-11 11:54:24,132 [main:110] - replacement of prope2 of type String is "htonn"
2021-03-11 11:54:24,240 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:54:24,240 [main:66] - Compilation checking started
2021-03-11 11:54:24,570 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (2588).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0()."htonn"
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString(592303126))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:54:24,573 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:54:24,573 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:54:24,573 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:54:24,689 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:54:24,694 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:54:24,702 [main:55] - randomType = Kla1
2021-03-11 11:54:24,809 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 11:54:24,811 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}
2021-03-11 11:54:24,921 [main:194] - Type params = []
2021-03-11 11:54:25,028 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 11:54:25,143 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:54:25,146 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:54:25,391 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 11:54:25,506 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:54:25,509 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:54:25,870 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 8
2021-03-11 11:54:26,031 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:54:26,034 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:54:26,400 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:54:26,400 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:54:26,400 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:54:26,413 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 11:54:26,523 [main:137] - TRYING TO REPLACE CONSTANT 6605136401679491436
2021-03-11 11:54:26,631 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 11:54:26,631 [main:66] - Compilation checking started
2021-03-11 11:54:27,106 [main:137] - TRYING TO REPLACE CONSTANT 592303126
2021-03-11 11:54:27,221 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PARENTHESIZED)
2021-03-11 11:54:27,221 [main:66] - Compilation checking started
2021-03-11 11:54:27,704 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (2588).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:54:27,705 [main:137] - TRYING TO REPLACE CONSTANT 1374817785
2021-03-11 11:54:27,821 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-11 11:54:27,821 [main:66] - Compilation checking started
2021-03-11 11:54:28,161 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (2588).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((compareTo(47.toUByte()).toUInt()).compareTo(47.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:54:28,161 [main:137] - TRYING TO REPLACE CONSTANT 47
2021-03-11 11:54:28,291 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 11:54:28,291 [main:66] - Compilation checking started
2021-03-11 11:54:28,814 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (2588).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:54:28,814 [main:137] - TRYING TO REPLACE CONSTANT true
2021-03-11 11:54:28,924 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-11 11:54:28,924 [main:66] - Compilation checking started
2021-03-11 11:54:29,278 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (2588).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { isSuccess}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:54:29,278 [main:137] - TRYING TO REPLACE CONSTANT true
2021-03-11 11:54:29,387 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-11 11:54:29,387 [main:66] - Compilation checking started
2021-03-11 11:54:29,719 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (2588).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { isSuccess} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + (1464314131).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:54:29,719 [main:137] - TRYING TO REPLACE CONSTANT null
2021-03-11 11:54:29,828 [main:33] - Trying to replace Element(NULL) on Element(NULL)
2021-03-11 11:54:29,829 [main:137] - TRYING TO REPLACE CONSTANT true
2021-03-11 11:54:29,936 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 11:54:29,936 [main:66] - Compilation checking started
2021-03-11 11:54:30,428 [main:137] - TRYING TO REPLACE CONSTANT 1464314131
2021-03-11 11:54:30,555 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:54:30,556 [main:66] - Compilation checking started
2021-03-11 11:54:31,062 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (2588).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(-1242295978).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:54:31,063 [main:137] - TRYING TO REPLACE CONSTANT 1242295978
2021-03-11 11:54:31,174 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 11:54:31,174 [main:66] - Compilation checking started
2021-03-11 11:54:31,660 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (2588).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:54:31,660 [main:137] - TRYING TO REPLACE CONSTANT 15797
2021-03-11 11:54:31,771 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-11 11:54:31,771 [main:66] - Compilation checking started
2021-03-11 11:54:32,121 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (2588).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(toShort(), Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(-1818823411, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:54:32,121 [main:137] - TRYING TO REPLACE CONSTANT 1818823411
2021-03-11 11:54:32,232 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 11:54:32,233 [main:66] - Compilation checking started
2021-03-11 11:54:32,703 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (2588).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(-399295028)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:54:32,704 [main:137] - TRYING TO REPLACE CONSTANT true
2021-03-11 11:54:32,813 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 11:54:32,813 [main:137] - TRYING TO REPLACE CONSTANT 399295028
2021-03-11 11:54:32,939 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 11:54:32,939 [main:66] - Compilation checking started
2021-03-11 11:54:33,424 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (2588).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..(0.3064453f)?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:54:33,424 [main:137] - TRYING TO REPLACE CONSTANT 0.3064453f
2021-03-11 11:54:33,533 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 11:54:33,533 [main:66] - Compilation checking started
2021-03-11 11:54:34,014 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (2588).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:54:34,014 [main:137] - TRYING TO REPLACE CONSTANT 2588
2021-03-11 11:54:34,128 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 11:54:34,129 [main:66] - Compilation checking started
2021-03-11 11:54:34,612 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:54:34,612 [main:46] - AFTER TRY 1 res = 
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:54:34,831 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}
2021-03-11 11:54:34,832 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}
2021-03-11 11:54:34,941 [main:194] - Type params = []
2021-03-11 11:54:35,049 [main:302] - generating value of type = CoroutineContext false depth = 1
2021-03-11 11:54:35,163 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:54:35,166 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:54:35,433 [main:302] - generating value of type = Key<*> false depth = 4
2021-03-11 11:54:35,557 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:54:35,560 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:54:35,928 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 7
2021-03-11 11:54:36,045 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:54:36,048 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:54:36,418 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:54:36,418 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:54:36,418 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:54:36,419 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}
2021-03-11 11:54:36,419 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 11:54:36,779 [main:302] - generating value of type = Kla6 false depth = 1
2021-03-11 11:54:36,781 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:54:36,781 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}
2021-03-11 11:54:36,782 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}
2021-03-11 11:54:36,782 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:54:36,782 [main:112] - generating klass null text = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}
2021-03-11 11:54:36,782 [main:112] - generating klass null text = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}
2021-03-11 11:54:36,782 [main:112] - generating klass Kla7 text = companion object Kla7 : Kla1()
2021-03-11 11:54:37,021 [main:43] - GENERATING CALL OF fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}
2021-03-11 11:54:37,023 [main:61] - WITHOUT TYPE PARAMS = fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}
2021-03-11 11:54:37,291 [main:302] - generating value of type = Kla0 false depth = 1
2021-03-11 11:54:37,293 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}
2021-03-11 11:54:37,294 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> false depth = 1
2021-03-11 11:54:37,296 [main:302] - generating value of type = Unit false depth = 2
2021-03-11 11:54:37,451 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:54:37,454 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:54:37,820 [main:302] - generating value of type = Int true depth = 5
2021-03-11 11:54:37,822 [main:302] - generating value of type = Function1<Int, Unit> false depth = 5
2021-03-11 11:54:37,825 [main:302] - generating value of type = Unit false depth = 6
2021-03-11 11:54:37,939 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:54:37,942 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:54:38,307 [main:302] - generating value of type = Boolean true depth = 9
2021-03-11 11:54:38,309 [main:302] - generating value of type = Function0<Any> false depth = 9
2021-03-11 11:54:38,311 [main:302] - generating value of type = Any false depth = 10
2021-03-11 11:54:38,311 [main:95] - GENERATED = check(true, { "xuwzg"})
2021-03-11 11:54:38,311 [main:95] - GENERATED = repeat(1778956285, {a: Int -> check(true, { "xuwzg"})})
2021-03-11 11:54:38,312 [main:95] - GENERATED = fu0(Kla0(), {a: Kla0 -> repeat(1778956285, {a: Int -> check(true, { "xuwzg"})})})
2021-03-11 11:54:38,421 [main:43] - GENERATING CALL OF fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}
2021-03-11 11:54:38,808 [main:61] - WITHOUT TYPE PARAMS = fun <Ty0> fu2(x: (Pair<Byte, Kla0>) -> Unit): Continuation<Pair<Byte, Kla0>> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}
2021-03-11 11:54:39,052 [main:302] - generating value of type = Function1<Pair<Byte, Kla0>, Unit> false depth = 1
2021-03-11 11:54:39,055 [main:302] - generating value of type = Unit false depth = 2
2021-03-11 11:54:39,169 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:54:39,172 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:54:39,457 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:54:39,457 [main:95] - GENERATED = println("xpuud")
2021-03-11 11:54:39,457 [main:95] - GENERATED = fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})
2021-03-11 11:54:39,576 [main:43] - GENERATING CALL OF fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}
2021-03-11 11:54:39,578 [main:61] - WITHOUT TYPE PARAMS = fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}
2021-03-11 11:54:39,844 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 1
2021-03-11 11:54:39,846 [main:302] - generating value of type = Unit false depth = 2
2021-03-11 11:54:39,960 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:54:39,963 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:54:40,324 [main:302] - generating value of type = Boolean true depth = 5
2021-03-11 11:54:40,326 [main:302] - generating value of type = Function0<Any> false depth = 5
2021-03-11 11:54:40,328 [main:302] - generating value of type = Any false depth = 6
2021-03-11 11:54:40,329 [main:95] - GENERATED = require(false, { "byjct"})
2021-03-11 11:54:40,329 [main:95] - GENERATED = fu3({a: Throwable -> require(false, { "byjct"})})
2021-03-11 11:54:40,459 [main:48] - Try №1
2021-03-11 11:54:42,619 [main:71] - Trying to insert fun fu18(prope12: Kla8): String {
    val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                prope12.prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}
2021-03-11 11:54:42,761 [main:66] - Compilation checking started
2021-03-11 11:54:43,720 [main:99] - Trying to change 134 nodes
2021-03-11 11:54:43,720 [main:103] - replacing (prope12.prope10 != "OK_NONLOCAL, OK_FINALLY", Boolean)
2021-03-11 11:54:43,721 [main:38] - replacing prope12.prope10 != "OK_NONLOCAL, OK_FINALLY" Boolean
2021-03-11 11:54:43,721 [main:42] - Getting value of type Boolean
2021-03-11 11:54:43,869 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:54:43,872 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:54:43,872 [main:49] - GENERATED IS CALL =false
2021-03-11 11:54:44,048 [main:55] - randomType = Kla2?
2021-03-11 11:54:44,222 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 11:54:44,225 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}
2021-03-11 11:54:44,247 [main:137] - GENERATING call of type public open fun resumeWith(prope4: kotlin.Result<kotlin.Any?>): kotlin.Unit defined in Kla2[SimpleFunctionDescriptorImpl@15bc1839]
2021-03-11 11:54:44,390 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-11 11:54:44,535 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 11:54:44,539 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 11:54:44,860 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-11 11:54:44,864 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:54:44,864 [main:95] - GENERATED = runCatching<Any?>({ "uwwzf"})
2021-03-11 11:54:44,864 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@494e94d1]
2021-03-11 11:54:45,003 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:54:45,004 [main:66] - Generated call from random type = (Kla2())?.resumeWith(runCatching<Any?>({ "uwwzf"})).equals("zcbmx")
2021-03-11 11:54:45,005 [main:94] - GETTING Boolean from Function0<Unit>
2021-03-11 11:54:45,014 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@31028a0d], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7081d87d]]
2021-03-11 11:54:45,014 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@31028a0d]
2021-03-11 11:54:45,152 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:54:45,152 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7081d87d]
2021-03-11 11:54:45,291 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:54:45,294 [main:105] - GENERATED CALL = (Kla5().prope8).equals("amaph").or(true)
2021-03-11 11:54:45,294 [main:101] - Case = [public abstract operator fun invoke(): kotlin.Unit defined in kotlin.Function0[FunctionInvokeDescriptor@1b9b719e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@386d3f50]]
2021-03-11 11:54:45,294 [main:137] - GENERATING call of type public abstract operator fun invoke(): kotlin.Unit defined in kotlin.Function0[FunctionInvokeDescriptor@1b9b719e]
2021-03-11 11:54:45,294 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@386d3f50]
2021-03-11 11:54:45,437 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:54:45,438 [main:105] - GENERATED CALL = (Kla5().prope8).invoke().equals("cospc")
2021-03-11 11:54:45,438 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@31028a0d]]
2021-03-11 11:54:45,438 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@31028a0d]
2021-03-11 11:54:45,585 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:54:45,585 [main:105] - GENERATED CALL = (Kla5().prope8).equals("jquci")
2021-03-11 11:54:45,585 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@31028a0d], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7606cd62]]
2021-03-11 11:54:45,585 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@31028a0d]
2021-03-11 11:54:45,728 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:54:45,729 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7606cd62]
2021-03-11 11:54:45,868 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:54:45,871 [main:105] - GENERATED CALL = (Kla5().prope8).equals("yhuhs").xor(false)
2021-03-11 11:54:45,871 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@31028a0d], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@60e33fd5]]
2021-03-11 11:54:45,871 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@31028a0d]
2021-03-11 11:54:46,008 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:54:46,008 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@60e33fd5]
2021-03-11 11:54:46,143 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:54:46,146 [main:105] - GENERATED CALL = (Kla5().prope8).equals("indyp").and(true)
2021-03-11 11:54:46,146 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@31028a0d], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@506d92ca]]
2021-03-11 11:54:46,146 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@31028a0d]
2021-03-11 11:54:46,283 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:54:46,284 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@506d92ca]
2021-03-11 11:54:46,284 [main:105] - GENERATED CALL = (Kla5().prope8).equals("ajoxh").not()
2021-03-11 11:54:46,284 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@31028a0d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e0b3dde]]
2021-03-11 11:54:46,284 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@31028a0d]
2021-03-11 11:54:46,420 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e0b3dde]
2021-03-11 11:54:46,591 [main:105] - GENERATED CALL = (Kla5().prope8).equals(null).equals(null)
2021-03-11 11:54:46,592 [main:110] - replacement of prope12.prope10 != "OK_NONLOCAL, OK_FINALLY" of type Boolean is (Kla5().prope8).equals("amaph").or(true)
2021-03-11 11:54:46,726 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:54:46,727 [main:66] - Compilation checking started
2021-03-11 11:54:47,353 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope11 = fu14 (
            {
                prope12.prope10 += "OK_LOCAL"
                "OK_LOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu16(prope12: Kla8): String {
    val prope11 = fu14 (
            lambda@ {
                prope12.prope10 += "OK_NONLOCAL"
                return@lambda "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                prope12.prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu16 = fu16(prope12)
    if (fu16 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return "test3: ${fu17}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu18 = fu18(prope12)
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:54:47,354 [main:103] - replacing (prope12, Kla8)
2021-03-11 11:54:47,355 [main:38] - replacing prope12 Kla8
2021-03-11 11:54:47,355 [main:42] - Getting value of type Kla8
2021-03-11 11:54:47,494 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 11:54:47,497 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = ""
}
2021-03-11 11:54:47,497 [main:46] - GENERATED VALUE OF TYPE Kla8 = Kla8()
2021-03-11 11:54:47,497 [main:49] - GENERATED IS CALL =true
2021-03-11 11:54:48,034 [main:55] - randomType = LinkedHashMap<Kla6, Triple<Kla2, Float, Kla5>>
2021-03-11 11:54:48,170 [main:302] - generating value of type = LinkedHashMap<Kla6, Triple<Kla2, Float, Kla5>> false depth = 0
2021-03-11 11:54:48,315 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(): LinkedHashMap<Kla6, Triple<Kla2, Float, Kla5>> = TODO()
2021-03-11 11:54:48,319 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(): LinkedHashMap<Kla6, Triple<Kla2, Float, Kla5>> = TODO()
2021-03-11 11:54:48,462 [main:95] - GENERATED = LinkedHashMap<Kla6, Triple<Kla2, Float, Kla5>>()
2021-03-11 11:54:48,638 [main:94] - GETTING Kla8 from EmptyCoroutineContext
2021-03-11 11:54:48,654 [main:94] - GETTING Kla8 from Function0<Unit>
2021-03-11 11:54:48,662 [main:94] - GETTING Kla8 from Any?
2021-03-11 11:54:48,666 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:54:48,672 [main:94] - GETTING Kla8 from String
2021-03-11 11:54:48,694 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:54:48,694 [main:94] - GETTING Kla8 from String
2021-03-11 11:54:48,695 [main:94] - GETTING Kla8 from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:54:48,706 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:54:48,707 [main:94] - GETTING Kla8 from Boolean
2021-03-11 11:54:48,719 [main:94] - GETTING Kla8 from Continuation<Any?>
2021-03-11 11:54:48,730 [main:110] - replacement of prope12 of type Kla8 is Kla8()
2021-03-11 11:54:48,871 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:54:48,871 [main:66] - Compilation checking started
2021-03-11 11:54:49,493 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_LOCAL"
                "OK_LOCAL"
            }, {
                Kla8().prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu16(prope12: Kla8): String {
    val prope11 = fu14 (
            lambda@ {
                prope12.prope10 += "OK_NONLOCAL"
                return@lambda "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                prope12.prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu16 = fu16(prope12)
    if (fu16 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return "test3: ${fu17}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu18 = fu18(prope12)
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:54:49,493 [main:103] - replacing (block, Function0<Ty1>)
2021-03-11 11:54:49,494 [main:38] - replacing block Function0<Ty1>
2021-03-11 11:54:49,494 [main:42] - Getting value of type Function0<Ty1>
2021-03-11 11:54:49,637 [main:302] - generating value of type = Function0<Ty1> false depth = 0
2021-03-11 11:54:49,640 [main:302] - generating value of type = Ty1 false depth = 1
2021-03-11 11:54:49,646 [main:46] - GENERATED VALUE OF TYPE Function0<Ty1> = { }
2021-03-11 11:54:49,646 [main:49] - GENERATED IS CALL =false
2021-03-11 11:54:49,658 [main:55] - randomType = Kla0
2021-03-11 11:54:49,793 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 11:54:49,796 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}
2021-03-11 11:54:49,804 [main:94] - GETTING Function0<Ty1> from Function0<Unit>
2021-03-11 11:54:49,814 [main:94] - GETTING Function0<Ty1> from CoroutineContext
2021-03-11 11:54:49,820 [main:94] - GETTING Function0<Ty1> from Continuation<Any?>
2021-03-11 11:54:49,829 [main:94] - GETTING Function0<Ty1> from String
2021-03-11 11:54:49,846 [main:94] - GETTING Function0<Ty1> from CoroutineContext
2021-03-11 11:54:49,847 [main:94] - GETTING Function0<Ty1> from Any?
2021-03-11 11:54:49,850 [main:94] - GETTING Function0<Ty1> from CoroutineContext
2021-03-11 11:54:49,851 [main:94] - GETTING Function0<Ty1> from EmptyCoroutineContext
2021-03-11 11:54:49,867 [main:94] - GETTING Function0<Ty1> from String
2021-03-11 11:54:49,868 [main:94] - GETTING Function0<Ty1> from Boolean
2021-03-11 11:54:49,877 [main:94] - GETTING Function0<Ty1> from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:54:49,886 [main:110] - replacement of block of type Function0<Ty1> is { }
2021-03-11 11:54:50,021 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:54:50,022 [main:66] - Compilation checking started
2021-03-11 11:54:50,434 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return { }()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_LOCAL"
                "OK_LOCAL"
            }, {
                Kla8().prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu16(prope12: Kla8): String {
    val prope11 = fu14 (
            lambda@ {
                prope12.prope10 += "OK_NONLOCAL"
                return@lambda "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                prope12.prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu16 = fu16(prope12)
    if (fu16 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return "test3: ${fu17}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu18 = fu18(prope12)
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:54:50,435 [main:103] - replacing ("OK_FINALLY", String)
2021-03-11 11:54:50,435 [main:38] - replacing "OK_FINALLY" String
2021-03-11 11:54:50,435 [main:42] - Getting value of type String
2021-03-11 11:54:50,571 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:54:50,574 [main:46] - GENERATED VALUE OF TYPE String = "iunur"
2021-03-11 11:54:50,574 [main:49] - GENERATED IS CALL =false
2021-03-11 11:54:50,581 [main:55] - randomType = UInt
2021-03-11 11:54:50,719 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 11:54:50,760 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@894f7a6]
2021-03-11 11:54:50,760 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24abb2e5]
2021-03-11 11:54:50,895 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:54:50,899 [main:66] - Generated call from random type = (796226214.toUInt()).toByte().toString(-512655075)
2021-03-11 11:54:50,900 [main:94] - GETTING String from Any?
2021-03-11 11:54:50,903 [main:101] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]]
2021-03-11 11:54:50,903 [main:137] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]
2021-03-11 11:54:50,903 [main:105] - GENERATED CALL = (Kla2().prope4).toString()
2021-03-11 11:54:50,903 [main:110] - replacement of "OK_FINALLY" of type String is (Kla2().prope4).toString()
2021-03-11 11:54:51,038 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:54:51,038 [main:66] - Compilation checking started
2021-03-11 11:54:51,671 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_LOCAL"
                "OK_LOCAL"
            }, {
                Kla8().prope10 += ", OK_FINALLY"
                return (Kla2().prope4).toString()
            })

    return "FAIL";
}

fun fu16(prope12: Kla8): String {
    val prope11 = fu14 (
            lambda@ {
                prope12.prope10 += "OK_NONLOCAL"
                return@lambda "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                prope12.prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu16 = fu16(prope12)
    if (fu16 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return "test3: ${fu17}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu18 = fu18(prope12)
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:54:51,672 [main:103] - replacing (Kla8(), Kla8)
2021-03-11 11:54:51,672 [main:38] - replacing Kla8() Kla8
2021-03-11 11:54:51,672 [main:42] - Getting value of type Kla8
2021-03-11 11:54:51,808 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 11:54:51,811 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = ""
}
2021-03-11 11:54:51,812 [main:46] - GENERATED VALUE OF TYPE Kla8 = Kla8()
2021-03-11 11:54:51,812 [main:49] - GENERATED IS CALL =true
2021-03-11 11:54:52,006 [main:55] - randomType = HashMap<Kla2, Kla4>
2021-03-11 11:54:52,143 [main:302] - generating value of type = HashMap<Kla2, Kla4> false depth = 0
2021-03-11 11:54:52,284 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<Kla2, Kla4> = TODO()
2021-03-11 11:54:52,288 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<Kla2, Kla4> = TODO()
2021-03-11 11:54:52,431 [main:95] - GENERATED = linkedMapOf<Kla2, Kla4>()
2021-03-11 11:54:52,522 [main:94] - GETTING Kla8 from String
2021-03-11 11:54:52,539 [main:94] - GETTING Kla8 from Continuation<Any?>
2021-03-11 11:54:52,546 [main:94] - GETTING Kla8 from Boolean
2021-03-11 11:54:52,555 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:54:52,561 [main:94] - GETTING Kla8 from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:54:52,569 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:54:52,570 [main:94] - GETTING Kla8 from Any?
2021-03-11 11:54:52,573 [main:94] - GETTING Kla8 from EmptyCoroutineContext
2021-03-11 11:54:52,588 [main:94] - GETTING Kla8 from String
2021-03-11 11:54:52,589 [main:94] - GETTING Kla8 from Function0<Unit>
2021-03-11 11:54:52,598 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:54:52,598 [main:110] - replacement of Kla8() of type Kla8 is Kla8()
2021-03-11 11:54:52,732 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:54:52,733 [main:103] - replacing (prope12, Kla8)
2021-03-11 11:54:52,734 [main:38] - replacing prope12 Kla8
2021-03-11 11:54:52,734 [main:42] - Getting value of type Kla8
2021-03-11 11:54:52,868 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 11:54:52,871 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = ""
}
2021-03-11 11:54:52,872 [main:46] - GENERATED VALUE OF TYPE Kla8 = Kla8()
2021-03-11 11:54:52,872 [main:49] - GENERATED IS CALL =true
2021-03-11 11:54:52,884 [main:55] - randomType = Kla0
2021-03-11 11:54:53,021 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 11:54:53,024 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}
2021-03-11 11:54:53,031 [main:94] - GETTING Kla8 from String
2021-03-11 11:54:53,049 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:54:53,055 [main:94] - GETTING Kla8 from Function0<Unit>
2021-03-11 11:54:53,064 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:54:53,065 [main:94] - GETTING Kla8 from Continuation<Any?>
2021-03-11 11:54:53,071 [main:94] - GETTING Kla8 from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:54:53,080 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:54:53,080 [main:94] - GETTING Kla8 from Any?
2021-03-11 11:54:53,085 [main:94] - GETTING Kla8 from EmptyCoroutineContext
2021-03-11 11:54:53,098 [main:94] - GETTING Kla8 from String
2021-03-11 11:54:53,099 [main:94] - GETTING Kla8 from Boolean
2021-03-11 11:54:53,106 [main:110] - replacement of prope12 of type Kla8 is Kla8()
2021-03-11 11:54:53,241 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:54:53,241 [main:66] - Compilation checking started
2021-03-11 11:54:53,814 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_LOCAL"
                "OK_LOCAL"
            }, {
                Kla8().prope10 += ", OK_FINALLY"
                return (Kla2().prope4).toString()
            })

    return "FAIL";
}

fun fu16(prope12: Kla8): String {
    val prope11 = fu14 (
            lambda@ {
                prope12.prope10 += "OK_NONLOCAL"
                return@lambda "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                prope12.prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(prope12)
    if (fu16 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return "test3: ${fu17}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu18 = fu18(prope12)
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:54:53,815 [main:103] - replacing (prope12.prope10, String)
2021-03-11 11:54:53,816 [main:38] - replacing prope12.prope10 String
2021-03-11 11:54:53,816 [main:42] - Getting value of type String
2021-03-11 11:54:53,954 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:54:53,957 [main:46] - GENERATED VALUE OF TYPE String = "wmnju"
2021-03-11 11:54:53,957 [main:49] - GENERATED IS CALL =false
2021-03-11 11:54:53,963 [main:55] - randomType = Char
2021-03-11 11:54:54,129 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:54:54,150 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@49a40bce]
2021-03-11 11:54:54,285 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:54:54,288 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:54:54,425 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:54:54,428 [main:66] - Generated call from random type = ('䖧').compareTo('閌').toString(1108655454)
2021-03-11 11:54:54,429 [main:94] - GETTING String from EmptyCoroutineContext
2021-03-11 11:54:54,444 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:54:54,449 [main:94] - GETTING String from String
2021-03-11 11:54:54,466 [main:101] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70a4c679]]
2021-03-11 11:54:54,466 [main:137] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70a4c679]
2021-03-11 11:54:54,601 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:54:54,604 [main:105] - GENERATED CALL = (Kla0().prope2).prependIndent("isybt")
2021-03-11 11:54:54,604 [main:101] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e18efcd]]
2021-03-11 11:54:54,604 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e18efcd]
2021-03-11 11:54:54,741 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:54:54,880 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:54:55,027 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:54:55,030 [main:105] - GENERATED CALL = (Kla0().prope2).replaceAfter('瀭', "khqfz", "xriyj")
2021-03-11 11:54:55,031 [main:101] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4500af19]]
2021-03-11 11:54:55,031 [main:137] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4500af19]
2021-03-11 11:54:55,169 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:54:55,312 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:54:55,315 [main:105] - GENERATED CALL = (Kla0().prope2).substringAfter('ﵼ', "gsuco")
2021-03-11 11:54:55,315 [main:101] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bb1ac4]]
2021-03-11 11:54:55,315 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bb1ac4]
2021-03-11 11:54:55,452 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:54:55,458 [main:105] - GENERATED CALL = (Kla0().prope2).removePrefix(StringBuilder())
2021-03-11 11:54:55,458 [main:101] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@789c7792]]
2021-03-11 11:54:55,458 [main:137] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@789c7792]
2021-03-11 11:54:55,593 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:54:55,596 [main:105] - GENERATED CALL = (Kla0().prope2).drop(-181721031)
2021-03-11 11:54:55,596 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31e01bcc]]
2021-03-11 11:54:55,596 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2]
2021-03-11 11:54:55,734 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:54:55,737 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31e01bcc]
2021-03-11 11:54:55,737 [main:105] - GENERATED CALL = (Kla0().prope2).get(-1868072118).uppercase()
2021-03-11 11:54:55,737 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d43a4]]
2021-03-11 11:54:55,737 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d43a4]
2021-03-11 11:54:55,737 [main:105] - GENERATED CALL = (Kla0().prope2).uppercase()
2021-03-11 11:54:55,737 [main:101] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f0f4449]]
2021-03-11 11:54:55,737 [main:137] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f0f4449]
2021-03-11 11:54:55,872 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:54:56,012 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:54:56,015 [main:105] - GENERATED CALL = (Kla0().prope2).substringAfterLast('汉', "cidby")
2021-03-11 11:54:56,016 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55e8774e]]
2021-03-11 11:54:56,016 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9]
2021-03-11 11:54:56,152 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:54:56,293 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:54:56,296 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55e8774e]
2021-03-11 11:54:56,466 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:54:56,610 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 11:54:56,615 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 11:54:56,926 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 11:54:56,932 [main:95] - GENERATED = StringBuilder("cwjsj")
2021-03-11 11:54:57,070 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:54:57,073 [main:105] - GENERATED CALL = (Kla0().prope2).subSequence(1953624703, 1245303888).commonPrefixWith(StringBuilder("cwjsj"), true)
2021-03-11 11:54:57,073 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3183fb09]]
2021-03-11 11:54:57,073 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2]
2021-03-11 11:54:57,209 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:54:57,212 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3183fb09]
2021-03-11 11:54:57,212 [main:105] - GENERATED CALL = (Kla0().prope2).get(-1471815248).titlecase()
2021-03-11 11:54:57,212 [main:110] - replacement of prope12.prope10 of type String is Kla0().prope2
2021-03-11 11:54:57,347 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:54:57,348 [main:66] - Compilation checking started
2021-03-11 11:54:57,967 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_LOCAL"
                "OK_LOCAL"
            }, {
                Kla8().prope10 += ", OK_FINALLY"
                return (Kla2().prope4).toString()
            })

    return "FAIL";
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            lambda@ {
                Kla0().prope2 += "OK_NONLOCAL"
                return@lambda "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                prope12.prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(prope12)
    if (fu16 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return "test3: ${fu17}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu18 = fu18(prope12)
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:54:57,968 [main:103] - replacing (fu14 (
            {
                prope12.prope10 += "OK_LOCAL"
                "OK_LOCAL"
            }, {
                Kla8().prope10 += ", OK_FINALLY"
                return (Kla2().prope4).toString()
            }), String)
2021-03-11 11:54:57,968 [main:38] - replacing fu14 (
            {
                prope12.prope10 += "OK_LOCAL"
                "OK_LOCAL"
            }, {
                Kla8().prope10 += ", OK_FINALLY"
                return (Kla2().prope4).toString()
            }) String
2021-03-11 11:54:57,968 [main:42] - Getting value of type String
2021-03-11 11:54:58,117 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:54:58,120 [main:46] - GENERATED VALUE OF TYPE String = "mbgsn"
2021-03-11 11:54:58,121 [main:49] - GENERATED IS CALL =false
2021-03-11 11:54:58,296 [main:55] - randomType = Kla3<Kla5>
2021-03-11 11:54:58,431 [main:302] - generating value of type = Kla3<Kla5> false depth = 0
2021-03-11 11:54:58,435 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 11:54:59,052 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 11:54:59,055 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:54:59,073 [main:94] - GETTING String from Continuation<Any?>
2021-03-11 11:54:59,081 [main:94] - GETTING String from String
2021-03-11 11:54:59,099 [main:101] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@362a157e]]
2021-03-11 11:54:59,099 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@362a157e]
2021-03-11 11:54:59,270 [main:105] - GENERATED CALL = (fu1()).plus(null)
2021-03-11 11:54:59,270 [main:101] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5efbe895]]
2021-03-11 11:54:59,270 [main:137] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5efbe895]
2021-03-11 11:54:59,408 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:54:59,411 [main:105] - GENERATED CALL = (fu1()).take(-1518858930)
2021-03-11 11:54:59,411 [main:101] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19c42257]]
2021-03-11 11:54:59,412 [main:137] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19c42257]
2021-03-11 11:54:59,547 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:54:59,687 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:54:59,834 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:54:59,837 [main:105] - GENERATED CALL = (fu1()).replaceBeforeLast('쑶', "ljpja", "btvdu")
2021-03-11 11:54:59,837 [main:101] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e18efcd]]
2021-03-11 11:54:59,838 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e18efcd]
2021-03-11 11:54:59,984 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:55:00,124 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:00,264 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:00,268 [main:105] - GENERATED CALL = (fu1()).replaceAfter('攇', "kiqvc", "bsmjo")
2021-03-11 11:55:00,268 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d922029]]
2021-03-11 11:55:00,268 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9]
2021-03-11 11:55:00,403 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:00,541 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:00,544 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d922029]
2021-03-11 11:55:00,680 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 11:55:00,821 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 11:55:00,826 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 11:55:01,294 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:55:01,297 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-11 11:55:01,449 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int): Set<RegexOption> = TODO()
2021-03-11 11:55:01,454 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int): Set<RegexOption> = TODO()
2021-03-11 11:55:01,753 [main:302] - generating value of type = Int true depth = 6
2021-03-11 11:55:01,756 [main:95] - GENERATED = LinkedHashSet<RegexOption>(-592706234)
2021-03-11 11:55:01,756 [main:95] - GENERATED = Regex("spbky", LinkedHashSet<RegexOption>(-592706234))
2021-03-11 11:55:01,931 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-11 11:55:01,934 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 11:55:01,940 [main:105] - GENERATED CALL = (fu1()).subSequence(1572998919, -509498149).replace(Regex("spbky", LinkedHashSet<RegexOption>(-592706234)), {a: MatchResult -> "ilzdz"})
2021-03-11 11:55:01,940 [main:101] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bb1ac4]]
2021-03-11 11:55:01,941 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bb1ac4]
2021-03-11 11:55:02,077 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:55:02,083 [main:105] - GENERATED CALL = (fu1()).removePrefix("oqpno")
2021-03-11 11:55:02,083 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31bcf16b]]
2021-03-11 11:55:02,083 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31bcf16b]
2021-03-11 11:55:02,083 [main:105] - GENERATED CALL = (fu1()).trimEnd()
2021-03-11 11:55:02,083 [main:101] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74bc8742]]
2021-03-11 11:55:02,083 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74bc8742]
2021-03-11 11:55:02,220 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:55:02,359 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:02,499 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:02,502 [main:105] - GENERATED CALL = (fu1()).replaceAfterLast('⫀', "fblzd", "qhduv")
2021-03-11 11:55:02,502 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65452653]]
2021-03-11 11:55:02,502 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65452653]
2021-03-11 11:55:02,503 [main:105] - GENERATED CALL = (fu1()).reversed()
2021-03-11 11:55:02,503 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e317ee5]]
2021-03-11 11:55:02,503 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e317ee5]
2021-03-11 11:55:02,503 [main:105] - GENERATED CALL = (fu1()).toUpperCase()
2021-03-11 11:55:02,503 [main:110] - replacement of fu14 (
            {
                prope12.prope10 += "OK_LOCAL"
                "OK_LOCAL"
            }, {
                Kla8().prope10 += ", OK_FINALLY"
                return (Kla2().prope4).toString()
            }) of type String is (fu1()).plus(null)
2021-03-11 11:55:02,643 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:55:02,643 [main:66] - Compilation checking started
2021-03-11 11:55:03,035 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (fu1()).plus(null)

    return "FAIL";
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            lambda@ {
                Kla0().prope2 += "OK_NONLOCAL"
                return@lambda "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                prope12.prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(prope12)
    if (fu16 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return "test3: ${fu17}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu18 = fu18(prope12)
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:55:03,036 [main:103] - replacing (prope10, String)
2021-03-11 11:55:03,037 [main:38] - replacing prope10 String
2021-03-11 11:55:03,037 [main:42] - Getting value of type String
2021-03-11 11:55:03,173 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:03,176 [main:46] - GENERATED VALUE OF TYPE String = "hzghs"
2021-03-11 11:55:03,176 [main:49] - GENERATED IS CALL =false
2021-03-11 11:55:03,183 [main:55] - randomType = Int
2021-03-11 11:55:03,327 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:03,361 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e0fbc9]
2021-03-11 11:55:03,361 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:55:03,498 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:03,501 [main:66] - Generated call from random type = (-1833701355).toInt().toString(-1551517010)
2021-03-11 11:55:03,502 [main:94] - GETTING String from String
2021-03-11 11:55:03,519 [main:101] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b817b]]
2021-03-11 11:55:03,519 [main:137] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b817b]
2021-03-11 11:55:03,656 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:55:03,659 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:55:03,662 [main:105] - GENERATED CALL = (Kla0().prope2).takeLastWhile({a: Char -> true})
2021-03-11 11:55:03,662 [main:101] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b4b6762]]
2021-03-11 11:55:03,662 [main:137] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b4b6762]
2021-03-11 11:55:03,662 [main:105] - GENERATED CALL = (Kla0().prope2).capitalize()
2021-03-11 11:55:03,662 [main:101] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4223d0a4]]
2021-03-11 11:55:03,662 [main:137] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4223d0a4]
2021-03-11 11:55:03,799 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:55:03,937 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:55:04,079 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:55:04,083 [main:105] - GENERATED CALL = (Kla0().prope2).replaceFirst('円', '⦙', false)
2021-03-11 11:55:04,083 [main:101] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e6673fa]]
2021-03-11 11:55:04,083 [main:137] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e6673fa]
2021-03-11 11:55:04,220 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:04,223 [main:105] - GENERATED CALL = (Kla0().prope2).trimMargin("pogks")
2021-03-11 11:55:04,224 [main:101] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70e39ab]]
2021-03-11 11:55:04,224 [main:137] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70e39ab]
2021-03-11 11:55:04,359 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:55:04,498 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:04,674 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:04,678 [main:105] - GENERATED CALL = (Kla0().prope2).replaceBefore('툇', "pxwtv", "rqaad")
2021-03-11 11:55:04,678 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69597be7]]
2021-03-11 11:55:04,678 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9]
2021-03-11 11:55:04,814 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:04,954 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:04,957 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69597be7]
2021-03-11 11:55:05,093 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:55:05,236 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:55:05,239 [main:105] - GENERATED CALL = (Kla0().prope2).subSequence(-904450183, 1919829240).commonSuffixWith("ypyop", false)
2021-03-11 11:55:05,239 [main:101] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cd3e5fa]]
2021-03-11 11:55:05,239 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cd3e5fa]
2021-03-11 11:55:05,375 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:05,379 [main:105] - GENERATED CALL = (Kla0().prope2).repeat(831605409)
2021-03-11 11:55:05,379 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64a3bad2]]
2021-03-11 11:55:05,379 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64a3bad2]
2021-03-11 11:55:05,379 [main:105] - GENERATED CALL = (Kla0().prope2).lowercase()
2021-03-11 11:55:05,379 [main:101] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f0f4449]]
2021-03-11 11:55:05,379 [main:137] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f0f4449]
2021-03-11 11:55:05,515 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:55:05,655 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:05,658 [main:105] - GENERATED CALL = (Kla0().prope2).substringAfterLast('衺', "loffl")
2021-03-11 11:55:05,658 [main:101] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f07eaf7]]
2021-03-11 11:55:05,658 [main:137] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f07eaf7]
2021-03-11 11:55:05,801 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:55:05,808 [main:105] - GENERATED CALL = (Kla0().prope2).removeSurrounding(StringBuilder())
2021-03-11 11:55:05,808 [main:110] - replacement of prope10 of type String is (Kla0().prope2).replaceBefore('툇', "pxwtv", "rqaad")
2021-03-11 11:55:05,951 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:55:05,952 [main:66] - Compilation checking started
2021-03-11 11:55:06,348 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_LOCAL"
                "OK_LOCAL"
            }, {
                Kla8().prope10 += ", OK_FINALLY"
                return (Kla2().prope4).toString()
            })

    return "FAIL";
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            lambda@ {
                Kla0().prope2 += "OK_NONLOCAL"
                return@lambda "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.(Kla0().prope2).replaceBefore('툇', "pxwtv", "rqaad") += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                prope12.prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(prope12)
    if (fu16 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return "test3: ${fu17}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu18 = fu18(prope12)
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:55:06,349 [main:103] - replacing ("FAIL", String)
2021-03-11 11:55:06,349 [main:38] - replacing "FAIL" String
2021-03-11 11:55:06,349 [main:42] - Getting value of type String
2021-03-11 11:55:06,486 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:06,489 [main:46] - GENERATED VALUE OF TYPE String = "sifyp"
2021-03-11 11:55:06,489 [main:49] - GENERATED IS CALL =false
2021-03-11 11:55:06,813 [main:55] - randomType = LinkedHashSet<UShort>
2021-03-11 11:55:06,950 [main:302] - generating value of type = LinkedHashSet<UShort> false depth = 0
2021-03-11 11:55:07,094 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<UShort> = TODO()
2021-03-11 11:55:07,098 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<UShort> = TODO()
2021-03-11 11:55:07,243 [main:95] - GENERATED = linkedSetOf<UShort>()
2021-03-11 11:55:07,360 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:55:07,535 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:07,539 [main:66] - Generated call from random type = (linkedSetOf<UShort>()).size.toString(-1727759542)
2021-03-11 11:55:07,540 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:55:07,548 [main:94] - GETTING String from Function0<Unit>
2021-03-11 11:55:07,557 [main:94] - GETTING String from Boolean
2021-03-11 11:55:07,565 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@69292ca6], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]]
2021-03-11 11:55:07,565 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@69292ca6]
2021-03-11 11:55:07,701 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:55:07,704 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:55:07,840 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:07,844 [main:105] - GENERATED CALL = (Kla5().prope7).compareTo(true).toString(963381101)
2021-03-11 11:55:07,844 [main:110] - replacement of "FAIL" of type String is (Kla5().prope7).compareTo(true).toString(963381101)
2021-03-11 11:55:07,980 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:55:07,980 [main:66] - Compilation checking started
2021-03-11 11:55:08,563 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_LOCAL"
                "OK_LOCAL"
            }, {
                Kla8().prope10 += ", OK_FINALLY"
                return (Kla2().prope4).toString()
            })

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            lambda@ {
                Kla0().prope2 += "OK_NONLOCAL"
                return@lambda "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                prope12.prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(prope12)
    if (fu16 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return "test3: ${fu17}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu18 = fu18(prope12)
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:55:08,564 [main:103] - replacing ("OK_NONLOCAL", String)
2021-03-11 11:55:08,564 [main:38] - replacing "OK_NONLOCAL" String
2021-03-11 11:55:08,564 [main:42] - Getting value of type String
2021-03-11 11:55:08,706 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:08,709 [main:46] - GENERATED VALUE OF TYPE String = "sjdzw"
2021-03-11 11:55:08,709 [main:49] - GENERATED IS CALL =false
2021-03-11 11:55:08,883 [main:55] - randomType = List<Kla0>
2021-03-11 11:55:08,884 [main:94] - GETTING String from Any?
2021-03-11 11:55:08,887 [main:101] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]]
2021-03-11 11:55:08,887 [main:137] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]
2021-03-11 11:55:08,888 [main:105] - GENERATED CALL = (Kla2().prope4).toString()
2021-03-11 11:55:08,888 [main:110] - replacement of "OK_NONLOCAL" of type String is "sjdzw"
2021-03-11 11:55:09,025 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 11:55:09,026 [main:66] - Compilation checking started
2021-03-11 11:55:09,593 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_LOCAL"
                "OK_LOCAL"
            }, {
                Kla8().prope10 += ", OK_FINALLY"
                return (Kla2().prope4).toString()
            })

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            lambda@ {
                Kla0().prope2 += "OK_NONLOCAL"
                return@lambda "sjdzw"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                prope12.prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(prope12)
    if (fu16 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return "test3: ${fu17}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu18 = fu18(prope12)
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:55:09,594 [main:103] - replacing (prope12.prope10, String)
2021-03-11 11:55:09,594 [main:38] - replacing prope12.prope10 String
2021-03-11 11:55:09,594 [main:42] - Getting value of type String
2021-03-11 11:55:09,766 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:09,770 [main:46] - GENERATED VALUE OF TYPE String = "jjmwd"
2021-03-11 11:55:09,770 [main:49] - GENERATED IS CALL =false
2021-03-11 11:55:09,777 [main:55] - randomType = Boolean
2021-03-11 11:55:09,914 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:55:09,926 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@69292ca6]
2021-03-11 11:55:10,063 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:55:10,067 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:55:10,205 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:10,208 [main:66] - Generated call from random type = (true).compareTo(false).toString(-461017783)
2021-03-11 11:55:10,209 [main:94] - GETTING String from Boolean
2021-03-11 11:55:10,218 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@69292ca6], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]]
2021-03-11 11:55:10,218 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@69292ca6]
2021-03-11 11:55:10,355 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:55:10,359 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:55:10,529 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:10,532 [main:105] - GENERATED CALL = (Kla5().prope7).compareTo(false).toString(1131269321)
2021-03-11 11:55:10,532 [main:110] - replacement of prope12.prope10 of type String is (Kla5().prope7).compareTo(false).toString(1131269321)
2021-03-11 11:55:10,672 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:55:10,672 [main:66] - Compilation checking started
2021-03-11 11:55:11,069 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_LOCAL"
                "OK_LOCAL"
            }, {
                Kla8().prope10 += ", OK_FINALLY"
                return (Kla2().prope4).toString()
            })

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            lambda@ {
                Kla0().prope2 += "OK_NONLOCAL"
                return@lambda "sjdzw"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                (Kla5().prope7).compareTo(false).toString(1131269321) += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                prope12.prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(prope12)
    if (fu16 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return "test3: ${fu17}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu18 = fu18(prope12)
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:55:11,070 [main:103] - replacing (lambda@ {
                Kla0().prope2 += "OK_NONLOCAL"
                return@lambda "sjdzw"
            }, Function0<String>)
2021-03-11 11:55:11,070 [main:38] - replacing lambda@ {
                Kla0().prope2 += "OK_NONLOCAL"
                return@lambda "sjdzw"
            } Function0<String>
2021-03-11 11:55:11,070 [main:42] - Getting value of type Function0<String>
2021-03-11 11:55:11,207 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-11 11:55:11,210 [main:302] - generating value of type = String true depth = 1
2021-03-11 11:55:11,213 [main:46] - GENERATED VALUE OF TYPE Function0<String> = { "tkfmb"}
2021-03-11 11:55:11,214 [main:49] - GENERATED IS CALL =false
2021-03-11 11:55:11,226 [main:55] - randomType = Kla8
2021-03-11 11:55:11,363 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 11:55:11,366 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = ""
}
2021-03-11 11:55:11,372 [main:94] - GETTING Function0<String> from CoroutineContext
2021-03-11 11:55:11,378 [main:94] - GETTING Function0<String> from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:55:11,387 [main:94] - GETTING Function0<String> from CoroutineContext
2021-03-11 11:55:11,388 [main:94] - GETTING Function0<String> from String
2021-03-11 11:55:11,407 [main:94] - GETTING Function0<String> from Any?
2021-03-11 11:55:11,411 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 11:55:11,420 [main:94] - GETTING Function0<String> from Function0<Unit>
2021-03-11 11:55:11,430 [main:94] - GETTING Function0<String> from CoroutineContext
2021-03-11 11:55:11,431 [main:94] - GETTING Function0<String> from EmptyCoroutineContext
2021-03-11 11:55:11,446 [main:94] - GETTING Function0<String> from Continuation<Any?>
2021-03-11 11:55:11,453 [main:94] - GETTING Function0<String> from String
2021-03-11 11:55:11,453 [main:110] - replacement of lambda@ {
                Kla0().prope2 += "OK_NONLOCAL"
                return@lambda "sjdzw"
            } of type Function0<String> is { "tkfmb"}
2021-03-11 11:55:11,590 [main:33] - Trying to replace Element(LABELED_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:55:11,590 [main:66] - Compilation checking started
2021-03-11 11:55:12,155 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_LOCAL"
                "OK_LOCAL"
            }, {
                Kla8().prope10 += ", OK_FINALLY"
                return (Kla2().prope4).toString()
            })

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                prope12.prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                prope12.prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(prope12)
    if (fu16 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return "test3: ${fu17}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu18 = fu18(prope12)
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:55:12,156 [main:103] - replacing (fu17 != "OK_FINALLY", Boolean)
2021-03-11 11:55:12,156 [main:38] - replacing fu17 != "OK_FINALLY" Boolean
2021-03-11 11:55:12,156 [main:42] - Getting value of type Boolean
2021-03-11 11:55:12,299 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:55:12,302 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:55:12,302 [main:49] - GENERATED IS CALL =false
2021-03-11 11:55:12,984 [main:55] - randomType = MutableMap<Kla1?, LinkedHashMap<ULong, Char?>>
2021-03-11 11:55:12,985 [main:94] - GETTING Boolean from Any?
2021-03-11 11:55:12,988 [main:101] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@1badd75d], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7081d87d]]
2021-03-11 11:55:12,988 [main:137] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@1badd75d]
2021-03-11 11:55:13,127 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:55:13,127 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7081d87d]
2021-03-11 11:55:13,271 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:55:13,274 [main:105] - GENERATED CALL = (Kla2().prope4).equals("wokej").or(false)
2021-03-11 11:55:13,275 [main:101] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@1badd75d], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@506d92ca]]
2021-03-11 11:55:13,275 [main:137] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@1badd75d]
2021-03-11 11:55:13,420 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:55:13,420 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@506d92ca]
2021-03-11 11:55:13,421 [main:105] - GENERATED CALL = (Kla2().prope4).equals("scgzr").not()
2021-03-11 11:55:13,421 [main:101] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@1badd75d], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@60e33fd5]]
2021-03-11 11:55:13,421 [main:137] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@1badd75d]
2021-03-11 11:55:13,599 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:55:13,599 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@60e33fd5]
2021-03-11 11:55:13,734 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:55:13,737 [main:105] - GENERATED CALL = (Kla2().prope4).equals("azebd").and(false)
2021-03-11 11:55:13,737 [main:101] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@1badd75d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e0b3dde]]
2021-03-11 11:55:13,737 [main:137] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@1badd75d]
2021-03-11 11:55:13,872 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:55:13,872 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e0b3dde]
2021-03-11 11:55:14,008 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:55:14,008 [main:105] - GENERATED CALL = (Kla2().prope4).equals("xgdlt").equals("glbxi")
2021-03-11 11:55:14,008 [main:101] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@1badd75d]]
2021-03-11 11:55:14,008 [main:137] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@1badd75d]
2021-03-11 11:55:14,142 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:55:14,143 [main:105] - GENERATED CALL = (Kla2().prope4).equals("jgfcp")
2021-03-11 11:55:14,143 [main:101] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@1badd75d], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7606cd62]]
2021-03-11 11:55:14,143 [main:137] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@1badd75d]
2021-03-11 11:55:14,279 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:55:14,279 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7606cd62]
2021-03-11 11:55:14,418 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:55:14,421 [main:105] - GENERATED CALL = (Kla2().prope4).equals("qyzmj").xor(true)
2021-03-11 11:55:14,421 [main:110] - replacement of fu17 != "OK_FINALLY" of type Boolean is (Kla2().prope4).equals("jgfcp")
2021-03-11 11:55:14,554 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:55:14,555 [main:66] - Compilation checking started
2021-03-11 11:55:14,949 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_LOCAL"
                "OK_LOCAL"
            }, {
                Kla8().prope10 += ", OK_FINALLY"
                return (Kla2().prope4).toString()
            })

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                prope12.prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                prope12.prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(prope12)
    if (fu16 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if ((Kla2().prope4).equals("jgfcp") || (Kla5().prope8).equals("amaph").or(true)) return "test3: ${fu17}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu18 = fu18(prope12)
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:55:14,949 [main:103] - replacing (prope12, Kla8)
2021-03-11 11:55:14,950 [main:38] - replacing prope12 Kla8
2021-03-11 11:55:14,950 [main:42] - Getting value of type Kla8
2021-03-11 11:55:15,085 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 11:55:15,088 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = ""
}
2021-03-11 11:55:15,088 [main:46] - GENERATED VALUE OF TYPE Kla8 = Kla8()
2021-03-11 11:55:15,088 [main:49] - GENERATED IS CALL =true
2021-03-11 11:55:15,094 [main:55] - randomType = UInt
2021-03-11 11:55:15,236 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 11:55:15,267 [main:94] - GETTING Kla8 from Any?
2021-03-11 11:55:15,271 [main:94] - GETTING Kla8 from String
2021-03-11 11:55:15,288 [main:94] - GETTING Kla8 from String
2021-03-11 11:55:15,289 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:55:15,294 [main:94] - GETTING Kla8 from Function0<Unit>
2021-03-11 11:55:15,304 [main:94] - GETTING Kla8 from Boolean
2021-03-11 11:55:15,312 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:55:15,313 [main:94] - GETTING Kla8 from Continuation<Any?>
2021-03-11 11:55:15,320 [main:94] - GETTING Kla8 from EmptyCoroutineContext
2021-03-11 11:55:15,334 [main:94] - GETTING Kla8 from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:55:15,342 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:55:15,343 [main:110] - replacement of prope12 of type Kla8 is Kla8()
2021-03-11 11:55:15,476 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:55:15,477 [main:66] - Compilation checking started
2021-03-11 11:55:16,031 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                "OK_LOCAL"
            }, {
                Kla8().prope10 += ", OK_FINALLY"
                return (Kla2().prope4).toString()
            })

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                prope12.prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                prope12.prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(prope12)
    if (fu16 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return "test3: ${fu17}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu18 = fu18(prope12)
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:55:16,032 [main:103] - replacing (prope10, String)
2021-03-11 11:55:16,032 [main:38] - replacing prope10 String
2021-03-11 11:55:16,032 [main:42] - Getting value of type String
2021-03-11 11:55:16,167 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:16,170 [main:46] - GENERATED VALUE OF TYPE String = "lrgfh"
2021-03-11 11:55:16,170 [main:49] - GENERATED IS CALL =false
2021-03-11 11:55:16,696 [main:55] - randomType = Kla3<Kla3<Kla4>>
2021-03-11 11:55:16,831 [main:302] - generating value of type = Kla3<Kla3<Kla4>> false depth = 0
2021-03-11 11:55:16,834 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 11:55:17,290 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 11:55:17,293 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:55:17,312 [main:94] - GETTING String from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:55:17,321 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:55:17,327 [main:94] - GETTING String from Continuation<Any?>
2021-03-11 11:55:17,333 [main:94] - GETTING String from String
2021-03-11 11:55:17,350 [main:101] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4223d0a4]]
2021-03-11 11:55:17,350 [main:137] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4223d0a4]
2021-03-11 11:55:17,484 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:55:17,621 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:55:17,763 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:55:17,766 [main:105] - GENERATED CALL = (fu1()).replaceFirst('缻', '?', true)
2021-03-11 11:55:17,766 [main:101] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3613a3a3]]
2021-03-11 11:55:17,766 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3613a3a3]
2021-03-11 11:55:17,902 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:17,905 [main:105] - GENERATED CALL = (fu1()).replaceIndent("ozklj")
2021-03-11 11:55:17,905 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71804ef6]]
2021-03-11 11:55:17,905 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2]
2021-03-11 11:55:18,039 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:18,043 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71804ef6]
2021-03-11 11:55:18,043 [main:105] - GENERATED CALL = (fu1()).get(221419363).lowercase()
2021-03-11 11:55:18,043 [main:101] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74bc8742]]
2021-03-11 11:55:18,043 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74bc8742]
2021-03-11 11:55:18,186 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:55:18,325 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:18,464 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:18,468 [main:105] - GENERATED CALL = (fu1()).replaceAfterLast('䳊', "wasyq", "vikzv")
2021-03-11 11:55:18,468 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69bee298]]
2021-03-11 11:55:18,468 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69bee298]
2021-03-11 11:55:18,468 [main:105] - GENERATED CALL = (fu1()).trimStart()
2021-03-11 11:55:18,468 [main:101] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@302c273c]]
2021-03-11 11:55:18,468 [main:137] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@302c273c]
2021-03-11 11:55:18,605 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:55:18,745 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:55:18,884 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:55:18,887 [main:105] - GENERATED CALL = (fu1()).replace('偪', '뿐', false)
2021-03-11 11:55:18,888 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2868a883], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]]
2021-03-11 11:55:18,888 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2868a883]
2021-03-11 11:55:19,025 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:19,028 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:55:19,165 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:19,168 [main:105] - GENERATED CALL = (fu1()).compareTo("sxcon").toString(572027120)
2021-03-11 11:55:19,168 [main:101] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69597be7]]
2021-03-11 11:55:19,168 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69597be7]
2021-03-11 11:55:19,341 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:55:19,483 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 11:55:19,488 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 11:55:19,784 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:55:19,787 [main:95] - GENERATED = StringBuilder("eqchn")
2021-03-11 11:55:19,924 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:55:19,928 [main:105] - GENERATED CALL = (fu1()).commonSuffixWith(StringBuilder("eqchn"), false)
2021-03-11 11:55:19,928 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55e8774e]]
2021-03-11 11:55:19,928 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9]
2021-03-11 11:55:20,063 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:20,202 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:20,205 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55e8774e]
2021-03-11 11:55:20,340 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:55:20,482 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:55:20,485 [main:105] - GENERATED CALL = (fu1()).subSequence(69020687, -2072706696).commonPrefixWith(StringBuilder(), false)
2021-03-11 11:55:20,485 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b55c3ff]]
2021-03-11 11:55:20,485 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9]
2021-03-11 11:55:20,620 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:20,759 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:20,762 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b55c3ff]
2021-03-11 11:55:20,897 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:21,035 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:21,038 [main:105] - GENERATED CALL = (fu1()).subSequence(-1692267054, -1330348441).substring(994135115, -1531148885)
2021-03-11 11:55:21,038 [main:110] - replacement of prope10 of type String is (fu1()).commonSuffixWith(StringBuilder("eqchn"), false)
2021-03-11 11:55:21,173 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:55:21,174 [main:66] - Compilation checking started
2021-03-11 11:55:21,581 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                "OK_LOCAL"
            }, {
                Kla8().prope10 += ", OK_FINALLY"
                return (Kla2().prope4).toString()
            })

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                prope12.prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                prope12.prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(prope12)
    if (fu16 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return "test3: ${fu17}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu18 = fu18(prope12)
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.(fu1()).commonSuffixWith(StringBuilder("eqchn"), false)}"

    return "OK"
}


2021-03-11 11:55:21,582 [main:103] - replacing (prope10, String)
2021-03-11 11:55:21,582 [main:38] - replacing prope10 String
2021-03-11 11:55:21,582 [main:42] - Getting value of type String
2021-03-11 11:55:21,722 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:21,725 [main:46] - GENERATED VALUE OF TYPE String = "rlvmt"
2021-03-11 11:55:21,725 [main:49] - GENERATED IS CALL =false
2021-03-11 11:55:22,055 [main:55] - randomType = List<Kla2>
2021-03-11 11:55:22,055 [main:94] - GETTING String from Continuation<Any?>
2021-03-11 11:55:22,063 [main:94] - GETTING String from String
2021-03-11 11:55:22,080 [main:101] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9cf1d0]]
2021-03-11 11:55:22,080 [main:137] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9cf1d0]
2021-03-11 11:55:22,216 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:55:22,398 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:22,402 [main:105] - GENERATED CALL = (Kla0().prope2).substringBefore('勥', "hfkwh")
2021-03-11 11:55:22,403 [main:101] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4500af19]]
2021-03-11 11:55:22,403 [main:137] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4500af19]
2021-03-11 11:55:22,539 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:55:22,675 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:22,679 [main:105] - GENERATED CALL = (Kla0().prope2).substringAfter('⎀', "lcmhx")
2021-03-11 11:55:22,679 [main:101] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e6673fa]]
2021-03-11 11:55:22,679 [main:137] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e6673fa]
2021-03-11 11:55:22,813 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:22,816 [main:105] - GENERATED CALL = (Kla0().prope2).trimMargin("bngnb")
2021-03-11 11:55:22,816 [main:101] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cd3e5fa]]
2021-03-11 11:55:22,816 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cd3e5fa]
2021-03-11 11:55:22,951 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:22,954 [main:105] - GENERATED CALL = (Kla0().prope2).repeat(1948062228)
2021-03-11 11:55:22,954 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d43a4]]
2021-03-11 11:55:22,954 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d43a4]
2021-03-11 11:55:22,955 [main:105] - GENERATED CALL = (Kla0().prope2).uppercase()
2021-03-11 11:55:22,955 [main:101] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6afc3414]]
2021-03-11 11:55:22,955 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6afc3414]
2021-03-11 11:55:22,955 [main:105] - GENERATED CALL = (Kla0().prope2).trimIndent()
2021-03-11 11:55:22,955 [main:101] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b803b71]]
2021-03-11 11:55:22,955 [main:137] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b803b71]
2021-03-11 11:55:23,089 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:23,092 [main:105] - GENERATED CALL = (Kla0().prope2).dropLast(1521297294)
2021-03-11 11:55:23,092 [main:101] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ba808ab]]
2021-03-11 11:55:23,092 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ba808ab]
2021-03-11 11:55:23,227 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:23,364 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:55:23,367 [main:105] - GENERATED CALL = (Kla0().prope2).padEnd(-2107561755, '䙍')
2021-03-11 11:55:23,368 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55e8774e]]
2021-03-11 11:55:23,368 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9]
2021-03-11 11:55:23,500 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:23,637 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:23,641 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55e8774e]
2021-03-11 11:55:23,776 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:55:23,918 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 11:55:23,922 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 11:55:24,217 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:55:24,220 [main:95] - GENERATED = StringBuilder("cqizb")
2021-03-11 11:55:24,355 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:55:24,358 [main:105] - GENERATED CALL = (Kla0().prope2).subSequence(420564687, -997173334).commonPrefixWith(StringBuilder("cqizb"), false)
2021-03-11 11:55:24,359 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@185349f8]]
2021-03-11 11:55:24,359 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@185349f8]
2021-03-11 11:55:24,493 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 11:55:24,496 [main:302] - generating value of type = Char true depth = 1
2021-03-11 11:55:24,499 [main:105] - GENERATED CALL = (Kla0().prope2).replaceFirstChar({a: Char -> 'Ⅲ'})
2021-03-11 11:55:24,499 [main:110] - replacement of prope10 of type String is (Kla0().prope2).uppercase()
2021-03-11 11:55:24,632 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:55:24,632 [main:66] - Compilation checking started
2021-03-11 11:55:25,023 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                "OK_LOCAL"
            }, {
                Kla8().prope10 += ", OK_FINALLY"
                return (Kla2().prope4).toString()
            })

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                prope12.prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                prope12.prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(prope12)
    if (fu16 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return "test3: ${fu17}, holder: ${prope12.(Kla0().prope2).uppercase()}"

    prope12 = Kla8()
    val fu18 = fu18(prope12)
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:55:25,024 [main:103] - replacing (Kla8().prope10, String)
2021-03-11 11:55:25,024 [main:38] - replacing Kla8().prope10 String
2021-03-11 11:55:25,024 [main:42] - Getting value of type String
2021-03-11 11:55:25,159 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:25,163 [main:46] - GENERATED VALUE OF TYPE String = "jepsa"
2021-03-11 11:55:25,163 [main:49] - GENERATED IS CALL =false
2021-03-11 11:55:25,326 [main:55] - randomType = ULong?
2021-03-11 11:55:25,495 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 11:55:25,528 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUInt(): kotlin.UInt defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@6a30a400]
2021-03-11 11:55:25,528 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bf0270]
2021-03-11 11:55:25,665 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:25,668 [main:66] - Generated call from random type = (2261583250050499916.toULong())?.toUInt().toString(610311936)
2021-03-11 11:55:25,669 [main:94] - GETTING String from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:55:25,678 [main:94] - GETTING String from String
2021-03-11 11:55:25,694 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69597be7]]
2021-03-11 11:55:25,694 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9]
2021-03-11 11:55:25,839 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:25,978 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:25,982 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69597be7]
2021-03-11 11:55:26,116 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:55:26,258 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:55:26,261 [main:105] - GENERATED CALL = (fu1()).subSequence(-679531219, 1949823238).commonSuffixWith("ghxwg", true)
2021-03-11 11:55:26,261 [main:101] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9cf1d0]]
2021-03-11 11:55:26,261 [main:137] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9cf1d0]
2021-03-11 11:55:26,396 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:55:26,534 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:26,538 [main:105] - GENERATED CALL = (fu1()).substringBefore('骴', "dckmv")
2021-03-11 11:55:26,538 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@343cfd88]]
2021-03-11 11:55:26,538 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@343cfd88]
2021-03-11 11:55:26,675 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:26,678 [main:105] - GENERATED CALL = (fu1()).concat("pochw")
2021-03-11 11:55:26,679 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55e8774e]]
2021-03-11 11:55:26,679 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9]
2021-03-11 11:55:26,815 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:26,954 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:26,958 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55e8774e]
2021-03-11 11:55:27,091 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:55:27,230 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 11:55:27,234 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 11:55:27,534 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:55:27,538 [main:95] - GENERATED = StringBuilder("rwrap")
2021-03-11 11:55:27,832 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:55:27,836 [main:105] - GENERATED CALL = (fu1()).subSequence(336189596, -2085196710).commonPrefixWith(StringBuilder("rwrap"), false)
2021-03-11 11:55:27,836 [main:101] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bb1ac4]]
2021-03-11 11:55:27,836 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bb1ac4]
2021-03-11 11:55:27,970 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:55:27,976 [main:105] - GENERATED CALL = (fu1()).removePrefix("nrfxu")
2021-03-11 11:55:27,976 [main:101] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@789c7792]]
2021-03-11 11:55:27,976 [main:137] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@789c7792]
2021-03-11 11:55:28,111 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:28,114 [main:105] - GENERATED CALL = (fu1()).drop(-1940785578)
2021-03-11 11:55:28,114 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b55c3ff]]
2021-03-11 11:55:28,114 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9]
2021-03-11 11:55:28,247 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:28,382 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:28,386 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b55c3ff]
2021-03-11 11:55:28,520 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:28,657 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:28,660 [main:105] - GENERATED CALL = (fu1()).subSequence(-1079506084, -208801615).substring(1698675236, 1765664674)
2021-03-11 11:55:28,660 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f98a541]]
2021-03-11 11:55:28,660 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f98a541]
2021-03-11 11:55:28,827 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:28,964 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:28,967 [main:105] - GENERATED CALL = (fu1()).removeRange(-1141782072, -1938611094)
2021-03-11 11:55:28,967 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31e01bcc]]
2021-03-11 11:55:28,967 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2]
2021-03-11 11:55:29,101 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:29,105 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31e01bcc]
2021-03-11 11:55:29,105 [main:105] - GENERATED CALL = (fu1()).get(822260278).uppercase()
2021-03-11 11:55:29,105 [main:101] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e18efcd]]
2021-03-11 11:55:29,105 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e18efcd]
2021-03-11 11:55:29,240 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:55:29,376 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:29,514 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:29,517 [main:105] - GENERATED CALL = (fu1()).replaceAfter('ꌸ', "llrjz", "gxwrk")
2021-03-11 11:55:29,517 [main:110] - replacement of Kla8().prope10 of type String is (fu1()).replaceAfter('ꌸ', "llrjz", "gxwrk")
2021-03-11 11:55:29,651 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:55:29,651 [main:66] - Compilation checking started
2021-03-11 11:55:30,052 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                "OK_LOCAL"
            }, {
                Kla8().prope10 += ", OK_FINALLY"
                return (Kla2().prope4).toString()
            })

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                prope12.prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                prope12.prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${(fu1()).replaceAfter('ꌸ', "llrjz", "gxwrk")}"

    prope12 = Kla8()
    val fu16 = fu16(prope12)
    if (fu16 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return "test3: ${fu17}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu18 = fu18(prope12)
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:55:30,053 [main:103] - replacing (prope12, Kla8)
2021-03-11 11:55:30,053 [main:38] - replacing prope12 Kla8
2021-03-11 11:55:30,053 [main:42] - Getting value of type Kla8
2021-03-11 11:55:30,190 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 11:55:30,193 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = ""
}
2021-03-11 11:55:30,193 [main:46] - GENERATED VALUE OF TYPE Kla8 = Kla8()
2021-03-11 11:55:30,194 [main:49] - GENERATED IS CALL =true
2021-03-11 11:55:30,348 [main:55] - randomType = Double
2021-03-11 11:55:30,482 [main:302] - generating value of type = Double true depth = 0
2021-03-11 11:55:30,514 [main:94] - GETTING Kla8 from Any?
2021-03-11 11:55:30,517 [main:94] - GETTING Kla8 from Boolean
2021-03-11 11:55:30,526 [main:94] - GETTING Kla8 from String
2021-03-11 11:55:30,544 [main:94] - GETTING Kla8 from Continuation<Any?>
2021-03-11 11:55:30,551 [main:94] - GETTING Kla8 from EmptyCoroutineContext
2021-03-11 11:55:30,565 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:55:30,570 [main:94] - GETTING Kla8 from Function0<Unit>
2021-03-11 11:55:30,582 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:55:30,583 [main:94] - GETTING Kla8 from String
2021-03-11 11:55:30,583 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:55:30,584 [main:94] - GETTING Kla8 from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:55:30,592 [main:110] - replacement of prope12 of type Kla8 is Kla8()
2021-03-11 11:55:30,725 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:55:30,726 [main:66] - Compilation checking started
2021-03-11 11:55:31,282 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                "OK_LOCAL"
            }, {
                Kla8().prope10 += ", OK_FINALLY"
                return (Kla2().prope4).toString()
            })

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                prope12.prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                prope12.prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (fu16 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return "test3: ${fu17}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu18 = fu18(prope12)
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:55:31,283 [main:103] - replacing (prope10, String)
2021-03-11 11:55:31,283 [main:38] - replacing prope10 String
2021-03-11 11:55:31,283 [main:42] - Getting value of type String
2021-03-11 11:55:31,419 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:31,422 [main:46] - GENERATED VALUE OF TYPE String = "muvvo"
2021-03-11 11:55:31,422 [main:49] - GENERATED IS CALL =false
2021-03-11 11:55:31,429 [main:55] - randomType = Short
2021-03-11 11:55:31,566 [main:302] - generating value of type = Short true depth = 0
2021-03-11 11:55:31,616 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@73969353]
2021-03-11 11:55:31,617 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1efc965a]
2021-03-11 11:55:31,753 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:31,756 [main:66] - Generated call from random type = (20915).toLong().toString(870291537)
2021-03-11 11:55:31,756 [main:110] - replacement of prope10 of type String is (20915).toLong().toString(870291537)
2021-03-11 11:55:31,890 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:55:31,890 [main:66] - Compilation checking started
2021-03-11 11:55:32,307 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                "OK_LOCAL"
            }, {
                Kla8().prope10 += ", OK_FINALLY"
                return (Kla2().prope4).toString()
            })

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                prope12.prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                prope12.prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (fu16 != "OK_FINALLY" || prope12.(20915).toLong().toString(870291537) != "OK_NONLOCAL, OK_FINALLY") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return "test3: ${fu17}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu18 = fu18(prope12)
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:55:32,308 [main:103] - replacing (Kla8(), Kla8)
2021-03-11 11:55:32,308 [main:38] - replacing Kla8() Kla8
2021-03-11 11:55:32,308 [main:42] - Getting value of type Kla8
2021-03-11 11:55:32,443 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 11:55:32,446 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = ""
}
2021-03-11 11:55:32,447 [main:46] - GENERATED VALUE OF TYPE Kla8 = Kla8()
2021-03-11 11:55:32,447 [main:49] - GENERATED IS CALL =true
2021-03-11 11:55:32,453 [main:55] - randomType = Long
2021-03-11 11:55:32,590 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:55:32,640 [main:94] - GETTING Kla8 from Continuation<Any?>
2021-03-11 11:55:32,647 [main:94] - GETTING Kla8 from Any?
2021-03-11 11:55:32,652 [main:94] - GETTING Kla8 from Boolean
2021-03-11 11:55:32,660 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:55:32,666 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:55:32,667 [main:94] - GETTING Kla8 from Function0<Unit>
2021-03-11 11:55:32,675 [main:94] - GETTING Kla8 from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:55:32,684 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:55:32,685 [main:94] - GETTING Kla8 from EmptyCoroutineContext
2021-03-11 11:55:32,699 [main:94] - GETTING Kla8 from String
2021-03-11 11:55:32,717 [main:94] - GETTING Kla8 from String
2021-03-11 11:55:32,717 [main:110] - replacement of Kla8() of type Kla8 is Kla8()
2021-03-11 11:55:32,850 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:55:32,851 [main:103] - replacing ("OK_NONLOCAL, OK_FINALLY", String)
2021-03-11 11:55:32,851 [main:38] - replacing "OK_NONLOCAL, OK_FINALLY" String
2021-03-11 11:55:32,851 [main:42] - Getting value of type String
2021-03-11 11:55:32,987 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:32,991 [main:46] - GENERATED VALUE OF TYPE String = "rcpfz"
2021-03-11 11:55:32,992 [main:49] - GENERATED IS CALL =false
2021-03-11 11:55:33,169 [main:55] - randomType = Kla3<Int>
2021-03-11 11:55:33,303 [main:302] - generating value of type = Kla3<Int> false depth = 0
2021-03-11 11:55:33,307 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 11:55:33,933 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 11:55:33,936 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:55:33,951 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:55:33,957 [main:94] - GETTING String from Any?
2021-03-11 11:55:33,960 [main:101] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]]
2021-03-11 11:55:33,960 [main:137] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]
2021-03-11 11:55:33,960 [main:105] - GENERATED CALL = (Kla2().prope4).toString()
2021-03-11 11:55:33,960 [main:110] - replacement of "OK_NONLOCAL, OK_FINALLY" of type String is "rcpfz"
2021-03-11 11:55:34,093 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 11:55:34,094 [main:66] - Compilation checking started
2021-03-11 11:55:34,647 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                "OK_LOCAL"
            }, {
                Kla8().prope10 += ", OK_FINALLY"
                return (Kla2().prope4).toString()
            })

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                prope12.prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                prope12.prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (fu16 != "OK_FINALLY" || prope12.prope10 != "rcpfz") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return "test3: ${fu17}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu18 = fu18(prope12)
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:55:34,648 [main:103] - replacing (prope12, Kla8)
2021-03-11 11:55:34,649 [main:38] - replacing prope12 Kla8
2021-03-11 11:55:34,649 [main:42] - Getting value of type Kla8
2021-03-11 11:55:34,784 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 11:55:34,787 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = ""
}
2021-03-11 11:55:34,787 [main:46] - GENERATED VALUE OF TYPE Kla8 = Kla8()
2021-03-11 11:55:34,787 [main:49] - GENERATED IS CALL =true
2021-03-11 11:55:34,952 [main:55] - randomType = UShort
2021-03-11 11:55:35,088 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:55:35,119 [main:94] - GETTING Kla8 from EmptyCoroutineContext
2021-03-11 11:55:35,133 [main:94] - GETTING Kla8 from Boolean
2021-03-11 11:55:35,141 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:55:35,147 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:55:35,148 [main:94] - GETTING Kla8 from String
2021-03-11 11:55:35,166 [main:94] - GETTING Kla8 from Any?
2021-03-11 11:55:35,169 [main:94] - GETTING Kla8 from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:55:35,177 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:55:35,177 [main:94] - GETTING Kla8 from Function0<Unit>
2021-03-11 11:55:35,187 [main:94] - GETTING Kla8 from Continuation<Any?>
2021-03-11 11:55:35,194 [main:94] - GETTING Kla8 from String
2021-03-11 11:55:35,194 [main:110] - replacement of prope12 of type Kla8 is Kla8()
2021-03-11 11:55:35,355 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:55:35,355 [main:66] - Compilation checking started
2021-03-11 11:55:35,911 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                "OK_LOCAL"
            }, {
                Kla8().prope10 += ", OK_FINALLY"
                return (Kla2().prope4).toString()
            })

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                prope12.prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                Kla8().prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (fu16 != "OK_FINALLY" || prope12.prope10 != "rcpfz") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return "test3: ${fu17}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu18 = fu18(prope12)
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:55:35,912 [main:103] - replacing (prope10, String)
2021-03-11 11:55:35,912 [main:38] - replacing prope10 String
2021-03-11 11:55:35,912 [main:42] - Getting value of type String
2021-03-11 11:55:36,058 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:36,061 [main:46] - GENERATED VALUE OF TYPE String = "wdjnu"
2021-03-11 11:55:36,061 [main:49] - GENERATED IS CALL =false
2021-03-11 11:55:36,224 [main:55] - randomType = Char?
2021-03-11 11:55:36,359 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:55:36,382 [main:137] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@343b24d1]
2021-03-11 11:55:36,382 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1efc965a]
2021-03-11 11:55:36,526 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:36,530 [main:66] - Generated call from random type = ('䲢')?.toLong().toString(-97885112)
2021-03-11 11:55:36,531 [main:94] - GETTING String from Any?
2021-03-11 11:55:36,534 [main:101] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]]
2021-03-11 11:55:36,534 [main:137] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]
2021-03-11 11:55:36,534 [main:105] - GENERATED CALL = (Kla2().prope4).toString()
2021-03-11 11:55:36,535 [main:110] - replacement of prope10 of type String is "wdjnu"
2021-03-11 11:55:36,670 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:55:36,670 [main:66] - Compilation checking started
2021-03-11 11:55:37,059 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                "OK_LOCAL"
            }, {
                Kla8().prope10 += ", OK_FINALLY"
                return (Kla2().prope4).toString()
            })

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                prope12.prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                Kla8()."wdjnu" += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (fu16 != "OK_FINALLY" || prope12.prope10 != "rcpfz") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return "test3: ${fu17}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu18 = fu18(prope12)
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:55:37,060 [main:103] - replacing (fu16, String)
2021-03-11 11:55:37,060 [main:38] - replacing fu16 String
2021-03-11 11:55:37,060 [main:42] - Getting value of type String
2021-03-11 11:55:37,195 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:37,198 [main:46] - GENERATED VALUE OF TYPE String = "ozdjs"
2021-03-11 11:55:37,198 [main:49] - GENERATED IS CALL =false
2021-03-11 11:55:37,539 [main:55] - randomType = Set<Int>
2021-03-11 11:55:37,539 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:55:37,546 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:55:37,546 [main:94] - GETTING String from String
2021-03-11 11:55:37,563 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55e8774e]]
2021-03-11 11:55:37,563 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9]
2021-03-11 11:55:37,698 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:37,838 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:37,841 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55e8774e]
2021-03-11 11:55:37,976 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:55:38,117 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:55:38,120 [main:105] - GENERATED CALL = (fu1()).subSequence(276482789, -841879687).commonPrefixWith(StringBuilder(), true)
2021-03-11 11:55:38,120 [main:101] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6afc3414]]
2021-03-11 11:55:38,120 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6afc3414]
2021-03-11 11:55:38,120 [main:105] - GENERATED CALL = (fu1()).trimIndent()
2021-03-11 11:55:38,120 [main:101] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@362a157e]]
2021-03-11 11:55:38,120 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@362a157e]
2021-03-11 11:55:38,254 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:55:38,254 [main:105] - GENERATED CALL = (fu1()).plus("mxvai")
2021-03-11 11:55:38,254 [main:101] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4223d0a4]]
2021-03-11 11:55:38,254 [main:137] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4223d0a4]
2021-03-11 11:55:38,389 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:55:38,527 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:55:38,664 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:55:38,667 [main:105] - GENERATED CALL = (fu1()).replaceFirst('ꆁ', 'ͯ', true)
2021-03-11 11:55:38,668 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65452653]]
2021-03-11 11:55:38,668 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65452653]
2021-03-11 11:55:38,668 [main:105] - GENERATED CALL = (fu1()).reversed()
2021-03-11 11:55:38,668 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31e01bcc]]
2021-03-11 11:55:38,668 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2]
2021-03-11 11:55:38,828 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:38,831 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31e01bcc]
2021-03-11 11:55:38,832 [main:105] - GENERATED CALL = (fu1()).get(2138316372).uppercase()
2021-03-11 11:55:38,832 [main:101] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45f9386a]]
2021-03-11 11:55:38,832 [main:137] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45f9386a]
2021-03-11 11:55:38,967 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:55:38,970 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:55:38,973 [main:105] - GENERATED CALL = (fu1()).dropWhile({a: Char -> true})
2021-03-11 11:55:38,973 [main:101] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f0f4449]]
2021-03-11 11:55:38,973 [main:137] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f0f4449]
2021-03-11 11:55:39,109 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:55:39,247 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:39,250 [main:105] - GENERATED CALL = (fu1()).substringAfterLast('럲', "qlgmr")
2021-03-11 11:55:39,251 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2868a883], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]]
2021-03-11 11:55:39,251 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2868a883]
2021-03-11 11:55:39,384 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:39,387 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:55:39,522 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:39,526 [main:105] - GENERATED CALL = (fu1()).compareTo("jusfu").toString(-601722593)
2021-03-11 11:55:39,526 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d922029]]
2021-03-11 11:55:39,526 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9]
2021-03-11 11:55:39,662 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:39,800 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:39,804 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d922029]
2021-03-11 11:55:39,938 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 11:55:40,079 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 11:55:40,083 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 11:55:40,380 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:55:40,384 [main:95] - GENERATED = Regex("zhtqf")
2021-03-11 11:55:40,519 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-11 11:55:40,522 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 11:55:40,528 [main:105] - GENERATED CALL = (fu1()).subSequence(559320183, -1373369253).replace(Regex("zhtqf"), {a: MatchResult -> StringBuilder()})
2021-03-11 11:55:40,528 [main:110] - replacement of fu16 of type String is (fu1()).plus("mxvai")
2021-03-11 11:55:40,667 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:55:40,667 [main:66] - Compilation checking started
2021-03-11 11:55:41,065 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                "OK_LOCAL"
            }, {
                Kla8().prope10 += ", OK_FINALLY"
                return (Kla2().prope4).toString()
            })

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                prope12.prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                Kla8().prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if ((fu1()).plus("mxvai") != "OK_FINALLY" || prope12.prope10 != "rcpfz") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return "test3: ${fu17}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu18 = fu18(prope12)
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:55:41,066 [main:103] - replacing ("OK_LOCAL", String)
2021-03-11 11:55:41,067 [main:38] - replacing "OK_LOCAL" String
2021-03-11 11:55:41,067 [main:42] - Getting value of type String
2021-03-11 11:55:41,203 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:41,206 [main:46] - GENERATED VALUE OF TYPE String = "nlepn"
2021-03-11 11:55:41,206 [main:49] - GENERATED IS CALL =false
2021-03-11 11:55:41,374 [main:55] - randomType = Kla4?
2021-03-11 11:55:41,509 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 11:55:41,512 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}
2021-03-11 11:55:41,518 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:55:41,525 [main:94] - GETTING String from EmptyCoroutineContext
2021-03-11 11:55:41,540 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:55:41,540 [main:94] - GETTING String from Boolean
2021-03-11 11:55:41,549 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@69292ca6], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]]
2021-03-11 11:55:41,549 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@69292ca6]
2021-03-11 11:55:41,684 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:55:41,688 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:55:41,823 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:41,827 [main:105] - GENERATED CALL = (Kla5().prope7).compareTo(true).toString(-602476929)
2021-03-11 11:55:41,827 [main:110] - replacement of "OK_LOCAL" of type String is (Kla5().prope7).compareTo(true).toString(-602476929)
2021-03-11 11:55:41,961 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:55:41,962 [main:66] - Compilation checking started
2021-03-11 11:55:42,552 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, {
                Kla8().prope10 += ", OK_FINALLY"
                return (Kla2().prope4).toString()
            })

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                prope12.prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                Kla8().prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (fu16 != "OK_FINALLY" || prope12.prope10 != "rcpfz") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return "test3: ${fu17}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu18 = fu18(prope12)
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:55:42,553 [main:103] - replacing ("OK_LOCAL, OK_FINALLY", String)
2021-03-11 11:55:42,553 [main:38] - replacing "OK_LOCAL, OK_FINALLY" String
2021-03-11 11:55:42,553 [main:42] - Getting value of type String
2021-03-11 11:55:42,689 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:42,692 [main:46] - GENERATED VALUE OF TYPE String = "wccuo"
2021-03-11 11:55:42,692 [main:49] - GENERATED IS CALL =false
2021-03-11 11:55:43,035 [main:55] - randomType = Function1<Kla2, LinkedHashSet<Boolean>>
2021-03-11 11:55:43,036 [main:94] - GETTING String from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:55:43,045 [main:94] - GETTING String from String
2021-03-11 11:55:43,062 [main:101] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29fa2338]]
2021-03-11 11:55:43,062 [main:137] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29fa2338]
2021-03-11 11:55:43,063 [main:105] - GENERATED CALL = (fu1()).decapitalize()
2021-03-11 11:55:43,063 [main:101] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72351c5f]]
2021-03-11 11:55:43,063 [main:137] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72351c5f]
2021-03-11 11:55:43,199 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:55:43,339 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:43,343 [main:105] - GENERATED CALL = (fu1()).substringBeforeLast('G', "pfnjz")
2021-03-11 11:55:43,343 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3183fb09]]
2021-03-11 11:55:43,343 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2]
2021-03-11 11:55:43,478 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:43,481 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3183fb09]
2021-03-11 11:55:43,481 [main:105] - GENERATED CALL = (fu1()).get(1037559921).titlecase()
2021-03-11 11:55:43,481 [main:101] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cf93148]]
2021-03-11 11:55:43,481 [main:137] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cf93148]
2021-03-11 11:55:43,619 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:55:43,622 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:55:43,625 [main:105] - GENERATED CALL = (fu1()).dropLastWhile({a: Char -> true})
2021-03-11 11:55:43,625 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69597be7]]
2021-03-11 11:55:43,625 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9]
2021-03-11 11:55:43,762 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:43,908 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:43,911 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69597be7]
2021-03-11 11:55:44,047 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:55:44,189 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 11:55:44,193 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 11:55:44,492 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:55:44,495 [main:95] - GENERATED = StringBuilder(-1378632087)
2021-03-11 11:55:44,629 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:55:44,633 [main:105] - GENERATED CALL = (fu1()).subSequence(184419069, 815489393).commonSuffixWith(StringBuilder(-1378632087), true)
2021-03-11 11:55:44,633 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ad2776d]]
2021-03-11 11:55:44,633 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ad2776d]
2021-03-11 11:55:44,768 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:44,771 [main:105] - GENERATED CALL = (fu1()).substring(-581874258)
2021-03-11 11:55:44,771 [main:101] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f07eaf7]]
2021-03-11 11:55:44,771 [main:137] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f07eaf7]
2021-03-11 11:55:44,907 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:55:44,913 [main:105] - GENERATED CALL = (fu1()).removeSurrounding(StringBuilder())
2021-03-11 11:55:44,914 [main:101] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f0f4449]]
2021-03-11 11:55:44,914 [main:137] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f0f4449]
2021-03-11 11:55:45,049 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:55:45,189 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:45,192 [main:105] - GENERATED CALL = (fu1()).substringAfterLast('㵲', "xjgdk")
2021-03-11 11:55:45,192 [main:101] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9cf1d0]]
2021-03-11 11:55:45,192 [main:137] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9cf1d0]
2021-03-11 11:55:45,331 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:55:45,469 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:45,473 [main:105] - GENERATED CALL = (fu1()).substringBefore('┟', "ownzp")
2021-03-11 11:55:45,473 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2f6d9f0f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]]
2021-03-11 11:55:45,473 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:55:45,649 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:45,652 [main:105] - GENERATED CALL = (fu1()).length.toString(1609438886)
2021-03-11 11:55:45,652 [main:110] - replacement of "OK_LOCAL, OK_FINALLY" of type String is (fu1()).substringAfterLast('㵲', "xjgdk")
2021-03-11 11:55:45,788 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:55:45,788 [main:66] - Compilation checking started
2021-03-11 11:55:46,187 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, {
                Kla8().prope10 += ", OK_FINALLY"
                return (Kla2().prope4).toString()
            })

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                prope12.prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                Kla8().prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != (fu1()).substringAfterLast('㵲', "xjgdk")) return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (fu16 != "OK_FINALLY" || prope12.prope10 != "rcpfz") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return "test3: ${fu17}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu18 = fu18(prope12)
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:55:46,189 [main:103] - replacing (prope12, Kla8)
2021-03-11 11:55:46,189 [main:38] - replacing prope12 Kla8
2021-03-11 11:55:46,189 [main:42] - Getting value of type Kla8
2021-03-11 11:55:46,333 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 11:55:46,336 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = ""
}
2021-03-11 11:55:46,336 [main:46] - GENERATED VALUE OF TYPE Kla8 = Kla8()
2021-03-11 11:55:46,336 [main:49] - GENERATED IS CALL =true
2021-03-11 11:55:46,342 [main:55] - randomType = ULong
2021-03-11 11:55:46,478 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 11:55:46,508 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:55:46,513 [main:94] - GETTING Kla8 from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:55:46,521 [main:94] - GETTING Kla8 from String
2021-03-11 11:55:46,538 [main:94] - GETTING Kla8 from Any?
2021-03-11 11:55:46,541 [main:94] - GETTING Kla8 from EmptyCoroutineContext
2021-03-11 11:55:46,555 [main:94] - GETTING Kla8 from Boolean
2021-03-11 11:55:46,563 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:55:46,564 [main:94] - GETTING Kla8 from Function0<Unit>
2021-03-11 11:55:46,573 [main:94] - GETTING Kla8 from Continuation<Any?>
2021-03-11 11:55:46,580 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:55:46,580 [main:94] - GETTING Kla8 from String
2021-03-11 11:55:46,580 [main:110] - replacement of prope12 of type Kla8 is Kla8()
2021-03-11 11:55:46,716 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:55:46,716 [main:66] - Compilation checking started
2021-03-11 11:55:47,282 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, {
                Kla8().prope10 += ", OK_FINALLY"
                return (Kla2().prope4).toString()
            })

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                Kla8().prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                Kla8().prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (fu16 != "OK_FINALLY" || prope12.prope10 != "rcpfz") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return "test3: ${fu17}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu18 = fu18(prope12)
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:55:47,282 [main:103] - replacing ({
                Kla8().prope10 += ", OK_FINALLY"
                return (Kla2().prope4).toString()
            }, Function0<String>)
2021-03-11 11:55:47,282 [main:38] - replacing {
                Kla8().prope10 += ", OK_FINALLY"
                return (Kla2().prope4).toString()
            } Function0<String>
2021-03-11 11:55:47,283 [main:42] - Getting value of type Function0<String>
2021-03-11 11:55:47,418 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-11 11:55:47,422 [main:302] - generating value of type = String true depth = 1
2021-03-11 11:55:47,425 [main:46] - GENERATED VALUE OF TYPE Function0<String> = { "rrenj"}
2021-03-11 11:55:47,425 [main:49] - GENERATED IS CALL =false
2021-03-11 11:55:47,590 [main:55] - randomType = Sequence<UByte>
2021-03-11 11:55:47,591 [main:94] - GETTING Function0<String> from Any?
2021-03-11 11:55:47,596 [main:94] - GETTING Function0<String> from Boolean
2021-03-11 11:55:47,605 [main:94] - GETTING Function0<String> from Continuation<Any?>
2021-03-11 11:55:47,612 [main:94] - GETTING Function0<String> from EmptyCoroutineContext
2021-03-11 11:55:47,627 [main:94] - GETTING Function0<String> from CoroutineContext
2021-03-11 11:55:47,633 [main:94] - GETTING Function0<String> from CoroutineContext
2021-03-11 11:55:47,634 [main:94] - GETTING Function0<String> from String
2021-03-11 11:55:47,651 [main:94] - GETTING Function0<String> from CoroutineContext
2021-03-11 11:55:47,652 [main:94] - GETTING Function0<String> from String
2021-03-11 11:55:47,653 [main:94] - GETTING Function0<String> from Function0<Unit>
2021-03-11 11:55:47,663 [main:94] - GETTING Function0<String> from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:55:47,670 [main:110] - replacement of {
                Kla8().prope10 += ", OK_FINALLY"
                return (Kla2().prope4).toString()
            } of type Function0<String> is { "rrenj"}
2021-03-11 11:55:47,805 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:55:47,805 [main:66] - Compilation checking started
2021-03-11 11:55:48,392 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                Kla8().prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                Kla8().prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (fu16 != "OK_FINALLY" || prope12.prope10 != "rcpfz") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return "test3: ${fu17}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu18 = fu18(prope12)
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:55:48,393 [main:103] - replacing ("test3: ${fu17}, holder: ${prope12.prope10}", String)
2021-03-11 11:55:48,393 [main:38] - replacing "test3: ${fu17}, holder: ${prope12.prope10}" String
2021-03-11 11:55:48,393 [main:42] - Getting value of type String
2021-03-11 11:55:48,530 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:48,533 [main:46] - GENERATED VALUE OF TYPE String = "ylthq"
2021-03-11 11:55:48,533 [main:49] - GENERATED IS CALL =false
2021-03-11 11:55:48,700 [main:55] - randomType = Kla4?
2021-03-11 11:55:48,834 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 11:55:48,837 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}
2021-03-11 11:55:48,845 [main:94] - GETTING String from Continuation<Any?>
2021-03-11 11:55:48,853 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:55:48,858 [main:94] - GETTING String from Function0<Unit>
2021-03-11 11:55:48,867 [main:94] - GETTING String from Any?
2021-03-11 11:55:48,870 [main:101] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]]
2021-03-11 11:55:48,870 [main:137] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]
2021-03-11 11:55:48,870 [main:105] - GENERATED CALL = (Kla2().prope4).toString()
2021-03-11 11:55:48,870 [main:110] - replacement of "test3: ${fu17}, holder: ${prope12.prope10}" of type String is (Kla2().prope4).toString()
2021-03-11 11:55:49,005 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:55:49,005 [main:66] - Compilation checking started
2021-03-11 11:55:49,594 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                Kla8().prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                Kla8().prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (fu16 != "OK_FINALLY" || prope12.prope10 != "rcpfz") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = fu18(prope12)
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:55:49,595 [main:103] - replacing (fu18(prope12), String)
2021-03-11 11:55:49,595 [main:38] - replacing fu18(prope12) String
2021-03-11 11:55:49,595 [main:42] - Getting value of type String
2021-03-11 11:55:49,740 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:49,744 [main:46] - GENERATED VALUE OF TYPE String = "tmbmd"
2021-03-11 11:55:49,744 [main:49] - GENERATED IS CALL =false
2021-03-11 11:55:49,911 [main:55] - randomType = Array<Kla8>
2021-03-11 11:55:50,044 [main:302] - generating value of type = Array<Kla8> false depth = 0
2021-03-11 11:55:50,183 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Kla8): Array<Kla8> = TODO()
2021-03-11 11:55:50,187 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Kla8): Array<Kla8> = TODO()
2021-03-11 11:55:50,638 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:55:50,641 [main:302] - generating value of type = Function1<Int, Kla8> false depth = 3
2021-03-11 11:55:50,644 [main:302] - generating value of type = Kla8 false depth = 4
2021-03-11 11:55:50,647 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = ""
}
2021-03-11 11:55:50,647 [main:95] - GENERATED = Array<Kla8>(-1944249004, {a: Int -> Kla8()})
2021-03-11 11:55:50,659 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): Kla8 defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@571b3aae]
2021-03-11 11:55:50,792 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:50,795 [main:66] - Generated call from random type = (Array<Kla8>(-1944249004, {a: Int -> Kla8()})).get(1037038000).prope10
2021-03-11 11:55:50,796 [main:94] - GETTING String from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:55:50,806 [main:94] - GETTING String from Function0<Unit>
2021-03-11 11:55:50,814 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:55:50,820 [main:94] - GETTING String from Continuation<Any?>
2021-03-11 11:55:50,828 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:55:50,829 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:55:50,829 [main:94] - GETTING String from Any?
2021-03-11 11:55:50,832 [main:101] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]]
2021-03-11 11:55:50,832 [main:137] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]
2021-03-11 11:55:50,832 [main:105] - GENERATED CALL = (Kla2().prope4).toString()
2021-03-11 11:55:50,832 [main:110] - replacement of fu18(prope12) of type String is (Kla2().prope4).toString()
2021-03-11 11:55:50,965 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:55:50,965 [main:66] - Compilation checking started
2021-03-11 11:55:51,542 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                Kla8().prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                Kla8().prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (fu16 != "OK_FINALLY" || prope12.prope10 != "rcpfz") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:55:51,543 [main:103] - replacing (prope12.prope10, String)
2021-03-11 11:55:51,543 [main:38] - replacing prope12.prope10 String
2021-03-11 11:55:51,543 [main:42] - Getting value of type String
2021-03-11 11:55:51,677 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:51,680 [main:46] - GENERATED VALUE OF TYPE String = "vizda"
2021-03-11 11:55:51,680 [main:49] - GENERATED IS CALL =false
2021-03-11 11:55:51,687 [main:55] - randomType = ULong
2021-03-11 11:55:51,819 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 11:55:51,849 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUInt(): kotlin.UInt defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@34040a64]
2021-03-11 11:55:51,849 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bf0270]
2021-03-11 11:55:51,983 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:51,986 [main:66] - Generated call from random type = (6373657510650847391.toULong()).toUInt().toString(-253808027)
2021-03-11 11:55:51,987 [main:94] - GETTING String from Boolean
2021-03-11 11:55:51,996 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@69292ca6], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]]
2021-03-11 11:55:51,997 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@69292ca6]
2021-03-11 11:55:52,138 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:55:52,141 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:55:52,275 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:52,279 [main:105] - GENERATED CALL = (Kla5().prope7).compareTo(false).toString(-1156507029)
2021-03-11 11:55:52,279 [main:110] - replacement of prope12.prope10 of type String is "vizda"
2021-03-11 11:55:52,411 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:55:52,411 [main:66] - Compilation checking started
2021-03-11 11:55:52,830 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                Kla8().prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14<String> (
            {
                "vizda" += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                Kla8().prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (fu16 != "OK_FINALLY" || prope12.prope10 != "rcpfz") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:55:52,831 [main:103] - replacing (prope10, String)
2021-03-11 11:55:52,831 [main:38] - replacing prope10 String
2021-03-11 11:55:52,831 [main:42] - Getting value of type String
2021-03-11 11:55:52,964 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:52,967 [main:46] - GENERATED VALUE OF TYPE String = "zynbt"
2021-03-11 11:55:52,967 [main:49] - GENERATED IS CALL =false
2021-03-11 11:55:52,979 [main:55] - randomType = Kla4
2021-03-11 11:55:53,113 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 11:55:53,116 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}
2021-03-11 11:55:53,122 [main:94] - GETTING String from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:55:53,131 [main:94] - GETTING String from EmptyCoroutineContext
2021-03-11 11:55:53,146 [main:94] - GETTING String from Function0<Unit>
2021-03-11 11:55:53,155 [main:94] - GETTING String from Any?
2021-03-11 11:55:53,158 [main:101] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]]
2021-03-11 11:55:53,158 [main:137] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]
2021-03-11 11:55:53,158 [main:105] - GENERATED CALL = (Kla2().prope4).toString()
2021-03-11 11:55:53,158 [main:110] - replacement of prope10 of type String is "zynbt"
2021-03-11 11:55:53,293 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:55:53,293 [main:66] - Compilation checking started
2021-03-11 11:55:53,679 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                Kla8().prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12."zynbt" += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                Kla8().prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (fu16 != "OK_FINALLY" || prope12.prope10 != "rcpfz") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:55:53,680 [main:103] - replacing (fu16 != "OK_FINALLY", Boolean)
2021-03-11 11:55:53,680 [main:38] - replacing fu16 != "OK_FINALLY" Boolean
2021-03-11 11:55:53,680 [main:42] - Getting value of type Boolean
2021-03-11 11:55:53,814 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:55:53,817 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:55:53,817 [main:49] - GENERATED IS CALL =false
2021-03-11 11:55:53,981 [main:55] - randomType = Char?
2021-03-11 11:55:54,114 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:55:54,136 [main:137] - GENERATING call of type public final fun toFloat(): kotlin.Float defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@254ae9bc]
2021-03-11 11:55:54,136 [main:137] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@c844d52]
2021-03-11 11:55:54,137 [main:66] - Generated call from random type = ('')?.toFloat().isFinite()
2021-03-11 11:55:54,137 [main:110] - replacement of fu16 != "OK_FINALLY" of type Boolean is ('')?.toFloat().isFinite()
2021-03-11 11:55:54,270 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:55:54,271 [main:66] - Compilation checking started
2021-03-11 11:55:54,867 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                Kla8().prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                Kla8().prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || prope12.prope10 != "rcpfz") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:55:54,868 [main:103] - replacing (prope12, Kla8)
2021-03-11 11:55:54,868 [main:38] - replacing prope12 Kla8
2021-03-11 11:55:54,868 [main:42] - Getting value of type Kla8
2021-03-11 11:55:55,002 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 11:55:55,005 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = ""
}
2021-03-11 11:55:55,005 [main:46] - GENERATED VALUE OF TYPE Kla8 = Kla8()
2021-03-11 11:55:55,006 [main:49] - GENERATED IS CALL =true
2021-03-11 11:55:55,012 [main:55] - randomType = UInt
2021-03-11 11:55:55,145 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 11:55:55,172 [main:94] - GETTING Kla8 from EmptyCoroutineContext
2021-03-11 11:55:55,187 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:55:55,192 [main:94] - GETTING Kla8 from String
2021-03-11 11:55:55,210 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:55:55,211 [main:94] - GETTING Kla8 from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:55:55,219 [main:94] - GETTING Kla8 from Continuation<Any?>
2021-03-11 11:55:55,226 [main:94] - GETTING Kla8 from Boolean
2021-03-11 11:55:55,234 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:55:55,234 [main:94] - GETTING Kla8 from Function0<Unit>
2021-03-11 11:55:55,244 [main:94] - GETTING Kla8 from String
2021-03-11 11:55:55,245 [main:94] - GETTING Kla8 from Any?
2021-03-11 11:55:55,247 [main:110] - replacement of prope12 of type Kla8 is Kla8()
2021-03-11 11:55:55,381 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:55:55,381 [main:66] - Compilation checking started
2021-03-11 11:55:55,785 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                Kla8().prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                Kla8().prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || prope12.prope10 != "rcpfz") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    Kla8() = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if (fu18 != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:55:55,787 [main:103] - replacing (fu18, String)
2021-03-11 11:55:55,787 [main:38] - replacing fu18 String
2021-03-11 11:55:55,787 [main:42] - Getting value of type String
2021-03-11 11:55:55,923 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:55,926 [main:46] - GENERATED VALUE OF TYPE String = "tlxfn"
2021-03-11 11:55:55,926 [main:49] - GENERATED IS CALL =false
2021-03-11 11:55:56,125 [main:55] - randomType = Kla5?
2021-03-11 11:55:56,261 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 11:55:56,264 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}
2021-03-11 11:55:56,272 [main:94] - GETTING String from Boolean
2021-03-11 11:55:56,281 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@69292ca6], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]]
2021-03-11 11:55:56,281 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@69292ca6]
2021-03-11 11:55:56,415 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:55:56,419 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:55:56,552 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:56,555 [main:105] - GENERATED CALL = (Kla5().prope7).compareTo(false).toString(365892493)
2021-03-11 11:55:56,556 [main:110] - replacement of fu18 of type String is "tlxfn"
2021-03-11 11:55:56,689 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:55:56,689 [main:66] - Compilation checking started
2021-03-11 11:55:57,286 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                Kla8().prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return "OK_FINALLY"
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                Kla8().prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || prope12.prope10 != "rcpfz") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:55:57,287 [main:103] - replacing ("OK_FINALLY", String)
2021-03-11 11:55:57,288 [main:38] - replacing "OK_FINALLY" String
2021-03-11 11:55:57,288 [main:42] - Getting value of type String
2021-03-11 11:55:57,433 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:57,436 [main:46] - GENERATED VALUE OF TYPE String = "ybmzr"
2021-03-11 11:55:57,436 [main:49] - GENERATED IS CALL =false
2021-03-11 11:55:57,442 [main:55] - randomType = Char
2021-03-11 11:55:57,577 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:55:57,598 [main:137] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@36662ddb]
2021-03-11 11:55:57,599 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24abb2e5]
2021-03-11 11:55:57,733 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:55:57,736 [main:66] - Generated call from random type = ('ֻ').toByte().toString(-1659686639)
2021-03-11 11:55:57,738 [main:94] - GETTING String from Continuation<Any?>
2021-03-11 11:55:57,747 [main:94] - GETTING String from Any?
2021-03-11 11:55:57,750 [main:101] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]]
2021-03-11 11:55:57,750 [main:137] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]
2021-03-11 11:55:57,750 [main:105] - GENERATED CALL = (Kla2().prope4).toString()
2021-03-11 11:55:57,750 [main:110] - replacement of "OK_FINALLY" of type String is ('ֻ').toByte().toString(-1659686639)
2021-03-11 11:55:57,888 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:55:57,888 [main:66] - Compilation checking started
2021-03-11 11:55:58,483 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                Kla8().prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                Kla8().prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || prope12.prope10 != "rcpfz") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:55:58,484 [main:103] - replacing (prope12, Kla8)
2021-03-11 11:55:58,485 [main:38] - replacing prope12 Kla8
2021-03-11 11:55:58,485 [main:42] - Getting value of type Kla8
2021-03-11 11:55:58,619 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 11:55:58,622 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = ""
}
2021-03-11 11:55:58,622 [main:46] - GENERATED VALUE OF TYPE Kla8 = Kla8()
2021-03-11 11:55:58,622 [main:49] - GENERATED IS CALL =true
2021-03-11 11:55:58,784 [main:55] - randomType = Long?
2021-03-11 11:55:58,925 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:55:58,961 [main:94] - GETTING Kla8 from EmptyCoroutineContext
2021-03-11 11:55:58,974 [main:94] - GETTING Kla8 from Function0<Unit>
2021-03-11 11:55:58,983 [main:94] - GETTING Kla8 from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:55:58,992 [main:94] - GETTING Kla8 from Continuation<Any?>
2021-03-11 11:55:58,998 [main:94] - GETTING Kla8 from String
2021-03-11 11:55:59,015 [main:94] - GETTING Kla8 from Any?
2021-03-11 11:55:59,019 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:55:59,024 [main:94] - GETTING Kla8 from String
2021-03-11 11:55:59,025 [main:94] - GETTING Kla8 from Boolean
2021-03-11 11:55:59,033 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:55:59,034 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:55:59,034 [main:110] - replacement of prope12 of type Kla8 is Kla8()
2021-03-11 11:55:59,169 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:55:59,169 [main:66] - Compilation checking started
2021-03-11 11:55:59,572 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                Kla8().prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                Kla8().prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || prope12.prope10 != "rcpfz") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    Kla8() = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${prope12.prope10}"

    return "OK"
}


2021-03-11 11:55:59,573 [main:103] - replacing (prope12.prope10, String)
2021-03-11 11:55:59,573 [main:38] - replacing prope12.prope10 String
2021-03-11 11:55:59,573 [main:42] - Getting value of type String
2021-03-11 11:55:59,738 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:55:59,742 [main:46] - GENERATED VALUE OF TYPE String = "yozdq"
2021-03-11 11:55:59,742 [main:49] - GENERATED IS CALL =false
2021-03-11 11:56:01,054 [main:55] - randomType = Function1<Sequence<Kla5>, HashMap<Kla0, HashSet<Double?>?>?>
2021-03-11 11:56:01,055 [main:94] - GETTING String from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:56:01,064 [main:94] - GETTING String from Any?
2021-03-11 11:56:01,067 [main:101] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]]
2021-03-11 11:56:01,067 [main:137] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]
2021-03-11 11:56:01,067 [main:105] - GENERATED CALL = (Kla2().prope4).toString()
2021-03-11 11:56:01,067 [main:110] - replacement of prope12.prope10 of type String is "yozdq"
2021-03-11 11:56:01,201 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:56:01,201 [main:66] - Compilation checking started
2021-03-11 11:56:01,762 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                Kla8().prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                Kla8().prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || prope12.prope10 != "rcpfz") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return "OK"
}


2021-03-11 11:56:01,763 [main:103] - replacing (prope10, String)
2021-03-11 11:56:01,764 [main:38] - replacing prope10 String
2021-03-11 11:56:01,764 [main:42] - Getting value of type String
2021-03-11 11:56:01,900 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:56:01,903 [main:46] - GENERATED VALUE OF TYPE String = "dbdlc"
2021-03-11 11:56:01,903 [main:49] - GENERATED IS CALL =false
2021-03-11 11:56:01,911 [main:55] - randomType = Boolean
2021-03-11 11:56:02,048 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:56:02,060 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@69292ca6]
2021-03-11 11:56:02,195 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:56:02,198 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:56:02,334 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:02,337 [main:66] - Generated call from random type = (false).compareTo(false).toString(-956151769)
2021-03-11 11:56:02,338 [main:94] - GETTING String from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:56:02,347 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:56:02,353 [main:94] - GETTING String from Any?
2021-03-11 11:56:02,356 [main:101] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]]
2021-03-11 11:56:02,356 [main:137] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]
2021-03-11 11:56:02,356 [main:105] - GENERATED CALL = (Kla2().prope4).toString()
2021-03-11 11:56:02,356 [main:110] - replacement of prope10 of type String is "dbdlc"
2021-03-11 11:56:02,491 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:56:02,491 [main:66] - Compilation checking started
2021-03-11 11:56:02,885 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                Kla8().prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                Kla8().prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12."dbdlc" != "OK_LOCAL, OK_FINALLY") return "test1: ${fu15}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || prope12.prope10 != "rcpfz") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return "OK"
}


2021-03-11 11:56:02,886 [main:103] - replacing (fu15, String)
2021-03-11 11:56:02,886 [main:38] - replacing fu15 String
2021-03-11 11:56:02,886 [main:42] - Getting value of type String
2021-03-11 11:56:03,021 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:56:03,024 [main:46] - GENERATED VALUE OF TYPE String = "slfvw"
2021-03-11 11:56:03,024 [main:49] - GENERATED IS CALL =false
2021-03-11 11:56:04,704 [main:55] - randomType = List<Function2<ArrayList<Char>, ArrayDeque<Double?>, MutableMap<UByte?, Kla4>>>?
2021-03-11 11:56:04,705 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:56:04,712 [main:94] - GETTING String from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:56:04,720 [main:94] - GETTING String from String
2021-03-11 11:56:04,736 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2868a883], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]]
2021-03-11 11:56:04,736 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2868a883]
2021-03-11 11:56:04,871 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:56:04,874 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:56:05,009 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:05,013 [main:105] - GENERATED CALL = (Kla0().prope2).compareTo("ajlyo").toString(561120164)
2021-03-11 11:56:05,013 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f95b904]]
2021-03-11 11:56:05,013 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f95b904]
2021-03-11 11:56:05,149 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:05,288 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:05,428 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:56:05,434 [main:105] - GENERATED CALL = (Kla0().prope2).replaceRange(-1843181798, -423248309, StringBuilder())
2021-03-11 11:56:05,434 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@185349f8]]
2021-03-11 11:56:05,434 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@185349f8]
2021-03-11 11:56:05,570 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 11:56:05,573 [main:302] - generating value of type = Char true depth = 1
2021-03-11 11:56:05,577 [main:105] - GENERATED CALL = (Kla0().prope2).replaceFirstChar({a: Char -> 'ɬ'})
2021-03-11 11:56:05,577 [main:101] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e6673fa]]
2021-03-11 11:56:05,577 [main:137] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e6673fa]
2021-03-11 11:56:05,713 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:56:05,716 [main:105] - GENERATED CALL = (Kla0().prope2).trimMargin("iwcal")
2021-03-11 11:56:05,717 [main:101] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e18efcd]]
2021-03-11 11:56:05,717 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e18efcd]
2021-03-11 11:56:05,852 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:56:05,990 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:56:06,129 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:56:06,132 [main:105] - GENERATED CALL = (Kla0().prope2).replaceAfter('⪳', "jfkuq", "vynui")
2021-03-11 11:56:06,132 [main:101] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bb1ac4]]
2021-03-11 11:56:06,133 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bb1ac4]
2021-03-11 11:56:06,268 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:56:06,274 [main:105] - GENERATED CALL = (Kla0().prope2).removePrefix("lemqr")
2021-03-11 11:56:06,274 [main:101] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b4b6762]]
2021-03-11 11:56:06,275 [main:137] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b4b6762]
2021-03-11 11:56:06,275 [main:105] - GENERATED CALL = (Kla0().prope2).capitalize()
2021-03-11 11:56:06,275 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2f6d9f0f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]]
2021-03-11 11:56:06,275 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:56:06,413 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:06,417 [main:105] - GENERATED CALL = (Kla0().prope2).length.toString(50877759)
2021-03-11 11:56:06,417 [main:101] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f07eaf7]]
2021-03-11 11:56:06,417 [main:137] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f07eaf7]
2021-03-11 11:56:06,554 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:56:06,694 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 11:56:06,698 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 11:56:07,036 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 11:56:07,176 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 11:56:07,180 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 11:56:07,473 [main:302] - generating value of type = CharSequence false depth = 6
2021-03-11 11:56:07,479 [main:95] - GENERATED = StringBuilder("jgxhl")
2021-03-11 11:56:07,480 [main:95] - GENERATED = StringBuilder(StringBuilder("jgxhl"))
2021-03-11 11:56:07,480 [main:105] - GENERATED CALL = (Kla0().prope2).removeSurrounding(StringBuilder(StringBuilder("jgxhl")))
2021-03-11 11:56:07,480 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d43a4]]
2021-03-11 11:56:07,480 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d43a4]
2021-03-11 11:56:07,480 [main:105] - GENERATED CALL = (Kla0().prope2).uppercase()
2021-03-11 11:56:07,480 [main:110] - replacement of fu15 of type String is (Kla0().prope2).removeSurrounding(StringBuilder(StringBuilder("jgxhl")))
2021-03-11 11:56:07,612 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:56:07,613 [main:66] - Compilation checking started
2021-03-11 11:56:08,181 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                Kla8().prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                Kla8().prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${(Kla0().prope2).removeSurrounding(StringBuilder(StringBuilder("jgxhl")))}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || prope12.prope10 != "rcpfz") return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return "OK"
}


2021-03-11 11:56:08,182 [main:103] - replacing (prope12.prope10 != "rcpfz", Boolean)
2021-03-11 11:56:08,182 [main:38] - replacing prope12.prope10 != "rcpfz" Boolean
2021-03-11 11:56:08,182 [main:42] - Getting value of type Boolean
2021-03-11 11:56:08,319 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:56:08,322 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:56:08,322 [main:49] - GENERATED IS CALL =false
2021-03-11 11:56:08,329 [main:55] - randomType = Long
2021-03-11 11:56:08,464 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:56:08,498 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@6c6e45d2]
2021-03-11 11:56:08,634 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:56:08,634 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7081d87d]
2021-03-11 11:56:08,770 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:56:08,773 [main:66] - Generated call from random type = (-8716899877152692504).equals("hxpwk").or(true)
2021-03-11 11:56:08,774 [main:94] - GETTING Boolean from EmptyCoroutineContext
2021-03-11 11:56:08,788 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@50d24f65], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7081d87d]]
2021-03-11 11:56:08,788 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@50d24f65]
2021-03-11 11:56:08,924 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:56:08,924 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7081d87d]
2021-03-11 11:56:09,060 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:56:09,063 [main:105] - GENERATED CALL = (Kla2().context).equals("uhjll").or(false)
2021-03-11 11:56:09,063 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@50d24f65]]
2021-03-11 11:56:09,063 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@50d24f65]
2021-03-11 11:56:09,198 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:56:09,198 [main:105] - GENERATED CALL = (Kla2().context).equals("bvhja")
2021-03-11 11:56:09,198 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@50d24f65], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e0b3dde]]
2021-03-11 11:56:09,198 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@50d24f65]
2021-03-11 11:56:09,334 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:56:09,334 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e0b3dde]
2021-03-11 11:56:09,470 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:56:09,471 [main:105] - GENERATED CALL = (Kla2().context).equals("rkmqi").equals("kankt")
2021-03-11 11:56:09,471 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@50d24f65], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@60e33fd5]]
2021-03-11 11:56:09,471 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@50d24f65]
2021-03-11 11:56:09,606 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:56:09,606 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@60e33fd5]
2021-03-11 11:56:09,742 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:56:09,745 [main:105] - GENERATED CALL = (Kla2().context).equals("gmkdl").and(true)
2021-03-11 11:56:09,746 [main:101] - Case = [public open fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@7e18ca], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext.Element[DeserializedSimpleFunctionDescriptor@5bb462b4]]
2021-03-11 11:56:09,746 [main:137] - GENERATING call of type public open fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@7e18ca]
2021-03-11 11:56:09,882 [main:302] - generating value of type = Key<E> false depth = 0
2021-03-11 11:56:10,028 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-11 11:56:10,032 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-11 11:56:10,547 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-11 11:56:10,547 [main:144] - CANT GENERATE PARAMS FOR public open fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@7e18ca]
2021-03-11 11:56:10,548 [main:101] - Case = [public open fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@48af3778], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@76e6e88b]]
2021-03-11 11:56:10,548 [main:137] - GENERATING call of type public open fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@48af3778]
2021-03-11 11:56:10,683 [main:302] - generating value of type = R false depth = 0
2021-03-11 11:56:11,831 [main:43] - GENERATING CALL OF fun <R> run(block: ()->MutableMap<ULong?, Pair<Kla8, MutableMap<Kla4, Kla6>>>): R = TODO()
2021-03-11 11:56:11,836 [main:61] - WITHOUT TYPE PARAMS = fun <R> run(block: ()->MutableMap<ULong?, Pair<Kla8, MutableMap<Kla4, Kla6>>>): R = TODO()
2021-03-11 11:56:12,149 [main:302] - generating value of type = Function0<MutableMap<ULong?, Pair<Kla8, MutableMap<Kla4, Kla6>>>> false depth = 3
2021-03-11 11:56:12,152 [main:302] - generating value of type = MutableMap<ULong?, Pair<Kla8, MutableMap<Kla4, Kla6>>> false depth = 4
2021-03-11 11:56:12,296 [main:43] - GENERATING CALL OF fun <K, V> mutableMapOf(pairs: Pair<ULong?, Pair<Kla8, MutableMap<Kla4, Kla6>>>): MutableMap<ULong?, Pair<Kla8, MutableMap<Kla4, Kla6>>> = TODO()
2021-03-11 11:56:12,300 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> mutableMapOf(pairs: Pair<ULong?, Pair<Kla8, MutableMap<Kla4, Kla6>>>): MutableMap<ULong?, Pair<Kla8, MutableMap<Kla4, Kla6>>> = TODO()
2021-03-11 11:56:12,443 [main:302] - generating value of type = Pair<ULong?, Pair<Kla8, MutableMap<Kla4, Kla6>>> false depth = 7
2021-03-11 11:56:12,588 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: ULong?, second: Pair<Kla8, MutableMap<Kla4, Kla6>>): Pair<ULong?, Pair<Kla8, MutableMap<Kla4, Kla6>>> = TODO()
2021-03-11 11:56:12,592 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: ULong?, second: Pair<Kla8, MutableMap<Kla4, Kla6>>): Pair<ULong?, Pair<Kla8, MutableMap<Kla4, Kla6>>> = TODO()
2021-03-11 11:56:12,737 [main:302] - generating value of type = ULong true depth = 10
2021-03-11 11:56:12,740 [main:302] - generating value of type = Pair<Kla8, MutableMap<Kla4, Kla6>> false depth = 10
2021-03-11 11:56:12,883 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla8, second: MutableMap<Kla4, Kla6>): Pair<Kla8, MutableMap<Kla4, Kla6>> = TODO()
2021-03-11 11:56:12,888 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla8, second: MutableMap<Kla4, Kla6>): Pair<Kla8, MutableMap<Kla4, Kla6>> = TODO()
2021-03-11 11:56:13,030 [main:302] - generating value of type = Kla8 false depth = 13
2021-03-11 11:56:13,033 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = ""
}
2021-03-11 11:56:13,033 [main:302] - generating value of type = MutableMap<Kla4, Kla6> false depth = 13
2021-03-11 11:56:13,176 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(original: kotlin.collections.Map<Kla4, Kla6>): MutableMap<Kla4, Kla6> = TODO()
2021-03-11 11:56:13,180 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(original: kotlin.collections.Map<Kla4, Kla6>): MutableMap<Kla4, Kla6> = TODO()
2021-03-11 11:56:13,494 [main:302] - generating value of type = Map<Kla4, Kla6> false depth = 16
2021-03-11 11:56:13,494 [main:385] - Cant generate call of fun <K, V> LinkedHashMap(original: kotlin.collections.Map<Kla4, Kla6>): MutableMap<Kla4, Kla6> = TODO()
2021-03-11 11:56:13,494 [main:385] - Cant generate call of fun <A, B> Pair(first: Kla8, second: MutableMap<Kla4, Kla6>): Pair<Kla8, MutableMap<Kla4, Kla6>> = TODO()
2021-03-11 11:56:13,494 [main:385] - Cant generate call of fun <A, B> Pair(first: ULong?, second: Pair<Kla8, MutableMap<Kla4, Kla6>>): Pair<ULong?, Pair<Kla8, MutableMap<Kla4, Kla6>>> = TODO()
2021-03-11 11:56:13,494 [main:385] - Cant generate call of fun <K, V> mutableMapOf(pairs: Pair<ULong?, Pair<Kla8, MutableMap<Kla4, Kla6>>>): MutableMap<ULong?, Pair<Kla8, MutableMap<Kla4, Kla6>>> = TODO()
2021-03-11 11:56:13,495 [main:95] - GENERATED = run<MutableMap<ULong?, Pair<Kla8, MutableMap<Kla4, Kla6>>>>({ })
2021-03-11 11:56:13,630 [main:302] - generating value of type = Function2<R, Element, R> false depth = 0
2021-03-11 11:56:13,633 [main:302] - generating value of type = R false depth = 1
2021-03-11 11:56:14,111 [main:43] - GENERATING CALL OF fun <R> synchronized(lock: kotlin.Any, block: ()->ArrayList<Byte>): R = TODO()
2021-03-11 11:56:14,115 [main:61] - WITHOUT TYPE PARAMS = fun <R> synchronized(lock: kotlin.Any, block: ()->ArrayList<Byte>): R = TODO()
2021-03-11 11:56:14,612 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:56:14,612 [main:302] - generating value of type = Function0<ArrayList<Byte>> false depth = 4
2021-03-11 11:56:14,615 [main:302] - generating value of type = ArrayList<Byte> false depth = 5
2021-03-11 11:56:14,756 [main:43] - GENERATING CALL OF fun <E> ArrayList(initialCapacity: kotlin.Int): ArrayList<Byte> = TODO()
2021-03-11 11:56:14,760 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(initialCapacity: kotlin.Int): ArrayList<Byte> = TODO()
2021-03-11 11:56:15,056 [main:302] - generating value of type = Int true depth = 8
2021-03-11 11:56:15,060 [main:95] - GENERATED = ArrayList<Byte>(-840956877)
2021-03-11 11:56:15,060 [main:95] - GENERATED = synchronized<ArrayList<Byte>>("tmuaj", { ArrayList<Byte>(-840956877)})
2021-03-11 11:56:15,060 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@76e6e88b]
2021-03-11 11:56:15,195 [main:302] - generating value of type = T false depth = 0
2021-03-11 11:56:15,343 [main:43] - GENERATING CALL OF fun <T> minOf(a: UByte, b: UByte, c: UByte, comparator: kotlin.Comparator<UByte>): T = TODO()
2021-03-11 11:56:15,347 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: UByte, b: UByte, c: UByte, comparator: kotlin.Comparator<UByte>): T = TODO()
2021-03-11 11:56:15,652 [main:302] - generating value of type = UByte true depth = 3
2021-03-11 11:56:15,655 [main:302] - generating value of type = UByte true depth = 3
2021-03-11 11:56:15,658 [main:302] - generating value of type = UByte true depth = 3
2021-03-11 11:56:15,661 [main:302] - generating value of type = Comparator<UByte> false depth = 3
2021-03-11 11:56:15,806 [main:43] - GENERATING CALL OF fun <T> compareBy(selectors: Function1<UByte, Comparable<*>?>): Comparator<UByte> = TODO()
2021-03-11 11:56:15,810 [main:61] - WITHOUT TYPE PARAMS = fun <T> compareBy(selectors: Function1<UByte, Comparable<*>?>): Comparator<UByte> = TODO()
2021-03-11 11:56:15,953 [main:302] - generating value of type = Function1<UByte, Comparable<*>?> false depth = 6
2021-03-11 11:56:15,957 [main:302] - generating value of type = Comparable<*> false depth = 7
2021-03-11 11:56:15,964 [main:95] - GENERATED = compareBy<UByte>({a: UByte -> true})
2021-03-11 11:56:15,964 [main:95] - GENERATED = minOf<UByte>(34.toUByte(), 77.toUByte(), 86.toUByte(), compareBy<UByte>({a: UByte -> true}))
2021-03-11 11:56:15,965 [main:105] - GENERATED CALL = (Kla2().context).fold(run<MutableMap<ULong?, Pair<Kla8, MutableMap<Kla4, Kla6>>>>({ }), {a: R, b: Element -> synchronized<ArrayList<Byte>>("tmuaj", { ArrayList<Byte>(-840956877)})})?.contains(minOf<UByte>(34.toUByte(), 77.toUByte(), 86.toUByte(), compareBy<UByte>({a: UByte -> true})))
2021-03-11 11:56:15,965 [main:101] - Case = [public open fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@48af3778], public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@1badd75d]]
2021-03-11 11:56:15,965 [main:137] - GENERATING call of type public open fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@48af3778]
2021-03-11 11:56:16,099 [main:302] - generating value of type = R false depth = 0
2021-03-11 11:56:16,919 [main:43] - GENERATING CALL OF fun <R> run(block: ()->Collection<Function1<Map<Boolean, String>, Kla6>>): R = TODO()
2021-03-11 11:56:16,923 [main:61] - WITHOUT TYPE PARAMS = fun <R> run(block: ()->Collection<Function1<Map<Boolean, String>, Kla6>>): R = TODO()
2021-03-11 11:56:17,231 [main:302] - generating value of type = Function0<Collection<Function1<Map<Boolean, String>, Kla6>>> false depth = 3
2021-03-11 11:56:17,235 [main:302] - generating value of type = Collection<Function1<Map<Boolean, String>, Kla6>> false depth = 4
2021-03-11 11:56:17,378 [main:43] - GENERATING CALL OF fun UByteArray(size: kotlin.Int): Collection<Function1<Map<Boolean, String>, Kla6>> = TODO()
2021-03-11 11:56:17,382 [main:61] - WITHOUT TYPE PARAMS = fun UByteArray(size: kotlin.Int): Collection<Function1<Map<Boolean, String>, Kla6>> = TODO()
2021-03-11 11:56:17,680 [main:302] - generating value of type = Int true depth = 7
2021-03-11 11:56:17,683 [main:95] - GENERATED = UByteArray(-1110739640)
2021-03-11 11:56:17,684 [main:95] - GENERATED = run<Collection<Function1<Map<Boolean, String>, Kla6>>>({ UByteArray(-1110739640)})
2021-03-11 11:56:17,818 [main:302] - generating value of type = Function2<R, Element, R> false depth = 0
2021-03-11 11:56:17,822 [main:302] - generating value of type = R false depth = 1
2021-03-11 11:56:18,319 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: UShort?, block: T.()->Long): R = TODO()
2021-03-11 11:56:18,323 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: UShort?, block: T.()->Long): R = TODO()
2021-03-11 11:56:18,624 [main:302] - generating value of type = UShort true depth = 4
2021-03-11 11:56:18,628 [main:385] - Cant generate call of fun <T, R> with(receiver: UShort?, block: T.()->Long): R = TODO()
2021-03-11 11:56:18,628 [main:137] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@1badd75d]
2021-03-11 11:56:18,765 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:56:18,765 [main:105] - GENERATED CALL = (Kla2().context).fold(run<Collection<Function1<Map<Boolean, String>, Kla6>>>({ UByteArray(-1110739640)}), {a: R, b: Element -> })?.equals("fkuuz")
2021-03-11 11:56:18,765 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@50d24f65], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@506d92ca]]
2021-03-11 11:56:18,766 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@50d24f65]
2021-03-11 11:56:18,901 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:56:18,902 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@506d92ca]
2021-03-11 11:56:18,902 [main:105] - GENERATED CALL = (Kla2().context).equals("ydbco").not()
2021-03-11 11:56:18,902 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@50d24f65], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7606cd62]]
2021-03-11 11:56:18,902 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@50d24f65]
2021-03-11 11:56:19,039 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:56:19,039 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7606cd62]
2021-03-11 11:56:19,174 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:56:19,177 [main:105] - GENERATED CALL = (Kla2().context).equals("rswqz").xor(false)
2021-03-11 11:56:19,177 [main:101] - Case = [public open fun minusKey(key: kotlin.coroutines.CoroutineContext.Key<*>): kotlin.coroutines.CoroutineContext defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@71331a5b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@54d98780]]
2021-03-11 11:56:19,177 [main:137] - GENERATING call of type public open fun minusKey(key: kotlin.coroutines.CoroutineContext.Key<*>): kotlin.coroutines.CoroutineContext defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@71331a5b]
2021-03-11 11:56:19,314 [main:302] - generating value of type = Key<*> false depth = 0
2021-03-11 11:56:19,459 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:56:19,463 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:56:19,934 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:56:19,934 [main:144] - CANT GENERATE PARAMS FOR public open fun minusKey(key: kotlin.coroutines.CoroutineContext.Key<*>): kotlin.coroutines.CoroutineContext defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@71331a5b]
2021-03-11 11:56:19,934 [main:110] - replacement of prope12.prope10 != "rcpfz" of type Boolean is (Kla2().context).equals("rkmqi").equals("kankt")
2021-03-11 11:56:20,069 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:56:20,070 [main:66] - Compilation checking started
2021-03-11 11:56:20,659 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                Kla8().prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                Kla8().prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${(Kla0().prope2).removeSurrounding(StringBuilder(StringBuilder("jgxhl")))}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return "OK"
}


2021-03-11 11:56:20,660 [main:103] - replacing (prope10, String)
2021-03-11 11:56:20,660 [main:38] - replacing prope10 String
2021-03-11 11:56:20,660 [main:42] - Getting value of type String
2021-03-11 11:56:20,805 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:56:20,808 [main:46] - GENERATED VALUE OF TYPE String = "wtbrt"
2021-03-11 11:56:20,808 [main:49] - GENERATED IS CALL =false
2021-03-11 11:56:20,972 [main:55] - randomType = ULong?
2021-03-11 11:56:21,108 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 11:56:21,154 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@51e924a]
2021-03-11 11:56:21,155 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@217eac56]
2021-03-11 11:56:21,292 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:21,295 [main:66] - Generated call from random type = (1359870897391163816.toULong())?.toUShort().toString(-962375622)
2021-03-11 11:56:21,296 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:56:21,303 [main:94] - GETTING String from Continuation<Any?>
2021-03-11 11:56:21,311 [main:94] - GETTING String from Function0<Unit>
2021-03-11 11:56:21,319 [main:94] - GETTING String from Boolean
2021-03-11 11:56:21,328 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@69292ca6], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]]
2021-03-11 11:56:21,328 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@69292ca6]
2021-03-11 11:56:21,464 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:56:21,467 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:56:21,605 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:21,608 [main:105] - GENERATED CALL = (Kla5().prope7).compareTo(true).toString(2005488670)
2021-03-11 11:56:21,608 [main:110] - replacement of prope10 of type String is (1359870897391163816.toULong())?.toUShort().toString(-962375622)
2021-03-11 11:56:21,752 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:56:21,752 [main:66] - Compilation checking started
2021-03-11 11:56:22,185 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                Kla8().prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.(1359870897391163816.toULong())?.toUShort().toString(-962375622) += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                Kla8().prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${(Kla0().prope2).removeSurrounding(StringBuilder(StringBuilder("jgxhl")))}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return "OK"
}


2021-03-11 11:56:22,186 [main:103] - replacing (Kla8().prope10, String)
2021-03-11 11:56:22,186 [main:38] - replacing Kla8().prope10 String
2021-03-11 11:56:22,187 [main:42] - Getting value of type String
2021-03-11 11:56:22,322 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:56:22,325 [main:46] - GENERATED VALUE OF TYPE String = "ayucg"
2021-03-11 11:56:22,325 [main:49] - GENERATED IS CALL =false
2021-03-11 11:56:22,338 [main:55] - randomType = Kla1
2021-03-11 11:56:22,473 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 11:56:22,476 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}
2021-03-11 11:56:22,611 [main:194] - Type params = []
2021-03-11 11:56:22,746 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 11:56:22,888 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:56:22,892 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:56:23,209 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 11:56:23,354 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:56:23,359 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:56:23,828 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:56:23,828 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:56:23,842 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:56:23,848 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:56:23,848 [main:94] - GETTING String from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:56:23,856 [main:94] - GETTING String from String
2021-03-11 11:56:23,873 [main:101] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c17c9dd]]
2021-03-11 11:56:23,873 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c17c9dd]
2021-03-11 11:56:24,010 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:56:24,149 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:56:24,152 [main:105] - GENERATED CALL = (Kla0().prope2).replaceIndentByMargin("szbbb", "zktod")
2021-03-11 11:56:24,152 [main:101] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cd3e5fa]]
2021-03-11 11:56:24,152 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cd3e5fa]
2021-03-11 11:56:24,291 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:24,294 [main:105] - GENERATED CALL = (Kla0().prope2).repeat(573961455)
2021-03-11 11:56:24,295 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25fa343]]
2021-03-11 11:56:24,295 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2]
2021-03-11 11:56:24,430 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:24,434 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25fa343]
2021-03-11 11:56:24,569 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:56:24,573 [main:105] - GENERATED CALL = (Kla0().prope2).get(261720981).plus("ymast")
2021-03-11 11:56:24,573 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75aa15bd]]
2021-03-11 11:56:24,573 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75aa15bd]
2021-03-11 11:56:24,573 [main:105] - GENERATED CALL = (Kla0().prope2).trim()
2021-03-11 11:56:24,573 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cd3e5fa]]
2021-03-11 11:56:24,573 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9]
2021-03-11 11:56:24,718 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:24,855 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:24,859 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cd3e5fa]
2021-03-11 11:56:24,994 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:24,997 [main:105] - GENERATED CALL = (Kla0().prope2).subSequence(-1384319612, -888350820).repeat(-205823694)
2021-03-11 11:56:24,998 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31bcf16b]]
2021-03-11 11:56:24,998 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31bcf16b]
2021-03-11 11:56:24,998 [main:105] - GENERATED CALL = (Kla0().prope2).trimEnd()
2021-03-11 11:56:24,998 [main:101] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ba808ab]]
2021-03-11 11:56:24,998 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ba808ab]
2021-03-11 11:56:25,135 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:25,275 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:56:25,278 [main:105] - GENERATED CALL = (Kla0().prope2).padEnd(-642069868, '幜')
2021-03-11 11:56:25,278 [main:101] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bd79144]]
2021-03-11 11:56:25,278 [main:137] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bd79144]
2021-03-11 11:56:25,415 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 11:56:25,418 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:56:25,422 [main:105] - GENERATED CALL = (Kla0().prope2).filterIndexed({a: Int, b: Char -> false})
2021-03-11 11:56:25,422 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d922029]]
2021-03-11 11:56:25,422 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9]
2021-03-11 11:56:25,558 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:25,699 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:25,702 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d922029]
2021-03-11 11:56:25,839 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 11:56:26,019 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 11:56:26,024 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 11:56:26,332 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:56:26,335 [main:95] - GENERATED = Regex("lmfqc")
2021-03-11 11:56:26,470 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-11 11:56:26,473 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 11:56:26,615 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 11:56:26,619 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 11:56:26,916 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:56:26,920 [main:95] - GENERATED = StringBuilder(2140354816)
2021-03-11 11:56:26,920 [main:105] - GENERATED CALL = (Kla0().prope2).subSequence(-626954190, 1064686205).replace(Regex("lmfqc"), {a: MatchResult -> StringBuilder(2140354816)})
2021-03-11 11:56:26,920 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64a3bad2]]
2021-03-11 11:56:26,920 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64a3bad2]
2021-03-11 11:56:26,920 [main:105] - GENERATED CALL = (Kla0().prope2).lowercase()
2021-03-11 11:56:26,920 [main:110] - replacement of Kla8().prope10 of type String is (Kla0().prope2).filterIndexed({a: Int, b: Char -> false})
2021-03-11 11:56:27,056 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:56:27,056 [main:66] - Compilation checking started
2021-03-11 11:56:27,457 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                (Kla0().prope2).filterIndexed({a: Int, b: Char -> false}) += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                Kla8().prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${(Kla0().prope2).removeSurrounding(StringBuilder(StringBuilder("jgxhl")))}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return "OK"
}


2021-03-11 11:56:27,458 [main:103] - replacing (prope10, String)
2021-03-11 11:56:27,458 [main:38] - replacing prope10 String
2021-03-11 11:56:27,458 [main:42] - Getting value of type String
2021-03-11 11:56:27,595 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:56:27,598 [main:46] - GENERATED VALUE OF TYPE String = "hpiva"
2021-03-11 11:56:27,598 [main:49] - GENERATED IS CALL =false
2021-03-11 11:56:27,605 [main:55] - randomType = Float
2021-03-11 11:56:27,741 [main:302] - generating value of type = Float true depth = 0
2021-03-11 11:56:27,778 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e0fbc9]
2021-03-11 11:56:27,779 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:56:27,917 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:27,920 [main:66] - Generated call from random type = (0.18780506f).toInt().toString(-299913564)
2021-03-11 11:56:27,921 [main:94] - GETTING String from Boolean
2021-03-11 11:56:27,930 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@69292ca6], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]]
2021-03-11 11:56:27,930 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@69292ca6]
2021-03-11 11:56:28,066 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:56:28,070 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:56:28,228 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:28,233 [main:105] - GENERATED CALL = (Kla5().prope7).compareTo(false).toString(-1985911220)
2021-03-11 11:56:28,233 [main:110] - replacement of prope10 of type String is (Kla5().prope7).compareTo(false).toString(-1985911220)
2021-03-11 11:56:28,377 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:56:28,377 [main:66] - Compilation checking started
2021-03-11 11:56:28,774 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                Kla8().prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.(Kla5().prope7).compareTo(false).toString(-1985911220) += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                Kla8().prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${(Kla0().prope2).removeSurrounding(StringBuilder(StringBuilder("jgxhl")))}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return "OK"
}


2021-03-11 11:56:28,776 [main:103] - replacing (prope12, Kla8)
2021-03-11 11:56:28,776 [main:38] - replacing prope12 Kla8
2021-03-11 11:56:28,776 [main:42] - Getting value of type Kla8
2021-03-11 11:56:28,911 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 11:56:28,915 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = ""
}
2021-03-11 11:56:28,915 [main:46] - GENERATED VALUE OF TYPE Kla8 = Kla8()
2021-03-11 11:56:28,915 [main:49] - GENERATED IS CALL =true
2021-03-11 11:56:29,245 [main:55] - randomType = LinkedHashSet<ArrayList<UInt>>
2021-03-11 11:56:29,389 [main:302] - generating value of type = LinkedHashSet<ArrayList<UInt>> false depth = 0
2021-03-11 11:56:29,532 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<ArrayList<UInt>> = TODO()
2021-03-11 11:56:29,536 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<ArrayList<UInt>> = TODO()
2021-03-11 11:56:29,681 [main:95] - GENERATED = linkedSetOf<ArrayList<UInt>>()
2021-03-11 11:56:29,820 [main:94] - GETTING Kla8 from Continuation<Any?>
2021-03-11 11:56:29,828 [main:94] - GETTING Kla8 from Boolean
2021-03-11 11:56:29,836 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:56:29,843 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:56:29,843 [main:94] - GETTING Kla8 from String
2021-03-11 11:56:29,862 [main:94] - GETTING Kla8 from Any?
2021-03-11 11:56:29,865 [main:94] - GETTING Kla8 from String
2021-03-11 11:56:29,867 [main:94] - GETTING Kla8 from EmptyCoroutineContext
2021-03-11 11:56:29,881 [main:94] - GETTING Kla8 from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:56:29,922 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:56:29,923 [main:94] - GETTING Kla8 from Function0<Unit>
2021-03-11 11:56:29,931 [main:110] - replacement of prope12 of type Kla8 is Kla8()
2021-03-11 11:56:30,069 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:56:30,070 [main:66] - Compilation checking started
2021-03-11 11:56:30,464 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                Kla8().prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                Kla8().prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${(Kla0().prope2).removeSurrounding(StringBuilder(StringBuilder("jgxhl")))}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    Kla8() = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return "OK"
}


2021-03-11 11:56:30,465 [main:103] - replacing ("OK_NONLOCAL, OK_FINALLY", String)
2021-03-11 11:56:30,466 [main:38] - replacing "OK_NONLOCAL, OK_FINALLY" String
2021-03-11 11:56:30,466 [main:42] - Getting value of type String
2021-03-11 11:56:30,602 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:56:30,605 [main:46] - GENERATED VALUE OF TYPE String = "bpxdy"
2021-03-11 11:56:30,605 [main:49] - GENERATED IS CALL =false
2021-03-11 11:56:30,767 [main:55] - randomType = Kla6
2021-03-11 11:56:30,904 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 11:56:30,907 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:56:30,927 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:56:30,932 [main:94] - GETTING String from String
2021-03-11 11:56:30,950 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d922029]]
2021-03-11 11:56:30,950 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9]
2021-03-11 11:56:31,089 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:31,236 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:31,239 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d922029]
2021-03-11 11:56:31,375 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 11:56:31,517 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 11:56:31,521 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 11:56:31,993 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:56:31,996 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-11 11:56:32,138 [main:43] - GENERATING CALL OF fun <T> setOf(): Set<RegexOption> = TODO()
2021-03-11 11:56:32,143 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(): Set<RegexOption> = TODO()
2021-03-11 11:56:32,286 [main:95] - GENERATED = setOf<RegexOption>()
2021-03-11 11:56:32,286 [main:95] - GENERATED = Regex("zdrss", setOf<RegexOption>())
2021-03-11 11:56:32,423 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-11 11:56:32,426 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 11:56:32,432 [main:105] - GENERATED CALL = (fu1()).subSequence(758383884, 880347888).replace(Regex("zdrss", setOf<RegexOption>()), {a: MatchResult -> "jfyuc"})
2021-03-11 11:56:32,433 [main:101] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4500af19]]
2021-03-11 11:56:32,433 [main:137] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4500af19]
2021-03-11 11:56:32,568 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:56:32,713 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:56:32,717 [main:105] - GENERATED CALL = (fu1()).substringAfter('벻', "yjjcc")
2021-03-11 11:56:32,717 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69bee298]]
2021-03-11 11:56:32,717 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69bee298]
2021-03-11 11:56:32,717 [main:105] - GENERATED CALL = (fu1()).trimStart()
2021-03-11 11:56:32,717 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c892d1f]]
2021-03-11 11:56:32,717 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9]
2021-03-11 11:56:32,851 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:32,990 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:32,994 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c892d1f]
2021-03-11 11:56:33,128 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 11:56:33,270 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 11:56:33,275 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 11:56:33,744 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:56:33,747 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-11 11:56:33,892 [main:43] - GENERATING CALL OF fun <E> buildSet(capacity: kotlin.Int, builderAction: kotlin.collections.MutableSet<RegexOption>.()->kotlin.Unit): Set<RegexOption> = TODO()
2021-03-11 11:56:33,896 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildSet(capacity: kotlin.Int, builderAction: kotlin.collections.MutableSet<RegexOption>.()->kotlin.Unit): Set<RegexOption> = TODO()
2021-03-11 11:56:34,415 [main:302] - generating value of type = Int true depth = 6
2021-03-11 11:56:34,418 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableSet<RegexOption>, Unit> false depth = 6
2021-03-11 11:56:34,422 [main:302] - generating value of type = Unit false depth = 7
2021-03-11 11:56:34,562 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:56:34,566 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:56:34,864 [main:302] - generating value of type = Boolean true depth = 10
2021-03-11 11:56:34,868 [main:95] - GENERATED = require(true)
2021-03-11 11:56:34,868 [main:95] - GENERATED = buildSet<RegexOption>(-804163349, { require(true)})
2021-03-11 11:56:34,868 [main:95] - GENERATED = Regex("ujmdx", buildSet<RegexOption>(-804163349, { require(true)}))
2021-03-11 11:56:35,004 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:56:35,008 [main:105] - GENERATED CALL = (fu1()).subSequence(-2049020620, -1358060104).replaceFirst(Regex("ujmdx", buildSet<RegexOption>(-804163349, { require(true)})), "kgqot")
2021-03-11 11:56:35,008 [main:101] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3613a3a3]]
2021-03-11 11:56:35,008 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3613a3a3]
2021-03-11 11:56:35,144 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:56:35,147 [main:105] - GENERATED CALL = (fu1()).replaceIndent("cwjng")
2021-03-11 11:56:35,147 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3183fb09]]
2021-03-11 11:56:35,147 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2]
2021-03-11 11:56:35,283 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:35,286 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3183fb09]
2021-03-11 11:56:35,286 [main:105] - GENERATED CALL = (fu1()).get(-1833055907).titlecase()
2021-03-11 11:56:35,287 [main:101] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70e39ab]]
2021-03-11 11:56:35,287 [main:137] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70e39ab]
2021-03-11 11:56:35,422 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:56:35,561 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:56:35,700 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:56:35,703 [main:105] - GENERATED CALL = (fu1()).replaceBefore('羁', "mwgod", "ghjmp")
2021-03-11 11:56:35,703 [main:101] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@302c273c]]
2021-03-11 11:56:35,704 [main:137] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@302c273c]
2021-03-11 11:56:35,839 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:56:35,979 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:56:36,118 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:56:36,121 [main:105] - GENERATED CALL = (fu1()).replace('ᤅ', '系', true)
2021-03-11 11:56:36,122 [main:101] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45f9386a]]
2021-03-11 11:56:36,122 [main:137] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45f9386a]
2021-03-11 11:56:36,258 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:56:36,261 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:56:36,264 [main:105] - GENERATED CALL = (fu1()).dropWhile({a: Char -> false})
2021-03-11 11:56:36,264 [main:101] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bd79144]]
2021-03-11 11:56:36,264 [main:137] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bd79144]
2021-03-11 11:56:36,401 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 11:56:36,404 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:56:36,407 [main:105] - GENERATED CALL = (fu1()).filterIndexed({a: Int, b: Char -> false})
2021-03-11 11:56:36,407 [main:110] - replacement of "OK_NONLOCAL, OK_FINALLY" of type String is (fu1()).replaceBefore('羁', "mwgod", "ghjmp")
2021-03-11 11:56:36,543 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:56:36,544 [main:66] - Compilation checking started
2021-03-11 11:56:36,941 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                Kla8().prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                Kla8().prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${(Kla0().prope2).removeSurrounding(StringBuilder(StringBuilder("jgxhl")))}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != (fu1()).replaceBefore('羁', "mwgod", "ghjmp")) return "test4: ${fu18}, holder: ${"yozdq"}"

    return "OK"
}


2021-03-11 11:56:36,942 [main:103] - replacing ("OK", String)
2021-03-11 11:56:36,942 [main:38] - replacing "OK" String
2021-03-11 11:56:36,942 [main:42] - Getting value of type String
2021-03-11 11:56:37,079 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:56:37,082 [main:46] - GENERATED VALUE OF TYPE String = "wwcsl"
2021-03-11 11:56:37,082 [main:49] - GENERATED IS CALL =false
2021-03-11 11:56:37,095 [main:55] - randomType = Kla8
2021-03-11 11:56:37,232 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 11:56:37,236 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = ""
}
2021-03-11 11:56:37,241 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10669cd3]
2021-03-11 11:56:37,376 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 11:56:37,518 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): Iterable<Int> = TODO()
2021-03-11 11:56:37,522 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): Iterable<Int> = TODO()
2021-03-11 11:56:37,665 [main:95] - GENERATED = linkedSetOf<Int>()
2021-03-11 11:56:37,665 [main:66] - Generated call from random type = (Kla8()).prope10.slice(linkedSetOf<Int>())
2021-03-11 11:56:37,666 [main:94] - GETTING String from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:56:37,676 [main:94] - GETTING String from EmptyCoroutineContext
2021-03-11 11:56:37,690 [main:94] - GETTING String from Any?
2021-03-11 11:56:37,694 [main:101] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]]
2021-03-11 11:56:37,694 [main:137] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]
2021-03-11 11:56:37,694 [main:105] - GENERATED CALL = (Kla2().prope4).toString()
2021-03-11 11:56:37,694 [main:110] - replacement of "OK" of type String is (Kla8()).prope10.slice(linkedSetOf<Int>())
2021-03-11 11:56:37,828 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:56:37,829 [main:66] - Compilation checking started
2021-03-11 11:56:38,469 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            { "tkfmb"}, {
                Kla8().prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            })

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                Kla8().prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${(Kla0().prope2).removeSurrounding(StringBuilder(StringBuilder("jgxhl")))}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:56:38,470 [main:103] - replacing (fu14 (
            { "tkfmb"}, {
                Kla8().prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            }), String)
2021-03-11 11:56:38,470 [main:38] - replacing fu14 (
            { "tkfmb"}, {
                Kla8().prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            }) String
2021-03-11 11:56:38,470 [main:42] - Getting value of type String
2021-03-11 11:56:38,608 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:56:38,611 [main:46] - GENERATED VALUE OF TYPE String = "gexep"
2021-03-11 11:56:38,612 [main:49] - GENERATED IS CALL =false
2021-03-11 11:56:38,624 [main:55] - randomType = Kla8
2021-03-11 11:56:38,763 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 11:56:38,767 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = ""
}
2021-03-11 11:56:38,772 [main:137] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bd79144]
2021-03-11 11:56:38,911 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 11:56:38,914 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:56:38,918 [main:66] - Generated call from random type = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})
2021-03-11 11:56:38,918 [main:110] - replacement of fu14 (
            { "tkfmb"}, {
                Kla8().prope10 += ", OK_FINALLY"
                "OK_FINALLY"
            }) of type String is (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})
2021-03-11 11:56:39,066 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:56:39,066 [main:66] - Compilation checking started
2021-03-11 11:56:39,653 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = ""
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                Kla8().prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${(Kla0().prope2).removeSurrounding(StringBuilder(StringBuilder("jgxhl")))}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:56:39,654 [main:103] - replacing ("", String)
2021-03-11 11:56:39,655 [main:38] - replacing "" String
2021-03-11 11:56:39,655 [main:42] - Getting value of type String
2021-03-11 11:56:39,795 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:56:39,798 [main:46] - GENERATED VALUE OF TYPE String = "bjcwf"
2021-03-11 11:56:39,799 [main:49] - GENERATED IS CALL =false
2021-03-11 11:56:39,805 [main:55] - randomType = String
2021-03-11 11:56:39,944 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:56:39,966 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2]
2021-03-11 11:56:40,104 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:40,107 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71804ef6]
2021-03-11 11:56:40,107 [main:66] - Generated call from random type = ("mongx").get(-443354412).lowercase()
2021-03-11 11:56:40,108 [main:94] - GETTING String from Boolean
2021-03-11 11:56:40,117 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@69292ca6], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]]
2021-03-11 11:56:40,117 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@69292ca6]
2021-03-11 11:56:40,256 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:56:40,260 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:56:40,400 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:40,404 [main:105] - GENERATED CALL = (Kla5().prope7).compareTo(false).toString(86677707)
2021-03-11 11:56:40,404 [main:110] - replacement of "" of type String is (Kla5().prope7).compareTo(false).toString(86677707)
2021-03-11 11:56:40,542 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:56:40,543 [main:66] - Compilation checking started
2021-03-11 11:56:41,125 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                Kla8().prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            })

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${(Kla0().prope2).removeSurrounding(StringBuilder(StringBuilder("jgxhl")))}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:56:41,126 [main:103] - replacing (fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                Kla8().prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            }), String)
2021-03-11 11:56:41,126 [main:38] - replacing fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                Kla8().prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            }) String
2021-03-11 11:56:41,126 [main:42] - Getting value of type String
2021-03-11 11:56:41,266 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:56:41,269 [main:46] - GENERATED VALUE OF TYPE String = "dopck"
2021-03-11 11:56:41,269 [main:49] - GENERATED IS CALL =false
2021-03-11 11:56:41,444 [main:55] - randomType = Kla8?
2021-03-11 11:56:41,583 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 11:56:41,586 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}
2021-03-11 11:56:41,591 [main:137] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70a4c679]
2021-03-11 11:56:41,731 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:56:41,734 [main:66] - Generated call from random type = (Kla8())?.prope10.prependIndent("fftki")
2021-03-11 11:56:41,735 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:56:41,742 [main:94] - GETTING String from Any?
2021-03-11 11:56:41,745 [main:101] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]]
2021-03-11 11:56:41,745 [main:137] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]
2021-03-11 11:56:41,745 [main:105] - GENERATED CALL = (Kla2().prope4).toString()
2021-03-11 11:56:41,745 [main:110] - replacement of fu14<String> (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            },
            l2@ {
                Kla8().prope10 += ", OK_FINALLY"
                return@l2 "OK_FINALLY"
            }) of type String is (Kla8())?.prope10.prependIndent("fftki")
2021-03-11 11:56:41,885 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:56:41,885 [main:66] - Compilation checking started
2021-03-11 11:56:42,494 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${(Kla0().prope2).removeSurrounding(StringBuilder(StringBuilder("jgxhl")))}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:56:42,495 [main:103] - replacing (fu18, String)
2021-03-11 11:56:42,495 [main:38] - replacing fu18 String
2021-03-11 11:56:42,496 [main:42] - Getting value of type String
2021-03-11 11:56:42,630 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:56:42,634 [main:46] - GENERATED VALUE OF TYPE String = "cseue"
2021-03-11 11:56:42,634 [main:49] - GENERATED IS CALL =false
2021-03-11 11:56:42,789 [main:55] - randomType = Double
2021-03-11 11:56:42,923 [main:302] - generating value of type = Double true depth = 0
2021-03-11 11:56:42,957 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@64c82a3b]
2021-03-11 11:56:43,092 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:56:43,095 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:56:43,229 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:43,233 [main:66] - Generated call from random type = (0.9406852730882914).compareTo(-80).toString(-28790627)
2021-03-11 11:56:43,233 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:56:43,240 [main:94] - GETTING String from String
2021-03-11 11:56:43,256 [main:101] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f07eaf7]]
2021-03-11 11:56:43,256 [main:137] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f07eaf7]
2021-03-11 11:56:43,400 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:56:43,406 [main:105] - GENERATED CALL = (fu1()).removeSurrounding(StringBuilder())
2021-03-11 11:56:43,407 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69bee298]]
2021-03-11 11:56:43,407 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69bee298]
2021-03-11 11:56:43,407 [main:105] - GENERATED CALL = (fu1()).trimStart()
2021-03-11 11:56:43,407 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cd3e5fa]]
2021-03-11 11:56:43,407 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9]
2021-03-11 11:56:43,542 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:43,681 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:43,685 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cd3e5fa]
2021-03-11 11:56:43,820 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:43,823 [main:105] - GENERATED CALL = (fu1()).subSequence(-1527955535, -694267455).repeat(-1561258521)
2021-03-11 11:56:43,823 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f98a541]]
2021-03-11 11:56:43,823 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f98a541]
2021-03-11 11:56:43,961 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:44,098 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:44,101 [main:105] - GENERATED CALL = (fu1()).removeRange(-1026129686, 1479451140)
2021-03-11 11:56:44,102 [main:101] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69597be7]]
2021-03-11 11:56:44,102 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69597be7]
2021-03-11 11:56:44,238 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:56:44,379 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:56:44,382 [main:105] - GENERATED CALL = (fu1()).commonSuffixWith("omjtl", true)
2021-03-11 11:56:44,383 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31bcf16b]]
2021-03-11 11:56:44,383 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31bcf16b]
2021-03-11 11:56:44,383 [main:105] - GENERATED CALL = (fu1()).trimEnd()
2021-03-11 11:56:44,383 [main:101] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@de8119b]]
2021-03-11 11:56:44,383 [main:137] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@de8119b]
2021-03-11 11:56:44,520 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:44,523 [main:105] - GENERATED CALL = (fu1()).takeLast(1968473995)
2021-03-11 11:56:44,523 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2f6d9f0f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]]
2021-03-11 11:56:44,523 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:56:44,658 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:44,661 [main:105] - GENERATED CALL = (fu1()).length.toString(-1834026243)
2021-03-11 11:56:44,661 [main:101] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bc56f97]]
2021-03-11 11:56:44,662 [main:137] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bc56f97]
2021-03-11 11:56:44,797 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:56:44,800 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:56:44,806 [main:105] - GENERATED CALL = (fu1()).takeWhile({a: Char -> false})
2021-03-11 11:56:44,806 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55e8774e]]
2021-03-11 11:56:44,806 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9]
2021-03-11 11:56:44,948 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:45,085 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:45,113 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55e8774e]
2021-03-11 11:56:45,248 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:56:45,388 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 11:56:45,392 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 11:56:45,689 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:56:45,692 [main:95] - GENERATED = StringBuilder("qjpel")
2021-03-11 11:56:45,827 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:56:45,831 [main:105] - GENERATED CALL = (fu1()).subSequence(487580396, -501297874).commonPrefixWith(StringBuilder("qjpel"), false)
2021-03-11 11:56:45,831 [main:110] - replacement of fu18 of type String is (fu1()).removeSurrounding(StringBuilder())
2021-03-11 11:56:45,964 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:56:45,964 [main:66] - Compilation checking started
2021-03-11 11:56:46,366 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${(Kla0().prope2).removeSurrounding(StringBuilder(StringBuilder("jgxhl")))}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${(fu1()).removeSurrounding(StringBuilder())}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:56:46,367 [main:103] - replacing (prope12.prope10, String)
2021-03-11 11:56:46,367 [main:38] - replacing prope12.prope10 String
2021-03-11 11:56:46,367 [main:42] - Getting value of type String
2021-03-11 11:56:46,502 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:56:46,505 [main:46] - GENERATED VALUE OF TYPE String = "gvhzb"
2021-03-11 11:56:46,505 [main:49] - GENERATED IS CALL =false
2021-03-11 11:56:46,512 [main:55] - randomType = Long
2021-03-11 11:56:46,683 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:56:46,717 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2c02c021]
2021-03-11 11:56:46,718 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71804ef6]
2021-03-11 11:56:46,718 [main:66] - Generated call from random type = (-7877033128599514352).toChar().lowercase()
2021-03-11 11:56:46,718 [main:110] - replacement of prope12.prope10 of type String is (-7877033128599514352).toChar().lowercase()
2021-03-11 11:56:46,854 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:56:46,855 [main:66] - Compilation checking started
2021-03-11 11:56:47,273 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                (-7877033128599514352).toChar().lowercase() += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${(Kla0().prope2).removeSurrounding(StringBuilder(StringBuilder("jgxhl")))}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:56:47,274 [main:103] - replacing (block, Function0<Ty1>)
2021-03-11 11:56:47,274 [main:38] - replacing block Function0<Ty1>
2021-03-11 11:56:47,274 [main:42] - Getting value of type Function0<Ty1>
2021-03-11 11:56:47,411 [main:302] - generating value of type = Function0<Ty1> false depth = 0
2021-03-11 11:56:47,414 [main:302] - generating value of type = Ty1 false depth = 1
2021-03-11 11:56:47,420 [main:46] - GENERATED VALUE OF TYPE Function0<Ty1> = { }
2021-03-11 11:56:47,420 [main:49] - GENERATED IS CALL =false
2021-03-11 11:56:47,433 [main:55] - randomType = Kla1
2021-03-11 11:56:47,569 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 11:56:47,572 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}
2021-03-11 11:56:47,707 [main:194] - Type params = []
2021-03-11 11:56:47,842 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 11:56:47,983 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:56:47,987 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:56:48,296 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 11:56:48,442 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:56:48,446 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:56:48,917 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:56:48,917 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:56:48,931 [main:94] - GETTING Function0<Ty1> from CoroutineContext
2021-03-11 11:56:48,937 [main:94] - GETTING Function0<Ty1> from EmptyCoroutineContext
2021-03-11 11:56:48,951 [main:94] - GETTING Function0<Ty1> from Continuation<Any?>
2021-03-11 11:56:48,959 [main:94] - GETTING Function0<Ty1> from String
2021-03-11 11:56:48,977 [main:94] - GETTING Function0<Ty1> from String
2021-03-11 11:56:48,978 [main:94] - GETTING Function0<Ty1> from Function0<Unit>
2021-03-11 11:56:48,988 [main:94] - GETTING Function0<Ty1> from CoroutineContext
2021-03-11 11:56:48,989 [main:94] - GETTING Function0<Ty1> from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:56:48,998 [main:94] - GETTING Function0<Ty1> from Any?
2021-03-11 11:56:49,002 [main:94] - GETTING Function0<Ty1> from Boolean
2021-03-11 11:56:49,012 [main:94] - GETTING Function0<Ty1> from CoroutineContext
2021-03-11 11:56:49,012 [main:110] - replacement of block of type Function0<Ty1> is { }
2021-03-11 11:56:49,148 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:56:49,149 [main:66] - Compilation checking started
2021-03-11 11:56:49,555 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return { }()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${(Kla0().prope2).removeSurrounding(StringBuilder(StringBuilder("jgxhl")))}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:56:49,556 [main:103] - replacing (prope10, String)
2021-03-11 11:56:49,556 [main:38] - replacing prope10 String
2021-03-11 11:56:49,556 [main:42] - Getting value of type String
2021-03-11 11:56:49,695 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:56:49,699 [main:46] - GENERATED VALUE OF TYPE String = "hfxzr"
2021-03-11 11:56:49,699 [main:49] - GENERATED IS CALL =false
2021-03-11 11:56:49,861 [main:55] - randomType = Long?
2021-03-11 11:56:49,998 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:56:50,046 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e0fbc9]
2021-03-11 11:56:50,046 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:56:50,191 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:50,195 [main:66] - Generated call from random type = (1418319604324219062)?.toInt().toString(-1108195085)
2021-03-11 11:56:50,196 [main:94] - GETTING String from Any?
2021-03-11 11:56:50,200 [main:101] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]]
2021-03-11 11:56:50,200 [main:137] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]
2021-03-11 11:56:50,201 [main:105] - GENERATED CALL = (Kla2().prope4).toString()
2021-03-11 11:56:50,201 [main:110] - replacement of prope10 of type String is (Kla2().prope4).toString()
2021-03-11 11:56:50,341 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:56:50,341 [main:66] - Compilation checking started
2021-03-11 11:56:50,753 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.(Kla2().prope4).toString() != "OK_LOCAL, OK_FINALLY") return "test1: ${(Kla0().prope2).removeSurrounding(StringBuilder(StringBuilder("jgxhl")))}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:56:50,754 [main:103] - replacing (prope10, String)
2021-03-11 11:56:50,754 [main:38] - replacing prope10 String
2021-03-11 11:56:50,754 [main:42] - Getting value of type String
2021-03-11 11:56:50,926 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:56:50,929 [main:46] - GENERATED VALUE OF TYPE String = "jbtik"
2021-03-11 11:56:50,930 [main:49] - GENERATED IS CALL =false
2021-03-11 11:56:51,457 [main:55] - randomType = LinkedHashMap<Function2<Byte, Float, UInt>, Byte?>
2021-03-11 11:56:51,592 [main:302] - generating value of type = LinkedHashMap<Function2<Byte, Float, UInt>, Byte?> false depth = 0
2021-03-11 11:56:51,737 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Function2<Byte, Float, UInt>, Byte?>): LkedHashMap<Function2<Byte, Float, UInt>, Byte?> = TODO()
2021-03-11 11:56:51,742 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Function2<Byte, Float, UInt>, Byte?>): LkedHashMap<Function2<Byte, Float, UInt>, Byte?> = TODO()
2021-03-11 11:56:51,885 [main:302] - generating value of type = Pair<Function2<Byte, Float, UInt>, Byte?> false depth = 3
2021-03-11 11:56:52,029 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Function2<Byte, Float, UInt>, second: Byte?): Pair<Function2<Byte, Float, UInt>, Byte?> = TODO()
2021-03-11 11:56:52,033 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Function2<Byte, Float, UInt>, second: Byte?): Pair<Function2<Byte, Float, UInt>, Byte?> = TODO()
2021-03-11 11:56:52,176 [main:302] - generating value of type = Function2<Byte, Float, UInt> false depth = 6
2021-03-11 11:56:52,179 [main:302] - generating value of type = UInt true depth = 7
2021-03-11 11:56:52,182 [main:302] - generating value of type = Byte true depth = 6
2021-03-11 11:56:52,186 [main:95] - GENERATED = Pair<Function2<Byte, Float, UInt>, Byte?>({a: Byte, b: Float -> 739342109.toUInt()}, 82)
2021-03-11 11:56:52,186 [main:95] - GENERATED = linkedMapOf<Function2<Byte, Float, UInt>, Byte?>(Pair<Function2<Byte, Float, UInt>, Byte?>({a: Byte, b: Float -> 739342109.toUInt()}, 82))
2021-03-11 11:56:52,348 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:56:52,483 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:52,486 [main:66] - Generated call from random type = (linkedMapOf<Function2<Byte, Float, UInt>, Byte?>(Pair<Function2<Byte, Float, UInt>, Byte?>({a: Byte, b: Float -> 739342109.toUInt()}, 82))).size.toString(838998980)
2021-03-11 11:56:52,487 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:56:52,493 [main:94] - GETTING String from String
2021-03-11 11:56:52,509 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f98a541]]
2021-03-11 11:56:52,509 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f98a541]
2021-03-11 11:56:52,647 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:52,786 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:52,789 [main:105] - GENERATED CALL = (fu1()).removeRange(-128624004, 1385391079)
2021-03-11 11:56:52,789 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3183fb09]]
2021-03-11 11:56:52,789 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2]
2021-03-11 11:56:52,925 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:52,928 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3183fb09]
2021-03-11 11:56:52,929 [main:105] - GENERATED CALL = (fu1()).get(364341733).titlecase()
2021-03-11 11:56:52,929 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4decc1c1]]
2021-03-11 11:56:52,929 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4decc1c1]
2021-03-11 11:56:52,929 [main:105] - GENERATED CALL = (fu1()).toLowerCase()
2021-03-11 11:56:52,929 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25fa343]]
2021-03-11 11:56:52,929 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2]
2021-03-11 11:56:53,063 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:53,066 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25fa343]
2021-03-11 11:56:53,201 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:56:53,204 [main:105] - GENERATED CALL = (fu1()).get(872888342).plus("nfdmf")
2021-03-11 11:56:53,205 [main:101] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6afc3414]]
2021-03-11 11:56:53,205 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6afc3414]
2021-03-11 11:56:53,205 [main:105] - GENERATED CALL = (fu1()).trimIndent()
2021-03-11 11:56:53,205 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c892d1f]]
2021-03-11 11:56:53,205 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9]
2021-03-11 11:56:53,339 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:53,477 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:53,480 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c892d1f]
2021-03-11 11:56:53,615 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 11:56:53,756 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 11:56:53,760 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 11:56:54,213 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:56:54,217 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-11 11:56:54,222 [main:95] - GENERATED = Regex("qfopj", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-11 11:56:54,358 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:56:54,361 [main:105] - GENERATED CALL = (fu1()).subSequence(-1842226246, 2124695099).replaceFirst(Regex("qfopj", kotlin.text.RegexOption.IGNORE_CASE), "zfmme")
2021-03-11 11:56:54,361 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65452653]]
2021-03-11 11:56:54,361 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65452653]
2021-03-11 11:56:54,362 [main:105] - GENERATED CALL = (fu1()).reversed()
2021-03-11 11:56:54,362 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10669cd3]]
2021-03-11 11:56:54,362 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10669cd3]
2021-03-11 11:56:54,497 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 11:56:54,639 [main:43] - GENERATING CALL OF fun <E> buildList(capacity: kotlin.Int, builderAction: kotlin.collections.MutableList<Int>.()->kotlin.Unit): Iterable<Int> = TODO()
2021-03-11 11:56:54,643 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildList(capacity: kotlin.Int, builderAction: kotlin.collections.MutableList<Int>.()->kotlin.Unit): Iterable<Int> = TODO()
2021-03-11 11:56:55,156 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:56:55,160 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableList<Int>, Unit> false depth = 3
2021-03-11 11:56:55,163 [main:302] - generating value of type = Unit false depth = 4
2021-03-11 11:56:55,170 [main:95] - GENERATED = buildList<Int>(295831170, { println()})
2021-03-11 11:56:55,170 [main:105] - GENERATED CALL = (fu1()).slice(buildList<Int>(295831170, { println()}))
2021-03-11 11:56:55,170 [main:101] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5efbe895]]
2021-03-11 11:56:55,170 [main:137] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5efbe895]
2021-03-11 11:56:55,305 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:55,308 [main:105] - GENERATED CALL = (fu1()).take(910773529)
2021-03-11 11:56:55,308 [main:101] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cd3e5fa]]
2021-03-11 11:56:55,308 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cd3e5fa]
2021-03-11 11:56:55,444 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:55,447 [main:105] - GENERATED CALL = (fu1()).repeat(911833406)
2021-03-11 11:56:55,448 [main:110] - replacement of prope10 of type String is (fu1()).toLowerCase()
2021-03-11 11:56:55,582 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:56:55,583 [main:66] - Compilation checking started
2021-03-11 11:56:55,982 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += "OK_NONLOCAL"
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.(fu1()).toLowerCase() != "OK_LOCAL, OK_FINALLY") return "test1: ${(Kla0().prope2).removeSurrounding(StringBuilder(StringBuilder("jgxhl")))}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:56:55,984 [main:103] - replacing ("OK_NONLOCAL", String)
2021-03-11 11:56:55,984 [main:38] - replacing "OK_NONLOCAL" String
2021-03-11 11:56:55,984 [main:42] - Getting value of type String
2021-03-11 11:56:56,122 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:56:56,126 [main:46] - GENERATED VALUE OF TYPE String = "curko"
2021-03-11 11:56:56,126 [main:49] - GENERATED IS CALL =false
2021-03-11 11:56:56,296 [main:55] - randomType = HashSet<Long>
2021-03-11 11:56:56,432 [main:302] - generating value of type = HashSet<Long> false depth = 0
2021-03-11 11:56:56,574 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Long): HashSet<Long> = TODO()
2021-03-11 11:56:56,579 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Long): HashSet<Long> = TODO()
2021-03-11 11:56:56,723 [main:302] - generating value of type = Long true depth = 3
2021-03-11 11:56:56,726 [main:95] - GENERATED = hashSetOf<Long>(3301436277544941570)
2021-03-11 11:56:56,835 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:56:56,976 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:56,980 [main:66] - Generated call from random type = (hashSetOf<Long>(3301436277544941570)).size.toString(44923003)
2021-03-11 11:56:56,981 [main:94] - GETTING String from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:56:56,993 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:56:57,003 [main:94] - GETTING String from String
2021-03-11 11:56:57,032 [main:101] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55e8774e]]
2021-03-11 11:56:57,033 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55e8774e]
2021-03-11 11:56:57,169 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:56:57,311 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 11:56:57,315 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 11:56:57,611 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 11:56:57,753 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 11:56:57,757 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 11:56:58,057 [main:302] - generating value of type = Int true depth = 6
2021-03-11 11:56:58,060 [main:95] - GENERATED = StringBuilder(1020753868)
2021-03-11 11:56:58,060 [main:95] - GENERATED = StringBuilder(StringBuilder(1020753868))
2021-03-11 11:56:58,197 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:56:58,201 [main:105] - GENERATED CALL = (Kla0().prope2).commonPrefixWith(StringBuilder(StringBuilder(1020753868)), false)
2021-03-11 11:56:58,201 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4decc1c1]]
2021-03-11 11:56:58,201 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4decc1c1]
2021-03-11 11:56:58,201 [main:105] - GENERATED CALL = (Kla0().prope2).toLowerCase()
2021-03-11 11:56:58,201 [main:101] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f07eaf7]]
2021-03-11 11:56:58,201 [main:137] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f07eaf7]
2021-03-11 11:56:58,337 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:56:58,344 [main:105] - GENERATED CALL = (Kla0().prope2).removeSurrounding("jwzzl")
2021-03-11 11:56:58,344 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f95b904]]
2021-03-11 11:56:58,344 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f95b904]
2021-03-11 11:56:58,483 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:58,621 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:58,760 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:56:58,767 [main:105] - GENERATED CALL = (Kla0().prope2).replaceRange(-1595179374, 689095072, "hnwfv")
2021-03-11 11:56:58,767 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b55c3ff]]
2021-03-11 11:56:58,767 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9]
2021-03-11 11:56:58,902 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:59,044 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:59,047 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b55c3ff]
2021-03-11 11:56:59,182 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:59,354 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:59,358 [main:105] - GENERATED CALL = (Kla0().prope2).subSequence(-1121226637, 9601108).substring(1791887640, 567371139)
2021-03-11 11:56:59,358 [main:101] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bb1ac4]]
2021-03-11 11:56:59,358 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bb1ac4]
2021-03-11 11:56:59,494 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:56:59,500 [main:105] - GENERATED CALL = (Kla0().prope2).removePrefix(StringBuilder())
2021-03-11 11:56:59,500 [main:101] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ba808ab]]
2021-03-11 11:56:59,500 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ba808ab]
2021-03-11 11:56:59,634 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:56:59,772 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:56:59,775 [main:105] - GENERATED CALL = (Kla0().prope2).padEnd(-439404416, '?')
2021-03-11 11:56:59,775 [main:101] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74bc8742]]
2021-03-11 11:56:59,775 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74bc8742]
2021-03-11 11:56:59,910 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:57:00,048 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:00,187 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:00,190 [main:105] - GENERATED CALL = (Kla0().prope2).replaceAfterLast('༎', "wbfuy", "zpfet")
2021-03-11 11:57:00,191 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71804ef6]]
2021-03-11 11:57:00,191 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2]
2021-03-11 11:57:00,327 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:00,330 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71804ef6]
2021-03-11 11:57:00,330 [main:105] - GENERATED CALL = (Kla0().prope2).get(-2006249098).lowercase()
2021-03-11 11:57:00,330 [main:101] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19c42257]]
2021-03-11 11:57:00,330 [main:137] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19c42257]
2021-03-11 11:57:00,465 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:57:00,603 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:00,743 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:00,746 [main:105] - GENERATED CALL = (Kla0().prope2).replaceBeforeLast('돼', "vmnpw", "uojjj")
2021-03-11 11:57:00,747 [main:110] - replacement of "OK_NONLOCAL" of type String is (Kla0().prope2).removeSurrounding("jwzzl")
2021-03-11 11:57:00,881 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:57:00,881 [main:66] - Compilation checking started
2021-03-11 11:57:01,477 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${(Kla0().prope2).removeSurrounding(StringBuilder(StringBuilder("jgxhl")))}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:57:01,479 [main:103] - replacing (prope10, String)
2021-03-11 11:57:01,479 [main:38] - replacing prope10 String
2021-03-11 11:57:01,479 [main:42] - Getting value of type String
2021-03-11 11:57:01,618 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:01,621 [main:46] - GENERATED VALUE OF TYPE String = "iducj"
2021-03-11 11:57:01,622 [main:49] - GENERATED IS CALL =false
2021-03-11 11:57:01,628 [main:55] - randomType = ULong
2021-03-11 11:57:01,764 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 11:57:01,796 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@c510284]
2021-03-11 11:57:01,932 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:57:01,936 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:57:02,072 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:02,075 [main:66] - Generated call from random type = (3450606322265017720.toULong()).compareTo(11.toUByte()).toString(51129848)
2021-03-11 11:57:02,076 [main:94] - GETTING String from Function0<Unit>
2021-03-11 11:57:02,085 [main:94] - GETTING String from String
2021-03-11 11:57:02,102 [main:101] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f07eaf7]]
2021-03-11 11:57:02,102 [main:137] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f07eaf7]
2021-03-11 11:57:02,238 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:57:02,244 [main:105] - GENERATED CALL = (fu1()).removeSurrounding("infrv")
2021-03-11 11:57:02,245 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ad2776d]]
2021-03-11 11:57:02,245 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ad2776d]
2021-03-11 11:57:02,380 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:02,383 [main:105] - GENERATED CALL = (fu1()).substring(769233205)
2021-03-11 11:57:02,383 [main:101] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45f9386a]]
2021-03-11 11:57:02,383 [main:137] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45f9386a]
2021-03-11 11:57:02,520 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:57:02,523 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:57:02,526 [main:105] - GENERATED CALL = (fu1()).dropWhile({a: Char -> false})
2021-03-11 11:57:02,526 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3183fb09]]
2021-03-11 11:57:02,527 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2]
2021-03-11 11:57:02,663 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:02,666 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3183fb09]
2021-03-11 11:57:02,667 [main:105] - GENERATED CALL = (fu1()).get(1665523561).titlecase()
2021-03-11 11:57:02,667 [main:101] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c17c9dd]]
2021-03-11 11:57:02,667 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c17c9dd]
2021-03-11 11:57:02,805 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:02,947 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:02,951 [main:105] - GENERATED CALL = (fu1()).replaceIndentByMargin("gbpfa", "ennkg")
2021-03-11 11:57:02,951 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cd3e5fa]]
2021-03-11 11:57:02,951 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9]
2021-03-11 11:57:03,089 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:03,229 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:03,233 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cd3e5fa]
2021-03-11 11:57:03,369 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:03,372 [main:105] - GENERATED CALL = (fu1()).subSequence(267518036, 1712049202).repeat(1419591966)
2021-03-11 11:57:03,373 [main:101] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ba808ab]]
2021-03-11 11:57:03,373 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ba808ab]
2021-03-11 11:57:03,508 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:03,649 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:57:03,652 [main:105] - GENERATED CALL = (fu1()).padEnd(615098271, '')
2021-03-11 11:57:03,652 [main:101] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b817b]]
2021-03-11 11:57:03,652 [main:137] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b817b]
2021-03-11 11:57:03,827 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:57:03,830 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:57:03,833 [main:105] - GENERATED CALL = (fu1()).takeLastWhile({a: Char -> true})
2021-03-11 11:57:03,833 [main:101] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74bc8742]]
2021-03-11 11:57:03,833 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74bc8742]
2021-03-11 11:57:03,972 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:57:04,111 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:04,251 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:04,254 [main:105] - GENERATED CALL = (fu1()).replaceAfterLast('륃', "qzdts", "xhtei")
2021-03-11 11:57:04,255 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55e8774e]]
2021-03-11 11:57:04,255 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9]
2021-03-11 11:57:04,389 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:04,528 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:04,532 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55e8774e]
2021-03-11 11:57:04,668 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:57:04,813 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 11:57:04,817 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 11:57:05,116 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 11:57:05,257 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 11:57:05,262 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 11:57:05,723 [main:302] - generating value of type = Int true depth = 6
2021-03-11 11:57:05,726 [main:95] - GENERATED = StringBuilder(-1463943618)
2021-03-11 11:57:05,726 [main:95] - GENERATED = StringBuilder(StringBuilder(-1463943618))
2021-03-11 11:57:05,864 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:57:05,868 [main:105] - GENERATED CALL = (fu1()).subSequence(226638192, 284657111).commonPrefixWith(StringBuilder(StringBuilder(-1463943618)), false)
2021-03-11 11:57:05,868 [main:110] - replacement of prope10 of type String is (fu1()).replaceAfterLast('륃', "qzdts", "xhtei")
2021-03-11 11:57:06,006 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:57:06,007 [main:66] - Compilation checking started
2021-03-11 11:57:06,422 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.(fu1()).replaceAfterLast('륃', "qzdts", "xhtei") != "OK_LOCAL, OK_FINALLY") return "test1: ${(Kla0().prope2).removeSurrounding(StringBuilder(StringBuilder("jgxhl")))}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:57:06,423 [main:103] - replacing (fu18, String)
2021-03-11 11:57:06,424 [main:38] - replacing fu18 String
2021-03-11 11:57:06,424 [main:42] - Getting value of type String
2021-03-11 11:57:06,561 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:06,564 [main:46] - GENERATED VALUE OF TYPE String = "zolid"
2021-03-11 11:57:06,564 [main:49] - GENERATED IS CALL =false
2021-03-11 11:57:06,571 [main:55] - randomType = String
2021-03-11 11:57:06,707 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:06,728 [main:137] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@de8119b]
2021-03-11 11:57:06,865 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:06,868 [main:66] - Generated call from random type = ("azzdm").takeLast(1079889045)
2021-03-11 11:57:06,869 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:57:06,876 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:57:06,876 [main:94] - GETTING String from String
2021-03-11 11:57:06,894 [main:101] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72351c5f]]
2021-03-11 11:57:06,894 [main:137] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72351c5f]
2021-03-11 11:57:07,031 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:57:07,171 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:07,175 [main:105] - GENERATED CALL = (fu1()).substringBeforeLast('ᄠ', "gcfmw")
2021-03-11 11:57:07,175 [main:101] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69597be7]]
2021-03-11 11:57:07,175 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69597be7]
2021-03-11 11:57:07,313 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:57:07,456 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:57:07,459 [main:105] - GENERATED CALL = (fu1()).commonSuffixWith(StringBuilder(), false)
2021-03-11 11:57:07,459 [main:101] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@165349e2]]
2021-03-11 11:57:07,459 [main:137] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@165349e2]
2021-03-11 11:57:07,596 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:57:07,602 [main:105] - GENERATED CALL = (fu1()).removeSuffix("tkvkl")
2021-03-11 11:57:07,602 [main:101] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9cf1d0]]
2021-03-11 11:57:07,602 [main:137] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9cf1d0]
2021-03-11 11:57:07,739 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:57:07,879 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:07,882 [main:105] - GENERATED CALL = (fu1()).substringBefore('ᇽ', "dcarc")
2021-03-11 11:57:07,882 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71804ef6]]
2021-03-11 11:57:07,882 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2]
2021-03-11 11:57:08,017 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:08,020 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71804ef6]
2021-03-11 11:57:08,020 [main:105] - GENERATED CALL = (fu1()).get(-1703885114).lowercase()
2021-03-11 11:57:08,020 [main:101] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55e8774e]]
2021-03-11 11:57:08,020 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55e8774e]
2021-03-11 11:57:08,155 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:57:08,298 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 11:57:08,302 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 11:57:08,650 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:57:08,653 [main:95] - GENERATED = StringBuilder("dmkdc")
2021-03-11 11:57:08,790 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:57:08,793 [main:105] - GENERATED CALL = (fu1()).commonPrefixWith(StringBuilder("dmkdc"), false)
2021-03-11 11:57:08,794 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69597be7]]
2021-03-11 11:57:08,794 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9]
2021-03-11 11:57:08,930 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:09,068 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:09,072 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69597be7]
2021-03-11 11:57:09,209 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:57:09,351 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 11:57:09,356 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 11:57:09,655 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:57:09,659 [main:95] - GENERATED = StringBuilder("uicnn")
2021-03-11 11:57:09,797 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:57:09,800 [main:105] - GENERATED CALL = (fu1()).subSequence(1325334071, -1400891693).commonSuffixWith(StringBuilder("uicnn"), false)
2021-03-11 11:57:09,800 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d43a4]]
2021-03-11 11:57:09,800 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d43a4]
2021-03-11 11:57:09,801 [main:105] - GENERATED CALL = (fu1()).uppercase()
2021-03-11 11:57:09,801 [main:101] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c17c9dd]]
2021-03-11 11:57:09,801 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c17c9dd]
2021-03-11 11:57:09,937 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:10,077 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:10,081 [main:105] - GENERATED CALL = (fu1()).replaceIndentByMargin("trkvs", "djims")
2021-03-11 11:57:10,081 [main:101] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@789c7792]]
2021-03-11 11:57:10,081 [main:137] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@789c7792]
2021-03-11 11:57:10,217 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:10,221 [main:105] - GENERATED CALL = (fu1()).drop(262657742)
2021-03-11 11:57:10,221 [main:110] - replacement of fu18 of type String is (fu1()).get(-1703885114).lowercase()
2021-03-11 11:57:10,363 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:57:10,363 [main:66] - Compilation checking started
2021-03-11 11:57:10,779 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${(Kla0().prope2).removeSurrounding(StringBuilder(StringBuilder("jgxhl")))}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${(fu1()).get(-1703885114).lowercase()}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:57:10,780 [main:103] - replacing (block, Function0<Ty1>)
2021-03-11 11:57:10,780 [main:38] - replacing block Function0<Ty1>
2021-03-11 11:57:10,780 [main:42] - Getting value of type Function0<Ty1>
2021-03-11 11:57:10,917 [main:302] - generating value of type = Function0<Ty1> false depth = 0
2021-03-11 11:57:10,920 [main:302] - generating value of type = Ty1 false depth = 1
2021-03-11 11:57:10,926 [main:46] - GENERATED VALUE OF TYPE Function0<Ty1> = { }
2021-03-11 11:57:10,926 [main:49] - GENERATED IS CALL =false
2021-03-11 11:57:10,933 [main:55] - randomType = String
2021-03-11 11:57:11,069 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:11,090 [main:94] - GETTING Function0<Ty1> from String
2021-03-11 11:57:11,109 [main:94] - GETTING Function0<Ty1> from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:57:11,117 [main:94] - GETTING Function0<Ty1> from String
2021-03-11 11:57:11,118 [main:94] - GETTING Function0<Ty1> from Any?
2021-03-11 11:57:11,122 [main:94] - GETTING Function0<Ty1> from Function0<Unit>
2021-03-11 11:57:11,134 [main:94] - GETTING Function0<Ty1> from CoroutineContext
2021-03-11 11:57:11,140 [main:94] - GETTING Function0<Ty1> from CoroutineContext
2021-03-11 11:57:11,141 [main:94] - GETTING Function0<Ty1> from CoroutineContext
2021-03-11 11:57:11,142 [main:94] - GETTING Function0<Ty1> from Continuation<Any?>
2021-03-11 11:57:11,150 [main:94] - GETTING Function0<Ty1> from Boolean
2021-03-11 11:57:11,159 [main:94] - GETTING Function0<Ty1> from EmptyCoroutineContext
2021-03-11 11:57:11,173 [main:110] - replacement of block of type Function0<Ty1> is { }
2021-03-11 11:57:11,309 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:57:11,309 [main:66] - Compilation checking started
2021-03-11 11:57:11,721 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return { }()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY") return "test1: ${(Kla0().prope2).removeSurrounding(StringBuilder(StringBuilder("jgxhl")))}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:57:11,722 [main:103] - replacing (fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY", Boolean)
2021-03-11 11:57:11,723 [main:38] - replacing fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY" Boolean
2021-03-11 11:57:11,723 [main:42] - Getting value of type Boolean
2021-03-11 11:57:11,860 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:57:11,863 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:57:11,863 [main:49] - GENERATED IS CALL =false
2021-03-11 11:57:11,870 [main:55] - randomType = Byte
2021-03-11 11:57:12,006 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:57:12,041 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7480b7cd]
2021-03-11 11:57:12,041 [main:137] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a1b7dbe]
2021-03-11 11:57:12,041 [main:66] - Generated call from random type = (16).toChar().isISOControl()
2021-03-11 11:57:12,041 [main:94] - GETTING Boolean from Boolean
2021-03-11 11:57:12,049 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3d70ecb6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7081d87d]]
2021-03-11 11:57:12,049 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3d70ecb6]
2021-03-11 11:57:12,186 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:57:12,186 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7081d87d]
2021-03-11 11:57:12,322 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:57:12,325 [main:105] - GENERATED CALL = (Kla5().prope7).equals("ocqzb").or(false)
2021-03-11 11:57:12,326 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7081d87d]]
2021-03-11 11:57:12,326 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7081d87d]
2021-03-11 11:57:12,463 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:57:12,467 [main:105] - GENERATED CALL = (Kla5().prope7).or(false)
2021-03-11 11:57:12,467 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3d70ecb6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7606cd62]]
2021-03-11 11:57:12,467 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3d70ecb6]
2021-03-11 11:57:12,602 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:57:12,603 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7606cd62]
2021-03-11 11:57:12,738 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:57:12,742 [main:105] - GENERATED CALL = (Kla5().prope7).equals("kjqah").xor(true)
2021-03-11 11:57:12,742 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@60e33fd5]]
2021-03-11 11:57:12,742 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@60e33fd5]
2021-03-11 11:57:12,878 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:57:12,881 [main:105] - GENERATED CALL = (Kla5().prope7).and(false)
2021-03-11 11:57:12,881 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3d70ecb6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@60e33fd5]]
2021-03-11 11:57:12,881 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3d70ecb6]
2021-03-11 11:57:13,018 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:57:13,018 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@60e33fd5]
2021-03-11 11:57:13,194 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:57:13,197 [main:105] - GENERATED CALL = (Kla5().prope7).equals("rhyhn").and(true)
2021-03-11 11:57:13,197 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7606cd62]]
2021-03-11 11:57:13,198 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7606cd62]
2021-03-11 11:57:13,333 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:57:13,336 [main:105] - GENERATED CALL = (Kla5().prope7).xor(true)
2021-03-11 11:57:13,336 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3d70ecb6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e0b3dde]]
2021-03-11 11:57:13,336 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3d70ecb6]
2021-03-11 11:57:13,474 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:57:13,475 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e0b3dde]
2021-03-11 11:57:13,611 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:57:13,611 [main:105] - GENERATED CALL = (Kla5().prope7).equals("zkgjw").equals("uekvm")
2021-03-11 11:57:13,611 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3d70ecb6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@506d92ca]]
2021-03-11 11:57:13,611 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3d70ecb6]
2021-03-11 11:57:13,748 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:57:13,748 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@506d92ca]
2021-03-11 11:57:13,748 [main:105] - GENERATED CALL = (Kla5().prope7).equals("uskel").not()
2021-03-11 11:57:13,748 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@506d92ca]]
2021-03-11 11:57:13,748 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@506d92ca]
2021-03-11 11:57:13,748 [main:105] - GENERATED CALL = (Kla5().prope7).not()
2021-03-11 11:57:13,748 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e0b3dde]]
2021-03-11 11:57:13,749 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e0b3dde]
2021-03-11 11:57:13,884 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:57:13,884 [main:105] - GENERATED CALL = (Kla5().prope7).equals("iurvw")
2021-03-11 11:57:13,884 [main:110] - replacement of fu15 != "OK_FINALLY" || prope12.prope10 != "OK_LOCAL, OK_FINALLY" of type Boolean is (Kla5().prope7).not()
2021-03-11 11:57:14,020 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:57:14,020 [main:66] - Compilation checking started
2021-03-11 11:57:14,592 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if ((Kla5().prope7).not()) return "test1: ${(Kla0().prope2).removeSurrounding(StringBuilder(StringBuilder("jgxhl")))}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${prope12.prope10}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:57:14,593 [main:103] - replacing (prope12.prope10, String)
2021-03-11 11:57:14,593 [main:38] - replacing prope12.prope10 String
2021-03-11 11:57:14,593 [main:42] - Getting value of type String
2021-03-11 11:57:14,729 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:14,733 [main:46] - GENERATED VALUE OF TYPE String = "qtnfh"
2021-03-11 11:57:14,733 [main:49] - GENERATED IS CALL =false
2021-03-11 11:57:14,899 [main:55] - randomType = Short?
2021-03-11 11:57:15,034 [main:302] - generating value of type = Short true depth = 0
2021-03-11 11:57:15,070 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1d76ebc4]
2021-03-11 11:57:15,070 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24abb2e5]
2021-03-11 11:57:15,206 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:15,209 [main:66] - Generated call from random type = (-25182)?.toByte().toString(-1459393514)
2021-03-11 11:57:15,210 [main:94] - GETTING String from EmptyCoroutineContext
2021-03-11 11:57:15,225 [main:94] - GETTING String from Any?
2021-03-11 11:57:15,229 [main:101] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]]
2021-03-11 11:57:15,229 [main:137] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]
2021-03-11 11:57:15,229 [main:105] - GENERATED CALL = (Kla2().prope4).toString()
2021-03-11 11:57:15,229 [main:110] - replacement of prope12.prope10 of type String is (-25182)?.toByte().toString(-1459393514)
2021-03-11 11:57:15,365 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:57:15,366 [main:66] - Compilation checking started
2021-03-11 11:57:15,958 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if ((Kla5().prope7).not()) return "test1: ${(Kla0().prope2).removeSurrounding(StringBuilder(StringBuilder("jgxhl")))}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${(-25182)?.toByte().toString(-1459393514)}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:57:15,959 [main:103] - replacing (prope12, Kla8)
2021-03-11 11:57:15,960 [main:38] - replacing prope12 Kla8
2021-03-11 11:57:15,960 [main:42] - Getting value of type Kla8
2021-03-11 11:57:16,098 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 11:57:16,101 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}
2021-03-11 11:57:16,102 [main:46] - GENERATED VALUE OF TYPE Kla8 = Kla8()
2021-03-11 11:57:16,102 [main:49] - GENERATED IS CALL =true
2021-03-11 11:57:16,464 [main:55] - randomType = Triple<Kla5, UByte, Kla8?>
2021-03-11 11:57:16,601 [main:302] - generating value of type = Triple<Kla5, UByte, Kla8?> false depth = 0
2021-03-11 11:57:16,745 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Kla5, second: UByte, third: Kla8?): Triple<Kla5, UByte, Kla8?> = TODO()
2021-03-11 11:57:16,750 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Kla5, second: UByte, third: Kla8?): Triple<Kla5, UByte, Kla8?> = TODO()
2021-03-11 11:57:16,895 [main:302] - generating value of type = Kla5 false depth = 3
2021-03-11 11:57:16,898 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}
2021-03-11 11:57:16,898 [main:302] - generating value of type = UByte true depth = 3
2021-03-11 11:57:16,901 [main:302] - generating value of type = Kla8 false depth = 3
2021-03-11 11:57:16,904 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}
2021-03-11 11:57:16,905 [main:95] - GENERATED = Triple<Kla5, UByte, Kla8?>(Kla5(), 51.toUByte(), Kla8())
2021-03-11 11:57:16,918 [main:137] - GENERATING call of type public final operator fun component3(): Kla8? defined in kotlin.Triple[DeserializedSimpleFunctionDescriptor@67e22bf7]
2021-03-11 11:57:16,918 [main:66] - Generated call from random type = (Triple<Kla5, UByte, Kla8?>(Kla5(), 51.toUByte(), Kla8())).component3()!!
2021-03-11 11:57:16,919 [main:94] - GETTING Kla8 from String
2021-03-11 11:57:16,937 [main:94] - GETTING Kla8 from String
2021-03-11 11:57:16,938 [main:94] - GETTING Kla8 from Continuation<Any?>
2021-03-11 11:57:16,945 [main:94] - GETTING Kla8 from Function0<Unit>
2021-03-11 11:57:16,953 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:57:16,960 [main:94] - GETTING Kla8 from Boolean
2021-03-11 11:57:16,968 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:57:16,969 [main:94] - GETTING Kla8 from EmptyCoroutineContext
2021-03-11 11:57:16,983 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:57:16,984 [main:94] - GETTING Kla8 from Any?
2021-03-11 11:57:16,989 [main:94] - GETTING Kla8 from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:57:16,997 [main:110] - replacement of prope12 of type Kla8 is Kla8()
2021-03-11 11:57:17,133 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:57:17,134 [main:66] - Compilation checking started
2021-03-11 11:57:17,535 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += "OK_LOCAL"
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if ((Kla5().prope7).not()) return "test1: ${(Kla0().prope2).removeSurrounding(StringBuilder(StringBuilder("jgxhl")))}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${(-25182)?.toByte().toString(-1459393514)}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    Kla8() = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:57:17,536 [main:103] - replacing ("OK_LOCAL", String)
2021-03-11 11:57:17,537 [main:38] - replacing "OK_LOCAL" String
2021-03-11 11:57:17,537 [main:42] - Getting value of type String
2021-03-11 11:57:17,678 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:17,681 [main:46] - GENERATED VALUE OF TYPE String = "ptmlj"
2021-03-11 11:57:17,681 [main:49] - GENERATED IS CALL =false
2021-03-11 11:57:17,694 [main:55] - randomType = Kla8
2021-03-11 11:57:17,866 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 11:57:17,869 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}
2021-03-11 11:57:17,874 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c17c9dd]
2021-03-11 11:57:18,012 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:18,151 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:18,155 [main:66] - Generated call from random type = (Kla8()).prope10.replaceIndentByMargin("ixsil", "uylzp")
2021-03-11 11:57:18,155 [main:110] - replacement of "OK_LOCAL" of type String is (Kla8()).prope10.replaceIndentByMargin("ixsil", "uylzp")
2021-03-11 11:57:18,292 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:57:18,292 [main:66] - Compilation checking started
2021-03-11 11:57:18,882 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla8()).prope10.replaceIndentByMargin("ixsil", "uylzp")
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = fu15(prope12)
    if ((Kla5().prope7).not()) return "test1: ${(Kla0().prope2).removeSurrounding(StringBuilder(StringBuilder("jgxhl")))}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${(-25182)?.toByte().toString(-1459393514)}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:57:18,883 [main:103] - replacing (fu15(prope12), String)
2021-03-11 11:57:18,883 [main:38] - replacing fu15(prope12) String
2021-03-11 11:57:18,883 [main:42] - Getting value of type String
2021-03-11 11:57:19,021 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:19,025 [main:46] - GENERATED VALUE OF TYPE String = "bingk"
2021-03-11 11:57:19,025 [main:49] - GENERATED IS CALL =false
2021-03-11 11:57:19,031 [main:55] - randomType = ULong
2021-03-11 11:57:19,169 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 11:57:19,199 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@2215a04b]
2021-03-11 11:57:19,199 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67b964b4]
2021-03-11 11:57:19,337 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:19,341 [main:66] - Generated call from random type = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
2021-03-11 11:57:19,341 [main:94] - GETTING String from EmptyCoroutineContext
2021-03-11 11:57:19,355 [main:94] - GETTING String from String
2021-03-11 11:57:19,373 [main:101] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c17c9dd]]
2021-03-11 11:57:19,373 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c17c9dd]
2021-03-11 11:57:19,510 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:19,650 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:19,653 [main:105] - GENERATED CALL = (Kla0().prope2).replaceIndentByMargin("wvbln", "mcvbi")
2021-03-11 11:57:19,653 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cd3e5fa]]
2021-03-11 11:57:19,653 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9]
2021-03-11 11:57:19,791 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:19,931 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:19,934 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cd3e5fa]
2021-03-11 11:57:20,073 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:20,077 [main:105] - GENERATED CALL = (Kla0().prope2).subSequence(-1694691138, -603600414).repeat(106963073)
2021-03-11 11:57:20,077 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25fa343]]
2021-03-11 11:57:20,077 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2]
2021-03-11 11:57:20,214 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:20,217 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25fa343]
2021-03-11 11:57:20,354 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:20,358 [main:105] - GENERATED CALL = (Kla0().prope2).get(924145890).plus("wytkb")
2021-03-11 11:57:20,358 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f95b904]]
2021-03-11 11:57:20,358 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f95b904]
2021-03-11 11:57:20,494 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:20,633 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:20,773 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:57:20,779 [main:105] - GENERATED CALL = (Kla0().prope2).replaceRange(-209488896, -800472442, "lcvgj")
2021-03-11 11:57:20,779 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d922029]]
2021-03-11 11:57:20,780 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9]
2021-03-11 11:57:20,918 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:21,058 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:21,061 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d922029]
2021-03-11 11:57:21,198 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 11:57:21,340 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 11:57:21,344 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 11:57:21,645 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:57:21,648 [main:95] - GENERATED = Regex("sedbu")
2021-03-11 11:57:21,784 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-11 11:57:21,788 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 11:57:21,930 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 11:57:21,935 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 11:57:22,235 [main:302] - generating value of type = String true depth = 4
2021-03-11 11:57:22,239 [main:95] - GENERATED = StringBuilder("cxiza")
2021-03-11 11:57:22,239 [main:105] - GENERATED CALL = (Kla0().prope2).subSequence(1233216394, 1452493242).replace(Regex("sedbu"), {a: MatchResult -> StringBuilder("cxiza")})
2021-03-11 11:57:22,239 [main:101] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a93fe14]]
2021-03-11 11:57:22,239 [main:137] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a93fe14]
2021-03-11 11:57:22,376 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:57:22,379 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:57:22,383 [main:105] - GENERATED CALL = (Kla0().prope2).filterNot({a: Char -> false})
2021-03-11 11:57:22,383 [main:101] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@302c273c]]
2021-03-11 11:57:22,383 [main:137] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@302c273c]
2021-03-11 11:57:22,563 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:57:22,702 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:57:22,843 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:57:22,847 [main:105] - GENERATED CALL = (Kla0().prope2).replace('䍹', '欙', true)
2021-03-11 11:57:22,847 [main:101] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bb1ac4]]
2021-03-11 11:57:22,847 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bb1ac4]
2021-03-11 11:57:22,982 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:57:23,124 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 11:57:23,128 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 11:57:23,429 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:57:23,432 [main:95] - GENERATED = StringBuilder(-1599812024)
2021-03-11 11:57:23,432 [main:105] - GENERATED CALL = (Kla0().prope2).removePrefix(StringBuilder(-1599812024))
2021-03-11 11:57:23,433 [main:101] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70a4c679]]
2021-03-11 11:57:23,433 [main:137] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70a4c679]
2021-03-11 11:57:23,568 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:23,572 [main:105] - GENERATED CALL = (Kla0().prope2).prependIndent("ubosd")
2021-03-11 11:57:23,572 [main:101] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9cf1d0]]
2021-03-11 11:57:23,572 [main:137] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9cf1d0]
2021-03-11 11:57:23,708 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:57:23,848 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:23,851 [main:105] - GENERATED CALL = (Kla0().prope2).substringBefore('沊', "cujjv")
2021-03-11 11:57:23,851 [main:110] - replacement of fu15(prope12) of type String is (5150752837272580577.toULong()).toUByte().toString(-2028559054)
2021-03-11 11:57:23,988 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:57:23,988 [main:66] - Compilation checking started
2021-03-11 11:57:24,576 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla8()).prope10.replaceIndentByMargin("ixsil", "uylzp")
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return "test1: ${(Kla0().prope2).removeSurrounding(StringBuilder(StringBuilder("jgxhl")))}, holder: ${Kla8().prope10}"

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${(-25182)?.toByte().toString(-1459393514)}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:57:24,577 [main:103] - replacing ("test1: ${(Kla0().prope2).removeSurrounding(StringBuilder(StringBuilder("jgxhl")))}, holder: ${Kla8().prope10}", String)
2021-03-11 11:57:24,578 [main:38] - replacing "test1: ${(Kla0().prope2).removeSurrounding(StringBuilder(StringBuilder("jgxhl")))}, holder: ${Kla8().prope10}" String
2021-03-11 11:57:24,578 [main:42] - Getting value of type String
2021-03-11 11:57:24,716 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:24,719 [main:46] - GENERATED VALUE OF TYPE String = "uutjp"
2021-03-11 11:57:24,720 [main:49] - GENERATED IS CALL =false
2021-03-11 11:57:24,726 [main:55] - randomType = Char
2021-03-11 11:57:24,865 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:57:24,887 [main:137] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2640e49d]
2021-03-11 11:57:24,887 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ea8ab5e]
2021-03-11 11:57:25,026 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:25,030 [main:66] - Generated call from random type = ('').toShort().toString(122358306)
2021-03-11 11:57:25,030 [main:110] - replacement of "test1: ${(Kla0().prope2).removeSurrounding(StringBuilder(StringBuilder("jgxhl")))}, holder: ${Kla8().prope10}" of type String is ('').toShort().toString(122358306)
2021-03-11 11:57:25,166 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:57:25,167 [main:66] - Compilation checking started
2021-03-11 11:57:25,779 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla8()).prope10.replaceIndentByMargin("ixsil", "uylzp")
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${(-25182)?.toByte().toString(-1459393514)}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:57:25,780 [main:103] - replacing ("OK_FINALLY", String)
2021-03-11 11:57:25,780 [main:38] - replacing "OK_FINALLY" String
2021-03-11 11:57:25,780 [main:42] - Getting value of type String
2021-03-11 11:57:25,920 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:25,923 [main:46] - GENERATED VALUE OF TYPE String = "cnwur"
2021-03-11 11:57:25,923 [main:49] - GENERATED IS CALL =false
2021-03-11 11:57:25,937 [main:55] - randomType = Kla5
2021-03-11 11:57:26,075 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 11:57:26,078 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}
2021-03-11 11:57:26,085 [main:94] - GETTING String from String
2021-03-11 11:57:26,101 [main:101] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5efbe895]]
2021-03-11 11:57:26,102 [main:137] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5efbe895]
2021-03-11 11:57:26,239 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:26,242 [main:105] - GENERATED CALL = (fu1()).take(2039365639)
2021-03-11 11:57:26,242 [main:101] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69597be7]]
2021-03-11 11:57:26,242 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69597be7]
2021-03-11 11:57:26,379 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:57:26,523 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:57:26,526 [main:105] - GENERATED CALL = (fu1()).commonSuffixWith("hquex", true)
2021-03-11 11:57:26,526 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d922029]]
2021-03-11 11:57:26,527 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9]
2021-03-11 11:57:26,664 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:26,805 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:26,808 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d922029]
2021-03-11 11:57:26,945 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 11:57:27,090 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 11:57:27,094 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 11:57:27,599 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:57:27,602 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-11 11:57:27,606 [main:95] - GENERATED = Regex("zqonf", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-11 11:57:27,742 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-11 11:57:27,746 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 11:57:27,752 [main:105] - GENERATED CALL = (fu1()).subSequence(1296090935, 654019713).replace(Regex("zqonf", kotlin.text.RegexOption.IGNORE_CASE), {a: MatchResult -> "swxod"})
2021-03-11 11:57:27,752 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64a3bad2]]
2021-03-11 11:57:27,752 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64a3bad2]
2021-03-11 11:57:27,752 [main:105] - GENERATED CALL = (fu1()).lowercase()
2021-03-11 11:57:27,752 [main:101] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cd3e5fa]]
2021-03-11 11:57:27,752 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cd3e5fa]
2021-03-11 11:57:27,888 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:27,891 [main:105] - GENERATED CALL = (fu1()).repeat(-1137353023)
2021-03-11 11:57:27,892 [main:101] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b817b]]
2021-03-11 11:57:27,892 [main:137] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b817b]
2021-03-11 11:57:28,029 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:57:28,032 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:57:28,036 [main:105] - GENERATED CALL = (fu1()).takeLastWhile({a: Char -> false})
2021-03-11 11:57:28,036 [main:101] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bd79144]]
2021-03-11 11:57:28,036 [main:137] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bd79144]
2021-03-11 11:57:28,171 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 11:57:28,174 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:57:28,178 [main:105] - GENERATED CALL = (fu1()).filterIndexed({a: Int, b: Char -> true})
2021-03-11 11:57:28,178 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3183fb09]]
2021-03-11 11:57:28,178 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2]
2021-03-11 11:57:28,315 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:28,318 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3183fb09]
2021-03-11 11:57:28,318 [main:105] - GENERATED CALL = (fu1()).get(-1578015177).titlecase()
2021-03-11 11:57:28,318 [main:101] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e18efcd]]
2021-03-11 11:57:28,318 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e18efcd]
2021-03-11 11:57:28,454 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:57:28,594 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:28,734 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:28,737 [main:105] - GENERATED CALL = (fu1()).replaceAfter('㸹', "hbokv", "tjpdr")
2021-03-11 11:57:28,737 [main:101] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@de8119b]]
2021-03-11 11:57:28,737 [main:137] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@de8119b]
2021-03-11 11:57:28,873 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:28,877 [main:105] - GENERATED CALL = (fu1()).takeLast(-1697801427)
2021-03-11 11:57:28,878 [main:110] - replacement of "OK_FINALLY" of type String is (fu1()).takeLast(-1697801427)
2021-03-11 11:57:29,014 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:57:29,014 [main:66] - Compilation checking started
2021-03-11 11:57:29,424 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla8()).prope10.replaceIndentByMargin("ixsil", "uylzp")
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${(-25182)?.toByte().toString(-1459393514)}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != (fu1()).takeLast(-1697801427) || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:57:29,425 [main:103] - replacing (prope12.prope10, String)
2021-03-11 11:57:29,425 [main:38] - replacing prope12.prope10 String
2021-03-11 11:57:29,425 [main:42] - Getting value of type String
2021-03-11 11:57:29,563 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:29,566 [main:46] - GENERATED VALUE OF TYPE String = "elhdy"
2021-03-11 11:57:29,566 [main:49] - GENERATED IS CALL =false
2021-03-11 11:57:29,730 [main:55] - randomType = Int?
2021-03-11 11:57:29,867 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:29,903 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@73969353]
2021-03-11 11:57:29,903 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1efc965a]
2021-03-11 11:57:30,039 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:30,043 [main:66] - Generated call from random type = (1843668495)?.toLong().toString(-1346221079)
2021-03-11 11:57:30,043 [main:94] - GETTING String from Any?
2021-03-11 11:57:30,047 [main:101] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]]
2021-03-11 11:57:30,047 [main:137] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]
2021-03-11 11:57:30,047 [main:105] - GENERATED CALL = (Kla2().prope4).toString()
2021-03-11 11:57:30,047 [main:110] - replacement of prope12.prope10 of type String is (Kla2().prope4).toString()
2021-03-11 11:57:30,183 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:57:30,184 [main:66] - Compilation checking started
2021-03-11 11:57:30,590 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla8()).prope10.replaceIndentByMargin("ixsil", "uylzp")
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, {
                (Kla2().prope4).toString() += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${(-25182)?.toByte().toString(-1459393514)}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:57:30,591 [main:103] - replacing (finallyBlock, Function0<Ty1>)
2021-03-11 11:57:30,591 [main:38] - replacing finallyBlock Function0<Ty1>
2021-03-11 11:57:30,591 [main:42] - Getting value of type Function0<Ty1>
2021-03-11 11:57:30,728 [main:302] - generating value of type = Function0<Ty1> false depth = 0
2021-03-11 11:57:30,731 [main:302] - generating value of type = Ty1 false depth = 1
2021-03-11 11:57:30,737 [main:46] - GENERATED VALUE OF TYPE Function0<Ty1> = { }
2021-03-11 11:57:30,737 [main:49] - GENERATED IS CALL =false
2021-03-11 11:57:31,236 [main:55] - randomType = Collection<Kla4?>?
2021-03-11 11:57:31,237 [main:94] - GETTING Function0<Ty1> from Function0<Unit>
2021-03-11 11:57:31,250 [main:94] - GETTING Function0<Ty1> from Boolean
2021-03-11 11:57:31,259 [main:94] - GETTING Function0<Ty1> from CoroutineContext
2021-03-11 11:57:31,265 [main:94] - GETTING Function0<Ty1> from CoroutineContext
2021-03-11 11:57:31,266 [main:94] - GETTING Function0<Ty1> from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:57:31,276 [main:94] - GETTING Function0<Ty1> from Continuation<Any?>
2021-03-11 11:57:31,284 [main:94] - GETTING Function0<Ty1> from String
2021-03-11 11:57:31,303 [main:94] - GETTING Function0<Ty1> from Any?
2021-03-11 11:57:31,307 [main:94] - GETTING Function0<Ty1> from CoroutineContext
2021-03-11 11:57:31,308 [main:94] - GETTING Function0<Ty1> from EmptyCoroutineContext
2021-03-11 11:57:31,322 [main:94] - GETTING Function0<Ty1> from String
2021-03-11 11:57:31,322 [main:110] - replacement of finallyBlock of type Function0<Ty1> is { }
2021-03-11 11:57:31,459 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:57:31,460 [main:66] - Compilation checking started
2021-03-11 11:57:31,865 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return { }()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla8()).prope10.replaceIndentByMargin("ixsil", "uylzp")
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                prope12.prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${(-25182)?.toByte().toString(-1459393514)}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:57:31,866 [main:103] - replacing (finallyBlock(), Ty1)
2021-03-11 11:57:31,866 [main:38] - replacing finallyBlock() Ty1
2021-03-11 11:57:31,866 [main:42] - Getting value of type Ty1
2021-03-11 11:57:32,041 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-11 11:57:32,047 [main:46] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-11 11:57:32,380 [main:55] - randomType = HashSet<List<Long>>
2021-03-11 11:57:32,517 [main:302] - generating value of type = HashSet<List<Long>> false depth = 0
2021-03-11 11:57:32,660 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: List<Long>): HashSet<List<Long>> = TODO()
2021-03-11 11:57:32,665 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: List<Long>): HashSet<List<Long>> = TODO()
2021-03-11 11:57:32,809 [main:302] - generating value of type = List<Long> false depth = 3
2021-03-11 11:57:32,953 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): List<Long> = TODO()
2021-03-11 11:57:32,957 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): List<Long> = TODO()
2021-03-11 11:57:33,105 [main:95] - GENERATED = arrayListOf<Long>()
2021-03-11 11:57:33,105 [main:95] - GENERATED = linkedSetOf<List<Long>>(arrayListOf<Long>())
2021-03-11 11:57:33,227 [main:94] - GETTING Ty1 from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:57:33,236 [main:94] - GETTING Ty1 from String
2021-03-11 11:57:33,253 [main:94] - GETTING Ty1 from Continuation<Any?>
2021-03-11 11:57:33,261 [main:94] - GETTING Ty1 from String
2021-03-11 11:57:33,262 [main:94] - GETTING Ty1 from Boolean
2021-03-11 11:57:33,270 [main:94] - GETTING Ty1 from CoroutineContext
2021-03-11 11:57:33,276 [main:94] - GETTING Ty1 from Any?
2021-03-11 11:57:33,279 [main:94] - GETTING Ty1 from CoroutineContext
2021-03-11 11:57:33,280 [main:94] - GETTING Ty1 from Function0<Unit>
2021-03-11 11:57:33,290 [main:94] - GETTING Ty1 from EmptyCoroutineContext
2021-03-11 11:57:33,304 [main:94] - GETTING Ty1 from CoroutineContext
2021-03-11 11:57:33,304 [main:107] - Cant find and generate replacement for finallyBlock() type Ty1
2021-03-11 11:57:33,304 [main:103] - replacing (prope12, Kla8)
2021-03-11 11:57:33,304 [main:38] - replacing prope12 Kla8
2021-03-11 11:57:33,304 [main:42] - Getting value of type Kla8
2021-03-11 11:57:33,443 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 11:57:33,446 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}
2021-03-11 11:57:33,446 [main:46] - GENERATED VALUE OF TYPE Kla8 = Kla8()
2021-03-11 11:57:33,446 [main:49] - GENERATED IS CALL =true
2021-03-11 11:57:33,617 [main:55] - randomType = Kla2?
2021-03-11 11:57:33,754 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 11:57:33,758 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}
2021-03-11 11:57:33,773 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:57:33,778 [main:94] - GETTING Kla8 from Boolean
2021-03-11 11:57:33,789 [main:94] - GETTING Kla8 from String
2021-03-11 11:57:33,807 [main:94] - GETTING Kla8 from Function0<Unit>
2021-03-11 11:57:33,816 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:57:33,817 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:57:33,818 [main:94] - GETTING Kla8 from String
2021-03-11 11:57:33,818 [main:94] - GETTING Kla8 from Continuation<Any?>
2021-03-11 11:57:33,826 [main:94] - GETTING Kla8 from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:57:33,834 [main:94] - GETTING Kla8 from Any?
2021-03-11 11:57:33,837 [main:94] - GETTING Kla8 from EmptyCoroutineContext
2021-03-11 11:57:33,850 [main:110] - replacement of prope12 of type Kla8 is Kla8()
2021-03-11 11:57:33,987 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:57:33,987 [main:66] - Compilation checking started
2021-03-11 11:57:34,565 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla8()).prope10.replaceIndentByMargin("ixsil", "uylzp")
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${(-25182)?.toByte().toString(-1459393514)}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ("tlxfn" != "OK_FINALLY" || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:57:34,566 [main:103] - replacing (Kla8(), Kla8)
2021-03-11 11:57:34,567 [main:38] - replacing Kla8() Kla8
2021-03-11 11:57:34,567 [main:42] - Getting value of type Kla8
2021-03-11 11:57:34,715 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 11:57:34,719 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}
2021-03-11 11:57:34,719 [main:46] - GENERATED VALUE OF TYPE Kla8 = Kla8()
2021-03-11 11:57:34,719 [main:49] - GENERATED IS CALL =true
2021-03-11 11:57:36,066 [main:55] - randomType = Function2<Set<MutableMap<Double, Boolean>>, Kla3<Function1<Kla8, UShort>>, LinkedHashSet<Kla5>>
2021-03-11 11:57:36,067 [main:94] - GETTING Kla8 from Boolean
2021-03-11 11:57:36,077 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:57:36,082 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:57:36,083 [main:94] - GETTING Kla8 from String
2021-03-11 11:57:36,101 [main:94] - GETTING Kla8 from Any?
2021-03-11 11:57:36,104 [main:94] - GETTING Kla8 from String
2021-03-11 11:57:36,105 [main:94] - GETTING Kla8 from Continuation<Any?>
2021-03-11 11:57:36,112 [main:94] - GETTING Kla8 from EmptyCoroutineContext
2021-03-11 11:57:36,127 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:57:36,127 [main:94] - GETTING Kla8 from Function0<Unit>
2021-03-11 11:57:36,137 [main:94] - GETTING Kla8 from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:57:36,144 [main:110] - replacement of Kla8() of type Kla8 is Kla8()
2021-03-11 11:57:36,282 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:57:36,283 [main:103] - replacing ("tlxfn" != "OK_FINALLY", Boolean)
2021-03-11 11:57:36,286 [main:38] - replacing "tlxfn" != "OK_FINALLY" Boolean
2021-03-11 11:57:36,286 [main:42] - Getting value of type Boolean
2021-03-11 11:57:36,423 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:57:36,426 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:57:36,426 [main:49] - GENERATED IS CALL =false
2021-03-11 11:57:36,775 [main:55] - randomType = Double?
2021-03-11 11:57:36,912 [main:302] - generating value of type = Double true depth = 0
2021-03-11 11:57:36,947 [main:137] - GENERATING call of type public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@64d394e5]
2021-03-11 11:57:36,947 [main:137] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@c844d52]
2021-03-11 11:57:36,947 [main:66] - Generated call from random type = (0.7882428371756479)?.toFloat().isFinite()
2021-03-11 11:57:36,948 [main:94] - GETTING Boolean from Boolean
2021-03-11 11:57:36,955 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@60e33fd5]]
2021-03-11 11:57:36,955 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@60e33fd5]
2021-03-11 11:57:37,093 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:57:37,096 [main:105] - GENERATED CALL = (Kla5().prope7).and(true)
2021-03-11 11:57:37,096 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@506d92ca]]
2021-03-11 11:57:37,096 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@506d92ca]
2021-03-11 11:57:37,096 [main:105] - GENERATED CALL = (Kla5().prope7).not()
2021-03-11 11:57:37,096 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3d70ecb6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7606cd62]]
2021-03-11 11:57:37,096 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3d70ecb6]
2021-03-11 11:57:37,233 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:57:37,234 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7606cd62]
2021-03-11 11:57:37,370 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:57:37,374 [main:105] - GENERATED CALL = (Kla5().prope7).equals("kbddr").xor(true)
2021-03-11 11:57:37,374 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e0b3dde]]
2021-03-11 11:57:37,374 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e0b3dde]
2021-03-11 11:57:37,510 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:57:37,511 [main:105] - GENERATED CALL = (Kla5().prope7).equals("iaiou")
2021-03-11 11:57:37,511 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7081d87d]]
2021-03-11 11:57:37,511 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7081d87d]
2021-03-11 11:57:37,649 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:57:37,652 [main:105] - GENERATED CALL = (Kla5().prope7).or(true)
2021-03-11 11:57:37,652 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7606cd62]]
2021-03-11 11:57:37,652 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7606cd62]
2021-03-11 11:57:37,793 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:57:37,796 [main:105] - GENERATED CALL = (Kla5().prope7).xor(true)
2021-03-11 11:57:37,796 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@69292ca6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5f8c60f0]]
2021-03-11 11:57:37,797 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@69292ca6]
2021-03-11 11:57:37,934 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:57:37,937 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5f8c60f0]
2021-03-11 11:57:38,075 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:57:38,075 [main:105] - GENERATED CALL = (Kla5().prope7).compareTo(true).equals("dsfad")
2021-03-11 11:57:38,075 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3d70ecb6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@60e33fd5]]
2021-03-11 11:57:38,075 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3d70ecb6]
2021-03-11 11:57:38,212 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:57:38,212 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@60e33fd5]
2021-03-11 11:57:38,350 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:57:38,353 [main:105] - GENERATED CALL = (Kla5().prope7).equals("tafdu").and(false)
2021-03-11 11:57:38,353 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3d70ecb6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@506d92ca]]
2021-03-11 11:57:38,353 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3d70ecb6]
2021-03-11 11:57:38,491 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:57:38,491 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@506d92ca]
2021-03-11 11:57:38,491 [main:105] - GENERATED CALL = (Kla5().prope7).equals("afdgd").not()
2021-03-11 11:57:38,491 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3d70ecb6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7081d87d]]
2021-03-11 11:57:38,491 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3d70ecb6]
2021-03-11 11:57:38,628 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:57:38,629 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7081d87d]
2021-03-11 11:57:38,766 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:57:38,769 [main:105] - GENERATED CALL = (Kla5().prope7).equals("sxdrd").or(true)
2021-03-11 11:57:38,769 [main:110] - replacement of "tlxfn" != "OK_FINALLY" of type Boolean is (Kla5().prope7).or(true)
2021-03-11 11:57:38,905 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:57:38,905 [main:66] - Compilation checking started
2021-03-11 11:57:39,479 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla8()).prope10.replaceIndentByMargin("ixsil", "uylzp")
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"})

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${(-25182)?.toByte().toString(-1459393514)}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:57:39,480 [main:103] - replacing (fu14 (
            {
                Kla8().prope10 += (Kla8()).prope10.replaceIndentByMargin("ixsil", "uylzp")
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"}), String)
2021-03-11 11:57:39,481 [main:38] - replacing fu14 (
            {
                Kla8().prope10 += (Kla8()).prope10.replaceIndentByMargin("ixsil", "uylzp")
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"}) String
2021-03-11 11:57:39,481 [main:42] - Getting value of type String
2021-03-11 11:57:39,618 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:39,621 [main:46] - GENERATED VALUE OF TYPE String = "crtuz"
2021-03-11 11:57:39,621 [main:49] - GENERATED IS CALL =false
2021-03-11 11:57:39,793 [main:55] - randomType = Kla4?
2021-03-11 11:57:39,930 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 11:57:39,933 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}
2021-03-11 11:57:39,939 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:57:39,945 [main:94] - GETTING String from Any?
2021-03-11 11:57:39,948 [main:101] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]]
2021-03-11 11:57:39,948 [main:137] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]
2021-03-11 11:57:39,948 [main:105] - GENERATED CALL = (Kla2().prope4).toString()
2021-03-11 11:57:39,948 [main:110] - replacement of fu14 (
            {
                Kla8().prope10 += (Kla8()).prope10.replaceIndentByMargin("ixsil", "uylzp")
                (Kla5().prope7).compareTo(true).toString(-602476929)
            }, { "rrenj"}) of type String is (Kla2().prope4).toString()
2021-03-11 11:57:40,084 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:57:40,085 [main:66] - Compilation checking started
2021-03-11 11:57:40,657 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return prope11;
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${(-25182)?.toByte().toString(-1459393514)}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:57:40,658 [main:103] - replacing (prope11, String)
2021-03-11 11:57:40,658 [main:38] - replacing prope11 String
2021-03-11 11:57:40,658 [main:42] - Getting value of type String
2021-03-11 11:57:40,795 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:40,798 [main:46] - GENERATED VALUE OF TYPE String = "zokmb"
2021-03-11 11:57:40,798 [main:49] - GENERATED IS CALL =false
2021-03-11 11:57:40,811 [main:55] - randomType = Kla4
2021-03-11 11:57:40,945 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 11:57:40,948 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}
2021-03-11 11:57:40,954 [main:94] - GETTING String from Any?
2021-03-11 11:57:40,956 [main:101] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]]
2021-03-11 11:57:40,957 [main:137] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]
2021-03-11 11:57:40,957 [main:105] - GENERATED CALL = (Kla2().prope4).toString()
2021-03-11 11:57:40,957 [main:110] - replacement of prope11 of type String is "zokmb"
2021-03-11 11:57:41,090 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:57:41,090 [main:66] - Compilation checking started
2021-03-11 11:57:41,703 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return "FAIL";
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${(-25182)?.toByte().toString(-1459393514)}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:57:41,704 [main:103] - replacing ("FAIL", String)
2021-03-11 11:57:41,704 [main:38] - replacing "FAIL" String
2021-03-11 11:57:41,704 [main:42] - Getting value of type String
2021-03-11 11:57:41,837 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:41,840 [main:46] - GENERATED VALUE OF TYPE String = "unsle"
2021-03-11 11:57:41,840 [main:49] - GENERATED IS CALL =false
2021-03-11 11:57:41,847 [main:55] - randomType = UInt
2021-03-11 11:57:41,979 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 11:57:42,010 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2865b6aa]
2021-03-11 11:57:42,011 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24abb2e5]
2021-03-11 11:57:42,144 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:42,147 [main:66] - Generated call from random type = (1805771717.toUInt()).toByte().toString(-1680850887)
2021-03-11 11:57:42,147 [main:110] - replacement of "FAIL" of type String is (1805771717.toUInt()).toByte().toString(-1680850887)
2021-03-11 11:57:42,279 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:57:42,280 [main:66] - Compilation checking started
2021-03-11 11:57:42,844 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return (1805771717.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    prope12 = Kla8()
    val fu16 = fu16(Kla8())
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${(-25182)?.toByte().toString(-1459393514)}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:57:42,845 [main:103] - replacing (fu16(Kla8()), String)
2021-03-11 11:57:42,845 [main:38] - replacing fu16(Kla8()) String
2021-03-11 11:57:42,845 [main:42] - Getting value of type String
2021-03-11 11:57:42,979 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:42,982 [main:46] - GENERATED VALUE OF TYPE String = "fyobn"
2021-03-11 11:57:42,982 [main:49] - GENERATED IS CALL =false
2021-03-11 11:57:43,137 [main:55] - randomType = UShort
2021-03-11 11:57:43,271 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:57:43,301 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@602543cc]
2021-03-11 11:57:43,301 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67b964b4]
2021-03-11 11:57:43,436 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:43,439 [main:66] - Generated call from random type = (29263.toUShort()).toUByte().toString(-791216294)
2021-03-11 11:57:43,440 [main:94] - GETTING String from Function0<Unit>
2021-03-11 11:57:43,450 [main:94] - GETTING String from Boolean
2021-03-11 11:57:43,458 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@69292ca6], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]]
2021-03-11 11:57:43,458 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@69292ca6]
2021-03-11 11:57:43,591 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:57:43,595 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:57:43,729 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:43,733 [main:105] - GENERATED CALL = (Kla5().prope7).compareTo(false).toString(-401694933)
2021-03-11 11:57:43,733 [main:110] - replacement of fu16(Kla8()) of type String is (29263.toUShort()).toUByte().toString(-791216294)
2021-03-11 11:57:43,866 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:57:43,867 [main:66] - Compilation checking started
2021-03-11 11:57:44,443 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return prope11;
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return (1805771717.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    prope12 = Kla8()
    val fu16 = (29263.toUShort()).toUByte().toString(-791216294)
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${(-25182)?.toByte().toString(-1459393514)}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:57:44,444 [main:103] - replacing (prope11, String)
2021-03-11 11:57:44,444 [main:38] - replacing prope11 String
2021-03-11 11:57:44,444 [main:42] - Getting value of type String
2021-03-11 11:57:44,581 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:44,585 [main:46] - GENERATED VALUE OF TYPE String = "iiwvv"
2021-03-11 11:57:44,585 [main:49] - GENERATED IS CALL =false
2021-03-11 11:57:44,749 [main:55] - randomType = Short?
2021-03-11 11:57:44,883 [main:302] - generating value of type = Short true depth = 0
2021-03-11 11:57:44,920 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@7eba01f5]
2021-03-11 11:57:44,920 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71804ef6]
2021-03-11 11:57:44,920 [main:66] - Generated call from random type = (-29252)?.toChar().lowercase()
2021-03-11 11:57:44,921 [main:94] - GETTING String from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:57:44,929 [main:94] - GETTING String from String
2021-03-11 11:57:44,947 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69597be7]]
2021-03-11 11:57:44,947 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9]
2021-03-11 11:57:45,082 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:45,221 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:45,225 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69597be7]
2021-03-11 11:57:45,361 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:57:45,501 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:57:45,505 [main:105] - GENERATED CALL = (fu1()).subSequence(-536028174, -872427617).commonSuffixWith("xrfzu", true)
2021-03-11 11:57:45,505 [main:101] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f07eaf7]]
2021-03-11 11:57:45,505 [main:137] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f07eaf7]
2021-03-11 11:57:45,642 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:57:45,648 [main:105] - GENERATED CALL = (fu1()).removeSurrounding("zyreg")
2021-03-11 11:57:45,648 [main:101] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@de8119b]]
2021-03-11 11:57:45,648 [main:137] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@de8119b]
2021-03-11 11:57:45,782 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:57:45,785 [main:105] - GENERATED CALL = (fu1()).takeLast(1864516044)
2021-03-11 11:57:45,785 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10669cd3]]
2021-03-11 11:57:45,785 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10669cd3]
2021-03-11 11:57:45,919 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 11:57:46,061 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): Iterable<Int> = TODO()
2021-03-11 11:57:46,065 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): Iterable<Int> = TODO()
2021-03-11 11:57:46,561 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:57:46,565 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:57:46,568 [main:95] - GENERATED = IntRange(51201773, -1073780824)
2021-03-11 11:57:46,568 [main:105] - GENERATED CALL = (fu1()).slice(IntRange(51201773, -1073780824))
2021-03-11 11:57:46,568 [main:101] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bc56f97]]
2021-03-11 11:57:46,568 [main:137] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bc56f97]
2021-03-11 11:57:46,704 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:57:46,707 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:57:46,710 [main:105] - GENERATED CALL = (fu1()).takeWhile({a: Char -> false})
2021-03-11 11:57:46,711 [main:101] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bb1ac4]]
2021-03-11 11:57:46,711 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bb1ac4]
2021-03-11 11:57:46,847 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:57:46,989 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 11:57:46,993 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 11:57:47,296 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 11:57:47,303 [main:95] - GENERATED = StringBuilder("pfngd")
2021-03-11 11:57:47,303 [main:105] - GENERATED CALL = (fu1()).removePrefix(StringBuilder("pfngd"))
2021-03-11 11:57:47,303 [main:101] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6afc3414]]
2021-03-11 11:57:47,303 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6afc3414]
2021-03-11 11:57:47,303 [main:105] - GENERATED CALL = (fu1()).trimIndent()
2021-03-11 11:57:47,303 [main:101] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@165349e2]]
2021-03-11 11:57:47,303 [main:137] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@165349e2]
2021-03-11 11:57:47,438 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:57:47,579 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 11:57:47,583 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 11:57:47,884 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 11:57:47,890 [main:95] - GENERATED = StringBuilder("gxbgh")
2021-03-11 11:57:47,890 [main:105] - GENERATED CALL = (fu1()).removeSuffix(StringBuilder("gxbgh"))
2021-03-11 11:57:47,890 [main:101] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9cf1d0]]
2021-03-11 11:57:47,890 [main:137] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9cf1d0]
2021-03-11 11:57:48,026 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:57:48,165 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:48,168 [main:105] - GENERATED CALL = (fu1()).substringBefore('', "flqsp")
2021-03-11 11:57:48,168 [main:101] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29fa2338]]
2021-03-11 11:57:48,168 [main:137] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29fa2338]
2021-03-11 11:57:48,168 [main:105] - GENERATED CALL = (fu1()).decapitalize()
2021-03-11 11:57:48,168 [main:110] - replacement of prope11 of type String is (-29252)?.toChar().lowercase()
2021-03-11 11:57:48,305 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:57:48,305 [main:66] - Compilation checking started
2021-03-11 11:57:48,901 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return (1805771717.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    prope12 = Kla8()
    val fu16 = (29263.toUShort()).toUByte().toString(-791216294)
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${(-25182)?.toByte().toString(-1459393514)}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || prope12.prope10 != "OK_NONLOCAL, OK_FINALLY") return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:57:48,902 [main:103] - replacing (prope12.prope10 != "OK_NONLOCAL, OK_FINALLY", Boolean)
2021-03-11 11:57:48,903 [main:38] - replacing prope12.prope10 != "OK_NONLOCAL, OK_FINALLY" Boolean
2021-03-11 11:57:48,903 [main:42] - Getting value of type Boolean
2021-03-11 11:57:49,041 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:57:49,044 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:57:49,044 [main:49] - GENERATED IS CALL =false
2021-03-11 11:57:49,582 [main:55] - randomType = Function2<Function2<Char, Int, Short?>, Kla5, Short>
2021-03-11 11:57:49,584 [main:94] - GETTING Boolean from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:57:49,592 [main:101] - Case = [public abstract fun resumeWith(result: kotlin.Result<kotlin.Pair<kotlin.Byte, Kla0>>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@108153d5], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@386d3f50]]
2021-03-11 11:57:49,592 [main:137] - GENERATING call of type public abstract fun resumeWith(result: kotlin.Result<kotlin.Pair<kotlin.Byte, Kla0>>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@108153d5]
2021-03-11 11:57:49,728 [main:302] - generating value of type = Result<Pair<Byte, Kla0>> false depth = 0
2021-03-11 11:57:49,873 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Pair<Byte, Kla0>): Result<Pair<Byte, Kla0>> = TODO()
2021-03-11 11:57:49,878 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Pair<Byte, Kla0>): Result<Pair<Byte, Kla0>> = TODO()
2021-03-11 11:57:50,198 [main:302] - generating value of type = Function0<Pair<Byte, Kla0>> false depth = 3
2021-03-11 11:57:50,202 [main:302] - generating value of type = Pair<Byte, Kla0> false depth = 4
2021-03-11 11:57:50,345 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Byte, second: Kla0): Pair<Byte, Kla0> = TODO()
2021-03-11 11:57:50,350 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Byte, second: Kla0): Pair<Byte, Kla0> = TODO()
2021-03-11 11:57:50,492 [main:302] - generating value of type = Byte true depth = 7
2021-03-11 11:57:50,495 [main:302] - generating value of type = Kla0 false depth = 7
2021-03-11 11:57:50,498 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}
2021-03-11 11:57:50,498 [main:95] - GENERATED = Pair<Byte, Kla0>(-3, Kla0())
2021-03-11 11:57:50,499 [main:95] - GENERATED = runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})
2021-03-11 11:57:50,499 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@386d3f50]
2021-03-11 11:57:50,636 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:57:50,637 [main:105] - GENERATED CALL = (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")
2021-03-11 11:57:50,637 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@228d851], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7606cd62]]
2021-03-11 11:57:50,637 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@228d851]
2021-03-11 11:57:50,776 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:57:50,776 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7606cd62]
2021-03-11 11:57:50,914 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:57:50,918 [main:105] - GENERATED CALL = (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).equals("suqtm").xor(true)
2021-03-11 11:57:50,918 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@228d851], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@60e33fd5]]
2021-03-11 11:57:50,918 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@228d851]
2021-03-11 11:57:51,095 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:57:51,095 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@60e33fd5]
2021-03-11 11:57:51,234 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:57:51,237 [main:105] - GENERATED CALL = (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).equals("svpme").and(false)
2021-03-11 11:57:51,237 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@228d851]]
2021-03-11 11:57:51,237 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@228d851]
2021-03-11 11:57:51,375 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:57:51,375 [main:105] - GENERATED CALL = (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).equals("rcwre")
2021-03-11 11:57:51,375 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@228d851], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e0b3dde]]
2021-03-11 11:57:51,376 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@228d851]
2021-03-11 11:57:51,512 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:57:51,512 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e0b3dde]
2021-03-11 11:57:51,652 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:57:51,653 [main:105] - GENERATED CALL = (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).equals("lwzrv").equals("fsfak")
2021-03-11 11:57:51,657 [main:101] - Case = [public abstract val context: kotlin.coroutines.CoroutineContext defined in kotlin.coroutines.Continuation[DeserializedPropertyDescriptor@54c5c77d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@54d98780]]
2021-03-11 11:57:51,657 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@54d98780]
2021-03-11 11:57:51,797 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:57:51,798 [main:105] - GENERATED CALL = (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).context.equals("suzjj")
2021-03-11 11:57:51,798 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@228d851], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7081d87d]]
2021-03-11 11:57:51,798 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@228d851]
2021-03-11 11:57:51,934 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:57:51,934 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7081d87d]
2021-03-11 11:57:52,070 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:57:52,074 [main:105] - GENERATED CALL = (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).equals("sjbcu").or(false)
2021-03-11 11:57:52,074 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@228d851], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@506d92ca]]
2021-03-11 11:57:52,074 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@228d851]
2021-03-11 11:57:52,209 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:57:52,209 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@506d92ca]
2021-03-11 11:57:52,209 [main:105] - GENERATED CALL = (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).equals("gguxk").not()
2021-03-11 11:57:52,209 [main:110] - replacement of prope12.prope10 != "OK_NONLOCAL, OK_FINALLY" of type Boolean is (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")
2021-03-11 11:57:52,346 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:57:52,346 [main:66] - Compilation checking started
2021-03-11 11:57:52,954 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return (1805771717.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    prope12 = Kla8()
    val fu16 = (29263.toUShort()).toUByte().toString(-791216294)
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${(-25182)?.toByte().toString(-1459393514)}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:57:52,955 [main:103] - replacing (prope12.prope10, String)
2021-03-11 11:57:52,955 [main:38] - replacing prope12.prope10 String
2021-03-11 11:57:52,955 [main:42] - Getting value of type String
2021-03-11 11:57:53,099 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:57:53,102 [main:46] - GENERATED VALUE OF TYPE String = "iqoet"
2021-03-11 11:57:53,103 [main:49] - GENERATED IS CALL =false
2021-03-11 11:57:53,293 [main:55] - randomType = List<ULong>
2021-03-11 11:57:53,294 [main:94] - GETTING String from Continuation<Any?>
2021-03-11 11:57:53,305 [main:94] - GETTING String from Any?
2021-03-11 11:57:53,309 [main:101] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]]
2021-03-11 11:57:53,309 [main:137] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]
2021-03-11 11:57:53,309 [main:105] - GENERATED CALL = (Kla2().prope4).toString()
2021-03-11 11:57:53,309 [main:110] - replacement of prope12.prope10 of type String is (Kla2().prope4).toString()
2021-03-11 11:57:53,447 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:57:53,447 [main:66] - Compilation checking started
2021-03-11 11:57:53,860 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, {
                (Kla2().prope4).toString() += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return (1805771717.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    prope12 = Kla8()
    val fu16 = (29263.toUShort()).toUByte().toString(-791216294)
    if (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt")) return "test2: ${fu16}, holder: ${(-25182)?.toByte().toString(-1459393514)}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:57:53,861 [main:103] - replacing (('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt"), Boolean)
2021-03-11 11:57:53,861 [main:38] - replacing ('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt") Boolean
2021-03-11 11:57:53,861 [main:42] - Getting value of type Boolean
2021-03-11 11:57:53,999 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:57:54,002 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:57:54,002 [main:49] - GENERATED IS CALL =false
2021-03-11 11:57:54,016 [main:55] - randomType = Kla8
2021-03-11 11:57:54,153 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 11:57:54,157 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}
2021-03-11 11:57:54,161 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla8[DeserializedSimpleFunctionDescriptor@4ad09d81]
2021-03-11 11:57:54,299 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:57:54,299 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7606cd62]
2021-03-11 11:57:54,437 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:57:54,440 [main:66] - Generated call from random type = (Kla8()).equals("kosqs").xor(false)
2021-03-11 11:57:54,441 [main:94] - GETTING Boolean from Continuation<Any?>
2021-03-11 11:57:54,449 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@228d851]]
2021-03-11 11:57:54,449 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@228d851]
2021-03-11 11:57:54,587 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:57:54,587 [main:105] - GENERATED CALL = (fu3({a: Throwable -> require(false, { "byjct"})})).equals("otuld")
2021-03-11 11:57:54,588 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@228d851], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7081d87d]]
2021-03-11 11:57:54,588 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@228d851]
2021-03-11 11:57:54,735 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:57:54,735 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7081d87d]
2021-03-11 11:57:54,874 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:57:54,877 [main:105] - GENERATED CALL = (fu3({a: Throwable -> require(false, { "byjct"})})).equals("jaaew").or(false)
2021-03-11 11:57:54,877 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@228d851], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7606cd62]]
2021-03-11 11:57:54,877 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@228d851]
2021-03-11 11:57:55,014 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:57:55,014 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7606cd62]
2021-03-11 11:57:55,151 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:57:55,155 [main:105] - GENERATED CALL = (fu3({a: Throwable -> require(false, { "byjct"})})).equals("kvkrv").xor(false)
2021-03-11 11:57:55,155 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@228d851], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e0b3dde]]
2021-03-11 11:57:55,155 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@228d851]
2021-03-11 11:57:55,292 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:57:55,292 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e0b3dde]
2021-03-11 11:57:55,430 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:57:55,431 [main:105] - GENERATED CALL = (fu3({a: Throwable -> require(false, { "byjct"})})).equals("aadgc").equals("kitmb")
2021-03-11 11:57:55,431 [main:101] - Case = [public abstract fun resumeWith(result: kotlin.Result<kotlin.Any?>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@17c1be31], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@386d3f50]]
2021-03-11 11:57:55,431 [main:137] - GENERATING call of type public abstract fun resumeWith(result: kotlin.Result<kotlin.Any?>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@17c1be31]
2021-03-11 11:57:55,568 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-11 11:57:55,712 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 11:57:55,716 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 11:57:56,069 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-11 11:57:56,073 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:57:56,073 [main:95] - GENERATED = runCatching<Any?>({ "yvoic"})
2021-03-11 11:57:56,073 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@386d3f50]
2021-03-11 11:57:56,212 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:57:56,212 [main:105] - GENERATED CALL = (fu3({a: Throwable -> require(false, { "byjct"})})).resumeWith(runCatching<Any?>({ "yvoic"})).equals("vyenj")
2021-03-11 11:57:56,212 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@228d851], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@60e33fd5]]
2021-03-11 11:57:56,212 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@228d851]
2021-03-11 11:57:56,359 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:57:56,359 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@60e33fd5]
2021-03-11 11:57:56,496 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:57:56,499 [main:105] - GENERATED CALL = (fu3({a: Throwable -> require(false, { "byjct"})})).equals("jyvuy").and(true)
2021-03-11 11:57:56,500 [main:101] - Case = [public abstract val context: kotlin.coroutines.CoroutineContext defined in kotlin.coroutines.Continuation[DeserializedPropertyDescriptor@2e35efa5], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@54d98780]]
2021-03-11 11:57:56,500 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@54d98780]
2021-03-11 11:57:56,636 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:57:56,636 [main:105] - GENERATED CALL = (fu3({a: Throwable -> require(false, { "byjct"})})).context.equals("qvdte")
2021-03-11 11:57:56,636 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@228d851], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@506d92ca]]
2021-03-11 11:57:56,636 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@228d851]
2021-03-11 11:57:56,773 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:57:56,774 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@506d92ca]
2021-03-11 11:57:56,939 [main:105] - GENERATED CALL = (fu3({a: Throwable -> require(false, { "byjct"})})).equals("nqbog").not()
2021-03-11 11:57:56,939 [main:110] - replacement of ('')?.toFloat().isFinite() || (Kla2().context).equals("rkmqi").equals("kankt") of type Boolean is (Kla8()).equals("kosqs").xor(false)
2021-03-11 11:57:57,075 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:57:57,075 [main:66] - Compilation checking started
2021-03-11 11:57:57,659 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return (1805771717.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    prope12 = Kla8()
    val fu16 = (29263.toUShort()).toUByte().toString(-791216294)
    if ((Kla8()).equals("kosqs").xor(false)) return "test2: ${fu16}, holder: ${(-25182)?.toByte().toString(-1459393514)}"

    prope12 = Kla8()
    val fu17 = fu17(prope12)
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:57:57,660 [main:103] - replacing (block(), Ty1)
2021-03-11 11:57:57,660 [main:38] - replacing block() Ty1
2021-03-11 11:57:57,660 [main:42] - Getting value of type Ty1
2021-03-11 11:57:57,806 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-11 11:57:57,812 [main:46] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-11 11:57:57,987 [main:55] - randomType = Kla3<String>
2021-03-11 11:57:58,123 [main:302] - generating value of type = Kla3<String> false depth = 0
2021-03-11 11:57:58,126 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 11:57:58,776 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 11:57:58,780 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:57:58,794 [main:94] - GETTING Ty1 from String
2021-03-11 11:57:58,812 [main:94] - GETTING Ty1 from CoroutineContext
2021-03-11 11:57:58,818 [main:94] - GETTING Ty1 from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:57:58,826 [main:94] - GETTING Ty1 from CoroutineContext
2021-03-11 11:57:58,827 [main:94] - GETTING Ty1 from CoroutineContext
2021-03-11 11:57:58,827 [main:94] - GETTING Ty1 from EmptyCoroutineContext
2021-03-11 11:57:58,843 [main:94] - GETTING Ty1 from String
2021-03-11 11:57:58,843 [main:94] - GETTING Ty1 from Any?
2021-03-11 11:57:58,846 [main:94] - GETTING Ty1 from Function0<Unit>
2021-03-11 11:57:58,855 [main:94] - GETTING Ty1 from Boolean
2021-03-11 11:57:58,864 [main:94] - GETTING Ty1 from Continuation<Any?>
2021-03-11 11:57:58,871 [main:107] - Cant find and generate replacement for block() type Ty1
2021-03-11 11:57:58,871 [main:103] - replacing (prope12, Kla8)
2021-03-11 11:57:58,871 [main:38] - replacing prope12 Kla8
2021-03-11 11:57:58,871 [main:42] - Getting value of type Kla8
2021-03-11 11:57:59,009 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 11:57:59,013 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}
2021-03-11 11:57:59,013 [main:46] - GENERATED VALUE OF TYPE Kla8 = Kla8()
2021-03-11 11:57:59,013 [main:49] - GENERATED IS CALL =true
2021-03-11 11:57:59,348 [main:55] - randomType = ArrayDeque<Short?>
2021-03-11 11:57:59,484 [main:302] - generating value of type = ArrayDeque<Short?> false depth = 0
2021-03-11 11:57:59,628 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Short?> = TODO()
2021-03-11 11:57:59,632 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Short?> = TODO()
2021-03-11 11:57:59,776 [main:95] - GENERATED = ArrayDeque<Short?>()
2021-03-11 11:57:59,930 [main:94] - GETTING Kla8 from EmptyCoroutineContext
2021-03-11 11:57:59,944 [main:94] - GETTING Kla8 from Any?
2021-03-11 11:57:59,947 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:57:59,953 [main:94] - GETTING Kla8 from Function0<Unit>
2021-03-11 11:57:59,962 [main:94] - GETTING Kla8 from Boolean
2021-03-11 11:57:59,970 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:57:59,971 [main:94] - GETTING Kla8 from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:57:59,979 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:57:59,980 [main:94] - GETTING Kla8 from String
2021-03-11 11:57:59,997 [main:94] - GETTING Kla8 from String
2021-03-11 11:57:59,998 [main:94] - GETTING Kla8 from Continuation<Any?>
2021-03-11 11:58:00,004 [main:110] - replacement of prope12 of type Kla8 is Kla8()
2021-03-11 11:58:00,140 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:58:00,141 [main:66] - Compilation checking started
2021-03-11 11:58:00,739 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return (1805771717.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    prope12 = Kla8()
    val fu16 = (29263.toUShort()).toUByte().toString(-791216294)
    if ((Kla8()).equals("kosqs").xor(false)) return "test2: ${fu16}, holder: ${(-25182)?.toByte().toString(-1459393514)}"

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:58:00,741 [main:103] - replacing ("test2: ${fu16}, holder: ${(-25182)?.toByte().toString(-1459393514)}", String)
2021-03-11 11:58:00,742 [main:38] - replacing "test2: ${fu16}, holder: ${(-25182)?.toByte().toString(-1459393514)}" String
2021-03-11 11:58:00,742 [main:42] - Getting value of type String
2021-03-11 11:58:00,905 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:58:00,908 [main:46] - GENERATED VALUE OF TYPE String = "bijcy"
2021-03-11 11:58:00,908 [main:49] - GENERATED IS CALL =false
2021-03-11 11:58:01,466 [main:55] - randomType = Function1<Kla3<Kla3<ULong>>, Kla8>
2021-03-11 11:58:01,467 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:58:01,473 [main:94] - GETTING String from String
2021-03-11 11:58:01,489 [main:101] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4500af19]]
2021-03-11 11:58:01,490 [main:137] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4500af19]
2021-03-11 11:58:01,626 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:58:01,766 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:58:01,770 [main:105] - GENERATED CALL = (Kla0().prope2).substringAfter('글', "phaup")
2021-03-11 11:58:01,770 [main:101] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ba808ab]]
2021-03-11 11:58:01,770 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ba808ab]
2021-03-11 11:58:01,906 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:58:02,046 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:58:02,050 [main:105] - GENERATED CALL = (Kla0().prope2).padEnd(708569431, '軗')
2021-03-11 11:58:02,050 [main:101] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@de8119b]]
2021-03-11 11:58:02,050 [main:137] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@de8119b]
2021-03-11 11:58:02,186 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:58:02,190 [main:105] - GENERATED CALL = (Kla0().prope2).takeLast(1724219154)
2021-03-11 11:58:02,190 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cd3e5fa]]
2021-03-11 11:58:02,190 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f9ae1a9]
2021-03-11 11:58:02,327 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:58:02,466 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:58:02,470 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cd3e5fa]
2021-03-11 11:58:02,605 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:58:02,609 [main:105] - GENERATED CALL = (Kla0().prope2).subSequence(-1734814756, 123588768).repeat(-1949571223)
2021-03-11 11:58:02,609 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75aa15bd]]
2021-03-11 11:58:02,609 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75aa15bd]
2021-03-11 11:58:02,609 [main:105] - GENERATED CALL = (Kla0().prope2).trim()
2021-03-11 11:58:02,609 [main:101] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74bc8742]]
2021-03-11 11:58:02,609 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74bc8742]
2021-03-11 11:58:02,747 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:58:02,887 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:58:03,027 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:58:03,031 [main:105] - GENERATED CALL = (Kla0().prope2).replaceAfterLast('缪', "ewywy", "ebwmy")
2021-03-11 11:58:03,031 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64a3bad2]]
2021-03-11 11:58:03,031 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64a3bad2]
2021-03-11 11:58:03,031 [main:105] - GENERATED CALL = (Kla0().prope2).lowercase()
2021-03-11 11:58:03,031 [main:101] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f07eaf7]]
2021-03-11 11:58:03,031 [main:137] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f07eaf7]
2021-03-11 11:58:03,169 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:58:03,314 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 11:58:03,318 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 11:58:03,622 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 11:58:03,628 [main:95] - GENERATED = StringBuilder("exoms")
2021-03-11 11:58:03,629 [main:105] - GENERATED CALL = (Kla0().prope2).removeSurrounding(StringBuilder("exoms"))
2021-03-11 11:58:03,629 [main:101] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e6673fa]]
2021-03-11 11:58:03,629 [main:137] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e6673fa]
2021-03-11 11:58:03,766 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:58:03,770 [main:105] - GENERATED CALL = (Kla0().prope2).trimMargin("drjnc")
2021-03-11 11:58:03,770 [main:101] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45f9386a]]
2021-03-11 11:58:03,770 [main:137] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45f9386a]
2021-03-11 11:58:03,910 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:58:03,914 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:58:03,917 [main:105] - GENERATED CALL = (Kla0().prope2).dropWhile({a: Char -> true})
2021-03-11 11:58:03,917 [main:110] - replacement of "test2: ${fu16}, holder: ${(-25182)?.toByte().toString(-1459393514)}" of type String is (Kla0().prope2).trim()
2021-03-11 11:58:04,054 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:58:04,055 [main:66] - Compilation checking started
2021-03-11 11:58:04,640 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += ", OK_FINALLY"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return (1805771717.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    prope12 = Kla8()
    val fu16 = (29263.toUShort()).toUByte().toString(-791216294)
    if ((Kla8()).equals("kosqs").xor(false)) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:58:04,641 [main:103] - replacing (", OK_FINALLY", String)
2021-03-11 11:58:04,641 [main:38] - replacing ", OK_FINALLY" String
2021-03-11 11:58:04,641 [main:42] - Getting value of type String
2021-03-11 11:58:04,779 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:58:04,782 [main:46] - GENERATED VALUE OF TYPE String = "xsmtf"
2021-03-11 11:58:04,782 [main:49] - GENERATED IS CALL =false
2021-03-11 11:58:05,306 [main:55] - randomType = Kla3<HashMap<Byte, Kla5>>
2021-03-11 11:58:05,444 [main:302] - generating value of type = Kla3<HashMap<Byte, Kla5>> false depth = 0
2021-03-11 11:58:05,447 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 11:58:05,959 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 11:58:05,962 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:58:05,980 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:58:05,986 [main:94] - GETTING String from Boolean
2021-03-11 11:58:05,994 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@69292ca6], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]]
2021-03-11 11:58:05,995 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@69292ca6]
2021-03-11 11:58:06,131 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:58:06,135 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:58:06,271 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:58:06,275 [main:105] - GENERATED CALL = (Kla5().prope7).compareTo(true).toString(-2040405938)
2021-03-11 11:58:06,275 [main:110] - replacement of ", OK_FINALLY" of type String is "xsmtf"
2021-03-11 11:58:06,441 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 11:58:06,441 [main:66] - Compilation checking started
2021-03-11 11:58:07,201 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += "xsmtf"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return (1805771717.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    prope12 = Kla8()
    val fu16 = (29263.toUShort()).toUByte().toString(-791216294)
    if ((Kla8()).equals("kosqs").xor(false)) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:58:07,202 [main:103] - replacing (block, Function0<Ty1>)
2021-03-11 11:58:07,202 [main:38] - replacing block Function0<Ty1>
2021-03-11 11:58:07,202 [main:42] - Getting value of type Function0<Ty1>
2021-03-11 11:58:07,340 [main:302] - generating value of type = Function0<Ty1> false depth = 0
2021-03-11 11:58:07,344 [main:302] - generating value of type = Ty1 false depth = 1
2021-03-11 11:58:07,350 [main:46] - GENERATED VALUE OF TYPE Function0<Ty1> = { }
2021-03-11 11:58:07,350 [main:49] - GENERATED IS CALL =false
2021-03-11 11:58:07,357 [main:55] - randomType = Byte
2021-03-11 11:58:07,493 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:58:07,529 [main:94] - GETTING Function0<Ty1> from CoroutineContext
2021-03-11 11:58:07,535 [main:94] - GETTING Function0<Ty1> from CoroutineContext
2021-03-11 11:58:07,536 [main:94] - GETTING Function0<Ty1> from String
2021-03-11 11:58:07,554 [main:94] - GETTING Function0<Ty1> from Any?
2021-03-11 11:58:07,558 [main:94] - GETTING Function0<Ty1> from Boolean
2021-03-11 11:58:07,567 [main:94] - GETTING Function0<Ty1> from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:58:07,575 [main:94] - GETTING Function0<Ty1> from EmptyCoroutineContext
2021-03-11 11:58:07,590 [main:94] - GETTING Function0<Ty1> from String
2021-03-11 11:58:07,591 [main:94] - GETTING Function0<Ty1> from CoroutineContext
2021-03-11 11:58:07,592 [main:94] - GETTING Function0<Ty1> from Function0<Unit>
2021-03-11 11:58:07,602 [main:94] - GETTING Function0<Ty1> from Continuation<Any?>
2021-03-11 11:58:07,608 [main:110] - replacement of block of type Function0<Ty1> is { }
2021-03-11 11:58:07,745 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:58:07,745 [main:66] - Compilation checking started
2021-03-11 11:58:08,153 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return { }()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += "xsmtf"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return (1805771717.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    prope12 = Kla8()
    val fu16 = (29263.toUShort()).toUByte().toString(-791216294)
    if ((Kla8()).equals("kosqs").xor(false)) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:58:08,154 [main:103] - replacing (finallyBlock, Function0<Ty1>)
2021-03-11 11:58:08,154 [main:38] - replacing finallyBlock Function0<Ty1>
2021-03-11 11:58:08,155 [main:42] - Getting value of type Function0<Ty1>
2021-03-11 11:58:08,291 [main:302] - generating value of type = Function0<Ty1> false depth = 0
2021-03-11 11:58:08,295 [main:302] - generating value of type = Ty1 false depth = 1
2021-03-11 11:58:08,300 [main:46] - GENERATED VALUE OF TYPE Function0<Ty1> = { }
2021-03-11 11:58:08,301 [main:49] - GENERATED IS CALL =false
2021-03-11 11:58:08,308 [main:55] - randomType = UShort
2021-03-11 11:58:08,445 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:58:08,477 [main:94] - GETTING Function0<Ty1> from Continuation<Any?>
2021-03-11 11:58:08,484 [main:94] - GETTING Function0<Ty1> from String
2021-03-11 11:58:08,502 [main:94] - GETTING Function0<Ty1> from EmptyCoroutineContext
2021-03-11 11:58:08,516 [main:94] - GETTING Function0<Ty1> from Function0<Unit>
2021-03-11 11:58:08,525 [main:94] - GETTING Function0<Ty1> from CoroutineContext
2021-03-11 11:58:08,533 [main:94] - GETTING Function0<Ty1> from Boolean
2021-03-11 11:58:08,541 [main:94] - GETTING Function0<Ty1> from String
2021-03-11 11:58:08,542 [main:94] - GETTING Function0<Ty1> from CoroutineContext
2021-03-11 11:58:08,543 [main:94] - GETTING Function0<Ty1> from Any?
2021-03-11 11:58:08,547 [main:94] - GETTING Function0<Ty1> from CoroutineContext
2021-03-11 11:58:08,548 [main:94] - GETTING Function0<Ty1> from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:58:08,556 [main:110] - replacement of finallyBlock of type Function0<Ty1> is { }
2021-03-11 11:58:08,692 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:58:08,692 [main:66] - Compilation checking started
2021-03-11 11:58:09,099 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return { }()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += "xsmtf"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return (1805771717.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    prope12 = Kla8()
    val fu16 = (29263.toUShort()).toUByte().toString(-791216294)
    if ((Kla8()).equals("kosqs").xor(false)) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (fu17 != "OK_FINALLY" || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:58:09,100 [main:103] - replacing (fu17 != "OK_FINALLY", Boolean)
2021-03-11 11:58:09,101 [main:38] - replacing fu17 != "OK_FINALLY" Boolean
2021-03-11 11:58:09,101 [main:42] - Getting value of type Boolean
2021-03-11 11:58:09,239 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:58:09,243 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:58:09,243 [main:49] - GENERATED IS CALL =false
2021-03-11 11:58:10,099 [main:55] - randomType = Triple<ArrayDeque<List<UByte?>>?, Kla1, UByte>
2021-03-11 11:58:10,236 [main:302] - generating value of type = Triple<ArrayDeque<List<UByte?>>?, Kla1, UByte> false depth = 0
2021-03-11 11:58:10,382 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: ArrayDeque<List<UByte?>>?, second: Kla1, third: UByte): Triple<ArrayDeque<List<UByte?>>?, Kla1, UByte> = TODO()
2021-03-11 11:58:10,386 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: ArrayDeque<List<UByte?>>?, second: Kla1, third: UByte): Triple<ArrayDeque<List<UByte?>>?, Kla1, UByte> = TODO()
2021-03-11 11:58:10,531 [main:302] - generating value of type = ArrayDeque<List<UByte?>> false depth = 3
2021-03-11 11:58:10,674 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<List<UByte?>>): ArrayDeque<List<UByte?>> = TODO()
2021-03-11 11:58:10,679 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<List<UByte?>>): ArrayDeque<List<UByte?>> = TODO()
2021-03-11 11:58:11,045 [main:302] - generating value of type = Collection<List<UByte?>> false depth = 6
2021-03-11 11:58:11,191 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: List<UByte?>): Collection<List<UByte?>> = TODO()
2021-03-11 11:58:11,196 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: List<UByte?>): Collection<List<UByte?>> = TODO()
2021-03-11 11:58:11,340 [main:302] - generating value of type = List<UByte?> false depth = 9
2021-03-11 11:58:11,485 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: UByte?): List<UByte?> = TODO()
2021-03-11 11:58:11,489 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: UByte?): List<UByte?> = TODO()
2021-03-11 11:58:11,633 [main:302] - generating value of type = UByte true depth = 12
2021-03-11 11:58:11,636 [main:95] - GENERATED = arrayListOf<UByte?>(15.toUByte())
2021-03-11 11:58:11,636 [main:95] - GENERATED = linkedSetOf<List<UByte?>>(arrayListOf<UByte?>(15.toUByte()))
2021-03-11 11:58:11,637 [main:95] - GENERATED = ArrayDeque<List<UByte?>>(linkedSetOf<List<UByte?>>(arrayListOf<UByte?>(15.toUByte())))
2021-03-11 11:58:11,637 [main:302] - generating value of type = Kla1 false depth = 3
2021-03-11 11:58:11,640 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}
2021-03-11 11:58:11,778 [main:194] - Type params = []
2021-03-11 11:58:11,914 [main:302] - generating value of type = CoroutineContext false depth = 5
2021-03-11 11:58:12,057 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:58:12,062 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:58:12,371 [main:302] - generating value of type = Key<*> false depth = 8
2021-03-11 11:58:12,517 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:58:12,521 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:58:12,998 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:58:12,998 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:58:12,999 [main:302] - generating value of type = UByte true depth = 3
2021-03-11 11:58:13,002 [main:95] - GENERATED = Triple<ArrayDeque<List<UByte?>>?, Kla1, UByte>(ArrayDeque<List<UByte?>>(linkedSetOf<List<UByte?>>(arrayListOf<UByte?>(15.toUByte()))), Kla1(), 5.toUByte())
2021-03-11 11:58:13,026 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Triple[DeserializedSimpleFunctionDescriptor@728cee51]
2021-03-11 11:58:13,165 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:58:13,165 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7081d87d]
2021-03-11 11:58:13,301 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:58:13,304 [main:66] - Generated call from random type = (Triple<ArrayDeque<List<UByte?>>?, Kla1, UByte>(ArrayDeque<List<UByte?>>(linkedSetOf<List<UByte?>>(arrayListOf<UByte?>(15.toUByte()))), Kla1(), 5.toUByte())).equals("hglex").or(true)
2021-03-11 11:58:13,305 [main:94] - GETTING Boolean from Function0<Unit>
2021-03-11 11:58:13,314 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@31028a0d], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7606cd62]]
2021-03-11 11:58:13,315 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@31028a0d]
2021-03-11 11:58:13,451 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:58:13,451 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7606cd62]
2021-03-11 11:58:13,587 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:58:13,591 [main:105] - GENERATED CALL = (Kla5().prope8).equals("ncldf").xor(false)
2021-03-11 11:58:13,591 [main:101] - Case = [public abstract operator fun invoke(): kotlin.Unit defined in kotlin.Function0[FunctionInvokeDescriptor@1b9b719e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@386d3f50]]
2021-03-11 11:58:13,591 [main:137] - GENERATING call of type public abstract operator fun invoke(): kotlin.Unit defined in kotlin.Function0[FunctionInvokeDescriptor@1b9b719e]
2021-03-11 11:58:13,591 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@386d3f50]
2021-03-11 11:58:13,727 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:58:13,728 [main:105] - GENERATED CALL = (Kla5().prope8).invoke().equals("xgade")
2021-03-11 11:58:13,728 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@31028a0d]]
2021-03-11 11:58:13,728 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@31028a0d]
2021-03-11 11:58:13,865 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:58:13,865 [main:105] - GENERATED CALL = (Kla5().prope8).equals("gcenk")
2021-03-11 11:58:13,865 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@31028a0d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e0b3dde]]
2021-03-11 11:58:13,865 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@31028a0d]
2021-03-11 11:58:14,004 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e0b3dde]
2021-03-11 11:58:14,141 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:58:14,141 [main:105] - GENERATED CALL = (Kla5().prope8).equals(null).equals("jlwlk")
2021-03-11 11:58:14,141 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@31028a0d], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@506d92ca]]
2021-03-11 11:58:14,141 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@31028a0d]
2021-03-11 11:58:14,279 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:58:14,279 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@506d92ca]
2021-03-11 11:58:14,279 [main:105] - GENERATED CALL = (Kla5().prope8).equals("brxkc").not()
2021-03-11 11:58:14,279 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@31028a0d], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@60e33fd5]]
2021-03-11 11:58:14,279 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@31028a0d]
2021-03-11 11:58:14,416 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:58:14,416 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@60e33fd5]
2021-03-11 11:58:14,552 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:58:14,556 [main:105] - GENERATED CALL = (Kla5().prope8).equals("idvdn").and(false)
2021-03-11 11:58:14,556 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@31028a0d], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7081d87d]]
2021-03-11 11:58:14,556 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@31028a0d]
2021-03-11 11:58:14,692 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:58:14,692 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7081d87d]
2021-03-11 11:58:14,830 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:58:14,833 [main:105] - GENERATED CALL = (Kla5().prope8).equals("hphvi").or(false)
2021-03-11 11:58:14,833 [main:110] - replacement of fu17 != "OK_FINALLY" of type Boolean is (Kla5().prope8).equals("brxkc").not()
2021-03-11 11:58:14,969 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:58:14,970 [main:66] - Compilation checking started
2021-03-11 11:58:15,548 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, {
                prope12.prope10 += "xsmtf"
                return ('ֻ').toByte().toString(-1659686639)
            })

    return (1805771717.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    prope12 = Kla8()
    val fu16 = (29263.toUShort()).toUByte().toString(-791216294)
    if ((Kla8()).equals("kosqs").xor(false)) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if ((Kla5().prope8).equals("brxkc").not() || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:58:15,549 [main:103] - replacing ({
                prope12.prope10 += "xsmtf"
                return ('ֻ').toByte().toString(-1659686639)
            }, Function0<Nothing>)
2021-03-11 11:58:15,549 [main:38] - replacing {
                prope12.prope10 += "xsmtf"
                return ('ֻ').toByte().toString(-1659686639)
            } Function0<Nothing>
2021-03-11 11:58:15,549 [main:42] - Getting value of type Function0<Nothing>
2021-03-11 11:58:15,688 [main:302] - generating value of type = Function0<Nothing> false depth = 0
2021-03-11 11:58:15,691 [main:302] - generating value of type = Nothing false depth = 1
2021-03-11 11:58:15,874 [main:43] - GENERATING CALL OF fun TODO(reason: kotlin.String): Nothg = TODO()
2021-03-11 11:58:15,878 [main:61] - WITHOUT TYPE PARAMS = fun TODO(reason: kotlin.String): Nothg = TODO()
2021-03-11 11:58:16,181 [main:302] - generating value of type = String true depth = 4
2021-03-11 11:58:16,184 [main:95] - GENERATED = TODO("xflyx")
2021-03-11 11:58:16,184 [main:46] - GENERATED VALUE OF TYPE Function0<Nothing> = { TODO("xflyx")}
2021-03-11 11:58:16,184 [main:49] - GENERATED IS CALL =false
2021-03-11 11:58:16,198 [main:55] - randomType = Kla1
2021-03-11 11:58:16,336 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 11:58:16,339 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}
2021-03-11 11:58:16,475 [main:194] - Type params = []
2021-03-11 11:58:16,611 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 11:58:16,753 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:58:16,758 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:58:17,069 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 11:58:17,217 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:58:17,222 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:58:17,701 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:58:17,701 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:58:17,715 [main:94] - GETTING Function0<Nothing> from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:58:17,725 [main:94] - GETTING Function0<Nothing> from Continuation<Any?>
2021-03-11 11:58:17,732 [main:94] - GETTING Function0<Nothing> from CoroutineContext
2021-03-11 11:58:17,739 [main:94] - GETTING Function0<Nothing> from Boolean
2021-03-11 11:58:17,749 [main:94] - GETTING Function0<Nothing> from String
2021-03-11 11:58:17,768 [main:94] - GETTING Function0<Nothing> from EmptyCoroutineContext
2021-03-11 11:58:17,784 [main:94] - GETTING Function0<Nothing> from String
2021-03-11 11:58:17,785 [main:94] - GETTING Function0<Nothing> from Any?
2021-03-11 11:58:17,791 [main:94] - GETTING Function0<Nothing> from Function0<Unit>
2021-03-11 11:58:17,804 [main:94] - GETTING Function0<Nothing> from CoroutineContext
2021-03-11 11:58:17,805 [main:94] - GETTING Function0<Nothing> from CoroutineContext
2021-03-11 11:58:17,805 [main:110] - replacement of {
                prope12.prope10 += "xsmtf"
                return ('ֻ').toByte().toString(-1659686639)
            } of type Function0<Nothing> is { TODO("xflyx")}
2021-03-11 11:58:17,942 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:58:17,942 [main:66] - Compilation checking started
2021-03-11 11:58:18,540 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1805771717.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    prope12 = Kla8()
    val fu16 = (29263.toUShort()).toUByte().toString(-791216294)
    if ((Kla8()).equals("kosqs").xor(false)) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if ((Kla5().prope8).equals("brxkc").not() || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:58:18,541 [main:103] - replacing (block, Function0<Ty1>)
2021-03-11 11:58:18,541 [main:38] - replacing block Function0<Ty1>
2021-03-11 11:58:18,541 [main:42] - Getting value of type Function0<Ty1>
2021-03-11 11:58:18,677 [main:302] - generating value of type = Function0<Ty1> false depth = 0
2021-03-11 11:58:18,681 [main:302] - generating value of type = Ty1 false depth = 1
2021-03-11 11:58:18,687 [main:46] - GENERATED VALUE OF TYPE Function0<Ty1> = { }
2021-03-11 11:58:18,687 [main:49] - GENERATED IS CALL =false
2021-03-11 11:58:19,033 [main:55] - randomType = Pair<ArrayDeque<Float>, Kla2>
2021-03-11 11:58:19,167 [main:302] - generating value of type = Pair<ArrayDeque<Float>, Kla2> false depth = 0
2021-03-11 11:58:19,308 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: ArrayDeque<Float>, second: Kla2): Pair<ArrayDeque<Float>, Kla2> = TODO()
2021-03-11 11:58:19,312 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: ArrayDeque<Float>, second: Kla2): Pair<ArrayDeque<Float>, Kla2> = TODO()
2021-03-11 11:58:19,457 [main:302] - generating value of type = ArrayDeque<Float> false depth = 3
2021-03-11 11:58:19,598 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Float> = TODO()
2021-03-11 11:58:19,602 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Float> = TODO()
2021-03-11 11:58:19,898 [main:302] - generating value of type = Int true depth = 6
2021-03-11 11:58:19,902 [main:95] - GENERATED = ArrayDeque<Float>(-782600942)
2021-03-11 11:58:19,902 [main:302] - generating value of type = Kla2 false depth = 3
2021-03-11 11:58:19,905 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}
2021-03-11 11:58:19,905 [main:95] - GENERATED = Pair<ArrayDeque<Float>, Kla2>(ArrayDeque<Float>(-782600942), Kla2())
2021-03-11 11:58:19,924 [main:94] - GETTING Function0<Ty1> from Any?
2021-03-11 11:58:19,929 [main:94] - GETTING Function0<Ty1> from EmptyCoroutineContext
2021-03-11 11:58:19,943 [main:94] - GETTING Function0<Ty1> from Continuation<Any?>
2021-03-11 11:58:19,950 [main:94] - GETTING Function0<Ty1> from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:58:19,960 [main:94] - GETTING Function0<Ty1> from Boolean
2021-03-11 11:58:19,969 [main:94] - GETTING Function0<Ty1> from CoroutineContext
2021-03-11 11:58:19,975 [main:94] - GETTING Function0<Ty1> from Function0<Unit>
2021-03-11 11:58:19,984 [main:94] - GETTING Function0<Ty1> from CoroutineContext
2021-03-11 11:58:19,985 [main:94] - GETTING Function0<Ty1> from String
2021-03-11 11:58:20,003 [main:94] - GETTING Function0<Ty1> from String
2021-03-11 11:58:20,004 [main:94] - GETTING Function0<Ty1> from CoroutineContext
2021-03-11 11:58:20,004 [main:110] - replacement of block of type Function0<Ty1> is { }
2021-03-11 11:58:20,138 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:58:20,139 [main:66] - Compilation checking started
2021-03-11 11:58:20,553 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return { }()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1805771717.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    prope12 = Kla8()
    val fu16 = (29263.toUShort()).toUByte().toString(-791216294)
    if ((Kla8()).equals("kosqs").xor(false)) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if ((Kla5().prope8).equals("brxkc").not() || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${fu18}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:58:20,554 [main:103] - replacing (fu18, String)
2021-03-11 11:58:20,554 [main:38] - replacing fu18 String
2021-03-11 11:58:20,554 [main:42] - Getting value of type String
2021-03-11 11:58:20,692 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:58:20,695 [main:46] - GENERATED VALUE OF TYPE String = "lhgkb"
2021-03-11 11:58:20,695 [main:49] - GENERATED IS CALL =false
2021-03-11 11:58:21,084 [main:55] - randomType = Map<Kla3<Kla4>, Int>
2021-03-11 11:58:21,085 [main:94] - GETTING String from Any?
2021-03-11 11:58:21,089 [main:101] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]]
2021-03-11 11:58:21,089 [main:137] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2783b6d1]
2021-03-11 11:58:21,089 [main:105] - GENERATED CALL = (Kla2().prope4).toString()
2021-03-11 11:58:21,089 [main:110] - replacement of fu18 of type String is "lhgkb"
2021-03-11 11:58:21,223 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:58:21,223 [main:66] - Compilation checking started
2021-03-11 11:58:21,806 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1805771717.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    prope12 = Kla8()
    val fu16 = (29263.toUShort()).toUByte().toString(-791216294)
    if ((Kla8()).equals("kosqs").xor(false)) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if ((Kla5().prope8).equals("brxkc").not() || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:58:21,807 [main:103] - replacing (block(), Ty1)
2021-03-11 11:58:21,807 [main:38] - replacing block() Ty1
2021-03-11 11:58:21,807 [main:42] - Getting value of type Ty1
2021-03-11 11:58:21,942 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-11 11:58:21,948 [main:46] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-11 11:58:22,956 [main:55] - randomType = Triple<UInt?, ArrayDeque<Kla3<Int>>, Kla8>?
2021-03-11 11:58:23,090 [main:302] - generating value of type = Triple<UInt?, ArrayDeque<Kla3<Int>>, Kla8> false depth = 0
2021-03-11 11:58:23,234 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: UInt?, second: ArrayDeque<Kla3<Int>>, third: Kla8): Triple<UInt?, ArrayDeque<Kla3<Int>>, Kla8> = TODO()
2021-03-11 11:58:23,238 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: UInt?, second: ArrayDeque<Kla3<Int>>, third: Kla8): Triple<UInt?, ArrayDeque<Kla3<Int>>, Kla8> = TODO()
2021-03-11 11:58:23,383 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 11:58:23,386 [main:302] - generating value of type = ArrayDeque<Kla3<Int>> false depth = 3
2021-03-11 11:58:23,528 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Kla3<Int>> = TODO()
2021-03-11 11:58:23,532 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Kla3<Int>> = TODO()
2021-03-11 11:58:23,832 [main:302] - generating value of type = Int true depth = 6
2021-03-11 11:58:23,836 [main:95] - GENERATED = ArrayDeque<Kla3<Int>>(1581040339)
2021-03-11 11:58:23,836 [main:302] - generating value of type = Kla8 false depth = 3
2021-03-11 11:58:23,839 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}
2021-03-11 11:58:23,839 [main:95] - GENERATED = Triple<UInt?, ArrayDeque<Kla3<Int>>, Kla8>(451454894.toUInt(), ArrayDeque<Kla3<Int>>(1581040339), Kla8())
2021-03-11 11:58:23,870 [main:94] - GETTING Ty1 from Continuation<Any?>
2021-03-11 11:58:23,877 [main:94] - GETTING Ty1 from Function0<Unit>
2021-03-11 11:58:23,886 [main:94] - GETTING Ty1 from Any?
2021-03-11 11:58:23,889 [main:94] - GETTING Ty1 from CoroutineContext
2021-03-11 11:58:23,895 [main:94] - GETTING Ty1 from Boolean
2021-03-11 11:58:23,903 [main:94] - GETTING Ty1 from String
2021-03-11 11:58:23,920 [main:94] - GETTING Ty1 from CoroutineContext
2021-03-11 11:58:23,921 [main:94] - GETTING Ty1 from EmptyCoroutineContext
2021-03-11 11:58:23,935 [main:94] - GETTING Ty1 from String
2021-03-11 11:58:23,936 [main:94] - GETTING Ty1 from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:58:23,944 [main:94] - GETTING Ty1 from CoroutineContext
2021-03-11 11:58:23,944 [main:107] - Cant find and generate replacement for block() type Ty1
2021-03-11 11:58:23,944 [main:103] - replacing (prope12, Kla8)
2021-03-11 11:58:23,945 [main:38] - replacing prope12 Kla8
2021-03-11 11:58:23,945 [main:42] - Getting value of type Kla8
2021-03-11 11:58:24,078 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 11:58:24,082 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}
2021-03-11 11:58:24,082 [main:46] - GENERATED VALUE OF TYPE Kla8 = Kla8()
2021-03-11 11:58:24,082 [main:49] - GENERATED IS CALL =true
2021-03-11 11:58:24,089 [main:55] - randomType = Boolean
2021-03-11 11:58:24,223 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:58:24,236 [main:94] - GETTING Kla8 from String
2021-03-11 11:58:24,253 [main:94] - GETTING Kla8 from Function0<Unit>
2021-03-11 11:58:24,262 [main:94] - GETTING Kla8 from String
2021-03-11 11:58:24,263 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:58:24,269 [main:94] - GETTING Kla8 from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:58:24,277 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:58:24,278 [main:94] - GETTING Kla8 from Boolean
2021-03-11 11:58:24,287 [main:94] - GETTING Kla8 from Continuation<Any?>
2021-03-11 11:58:24,294 [main:94] - GETTING Kla8 from EmptyCoroutineContext
2021-03-11 11:58:24,307 [main:94] - GETTING Kla8 from Any?
2021-03-11 11:58:24,311 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:58:24,311 [main:110] - replacement of prope12 of type Kla8 is Kla8()
2021-03-11 11:58:24,444 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:58:24,445 [main:66] - Compilation checking started
2021-03-11 11:58:24,846 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1805771717.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    Kla8() = Kla8()
    val fu16 = (29263.toUShort()).toUByte().toString(-791216294)
    if ((Kla8()).equals("kosqs").xor(false)) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if ((Kla5().prope8).equals("brxkc").not() || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:58:24,847 [main:103] - replacing (Kla8(), Kla8)
2021-03-11 11:58:24,848 [main:38] - replacing Kla8() Kla8
2021-03-11 11:58:24,848 [main:42] - Getting value of type Kla8
2021-03-11 11:58:24,982 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 11:58:24,986 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}
2021-03-11 11:58:24,986 [main:46] - GENERATED VALUE OF TYPE Kla8 = Kla8()
2021-03-11 11:58:24,986 [main:49] - GENERATED IS CALL =true
2021-03-11 11:58:25,149 [main:55] - randomType = Kla6
2021-03-11 11:58:25,283 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 11:58:25,287 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:58:25,305 [main:94] - GETTING Kla8 from Boolean
2021-03-11 11:58:25,315 [main:94] - GETTING Kla8 from Any?
2021-03-11 11:58:25,318 [main:94] - GETTING Kla8 from String
2021-03-11 11:58:25,335 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:58:25,341 [main:94] - GETTING Kla8 from EmptyCoroutineContext
2021-03-11 11:58:25,355 [main:94] - GETTING Kla8 from Continuation<Any?>
2021-03-11 11:58:25,362 [main:94] - GETTING Kla8 from String
2021-03-11 11:58:25,362 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:58:25,363 [main:94] - GETTING Kla8 from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:58:25,372 [main:94] - GETTING Kla8 from CoroutineContext
2021-03-11 11:58:25,372 [main:94] - GETTING Kla8 from Function0<Unit>
2021-03-11 11:58:25,381 [main:110] - replacement of Kla8() of type Kla8 is Kla8()
2021-03-11 11:58:25,515 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:58:25,517 [main:103] - replacing (block, Function0<Ty1>)
2021-03-11 11:58:25,517 [main:38] - replacing block Function0<Ty1>
2021-03-11 11:58:25,517 [main:42] - Getting value of type Function0<Ty1>
2021-03-11 11:58:25,689 [main:302] - generating value of type = Function0<Ty1> false depth = 0
2021-03-11 11:58:25,692 [main:302] - generating value of type = Ty1 false depth = 1
2021-03-11 11:58:25,698 [main:46] - GENERATED VALUE OF TYPE Function0<Ty1> = { }
2021-03-11 11:58:25,698 [main:49] - GENERATED IS CALL =false
2021-03-11 11:58:25,859 [main:55] - randomType = Long?
2021-03-11 11:58:25,994 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:58:26,031 [main:94] - GETTING Function0<Ty1> from Any?
2021-03-11 11:58:26,034 [main:94] - GETTING Function0<Ty1> from Boolean
2021-03-11 11:58:26,043 [main:94] - GETTING Function0<Ty1> from Continuation<Any?>
2021-03-11 11:58:26,050 [main:94] - GETTING Function0<Ty1> from EmptyCoroutineContext
2021-03-11 11:58:26,065 [main:94] - GETTING Function0<Ty1> from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:58:26,074 [main:94] - GETTING Function0<Ty1> from CoroutineContext
2021-03-11 11:58:26,080 [main:94] - GETTING Function0<Ty1> from String
2021-03-11 11:58:26,098 [main:94] - GETTING Function0<Ty1> from Function0<Unit>
2021-03-11 11:58:26,107 [main:94] - GETTING Function0<Ty1> from String
2021-03-11 11:58:26,108 [main:94] - GETTING Function0<Ty1> from CoroutineContext
2021-03-11 11:58:26,109 [main:94] - GETTING Function0<Ty1> from CoroutineContext
2021-03-11 11:58:26,109 [main:110] - replacement of block of type Function0<Ty1> is { }
2021-03-11 11:58:26,246 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:58:26,246 [main:66] - Compilation checking started
2021-03-11 11:58:26,658 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return { }()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1805771717.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    prope12 = Kla8()
    val fu16 = (29263.toUShort()).toUByte().toString(-791216294)
    if ((Kla8()).equals("kosqs").xor(false)) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if ((Kla5().prope8).equals("brxkc").not() || (Kla5().prope8).equals("amaph").or(true)) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:58:26,659 [main:103] - replacing ((Kla5().prope8).equals("brxkc").not() || (Kla5().prope8).equals("amaph").or(true), Boolean)
2021-03-11 11:58:26,660 [main:38] - replacing (Kla5().prope8).equals("brxkc").not() || (Kla5().prope8).equals("amaph").or(true) Boolean
2021-03-11 11:58:26,660 [main:42] - Getting value of type Boolean
2021-03-11 11:58:26,797 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:58:26,800 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:58:26,800 [main:49] - GENERATED IS CALL =false
2021-03-11 11:58:26,807 [main:55] - randomType = UByte
2021-03-11 11:58:26,942 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:58:26,972 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@72b01bc6]
2021-03-11 11:58:27,107 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:58:27,110 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5f8c60f0]
2021-03-11 11:58:27,244 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:58:27,245 [main:66] - Generated call from random type = (86.toUByte()).compareTo(60.toUByte()).equals("kujmi")
2021-03-11 11:58:27,246 [main:94] - GETTING Boolean from Any?
2021-03-11 11:58:27,249 [main:101] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@1badd75d], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7606cd62]]
2021-03-11 11:58:27,249 [main:137] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@1badd75d]
2021-03-11 11:58:27,384 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:58:27,384 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7606cd62]
2021-03-11 11:58:27,520 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:58:27,523 [main:105] - GENERATED CALL = (Kla2().prope4).equals("phqut").xor(false)
2021-03-11 11:58:27,523 [main:101] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@1badd75d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e0b3dde]]
2021-03-11 11:58:27,524 [main:137] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@1badd75d]
2021-03-11 11:58:27,657 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:58:27,658 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e0b3dde]
2021-03-11 11:58:27,794 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:58:27,794 [main:105] - GENERATED CALL = (Kla2().prope4).equals("ipcxq").equals("ttajd")
2021-03-11 11:58:27,794 [main:101] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@1badd75d]]
2021-03-11 11:58:27,794 [main:137] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@1badd75d]
2021-03-11 11:58:27,929 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:58:27,929 [main:105] - GENERATED CALL = (Kla2().prope4).equals("oqluo")
2021-03-11 11:58:27,929 [main:101] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@1badd75d], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@506d92ca]]
2021-03-11 11:58:27,929 [main:137] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@1badd75d]
2021-03-11 11:58:28,063 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:58:28,064 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@506d92ca]
2021-03-11 11:58:28,064 [main:105] - GENERATED CALL = (Kla2().prope4).equals("htrnw").not()
2021-03-11 11:58:28,064 [main:101] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@1badd75d], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@60e33fd5]]
2021-03-11 11:58:28,064 [main:137] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@1badd75d]
2021-03-11 11:58:28,198 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:58:28,198 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@60e33fd5]
2021-03-11 11:58:28,334 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:58:28,337 [main:105] - GENERATED CALL = (Kla2().prope4).equals("knedg").and(true)
2021-03-11 11:58:28,337 [main:101] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@1badd75d], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7081d87d]]
2021-03-11 11:58:28,337 [main:137] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@1badd75d]
2021-03-11 11:58:28,472 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:58:28,472 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7081d87d]
2021-03-11 11:58:28,606 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:58:28,610 [main:105] - GENERATED CALL = (Kla2().prope4).equals("lksrc").or(false)
2021-03-11 11:58:28,610 [main:110] - replacement of (Kla5().prope8).equals("brxkc").not() || (Kla5().prope8).equals("amaph").or(true) of type Boolean is false
2021-03-11 11:58:28,747 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-11 11:58:28,747 [main:66] - Compilation checking started
2021-03-11 11:58:29,315 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(963381101);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1805771717.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    prope12 = Kla8()
    val fu16 = (29263.toUShort()).toUByte().toString(-791216294)
    if ((Kla8()).equals("kosqs").xor(false)) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:58:29,453 [main:137] - TRYING TO REPLACE CONSTANT 963381101
2021-03-11 11:58:29,586 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 11:58:29,586 [main:66] - Compilation checking started
2021-03-11 11:58:30,169 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1805771717.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    prope12 = Kla8()
    val fu16 = (29263.toUShort()).toUByte().toString(-791216294)
    if ((Kla8()).equals("kosqs").xor(false)) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:58:30,169 [main:137] - TRYING TO REPLACE CONSTANT true
2021-03-11 11:58:30,308 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BINARY_EXPRESSION)
2021-03-11 11:58:30,309 [main:66] - Compilation checking started
2021-03-11 11:58:30,754 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(prope9 != null).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> false})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1805771717.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    prope12 = Kla8()
    val fu16 = (29263.toUShort()).toUByte().toString(-791216294)
    if ((Kla8()).equals("kosqs").xor(false)) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:58:30,754 [main:137] - TRYING TO REPLACE CONSTANT false
2021-03-11 11:58:30,888 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BINARY_EXPRESSION)
2021-03-11 11:58:30,889 [main:66] - Compilation checking started
2021-03-11 11:58:31,470 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString(86677707)
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1805771717.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    prope12 = Kla8()
    val fu16 = (29263.toUShort()).toUByte().toString(-791216294)
    if ((Kla8()).equals("kosqs").xor(false)) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:58:31,471 [main:137] - TRYING TO REPLACE CONSTANT 86677707
2021-03-11 11:58:31,608 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PARENTHESIZED)
2021-03-11 11:58:31,609 [main:66] - Compilation checking started
2021-03-11 11:58:32,200 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(false).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1805771717.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    prope12 = Kla8()
    val fu16 = (29263.toUShort()).toUByte().toString(-791216294)
    if ((Kla8()).equals("kosqs").xor(false)) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:58:32,201 [main:137] - TRYING TO REPLACE CONSTANT false
2021-03-11 11:58:32,338 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-11 11:58:32,338 [main:66] - Compilation checking started
2021-03-11 11:58:32,936 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1805771717.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (5150752837272580577.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    prope12 = Kla8()
    val fu16 = (29263.toUShort()).toUByte().toString(-791216294)
    if ((Kla8()).equals("kosqs").xor(false)) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:58:32,936 [main:137] - TRYING TO REPLACE CONSTANT 5150752837272580577
2021-03-11 11:58:33,077 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 11:58:33,077 [main:66] - Compilation checking started
2021-03-11 11:58:33,670 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1805771717.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(-2028559054)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    prope12 = Kla8()
    val fu16 = (29263.toUShort()).toUByte().toString(-791216294)
    if ((Kla8()).equals("kosqs").xor(false)) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:58:33,670 [main:137] - TRYING TO REPLACE CONSTANT 2028559054
2021-03-11 11:58:33,807 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 11:58:33,808 [main:66] - Compilation checking started
2021-03-11 11:58:34,418 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1805771717.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString(122358306)

    prope12 = Kla8()
    val fu16 = (29263.toUShort()).toUByte().toString(-791216294)
    if ((Kla8()).equals("kosqs").xor(false)) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:58:34,419 [main:137] - TRYING TO REPLACE CONSTANT ''
2021-03-11 11:58:34,556 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-11 11:58:34,556 [main:66] - Compilation checking started
2021-03-11 11:58:35,140 [main:137] - TRYING TO REPLACE CONSTANT 122358306
2021-03-11 11:58:35,280 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PARENTHESIZED)
2021-03-11 11:58:35,280 [main:66] - Compilation checking started
2021-03-11 11:58:35,915 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1805771717.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (29263.toUShort()).toUByte().toString(-791216294)
    if ((Kla8()).equals("kosqs").xor(false)) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:58:35,916 [main:137] - TRYING TO REPLACE CONSTANT true
2021-03-11 11:58:36,054 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BINARY_EXPRESSION)
2021-03-11 11:58:36,055 [main:66] - Compilation checking started
2021-03-11 11:58:36,463 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1805771717.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (29263.toUShort()).toUByte().toString(-791216294)
    if ((Kla8()).equals("kosqs").xor(false)) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(prope9 != null) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:58:36,463 [main:137] - TRYING TO REPLACE CONSTANT 1805771717
2021-03-11 11:58:36,608 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 11:58:36,608 [main:66] - Compilation checking started
2021-03-11 11:58:37,190 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (29263.toUShort()).toUByte().toString(-791216294)
    if ((Kla8()).equals("kosqs").xor(false)) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:58:37,190 [main:137] - TRYING TO REPLACE CONSTANT 1680850887
2021-03-11 11:58:37,327 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:58:37,328 [main:66] - Compilation checking started
2021-03-11 11:58:37,735 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(compareTo(true));
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (29263.toUShort()).toUByte().toString(-791216294)
    if ((Kla8()).equals("kosqs").xor(false)) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:58:37,736 [main:137] - TRYING TO REPLACE CONSTANT 29263
2021-03-11 11:58:37,874 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:58:37,875 [main:66] - Compilation checking started
2021-03-11 11:58:38,459 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString(-791216294)
    if ((Kla8()).equals("kosqs").xor(false)) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:58:38,460 [main:137] - TRYING TO REPLACE CONSTANT 791216294
2021-03-11 11:58:38,603 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PARENTHESIZED)
2021-03-11 11:58:38,603 [main:66] - Compilation checking started
2021-03-11 11:58:39,188 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor(false)) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:58:39,188 [main:137] - TRYING TO REPLACE CONSTANT 29252
2021-03-11 11:58:39,328 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:58:39,328 [main:66] - Compilation checking started
2021-03-11 11:58:39,740 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (compareTo(399295028))?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor(false)) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:58:39,740 [main:137] - TRYING TO REPLACE CONSTANT 3
2021-03-11 11:58:39,877 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 11:58:39,878 [main:66] - Compilation checking started
2021-03-11 11:58:40,291 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor(false)) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(122358306, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:58:40,292 [main:137] - TRYING TO REPLACE CONSTANT false
2021-03-11 11:58:40,431 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(PARENTHESIZED)
2021-03-11 11:58:40,432 [main:66] - Compilation checking started
2021-03-11 11:58:41,082 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:58:41,082 [main:46] - AFTER TRY 2 res = 
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}


2021-03-11 11:58:41,371 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}
2021-03-11 11:58:41,372 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}
2021-03-11 11:58:41,509 [main:194] - Type params = []
2021-03-11 11:58:41,646 [main:302] - generating value of type = CoroutineContext false depth = 1
2021-03-11 11:58:41,793 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:58:41,798 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:58:42,119 [main:302] - generating value of type = Key<*> false depth = 4
2021-03-11 11:58:42,268 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:58:42,273 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:58:42,769 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 7
2021-03-11 11:58:42,918 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:58:42,924 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:58:43,418 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:58:43,418 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:58:43,418 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:58:43,418 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}
2021-03-11 11:58:43,418 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 11:58:44,062 [main:302] - generating value of type = Kla6 false depth = 1
2021-03-11 11:58:44,066 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:58:44,066 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}
2021-03-11 11:58:44,066 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}
2021-03-11 11:58:44,067 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:58:44,067 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}
2021-03-11 11:58:44,067 [main:112] - generating klass null text = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}
2021-03-11 11:58:44,067 [main:112] - generating klass null text = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}
2021-03-11 11:58:44,067 [main:112] - generating klass Kla7 text = companion object Kla7 : Kla1()
2021-03-11 11:58:44,362 [main:43] - GENERATING CALL OF fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}
2021-03-11 11:58:44,366 [main:61] - WITHOUT TYPE PARAMS = fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}
2021-03-11 11:58:44,684 [main:302] - generating value of type = Kla0 false depth = 1
2021-03-11 11:58:44,688 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}
2021-03-11 11:58:44,688 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> false depth = 1
2021-03-11 11:58:44,692 [main:302] - generating value of type = Unit false depth = 2
2021-03-11 11:58:44,839 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:58:44,844 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:58:45,328 [main:302] - generating value of type = Boolean true depth = 5
2021-03-11 11:58:45,332 [main:302] - generating value of type = Function0<Any> false depth = 5
2021-03-11 11:58:45,336 [main:302] - generating value of type = Any false depth = 6
2021-03-11 11:58:45,336 [main:95] - GENERATED = require(true, { "ccfca"})
2021-03-11 11:58:45,336 [main:95] - GENERATED = fu0(Kla0(), {a: Kla0 -> require(true, { "ccfca"})})
2021-03-11 11:58:45,474 [main:43] - GENERATING CALL OF fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}
2021-03-11 11:58:45,657 [main:61] - WITHOUT TYPE PARAMS = fun <Ty0> fu2(x: (Kla8?) -> Unit): Continuation<Kla8?> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}
2021-03-11 11:58:46,030 [main:302] - generating value of type = Function1<Kla8?, Unit> false depth = 1
2021-03-11 11:58:46,034 [main:302] - generating value of type = Unit false depth = 2
2021-03-11 11:58:46,180 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:58:46,185 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:58:46,495 [main:302] - generating value of type = Boolean true depth = 5
2021-03-11 11:58:46,500 [main:95] - GENERATED = require(true)
2021-03-11 11:58:46,500 [main:95] - GENERATED = fu2<Kla8?>({a: Kla8? -> require(true)})
2021-03-11 11:58:46,638 [main:43] - GENERATING CALL OF fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}
2021-03-11 11:58:46,642 [main:61] - WITHOUT TYPE PARAMS = fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}
2021-03-11 11:58:46,960 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 1
2021-03-11 11:58:46,964 [main:302] - generating value of type = Unit false depth = 2
2021-03-11 11:58:47,116 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:58:47,121 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:58:47,431 [main:302] - generating value of type = Boolean true depth = 5
2021-03-11 11:58:47,435 [main:95] - GENERATED = require(true)
2021-03-11 11:58:47,435 [main:95] - GENERATED = fu3({a: Throwable -> require(true)})
2021-03-11 11:58:47,577 [main:43] - GENERATING CALL OF public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}
2021-03-11 11:58:48,129 [main:61] - WITHOUT TYPE PARAMS = public inline fun <Ty1> fu14(block: ()-> HashMap<Char, Function1<UInt?, Kla2>>, finallyBlock: ()-> HashMap<Char, Function1<UInt?, Kla2>>) : HashMap<Char, Function1<UInt?, Kla2>> {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}
2021-03-11 11:58:48,644 [main:302] - generating value of type = Function0<HashMap<Char, Function1<UInt?, Kla2>>> false depth = 1
2021-03-11 11:58:48,648 [main:302] - generating value of type = HashMap<Char, Function1<UInt?, Kla2>> false depth = 2
2021-03-11 11:58:48,796 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<Char, Function1<UInt?, Kla2>> = TODO()
2021-03-11 11:58:48,802 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<Char, Function1<UInt?, Kla2>> = TODO()
2021-03-11 11:58:48,950 [main:95] - GENERATED = linkedMapOf<Char, Function1<UInt?, Kla2>>()
2021-03-11 11:58:48,950 [main:302] - generating value of type = Function0<HashMap<Char, Function1<UInt?, Kla2>>> false depth = 1
2021-03-11 11:58:48,954 [main:302] - generating value of type = HashMap<Char, Function1<UInt?, Kla2>> false depth = 2
2021-03-11 11:58:49,102 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Char, Function1<UInt?, Kla2>>): HashMap<Char, Function1<UInt?, Kla2>> = TODO()
2021-03-11 11:58:49,108 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Char, Function1<UInt?, Kla2>>): HashMap<Char, Function1<UInt?, Kla2>> = TODO()
2021-03-11 11:58:49,254 [main:302] - generating value of type = Pair<Char, Function1<UInt?, Kla2>> false depth = 5
2021-03-11 11:58:49,399 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Char, second: Function1<UInt?, Kla2>): Pair<Char, Function1<UInt?, Kla2>> = TODO()
2021-03-11 11:58:49,405 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Char, second: Function1<UInt?, Kla2>): Pair<Char, Function1<UInt?, Kla2>> = TODO()
2021-03-11 11:58:49,551 [main:302] - generating value of type = Char true depth = 8
2021-03-11 11:58:49,556 [main:302] - generating value of type = Function1<UInt?, Kla2> false depth = 8
2021-03-11 11:58:49,560 [main:302] - generating value of type = Kla2 false depth = 9
2021-03-11 11:58:49,564 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}
2021-03-11 11:58:49,564 [main:95] - GENERATED = Pair<Char, Function1<UInt?, Kla2>>('읞', {a: UInt? -> Kla2()})
2021-03-11 11:58:49,564 [main:95] - GENERATED = linkedMapOf<Char, Function1<UInt?, Kla2>>(Pair<Char, Function1<UInt?, Kla2>>('읞', {a: UInt? -> Kla2()}))
2021-03-11 11:58:49,564 [main:95] - GENERATED = fu14<HashMap<Char, Function1<UInt?, Kla2>>>({ linkedMapOf<Char, Function1<UInt?, Kla2>>()}, { linkedMapOf<Char, Function1<UInt?, Kla2>>(Pair<Char, Function1<UInt?, Kla2>>('읞', {a: UInt? -> Kla2()}))})
2021-03-11 11:58:49,703 [main:43] - GENERATING CALL OF fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}
2021-03-11 11:58:49,707 [main:61] - WITHOUT TYPE PARAMS = fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}
2021-03-11 11:58:49,854 [main:302] - generating value of type = Kla8 false depth = 1
2021-03-11 11:58:49,859 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}
2021-03-11 11:58:49,859 [main:95] - GENERATED = fu15(Kla8())
2021-03-11 11:58:49,998 [main:43] - GENERATING CALL OF fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}
2021-03-11 11:58:50,002 [main:61] - WITHOUT TYPE PARAMS = fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}
2021-03-11 11:58:50,149 [main:302] - generating value of type = Kla8 false depth = 1
2021-03-11 11:58:50,153 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}
2021-03-11 11:58:50,153 [main:95] - GENERATED = fu16(Kla8())
2021-03-11 11:58:50,291 [main:43] - GENERATING CALL OF fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}
2021-03-11 11:58:50,295 [main:61] - WITHOUT TYPE PARAMS = fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}
2021-03-11 11:58:50,441 [main:302] - generating value of type = Kla8 false depth = 1
2021-03-11 11:58:50,446 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}
2021-03-11 11:58:50,446 [main:95] - GENERATED = fu17(Kla8())
2021-03-11 11:58:50,585 [main:43] - GENERATING CALL OF fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}
2021-03-11 11:58:50,589 [main:61] - WITHOUT TYPE PARAMS = fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}
2021-03-11 11:58:50,736 [main:302] - generating value of type = Kla8 false depth = 1
2021-03-11 11:58:50,740 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}
2021-03-11 11:58:50,740 [main:95] - GENERATED = fu18(Kla8())
2021-03-11 11:58:50,922 [main:48] - Try №2
2021-03-11 11:58:51,919 [main:71] - Trying to insert fun box980(): String {
    fu23(arrayOf(""))
    return "OK"
}
2021-03-11 11:58:52,086 [main:66] - Compilation checking started
2021-03-11 11:58:53,093 [main:99] - Trying to change 18 nodes
2021-03-11 11:58:53,093 [main:103] - replacing (fu19() ?: continue, String)
2021-03-11 11:58:53,095 [main:38] - replacing fu19() ?: continue String
2021-03-11 11:58:53,095 [main:42] - Getting value of type String
2021-03-11 11:58:53,253 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:58:53,258 [main:46] - GENERATED VALUE OF TYPE String = "sbjno"
2021-03-11 11:58:53,258 [main:49] - GENERATED IS CALL =false
2021-03-11 11:58:53,267 [main:55] - randomType = Long
2021-03-11 11:58:53,420 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:58:53,454 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@ed6bc2e]
2021-03-11 11:58:53,454 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24abb2e5]
2021-03-11 11:58:53,606 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:58:53,611 [main:66] - Generated call from random type = (-2279049964868352729).toByte().toString(182139528)
2021-03-11 11:58:53,613 [main:94] - GETTING String from HashMap<Char, Function1<UInt?, Kla2>>
2021-03-11 11:58:53,746 [main:101] - Case = [public open val size: kotlin.Int defined in kotlin.collections.HashMap[DeserializedPropertyDescriptor@5213882c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]]
2021-03-11 11:58:53,746 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:58:53,896 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:58:53,901 [main:105] - GENERATED CALL = (fu14<HashMap<Char, Function1<UInt?, Kla2>>>({ linkedMapOf<Char, Function1<UInt?, Kla2>>()}, { linkedMapOf<Char, Function1<UInt?, Kla2>>(Pair<Char, Function1<UInt?, Kla2>>('읞', {a: UInt? -> Kla2()}))})).size.toString(-1438684802)
2021-03-11 11:58:53,901 [main:110] - replacement of fu19() ?: continue of type String is "sbjno"
2021-03-11 11:58:54,050 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:58:54,050 [main:66] - Compilation checking started
2021-03-11 11:58:54,713 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in this) {
        fn("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    fu20(fn)
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    a.fu20 {}
    a.fu21 {}
    a.fu22 {}
}

fun box980(): String {
    fu23(arrayOf(""))
    return "OK"
}


2021-03-11 11:58:54,713 [main:103] - replacing ("", String)
2021-03-11 11:58:54,715 [main:38] - replacing "" String
2021-03-11 11:58:54,715 [main:42] - Getting value of type String
2021-03-11 11:58:54,870 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:58:54,875 [main:46] - GENERATED VALUE OF TYPE String = "rpnnj"
2021-03-11 11:58:54,875 [main:49] - GENERATED IS CALL =false
2021-03-11 11:58:54,885 [main:55] - randomType = Char
2021-03-11 11:58:55,039 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:58:55,068 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@49a40bce]
2021-03-11 11:58:55,223 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:58:55,228 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:58:55,382 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:58:55,387 [main:66] - Generated call from random type = ('ꥯ').compareTo('?').toString(1408782079)
2021-03-11 11:58:55,388 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:58:55,397 [main:94] - GETTING String from Continuation<Any?>
2021-03-11 11:58:55,406 [main:94] - GETTING String from String
2021-03-11 11:58:55,427 [main:101] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4223d0a4]]
2021-03-11 11:58:55,427 [main:137] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4223d0a4]
2021-03-11 11:58:55,585 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:58:55,754 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:58:55,912 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:58:55,917 [main:105] - GENERATED CALL = (fu18(Kla8())).replaceFirst('蟂', '뫭', false)
2021-03-11 11:58:55,917 [main:101] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6afc3414]]
2021-03-11 11:58:55,918 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6afc3414]
2021-03-11 11:58:55,918 [main:105] - GENERATED CALL = (fu18(Kla8())).trimIndent()
2021-03-11 11:58:55,918 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f95b904]]
2021-03-11 11:58:55,918 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f95b904]
2021-03-11 11:58:56,070 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:58:56,275 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:58:56,440 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:58:56,448 [main:105] - GENERATED CALL = (fu18(Kla8())).replaceRange(-1322036059, 930731099, "njkwd")
2021-03-11 11:58:56,448 [main:101] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ba808ab]]
2021-03-11 11:58:56,448 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ba808ab]
2021-03-11 11:58:56,601 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:58:56,760 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:58:56,765 [main:105] - GENERATED CALL = (fu18(Kla8())).padEnd(1705311104, '鴰')
2021-03-11 11:58:56,765 [main:101] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69597be7]]
2021-03-11 11:58:56,765 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69597be7]
2021-03-11 11:58:56,917 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:58:57,077 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 11:58:57,083 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 11:58:57,428 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:58:57,433 [main:95] - GENERATED = StringBuilder(1874697207)
2021-03-11 11:58:57,585 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:58:57,590 [main:105] - GENERATED CALL = (fu18(Kla8())).commonSuffixWith(StringBuilder(1874697207), false)
2021-03-11 11:58:57,590 [main:101] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4500af19]]
2021-03-11 11:58:57,590 [main:137] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4500af19]
2021-03-11 11:58:57,745 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:58:57,911 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:58:57,916 [main:105] - GENERATED CALL = (fu18(Kla8())).substringAfter('㕯', "ayxfl")
2021-03-11 11:58:57,916 [main:101] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@302c273c]]
2021-03-11 11:58:57,916 [main:137] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@302c273c]
2021-03-11 11:58:58,068 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:58:58,225 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:58:58,382 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:58:58,387 [main:105] - GENERATED CALL = (fu18(Kla8())).replace('⁶', '䳏', false)
2021-03-11 11:58:58,387 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64a3bad2]]
2021-03-11 11:58:58,387 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64a3bad2]
2021-03-11 11:58:58,387 [main:105] - GENERATED CALL = (fu18(Kla8())).lowercase()
2021-03-11 11:58:58,387 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25fa343]]
2021-03-11 11:58:58,388 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6818def2]
2021-03-11 11:58:58,538 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:58:58,543 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25fa343]
2021-03-11 11:58:58,696 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:58:58,701 [main:105] - GENERATED CALL = (fu18(Kla8())).get(1131405493).plus("lwyne")
2021-03-11 11:58:58,701 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2868a883], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]]
2021-03-11 11:58:58,701 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2868a883]
2021-03-11 11:58:58,852 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:58:58,857 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:58:59,009 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:58:59,014 [main:105] - GENERATED CALL = (fu18(Kla8())).compareTo("gjwmh").toString(1275827300)
2021-03-11 11:58:59,014 [main:110] - replacement of "" of type String is "rpnnj"
2021-03-11 11:58:59,164 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 11:58:59,165 [main:66] - Compilation checking started
2021-03-11 11:58:59,849 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in this) {
        fn("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    fu20(fn)
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    a.fu20 {}
    a.fu21 {}
    a.fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return "OK"
}


2021-03-11 11:58:59,850 [main:103] - replacing ("OK", String)
2021-03-11 11:58:59,850 [main:38] - replacing "OK" String
2021-03-11 11:58:59,850 [main:42] - Getting value of type String
2021-03-11 11:59:00,010 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:59:00,016 [main:46] - GENERATED VALUE OF TYPE String = "dsywb"
2021-03-11 11:59:00,016 [main:49] - GENERATED IS CALL =false
2021-03-11 11:59:00,036 [main:55] - randomType = Kla8
2021-03-11 11:59:00,190 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 11:59:00,195 [main:112] - generating klass Kla8 text = class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}
2021-03-11 11:59:00,200 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d43a4]
2021-03-11 11:59:00,200 [main:66] - Generated call from random type = (Kla8()).prope10.uppercase()
2021-03-11 11:59:00,201 [main:94] - GETTING String from ULong
2021-03-11 11:59:00,229 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@85f004f]]
2021-03-11 11:59:00,229 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@85f004f]
2021-03-11 11:59:00,381 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:59:00,386 [main:105] - GENERATED CALL = ((6605136401679491436.toULong())).toString(375066593)
2021-03-11 11:59:00,386 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@5c853ecb], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1efc965a]]
2021-03-11 11:59:00,386 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@5c853ecb]
2021-03-11 11:59:00,386 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1efc965a]
2021-03-11 11:59:00,538 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:59:00,543 [main:105] - GENERATED CALL = ((6605136401679491436.toULong())).toLong().toString(-524963149)
2021-03-11 11:59:00,543 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@6d3aae1b], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67b964b4]]
2021-03-11 11:59:00,543 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@6d3aae1b]
2021-03-11 11:59:00,543 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67b964b4]
2021-03-11 11:59:00,695 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:59:00,700 [main:105] - GENERATED CALL = ((6605136401679491436.toULong())).toUByte().toString(1070590752)
2021-03-11 11:59:00,700 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@43124a18], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24abb2e5]]
2021-03-11 11:59:00,700 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@43124a18]
2021-03-11 11:59:00,701 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24abb2e5]
2021-03-11 11:59:00,852 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:59:00,857 [main:105] - GENERATED CALL = ((6605136401679491436.toULong())).toByte().toString(1799209433)
2021-03-11 11:59:00,858 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toUInt(): kotlin.UInt defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@5e08060e], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bf0270]]
2021-03-11 11:59:00,858 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUInt(): kotlin.UInt defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@5e08060e]
2021-03-11 11:59:00,858 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bf0270]
2021-03-11 11:59:01,009 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:59:01,014 [main:105] - GENERATED CALL = ((6605136401679491436.toULong())).toUInt().toString(-296869375)
2021-03-11 11:59:01,014 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@32250993], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ea8ab5e]]
2021-03-11 11:59:01,014 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@32250993]
2021-03-11 11:59:01,014 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ea8ab5e]
2021-03-11 11:59:01,167 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:59:01,172 [main:105] - GENERATED CALL = ((6605136401679491436.toULong())).toShort().toString(285405907)
2021-03-11 11:59:01,172 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@5331656e], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]]
2021-03-11 11:59:01,172 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@5331656e]
2021-03-11 11:59:01,324 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:59:01,329 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a7c6386]
2021-03-11 11:59:01,481 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:59:01,486 [main:105] - GENERATED CALL = ((6605136401679491436.toULong())).compareTo(60.toUByte()).toString(1383207155)
2021-03-11 11:59:01,486 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@111d0225], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@217eac56]]
2021-03-11 11:59:01,486 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@111d0225]
2021-03-11 11:59:01,486 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@217eac56]
2021-03-11 11:59:01,642 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:59:01,648 [main:105] - GENERATED CALL = ((6605136401679491436.toULong())).toUShort().toString(1089861519)
2021-03-11 11:59:01,648 [main:110] - replacement of "OK" of type String is ((6605136401679491436.toULong())).toUByte().toString(1070590752)
2021-03-11 11:59:01,799 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:59:01,799 [main:66] - Compilation checking started
2021-03-11 11:59:02,509 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in this) {
        fn("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    fu20(fn)
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    a.fu20 {}
    a.fu21 {}
    a.fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(1070590752)
}


2021-03-11 11:59:02,510 [main:103] - replacing ({}, Function1<String, Unit>)
2021-03-11 11:59:02,512 [main:38] - replacing {} Function1<String, Unit>
2021-03-11 11:59:02,512 [main:42] - Getting value of type Function1<String, Unit>
2021-03-11 11:59:02,670 [main:302] - generating value of type = Function1<String, Unit> false depth = 0
2021-03-11 11:59:02,676 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:59:02,684 [main:46] - GENERATED VALUE OF TYPE Function1<String, Unit> = {a: String -> println()}
2021-03-11 11:59:02,684 [main:49] - GENERATED IS CALL =false
2021-03-11 11:59:02,695 [main:55] - randomType = UShort
2021-03-11 11:59:02,859 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:59:02,893 [main:94] - GETTING Function1<String, Unit> from Boolean
2021-03-11 11:59:02,902 [main:94] - GETTING Function1<String, Unit> from UShort
2021-03-11 11:59:02,927 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:02,944 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:02,945 [main:94] - GETTING Function1<String, Unit> from Char
2021-03-11 11:59:02,965 [main:94] - GETTING Function1<String, Unit> from EmptyCoroutineContext
2021-03-11 11:59:02,980 [main:94] - GETTING Function1<String, Unit> from UByte
2021-03-11 11:59:03,003 [main:94] - GETTING Function1<String, Unit> from ULong
2021-03-11 11:59:03,027 [main:94] - GETTING Function1<String, Unit> from Int
2021-03-11 11:59:03,058 [main:94] - GETTING Function1<String, Unit> from Boolean
2021-03-11 11:59:03,059 [main:94] - GETTING Function1<String, Unit> from Any?
2021-03-11 11:59:03,063 [main:94] - GETTING Function1<String, Unit> from Kla2
2021-03-11 11:59:03,078 [main:94] - GETTING Function1<String, Unit> from Int
2021-03-11 11:59:03,079 [main:94] - GETTING Function1<String, Unit> from ULong
2021-03-11 11:59:03,080 [main:94] - GETTING Function1<String, Unit> from CoroutineContext
2021-03-11 11:59:03,087 [main:94] - GETTING Function1<String, Unit> from Short
2021-03-11 11:59:03,118 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:03,120 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:03,121 [main:94] - GETTING Function1<String, Unit> from Kla8
2021-03-11 11:59:03,127 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:03,128 [main:94] - GETTING Function1<String, Unit> from Int
2021-03-11 11:59:03,129 [main:94] - GETTING Function1<String, Unit> from UShort
2021-03-11 11:59:03,130 [main:94] - GETTING Function1<String, Unit> from Any?
2021-03-11 11:59:03,132 [main:94] - GETTING Function1<String, Unit> from Continuation<Any?>
2021-03-11 11:59:03,141 [main:94] - GETTING Function1<String, Unit> from CoroutineContext
2021-03-11 11:59:03,142 [main:94] - GETTING Function1<String, Unit> from UInt
2021-03-11 11:59:03,164 [main:94] - GETTING Function1<String, Unit> from Function0<Unit>
2021-03-11 11:59:03,175 [main:94] - GETTING Function1<String, Unit> from Int
2021-03-11 11:59:03,176 [main:94] - GETTING Function1<String, Unit> from Kla8
2021-03-11 11:59:03,178 [main:94] - GETTING Function1<String, Unit> from UByte
2021-03-11 11:59:03,179 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:03,180 [main:94] - GETTING Function1<String, Unit> from CoroutineContext
2021-03-11 11:59:03,181 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:03,182 [main:94] - GETTING Function1<String, Unit> from Boolean
2021-03-11 11:59:03,183 [main:94] - GETTING Function1<String, Unit> from HashMap<Char, Function1<UInt?, Kla2>>
2021-03-11 11:59:03,326 [main:94] - GETTING Function1<String, Unit> from Int
2021-03-11 11:59:03,328 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:03,329 [main:94] - GETTING Function1<String, Unit> from Boolean
2021-03-11 11:59:03,330 [main:94] - GETTING Function1<String, Unit> from Any?
2021-03-11 11:59:03,331 [main:94] - GETTING Function1<String, Unit> from Boolean
2021-03-11 11:59:03,332 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:03,333 [main:94] - GETTING Function1<String, Unit> from Continuation<Kla8?>
2021-03-11 11:59:03,343 [main:94] - GETTING Function1<String, Unit> from UInt
2021-03-11 11:59:03,344 [main:94] - GETTING Function1<String, Unit> from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:59:03,354 [main:94] - GETTING Function1<String, Unit> from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:59:03,354 [main:110] - replacement of {} of type Function1<String, Unit> is {a: String -> println()}
2021-03-11 11:59:03,509 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:59:03,510 [main:66] - Compilation checking started
2021-03-11 11:59:04,186 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in this) {
        fn("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    fu20(fn)
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
a.fu20 {}
    a.fu21 {a: String -> println()}
    a.fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(1070590752)
}


2021-03-11 11:59:04,187 [main:103] - replacing (this, Array<String>)
2021-03-11 11:59:04,187 [main:38] - replacing this Array<String>
2021-03-11 11:59:04,187 [main:42] - Getting value of type Array<String>
2021-03-11 11:59:04,347 [main:302] - generating value of type = Array<String> false depth = 0
2021-03-11 11:59:04,511 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Strg> = TODO()
2021-03-11 11:59:04,517 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Strg> = TODO()
2021-03-11 11:59:04,684 [main:95] - GENERATED = emptyArray<String>()
2021-03-11 11:59:04,684 [main:46] - GENERATED VALUE OF TYPE Array<String> = emptyArray<String>()
2021-03-11 11:59:04,684 [main:49] - GENERATED IS CALL =true
2021-03-11 11:59:04,705 [main:55] - randomType = Kla4
2021-03-11 11:59:04,863 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 11:59:04,869 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}
2021-03-11 11:59:04,875 [main:94] - GETTING Array<String> from ULong
2021-03-11 11:59:04,898 [main:94] - GETTING Array<String> from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:59:04,907 [main:94] - GETTING Array<String> from ULong
2021-03-11 11:59:04,908 [main:94] - GETTING Array<String> from Kla2
2021-03-11 11:59:04,921 [main:94] - GETTING Array<String> from Kla8
2021-03-11 11:59:04,927 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:04,944 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:04,945 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:04,946 [main:94] - GETTING Array<String> from Any?
2021-03-11 11:59:04,949 [main:94] - GETTING Array<String> from Boolean
2021-03-11 11:59:04,959 [main:94] - GETTING Array<String> from HashMap<Char, Function1<UInt?, Kla2>>
2021-03-11 11:59:05,085 [main:94] - GETTING Array<String> from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:59:05,086 [main:94] - GETTING Array<String> from Int
2021-03-11 11:59:05,117 [main:94] - GETTING Array<String> from UByte
2021-03-11 11:59:05,140 [main:94] - GETTING Array<String> from Int
2021-03-11 11:59:05,141 [main:94] - GETTING Array<String> from Int
2021-03-11 11:59:05,142 [main:94] - GETTING Array<String> from Int
2021-03-11 11:59:05,143 [main:94] - GETTING Array<String> from Boolean
2021-03-11 11:59:05,144 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:05,145 [main:94] - GETTING Array<String> from UShort
2021-03-11 11:59:05,169 [main:94] - GETTING Array<String> from EmptyCoroutineContext
2021-03-11 11:59:05,185 [main:94] - GETTING Array<String> from Char
2021-03-11 11:59:05,202 [main:94] - GETTING Array<String> from UByte
2021-03-11 11:59:05,203 [main:94] - GETTING Array<String> from Continuation<Kla8?>
2021-03-11 11:59:05,213 [main:94] - GETTING Array<String> from Kla8
2021-03-11 11:59:05,214 [main:94] - GETTING Array<String> from Continuation<Any?>
2021-03-11 11:59:05,221 [main:94] - GETTING Array<String> from Int
2021-03-11 11:59:05,222 [main:94] - GETTING Array<String> from CoroutineContext
2021-03-11 11:59:05,228 [main:94] - GETTING Array<String> from Short
2021-03-11 11:59:05,259 [main:94] - GETTING Array<String> from Any?
2021-03-11 11:59:05,260 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:05,261 [main:94] - GETTING Array<String> from Boolean
2021-03-11 11:59:05,262 [main:94] - GETTING Array<String> from Boolean
2021-03-11 11:59:05,263 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:05,264 [main:94] - GETTING Array<String> from UShort
2021-03-11 11:59:05,265 [main:94] - GETTING Array<String> from Function0<Unit>
2021-03-11 11:59:05,276 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:05,277 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:05,278 [main:94] - GETTING Array<String> from CoroutineContext
2021-03-11 11:59:05,279 [main:94] - GETTING Array<String> from UInt
2021-03-11 11:59:05,303 [main:94] - GETTING Array<String> from Any?
2021-03-11 11:59:05,304 [main:94] - GETTING Array<String> from UInt
2021-03-11 11:59:05,305 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:05,306 [main:94] - GETTING Array<String> from Boolean
2021-03-11 11:59:05,307 [main:94] - GETTING Array<String> from CoroutineContext
2021-03-11 11:59:05,307 [main:110] - replacement of this of type Array<String> is emptyArray<String>()
2021-03-11 11:59:05,462 [main:33] - Trying to replace Element(THIS_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:59:05,462 [main:66] - Compilation checking started
2021-03-11 11:59:06,147 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        fn("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    fu20(fn)
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
a.fu20 {}
    a.fu21 {a: String -> println()}
    a.fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(1070590752)
}


2021-03-11 11:59:06,148 [main:103] - replacing ({}, Function1<String, Unit>)
2021-03-11 11:59:06,148 [main:38] - replacing {} Function1<String, Unit>
2021-03-11 11:59:06,148 [main:42] - Getting value of type Function1<String, Unit>
2021-03-11 11:59:06,309 [main:302] - generating value of type = Function1<String, Unit> false depth = 0
2021-03-11 11:59:06,314 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:59:06,479 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:59:06,486 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:59:07,044 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:59:07,050 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:59:07,055 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:59:07,055 [main:95] - GENERATED = require(true, { "yxklh"})
2021-03-11 11:59:07,055 [main:46] - GENERATED VALUE OF TYPE Function1<String, Unit> = {a: String -> require(true, { "yxklh"})}
2021-03-11 11:59:07,055 [main:49] - GENERATED IS CALL =false
2021-03-11 11:59:07,315 [main:55] - randomType = Long?
2021-03-11 11:59:07,472 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:59:07,510 [main:94] - GETTING Function1<String, Unit> from HashMap<Char, Function1<UInt?, Kla2>>
2021-03-11 11:59:07,639 [main:94] - GETTING Function1<String, Unit> from Function0<Unit>
2021-03-11 11:59:07,648 [main:94] - GETTING Function1<String, Unit> from Int
2021-03-11 11:59:07,680 [main:94] - GETTING Function1<String, Unit> from UShort
2021-03-11 11:59:07,706 [main:94] - GETTING Function1<String, Unit> from UInt
2021-03-11 11:59:07,729 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:07,747 [main:94] - GETTING Function1<String, Unit> from Continuation<Any?>
2021-03-11 11:59:07,754 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:07,756 [main:94] - GETTING Function1<String, Unit> from Int
2021-03-11 11:59:07,757 [main:94] - GETTING Function1<String, Unit> from Short
2021-03-11 11:59:07,789 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:07,790 [main:94] - GETTING Function1<String, Unit> from Boolean
2021-03-11 11:59:07,800 [main:94] - GETTING Function1<String, Unit> from ULong
2021-03-11 11:59:07,823 [main:94] - GETTING Function1<String, Unit> from UShort
2021-03-11 11:59:07,824 [main:94] - GETTING Function1<String, Unit> from Any?
2021-03-11 11:59:07,829 [main:94] - GETTING Function1<String, Unit> from Int
2021-03-11 11:59:07,830 [main:94] - GETTING Function1<String, Unit> from Boolean
2021-03-11 11:59:07,832 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:07,833 [main:94] - GETTING Function1<String, Unit> from Boolean
2021-03-11 11:59:07,834 [main:94] - GETTING Function1<String, Unit> from Kla8
2021-03-11 11:59:07,840 [main:94] - GETTING Function1<String, Unit> from Any?
2021-03-11 11:59:07,841 [main:94] - GETTING Function1<String, Unit> from UByte
2021-03-11 11:59:07,865 [main:94] - GETTING Function1<String, Unit> from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:59:07,874 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:07,875 [main:94] - GETTING Function1<String, Unit> from Kla2
2021-03-11 11:59:07,889 [main:94] - GETTING Function1<String, Unit> from CoroutineContext
2021-03-11 11:59:07,895 [main:94] - GETTING Function1<String, Unit> from ULong
2021-03-11 11:59:07,897 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:07,898 [main:94] - GETTING Function1<String, Unit> from Char
2021-03-11 11:59:07,918 [main:94] - GETTING Function1<String, Unit> from EmptyCoroutineContext
2021-03-11 11:59:07,932 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:07,933 [main:94] - GETTING Function1<String, Unit> from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:59:07,934 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:07,935 [main:94] - GETTING Function1<String, Unit> from Any?
2021-03-11 11:59:07,936 [main:94] - GETTING Function1<String, Unit> from UByte
2021-03-11 11:59:07,937 [main:94] - GETTING Function1<String, Unit> from Int
2021-03-11 11:59:07,939 [main:94] - GETTING Function1<String, Unit> from Int
2021-03-11 11:59:07,940 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:07,941 [main:94] - GETTING Function1<String, Unit> from CoroutineContext
2021-03-11 11:59:07,942 [main:94] - GETTING Function1<String, Unit> from Kla8
2021-03-11 11:59:07,943 [main:94] - GETTING Function1<String, Unit> from Boolean
2021-03-11 11:59:07,944 [main:94] - GETTING Function1<String, Unit> from Boolean
2021-03-11 11:59:07,945 [main:94] - GETTING Function1<String, Unit> from CoroutineContext
2021-03-11 11:59:07,947 [main:94] - GETTING Function1<String, Unit> from Continuation<Kla8?>
2021-03-11 11:59:07,956 [main:94] - GETTING Function1<String, Unit> from UInt
2021-03-11 11:59:07,956 [main:110] - replacement of {} of type Function1<String, Unit> is {a: String -> require(true, { "yxklh"})}
2021-03-11 11:59:08,111 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:59:08,111 [main:66] - Compilation checking started
2021-03-11 11:59:08,789 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        fn("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    fu20(fn)
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
a.fu20 {a: String -> require(true, { "yxklh"})}
    a.fu21 {a: String -> println()}
    a.fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(1070590752)
}


2021-03-11 11:59:08,790 [main:103] - replacing (fn, Function1<String, Unit>)
2021-03-11 11:59:08,790 [main:38] - replacing fn Function1<String, Unit>
2021-03-11 11:59:08,791 [main:42] - Getting value of type Function1<String, Unit>
2021-03-11 11:59:08,950 [main:302] - generating value of type = Function1<String, Unit> false depth = 0
2021-03-11 11:59:08,955 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:59:09,120 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:59:09,126 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:59:09,482 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:59:09,483 [main:95] - GENERATED = println("zxuhg")
2021-03-11 11:59:09,483 [main:46] - GENERATED VALUE OF TYPE Function1<String, Unit> = {a: String -> println("zxuhg")}
2021-03-11 11:59:09,483 [main:49] - GENERATED IS CALL =false
2021-03-11 11:59:09,494 [main:55] - randomType = String
2021-03-11 11:59:09,651 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:59:09,675 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:09,693 [main:94] - GETTING Function1<String, Unit> from Char
2021-03-11 11:59:09,712 [main:94] - GETTING Function1<String, Unit> from UByte
2021-03-11 11:59:09,736 [main:94] - GETTING Function1<String, Unit> from ULong
2021-03-11 11:59:09,760 [main:94] - GETTING Function1<String, Unit> from Any?
2021-03-11 11:59:09,764 [main:94] - GETTING Function1<String, Unit> from UByte
2021-03-11 11:59:09,765 [main:94] - GETTING Function1<String, Unit> from Int
2021-03-11 11:59:09,798 [main:94] - GETTING Function1<String, Unit> from Continuation<Any?>
2021-03-11 11:59:09,806 [main:94] - GETTING Function1<String, Unit> from Boolean
2021-03-11 11:59:09,815 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:09,816 [main:94] - GETTING Function1<String, Unit> from CoroutineContext
2021-03-11 11:59:09,822 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:09,824 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:09,825 [main:94] - GETTING Function1<String, Unit> from Any?
2021-03-11 11:59:09,826 [main:94] - GETTING Function1<String, Unit> from Int
2021-03-11 11:59:09,827 [main:94] - GETTING Function1<String, Unit> from Boolean
2021-03-11 11:59:09,828 [main:94] - GETTING Function1<String, Unit> from CoroutineContext
2021-03-11 11:59:09,829 [main:94] - GETTING Function1<String, Unit> from Boolean
2021-03-11 11:59:09,830 [main:94] - GETTING Function1<String, Unit> from UShort
2021-03-11 11:59:09,855 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:09,856 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:09,857 [main:94] - GETTING Function1<String, Unit> from Kla2
2021-03-11 11:59:09,872 [main:94] - GETTING Function1<String, Unit> from HashMap<Char, Function1<UInt?, Kla2>>
2021-03-11 11:59:09,998 [main:94] - GETTING Function1<String, Unit> from UShort
2021-03-11 11:59:09,999 [main:94] - GETTING Function1<String, Unit> from Function0<Unit>
2021-03-11 11:59:10,009 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:10,010 [main:94] - GETTING Function1<String, Unit> from UInt
2021-03-11 11:59:10,035 [main:94] - GETTING Function1<String, Unit> from Continuation<Kla8?>
2021-03-11 11:59:10,043 [main:94] - GETTING Function1<String, Unit> from Int
2021-03-11 11:59:10,044 [main:94] - GETTING Function1<String, Unit> from Boolean
2021-03-11 11:59:10,045 [main:94] - GETTING Function1<String, Unit> from Int
2021-03-11 11:59:10,046 [main:94] - GETTING Function1<String, Unit> from ULong
2021-03-11 11:59:10,047 [main:94] - GETTING Function1<String, Unit> from Any?
2021-03-11 11:59:10,048 [main:94] - GETTING Function1<String, Unit> from Short
2021-03-11 11:59:10,081 [main:94] - GETTING Function1<String, Unit> from Kla8
2021-03-11 11:59:10,086 [main:94] - GETTING Function1<String, Unit> from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:59:10,096 [main:94] - GETTING Function1<String, Unit> from EmptyCoroutineContext
2021-03-11 11:59:10,110 [main:94] - GETTING Function1<String, Unit> from Int
2021-03-11 11:59:10,111 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:10,112 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:10,113 [main:94] - GETTING Function1<String, Unit> from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:59:10,114 [main:94] - GETTING Function1<String, Unit> from Kla8
2021-03-11 11:59:10,116 [main:94] - GETTING Function1<String, Unit> from Boolean
2021-03-11 11:59:10,117 [main:94] - GETTING Function1<String, Unit> from UInt
2021-03-11 11:59:10,118 [main:94] - GETTING Function1<String, Unit> from CoroutineContext
2021-03-11 11:59:10,118 [main:110] - replacement of fn of type Function1<String, Unit> is {a: String -> println("zxuhg")}
2021-03-11 11:59:10,278 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:59:10,279 [main:66] - Compilation checking started
2021-03-11 11:59:10,971 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    fu20(fn)
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
a.fu20 {a: String -> require(true, { "yxklh"})}
    a.fu21 {a: String -> println()}
    a.fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(1070590752)
}


2021-03-11 11:59:10,972 [main:103] - replacing (a, Array<String>)
2021-03-11 11:59:10,972 [main:38] - replacing a Array<String>
2021-03-11 11:59:10,972 [main:42] - Getting value of type Array<String>
2021-03-11 11:59:11,131 [main:302] - generating value of type = Array<String> false depth = 0
2021-03-11 11:59:11,297 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Strg> = TODO()
2021-03-11 11:59:11,303 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Strg> = TODO()
2021-03-11 11:59:11,471 [main:95] - GENERATED = emptyArray<String>()
2021-03-11 11:59:11,471 [main:46] - GENERATED VALUE OF TYPE Array<String> = emptyArray<String>()
2021-03-11 11:59:11,471 [main:49] - GENERATED IS CALL =true
2021-03-11 11:59:11,482 [main:55] - randomType = UShort
2021-03-11 11:59:11,643 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:59:11,688 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:11,706 [main:94] - GETTING Array<String> from Int
2021-03-11 11:59:11,737 [main:94] - GETTING Array<String> from ULong
2021-03-11 11:59:11,760 [main:94] - GETTING Array<String> from HashMap<Char, Function1<UInt?, Kla2>>
2021-03-11 11:59:11,889 [main:94] - GETTING Array<String> from Kla2
2021-03-11 11:59:11,904 [main:94] - GETTING Array<String> from Int
2021-03-11 11:59:11,905 [main:94] - GETTING Array<String> from Function0<Unit>
2021-03-11 11:59:11,914 [main:94] - GETTING Array<String> from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:59:11,923 [main:94] - GETTING Array<String> from Short
2021-03-11 11:59:11,954 [main:94] - GETTING Array<String> from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:59:11,955 [main:94] - GETTING Array<String> from UInt
2021-03-11 11:59:11,978 [main:94] - GETTING Array<String> from UByte
2021-03-11 11:59:12,001 [main:94] - GETTING Array<String> from Kla8
2021-03-11 11:59:12,006 [main:94] - GETTING Array<String> from UByte
2021-03-11 11:59:12,007 [main:94] - GETTING Array<String> from CoroutineContext
2021-03-11 11:59:12,013 [main:94] - GETTING Array<String> from CoroutineContext
2021-03-11 11:59:12,014 [main:94] - GETTING Array<String> from Boolean
2021-03-11 11:59:12,023 [main:94] - GETTING Array<String> from Any?
2021-03-11 11:59:12,027 [main:94] - GETTING Array<String> from EmptyCoroutineContext
2021-03-11 11:59:12,041 [main:94] - GETTING Array<String> from Boolean
2021-03-11 11:59:12,042 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:12,043 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:12,043 [main:94] - GETTING Array<String> from Int
2021-03-11 11:59:12,044 [main:94] - GETTING Array<String> from Continuation<Any?>
2021-03-11 11:59:12,053 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:12,054 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:12,055 [main:94] - GETTING Array<String> from UShort
2021-03-11 11:59:12,124 [main:94] - GETTING Array<String> from Char
2021-03-11 11:59:12,142 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:12,143 [main:94] - GETTING Array<String> from UInt
2021-03-11 11:59:12,144 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:12,145 [main:94] - GETTING Array<String> from ULong
2021-03-11 11:59:12,146 [main:94] - GETTING Array<String> from Kla8
2021-03-11 11:59:12,147 [main:94] - GETTING Array<String> from Boolean
2021-03-11 11:59:12,148 [main:94] - GETTING Array<String> from Boolean
2021-03-11 11:59:12,149 [main:94] - GETTING Array<String> from Any?
2021-03-11 11:59:12,150 [main:94] - GETTING Array<String> from UShort
2021-03-11 11:59:12,151 [main:94] - GETTING Array<String> from Boolean
2021-03-11 11:59:12,152 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:12,152 [main:94] - GETTING Array<String> from Int
2021-03-11 11:59:12,153 [main:94] - GETTING Array<String> from Int
2021-03-11 11:59:12,154 [main:94] - GETTING Array<String> from CoroutineContext
2021-03-11 11:59:12,155 [main:94] - GETTING Array<String> from Continuation<Kla8?>
2021-03-11 11:59:12,165 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:12,166 [main:94] - GETTING Array<String> from Any?
2021-03-11 11:59:12,166 [main:110] - replacement of a of type Array<String> is emptyArray<String>()
2021-03-11 11:59:12,322 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:59:12,323 [main:66] - Compilation checking started
2021-03-11 11:59:13,002 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    fu20(fn)
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
a.fu20 {a: String -> require(true, { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(1070590752)
}


2021-03-11 11:59:13,003 [main:103] - replacing (a, Array<String>)
2021-03-11 11:59:13,003 [main:38] - replacing a Array<String>
2021-03-11 11:59:13,003 [main:42] - Getting value of type Array<String>
2021-03-11 11:59:13,161 [main:302] - generating value of type = Array<String> false depth = 0
2021-03-11 11:59:13,328 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->String): Array<String> = TODO()
2021-03-11 11:59:13,335 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->String): Array<String> = TODO()
2021-03-11 11:59:13,886 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:59:13,891 [main:302] - generating value of type = Function1<Int, String> false depth = 3
2021-03-11 11:59:13,897 [main:302] - generating value of type = String true depth = 4
2021-03-11 11:59:13,902 [main:95] - GENERATED = Array<String>(-1015879913, {a: Int -> "zyeuh"})
2021-03-11 11:59:13,902 [main:46] - GENERATED VALUE OF TYPE Array<String> = Array<String>(-1015879913, {a: Int -> "zyeuh"})
2021-03-11 11:59:13,902 [main:49] - GENERATED IS CALL =true
2021-03-11 11:59:14,101 [main:55] - randomType = Long?
2021-03-11 11:59:14,258 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:59:14,297 [main:94] - GETTING Array<String> from Int
2021-03-11 11:59:14,328 [main:94] - GETTING Array<String> from HashMap<Char, Function1<UInt?, Kla2>>
2021-03-11 11:59:14,454 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:14,472 [main:94] - GETTING Array<String> from Continuation<Kla8?>
2021-03-11 11:59:14,480 [main:94] - GETTING Array<String> from UInt
2021-03-11 11:59:14,503 [main:94] - GETTING Array<String> from Short
2021-03-11 11:59:14,535 [main:94] - GETTING Array<String> from UShort
2021-03-11 11:59:14,558 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:14,559 [main:94] - GETTING Array<String> from Int
2021-03-11 11:59:14,560 [main:94] - GETTING Array<String> from ULong
2021-03-11 11:59:14,583 [main:94] - GETTING Array<String> from Boolean
2021-03-11 11:59:14,592 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:14,593 [main:94] - GETTING Array<String> from Kla8
2021-03-11 11:59:14,597 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:14,598 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:14,599 [main:94] - GETTING Array<String> from Function0<Unit>
2021-03-11 11:59:14,610 [main:94] - GETTING Array<String> from Boolean
2021-03-11 11:59:14,611 [main:94] - GETTING Array<String> from CoroutineContext
2021-03-11 11:59:14,617 [main:94] - GETTING Array<String> from CoroutineContext
2021-03-11 11:59:14,618 [main:94] - GETTING Array<String> from UInt
2021-03-11 11:59:14,619 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:14,620 [main:94] - GETTING Array<String> from UShort
2021-03-11 11:59:14,621 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:14,622 [main:94] - GETTING Array<String> from Boolean
2021-03-11 11:59:14,622 [main:94] - GETTING Array<String> from Kla8
2021-03-11 11:59:14,623 [main:94] - GETTING Array<String> from UByte
2021-03-11 11:59:14,647 [main:94] - GETTING Array<String> from Char
2021-03-11 11:59:14,665 [main:94] - GETTING Array<String> from Boolean
2021-03-11 11:59:14,666 [main:94] - GETTING Array<String> from Kla2
2021-03-11 11:59:14,680 [main:94] - GETTING Array<String> from Any?
2021-03-11 11:59:14,684 [main:94] - GETTING Array<String> from Any?
2021-03-11 11:59:14,685 [main:94] - GETTING Array<String> from Int
2021-03-11 11:59:14,686 [main:94] - GETTING Array<String> from Boolean
2021-03-11 11:59:14,687 [main:94] - GETTING Array<String> from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:59:14,696 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:14,697 [main:94] - GETTING Array<String> from UByte
2021-03-11 11:59:14,698 [main:94] - GETTING Array<String> from Any?
2021-03-11 11:59:14,699 [main:94] - GETTING Array<String> from EmptyCoroutineContext
2021-03-11 11:59:14,714 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:14,715 [main:94] - GETTING Array<String> from Int
2021-03-11 11:59:14,716 [main:94] - GETTING Array<String> from Int
2021-03-11 11:59:14,717 [main:94] - GETTING Array<String> from CoroutineContext
2021-03-11 11:59:14,718 [main:94] - GETTING Array<String> from ULong
2021-03-11 11:59:14,718 [main:94] - GETTING Array<String> from Continuation<Any?>
2021-03-11 11:59:14,727 [main:94] - GETTING Array<String> from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:59:14,727 [main:110] - replacement of a of type Array<String> is Array<String>(-1015879913, {a: Int -> "zyeuh"})
2021-03-11 11:59:14,884 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:59:14,884 [main:66] - Compilation checking started
2021-03-11 11:59:15,581 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    fu20(fn)
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(-1015879913, {a: Int -> "zyeuh"}).fu20 {a: String -> require(true, { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(1070590752)
}


2021-03-11 11:59:15,582 [main:103] - replacing (fn, Function1<String, Unit>)
2021-03-11 11:59:15,585 [main:38] - replacing fn Function1<String, Unit>
2021-03-11 11:59:15,585 [main:42] - Getting value of type Function1<String, Unit>
2021-03-11 11:59:15,760 [main:302] - generating value of type = Function1<String, Unit> false depth = 0
2021-03-11 11:59:15,765 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:59:15,935 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:59:15,942 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:59:16,310 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:59:16,315 [main:95] - GENERATED = require(false)
2021-03-11 11:59:16,316 [main:46] - GENERATED VALUE OF TYPE Function1<String, Unit> = {a: String -> require(false)}
2021-03-11 11:59:16,316 [main:49] - GENERATED IS CALL =false
2021-03-11 11:59:16,762 [main:55] - randomType = Map<UShort?, Kla5>
2021-03-11 11:59:16,763 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:16,791 [main:94] - GETTING Function1<String, Unit> from Boolean
2021-03-11 11:59:16,804 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:16,806 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:16,807 [main:94] - GETTING Function1<String, Unit> from UByte
2021-03-11 11:59:16,838 [main:94] - GETTING Function1<String, Unit> from UShort
2021-03-11 11:59:16,862 [main:94] - GETTING Function1<String, Unit> from Boolean
2021-03-11 11:59:16,863 [main:94] - GETTING Function1<String, Unit> from CoroutineContext
2021-03-11 11:59:16,869 [main:94] - GETTING Function1<String, Unit> from Boolean
2021-03-11 11:59:16,871 [main:94] - GETTING Function1<String, Unit> from EmptyCoroutineContext
2021-03-11 11:59:16,886 [main:94] - GETTING Function1<String, Unit> from Boolean
2021-03-11 11:59:16,887 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:16,888 [main:94] - GETTING Function1<String, Unit> from UByte
2021-03-11 11:59:16,889 [main:94] - GETTING Function1<String, Unit> from HashMap<Char, Function1<UInt?, Kla2>>
2021-03-11 11:59:17,017 [main:94] - GETTING Function1<String, Unit> from Char
2021-03-11 11:59:17,036 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:17,037 [main:94] - GETTING Function1<String, Unit> from UInt
2021-03-11 11:59:17,061 [main:94] - GETTING Function1<String, Unit> from Int
2021-03-11 11:59:17,092 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:17,093 [main:94] - GETTING Function1<String, Unit> from Any?
2021-03-11 11:59:17,097 [main:94] - GETTING Function1<String, Unit> from Kla8
2021-03-11 11:59:17,102 [main:94] - GETTING Function1<String, Unit> from Continuation<Kla8?>
2021-03-11 11:59:17,112 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:17,113 [main:94] - GETTING Function1<String, Unit> from Int
2021-03-11 11:59:17,114 [main:94] - GETTING Function1<String, Unit> from Int
2021-03-11 11:59:17,115 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:17,116 [main:94] - GETTING Function1<String, Unit> from CoroutineContext
2021-03-11 11:59:17,117 [main:94] - GETTING Function1<String, Unit> from Kla8
2021-03-11 11:59:17,118 [main:94] - GETTING Function1<String, Unit> from Any?
2021-03-11 11:59:17,120 [main:94] - GETTING Function1<String, Unit> from Int
2021-03-11 11:59:17,121 [main:94] - GETTING Function1<String, Unit> from Short
2021-03-11 11:59:17,153 [main:94] - GETTING Function1<String, Unit> from ULong
2021-03-11 11:59:17,177 [main:94] - GETTING Function1<String, Unit> from CoroutineContext
2021-03-11 11:59:17,179 [main:94] - GETTING Function1<String, Unit> from Int
2021-03-11 11:59:17,180 [main:94] - GETTING Function1<String, Unit> from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:59:17,189 [main:94] - GETTING Function1<String, Unit> from Continuation<Any?>
2021-03-11 11:59:17,197 [main:94] - GETTING Function1<String, Unit> from Boolean
2021-03-11 11:59:17,198 [main:94] - GETTING Function1<String, Unit> from ULong
2021-03-11 11:59:17,199 [main:94] - GETTING Function1<String, Unit> from Function0<Unit>
2021-03-11 11:59:17,209 [main:94] - GETTING Function1<String, Unit> from String
2021-03-11 11:59:17,210 [main:94] - GETTING Function1<String, Unit> from UInt
2021-03-11 11:59:17,212 [main:94] - GETTING Function1<String, Unit> from Any?
2021-03-11 11:59:17,213 [main:94] - GETTING Function1<String, Unit> from UShort
2021-03-11 11:59:17,214 [main:94] - GETTING Function1<String, Unit> from Kla2
2021-03-11 11:59:17,228 [main:94] - GETTING Function1<String, Unit> from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:59:17,228 [main:110] - replacement of fn of type Function1<String, Unit> is {a: String -> require(false)}
2021-03-11 11:59:17,434 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:59:17,435 [main:66] - Compilation checking started
2021-03-11 11:59:18,150 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: String -> require(false)})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(-1015879913, {a: Int -> "zyeuh"}).fu20 {a: String -> require(true, { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(1070590752)
}


2021-03-11 11:59:18,152 [main:103] - replacing (a, Array<String>)
2021-03-11 11:59:18,152 [main:38] - replacing a Array<String>
2021-03-11 11:59:18,152 [main:42] - Getting value of type Array<String>
2021-03-11 11:59:18,325 [main:302] - generating value of type = Array<String> false depth = 0
2021-03-11 11:59:18,498 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<Strg> = TODO()
2021-03-11 11:59:18,505 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<Strg> = TODO()
2021-03-11 11:59:18,682 [main:95] - GENERATED = enumValues<String>()
2021-03-11 11:59:18,682 [main:46] - GENERATED VALUE OF TYPE Array<String> = enumValues<String>()
2021-03-11 11:59:18,682 [main:49] - GENERATED IS CALL =true
2021-03-11 11:59:18,694 [main:55] - randomType = UByte
2021-03-11 11:59:18,861 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:59:18,899 [main:94] - GETTING Array<String> from Int
2021-03-11 11:59:18,931 [main:94] - GETTING Array<String> from CoroutineContext
2021-03-11 11:59:18,937 [main:94] - GETTING Array<String> from UShort
2021-03-11 11:59:18,961 [main:94] - GETTING Array<String> from Any?
2021-03-11 11:59:18,964 [main:94] - GETTING Array<String> from Kla8
2021-03-11 11:59:18,969 [main:94] - GETTING Array<String> from Short
2021-03-11 11:59:19,001 [main:94] - GETTING Array<String> from Boolean
2021-03-11 11:59:19,010 [main:94] - GETTING Array<String> from Boolean
2021-03-11 11:59:19,011 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:19,030 [main:94] - GETTING Array<String> from Kla8
2021-03-11 11:59:19,031 [main:94] - GETTING Array<String> from UShort
2021-03-11 11:59:19,032 [main:94] - GETTING Array<String> from UByte
2021-03-11 11:59:19,056 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:19,057 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:19,058 [main:94] - GETTING Array<String> from Continuation<Any?>
2021-03-11 11:59:19,066 [main:94] - GETTING Array<String> from Int
2021-03-11 11:59:19,067 [main:94] - GETTING Array<String> from Int
2021-03-11 11:59:19,068 [main:94] - GETTING Array<String> from ULong
2021-03-11 11:59:19,092 [main:94] - GETTING Array<String> from Int
2021-03-11 11:59:19,093 [main:94] - GETTING Array<String> from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:59:19,105 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:19,106 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:19,110 [main:94] - GETTING Array<String> from CoroutineContext
2021-03-11 11:59:19,111 [main:94] - GETTING Array<String> from Boolean
2021-03-11 11:59:19,112 [main:94] - GETTING Array<String> from Boolean
2021-03-11 11:59:19,114 [main:94] - GETTING Array<String> from HashMap<Char, Function1<UInt?, Kla2>>
2021-03-11 11:59:19,252 [main:94] - GETTING Array<String> from ULong
2021-03-11 11:59:19,253 [main:94] - GETTING Array<String> from UInt
2021-03-11 11:59:19,277 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:19,278 [main:94] - GETTING Array<String> from Function0<Unit>
2021-03-11 11:59:19,288 [main:94] - GETTING Array<String> from Int
2021-03-11 11:59:19,290 [main:94] - GETTING Array<String> from CoroutineContext
2021-03-11 11:59:19,291 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:19,292 [main:94] - GETTING Array<String> from Any?
2021-03-11 11:59:19,293 [main:94] - GETTING Array<String> from Any?
2021-03-11 11:59:19,294 [main:94] - GETTING Array<String> from Continuation<Kla8?>
2021-03-11 11:59:19,303 [main:94] - GETTING Array<String> from UByte
2021-03-11 11:59:19,304 [main:94] - GETTING Array<String> from Char
2021-03-11 11:59:19,323 [main:94] - GETTING Array<String> from Boolean
2021-03-11 11:59:19,324 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:19,325 [main:94] - GETTING Array<String> from EmptyCoroutineContext
2021-03-11 11:59:19,340 [main:94] - GETTING Array<String> from Kla2
2021-03-11 11:59:19,355 [main:94] - GETTING Array<String> from UInt
2021-03-11 11:59:19,356 [main:94] - GETTING Array<String> from String
2021-03-11 11:59:19,357 [main:94] - GETTING Array<String> from Continuation<Pair<Byte, Kla0>>
2021-03-11 11:59:19,357 [main:110] - replacement of a of type Array<String> is enumValues<String>()
2021-03-11 11:59:19,523 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:59:19,524 [main:66] - Compilation checking started
2021-03-11 11:59:20,028 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: String -> require(false)})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(-1015879913, {a: Int -> "zyeuh"}).fu20 {a: String -> require(true, { "yxklh"})}
    enumValues<String>().fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(1070590752)
}


2021-03-11 11:59:20,209 [main:137] - TRYING TO REPLACE CONSTANT 1070590752
2021-03-11 11:59:20,385 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 11:59:20,385 [main:66] - Compilation checking started
2021-03-11 11:59:21,136 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: String -> require(false)})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(-1015879913, {a: Int -> "zyeuh"}).fu20 {a: String -> require(true, { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:21,137 [main:137] - TRYING TO REPLACE CONSTANT 6605136401679491436
2021-03-11 11:59:21,304 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 11:59:21,305 [main:137] - TRYING TO REPLACE CONSTANT true
2021-03-11 11:59:21,481 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:59:21,482 [main:66] - Compilation checking started
2021-03-11 11:59:22,185 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: String -> require(false)})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(-1015879913, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:22,186 [main:137] - TRYING TO REPLACE CONSTANT 1015879913
2021-03-11 11:59:22,350 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 11:59:22,350 [main:66] - Compilation checking started
2021-03-11 11:59:23,058 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: String -> require(false)})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:23,059 [main:137] - TRYING TO REPLACE CONSTANT false
2021-03-11 11:59:23,272 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:59:23,272 [main:66] - Compilation checking started
2021-03-11 11:59:23,973 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: String -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:23,973 [main:86] - Final res = 
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: String -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:24,002 [main:26] - Trying to change some nodes to nodes from other programs 712 times
2021-03-11 11:59:24,002 [main:28] - Try №0 of 712
2021-03-11 11:59:24,016 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 11:59:24,016 [main:66] - Compilation checking started
2021-03-11 11:59:24,555 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = sz()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: String -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:24,556 [main:28] - Try №1 of 712
2021-03-11 11:59:24,568 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 11:59:24,569 [main:28] - Try №2 of 712
2021-03-11 11:59:24,588 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 11:59:24,588 [main:66] - Compilation checking started
2021-03-11 11:59:25,109 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, {
        foo(foo) // 1st foo is a local fun, second is a captured local var
        foo()
    })}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: String -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:25,110 [main:28] - Try №3 of 712
2021-03-11 11:59:25,116 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 11:59:25,117 [main:66] - Compilation checking started
2021-03-11 11:59:25,645 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: (Int, A, String) -> String): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: String -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:25,645 [main:28] - Try №4 of 712
2021-03-11 11:59:25,649 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 11:59:25,650 [main:66] - Compilation checking started
2021-03-11 11:59:26,160 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).value().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: String -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:26,160 [main:28] - Try №5 of 712
2021-03-11 11:59:26,168 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:59:26,168 [main:66] - Compilation checking started
2021-03-11 11:59:26,676 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: String -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((test.Host.foo)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:26,676 [main:28] - Try №6 of 712
2021-03-11 11:59:26,682 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 11:59:26,683 [main:66] - Compilation checking started
2021-03-11 11:59:27,200 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<String>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: String -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:27,200 [main:28] - Try №7 of 712
2021-03-11 11:59:27,211 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 11:59:27,211 [main:66] - Compilation checking started
2021-03-11 11:59:27,718 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).x.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: String -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:27,719 [main:28] - Try №8 of 712
2021-03-11 11:59:27,730 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 11:59:27,731 [main:66] - Compilation checking started
2021-03-11 11:59:28,453 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: String -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:28,453 [main:28] - Try №9 of 712
2021-03-11 11:59:28,464 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 11:59:28,464 [main:66] - Compilation checking started
2021-03-11 11:59:29,025 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): String = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: String -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:29,025 [main:28] - Try №10 of 712
2021-03-11 11:59:29,044 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 11:59:29,044 [main:66] - Compilation checking started
2021-03-11 11:59:29,565 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, {
        it.resume("OK")
        COROUTINE_SUSPENDED
    })}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: String -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:29,565 [main:28] - Try №11 of 712
2021-03-11 11:59:29,574 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 11:59:29,575 [main:66] - Compilation checking started
2021-03-11 11:59:30,100 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Int()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: String -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:30,101 [main:28] - Try №12 of 712
2021-03-11 11:59:30,110 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 11:59:30,110 [main:28] - Try №13 of 712
2021-03-11 11:59:30,118 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:59:30,118 [main:66] - Compilation checking started
2021-03-11 11:59:30,638 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error(fn.invoke(arg))
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: String -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:30,638 [main:28] - Try №14 of 712
2021-03-11 11:59:30,641 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 11:59:30,642 [main:66] - Compilation checking started
2021-03-11 11:59:31,152 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = p()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: String -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:31,153 [main:28] - Try №15 of 712
2021-03-11 11:59:31,159 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 11:59:31,159 [main:66] - Compilation checking started
2021-03-11 11:59:31,670 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: String -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:31,670 [main:28] - Try №16 of 712
2021-03-11 11:59:31,688 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-11 11:59:31,688 [main:66] - Compilation checking started
2021-03-11 11:59:32,232 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((a?.x ?: 3).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: String -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:32,232 [main:28] - Try №17 of 712
2021-03-11 11:59:32,241 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 11:59:32,242 [main:66] - Compilation checking started
2021-03-11 11:59:32,760 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).Foo().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: String -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:32,760 [main:28] - Try №18 of 712
2021-03-11 11:59:32,771 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 11:59:32,772 [main:66] - Compilation checking started
2021-03-11 11:59:33,302 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(1.0, x)?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: String -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:33,302 [main:28] - Try №19 of 712
2021-03-11 11:59:33,312 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 11:59:33,313 [main:66] - Compilation checking started
2021-03-11 11:59:34,051 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:34,051 [main:28] - Try №20 of 712
2021-03-11 11:59:34,058 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:59:34,058 [main:66] - Compilation checking started
2021-03-11 11:59:34,574 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).test())
            prope8()
        }
        if ((Kla4()).equals("ipfes").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:34,574 [main:28] - Try №21 of 712
2021-03-11 11:59:34,590 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 11:59:34,591 [main:66] - Compilation checking started
2021-03-11 11:59:35,342 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString((2588))

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:35,342 [main:28] - Try №22 of 712
2021-03-11 11:59:35,353 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 11:59:35,353 [main:66] - Compilation checking started
2021-03-11 11:59:36,098 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:36,098 [main:28] - Try №23 of 712
2021-03-11 11:59:36,106 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 11:59:36,107 [main:28] - Try №24 of 712
2021-03-11 11:59:36,116 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 11:59:36,116 [main:66] - Compilation checking started
2021-03-11 11:59:36,665 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = String
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:36,666 [main:28] - Try №25 of 712
2021-03-11 11:59:36,682 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 11:59:36,683 [main:66] - Compilation checking started
2021-03-11 11:59:37,237 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, {
        callsInPlace(block, InvocationKind.EXACTLY_ONCE)
    })

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:37,237 [main:28] - Try №26 of 712
2021-03-11 11:59:37,241 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 11:59:37,241 [main:66] - Compilation checking started
2021-03-11 11:59:37,752 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(x.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:37,752 [main:28] - Try №27 of 712
2021-03-11 11:59:37,756 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 11:59:37,757 [main:66] - Compilation checking started
2021-03-11 11:59:38,492 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:38,492 [main:28] - Try №28 of 712
2021-03-11 11:59:38,502 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 11:59:38,502 [main:66] - Compilation checking started
2021-03-11 11:59:39,008 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).T()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:39,008 [main:28] - Try №29 of 712
2021-03-11 11:59:39,013 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 11:59:39,013 [main:28] - Try №30 of 712
2021-03-11 11:59:39,021 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 11:59:39,022 [main:28] - Try №31 of 712
2021-03-11 11:59:39,031 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 11:59:39,031 [main:66] - Compilation checking started
2021-03-11 11:59:39,590 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    i { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:39,590 [main:28] - Try №32 of 712
2021-03-11 11:59:39,610 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-11 11:59:39,611 [main:66] - Compilation checking started
2021-03-11 11:59:40,131 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<String> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:40,131 [main:28] - Try №33 of 712
2021-03-11 11:59:40,138 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:59:40,139 [main:66] - Compilation checking started
2021-03-11 11:59:40,718 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (kotlin.reflect.KClass).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:40,719 [main:28] - Try №34 of 712
2021-03-11 11:59:40,730 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 11:59:40,730 [main:66] - Compilation checking started
2021-03-11 11:59:41,261 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).UInt("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:41,261 [main:28] - Try №35 of 712
2021-03-11 11:59:41,272 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-11 11:59:41,273 [main:66] - Compilation checking started
2021-03-11 11:59:41,801 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    val x = println(":Hi!") as Any
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:41,802 [main:28] - Try №36 of 712
2021-03-11 11:59:41,812 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 11:59:41,813 [main:66] - Compilation checking started
2021-03-11 11:59:42,340 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4(0)
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:42,340 [main:28] - Try №37 of 712
2021-03-11 11:59:42,343 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 11:59:42,344 [main:66] - Compilation checking started
2021-03-11 11:59:42,863 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Int(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:42,863 [main:28] - Try №38 of 712
2021-03-11 11:59:42,872 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 11:59:42,873 [main:66] - Compilation checking started
2021-03-11 11:59:43,383 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: n) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:43,383 [main:28] - Try №39 of 712
2021-03-11 11:59:43,387 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 11:59:43,388 [main:66] - Compilation checking started
2021-03-11 11:59:44,106 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:44,106 [main:28] - Try №40 of 712
2021-03-11 11:59:44,116 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 11:59:44,116 [main:66] - Compilation checking started
2021-03-11 11:59:44,626 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).test(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:44,626 [main:28] - Try №41 of 712
2021-03-11 11:59:44,634 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:59:44,634 [main:66] - Compilation checking started
2021-03-11 11:59:45,147 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(kotlin.test)
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:45,147 [main:28] - Try №42 of 712
2021-03-11 11:59:45,159 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 11:59:45,160 [main:28] - Try №43 of 712
2021-03-11 11:59:45,175 [main:33] - Trying to replace Element(CONDITION) on Element(CONDITION)
2021-03-11 11:59:45,175 [main:66] - Compilation checking started
2021-03-11 11:59:45,689 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if (!test4()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:45,690 [main:28] - Try №44 of 712
2021-03-11 11:59:45,699 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 11:59:45,700 [main:66] - Compilation checking started
2021-03-11 11:59:46,229 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): T {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:46,229 [main:28] - Try №45 of 712
2021-03-11 11:59:46,235 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 11:59:46,236 [main:66] - Compilation checking started
2021-03-11 11:59:46,822 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, (T) -> Unit, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:46,822 [main:28] - Try №46 of 712
2021-03-11 11:59:46,828 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:59:46,829 [main:66] - Compilation checking started
2021-03-11 11:59:47,436 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().map(String::length)
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("kosqs").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:47,436 [main:28] - Try №47 of 712
2021-03-11 11:59:47,459 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 11:59:47,460 [main:66] - Compilation checking started
2021-03-11 11:59:48,242 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:48,242 [main:28] - Try №48 of 712
2021-03-11 11:59:48,255 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 11:59:48,256 [main:28] - Try №49 of 712
2021-03-11 11:59:48,265 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 11:59:48,265 [main:66] - Compilation checking started
2021-03-11 11:59:48,819 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = blowUpHorribly()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:48,820 [main:28] - Try №50 of 712
2021-03-11 11:59:48,834 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 11:59:48,835 [main:66] - Compilation checking started
2021-03-11 11:59:49,391 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = property.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:49,391 [main:28] - Try №51 of 712
2021-03-11 11:59:49,397 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 11:59:49,398 [main:66] - Compilation checking started
2021-03-11 11:59:49,932 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun h(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:49,932 [main:28] - Try №52 of 712
2021-03-11 11:59:49,939 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:59:49,939 [main:66] - Compilation checking started
2021-03-11 11:59:50,477 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).call()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:50,477 [main:28] - Try №53 of 712
2021-03-11 11:59:50,493 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 11:59:50,494 [main:66] - Compilation checking started
2021-03-11 11:59:50,511 [main:71] - Wrong syntax or breaks conditions
2021-03-11 11:59:50,512 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (!=29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:50,512 [main:28] - Try №54 of 712
2021-03-11 11:59:50,519 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:59:50,519 [main:66] - Compilation checking started
2021-03-11 11:59:51,045 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.assertEquals("$k1", "$k2")).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:51,045 [main:28] - Try №55 of 712
2021-03-11 11:59:51,048 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-11 11:59:51,049 [main:66] - Compilation checking started
2021-03-11 11:59:51,669 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    fun box(): String {
    val s = StringBuilder()

    for (iv in arr.withIndex()) {
        val (i, x) = iv
        s.append("$i:$x;")
    }

    val ss = s.toString()
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:51,669 [main:28] - Try №56 of 712
2021-03-11 11:59:51,681 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 11:59:51,682 [main:66] - Compilation checking started
2021-03-11 11:59:52,226 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<UByte> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:52,227 [main:28] - Try №57 of 712
2021-03-11 11:59:52,234 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:59:52,235 [main:66] - Compilation checking started
2021-03-11 11:59:52,810 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(IC(40)))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:52,810 [main:28] - Try №58 of 712
2021-03-11 11:59:52,817 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:59:52,818 [main:66] - Compilation checking started
2021-03-11 11:59:53,335 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = assertEquals("abc", c2)
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:53,335 [main:28] - Try №59 of 712
2021-03-11 11:59:53,346 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 11:59:53,346 [main:28] - Try №60 of 712
2021-03-11 11:59:53,350 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 11:59:53,350 [main:66] - Compilation checking started
2021-03-11 11:59:53,860 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun fu19(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = inlineMeIfYouCan(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:53,861 [main:28] - Try №61 of 712
2021-03-11 11:59:53,864 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 11:59:53,865 [main:66] - Compilation checking started
2021-03-11 11:59:54,631 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:54,631 [main:28] - Try №62 of 712
2021-03-11 11:59:54,635 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 11:59:54,636 [main:66] - Compilation checking started
2021-03-11 11:59:55,166 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (String())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:55,166 [main:28] - Try №63 of 712
2021-03-11 11:59:55,174 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:59:55,175 [main:66] - Compilation checking started
2021-03-11 11:59:55,698 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = controller.result

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:55,698 [main:28] - Try №64 of 712
2021-03-11 11:59:55,712 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 11:59:55,713 [main:28] - Try №65 of 712
2021-03-11 11:59:55,720 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 11:59:55,720 [main:28] - Try №66 of 712
2021-03-11 11:59:55,726 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 11:59:55,727 [main:66] - Compilation checking started
2021-03-11 11:59:56,245 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).String()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:56,245 [main:28] - Try №67 of 712
2021-03-11 11:59:56,251 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:59:56,252 [main:66] - Compilation checking started
2021-03-11 11:59:56,775 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().getEnclosingConstructor()
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:56,775 [main:28] - Try №68 of 712
2021-03-11 11:59:56,785 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 11:59:56,786 [main:66] - Compilation checking started
2021-03-11 11:59:57,313 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val s = java.lang.String.valueOf(1)
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): Number {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:57,313 [main:28] - Try №69 of 712
2021-03-11 11:59:57,324 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 11:59:57,325 [main:28] - Try №70 of 712
2021-03-11 11:59:57,332 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 11:59:57,333 [main:28] - Try №71 of 712
2021-03-11 11:59:57,344 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-11 11:59:57,345 [main:66] - Compilation checking started
2021-03-11 11:59:58,078 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:58,078 [main:28] - Try №72 of 712
2021-03-11 11:59:58,090 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 11:59:58,090 [main:28] - Try №73 of 712
2021-03-11 11:59:58,100 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 11:59:58,100 [main:66] - Compilation checking started
2021-03-11 11:59:58,617 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Boolean<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:58,617 [main:28] - Try №74 of 712
2021-03-11 11:59:58,625 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:59:58,626 [main:66] - Compilation checking started
2021-03-11 11:59:59,204 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return (5u downTo 3u).reversed()
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:59,204 [main:28] - Try №75 of 712
2021-03-11 11:59:59,208 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 11:59:59,208 [main:66] - Compilation checking started
2021-03-11 11:59:59,731 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<set?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 11:59:59,732 [main:28] - Try №76 of 712
2021-03-11 11:59:59,749 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-11 11:59:59,750 [main:66] - Compilation checking started
2021-03-11 12:00:00,293 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((genericParameterTypes2[0] as Class<*>).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:00,293 [main:28] - Try №77 of 712
2021-03-11 12:00:00,302 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 12:00:00,303 [main:28] - Try №78 of 712
2021-03-11 12:00:00,309 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 12:00:00,309 [main:66] - Compilation checking started
2021-03-11 12:00:00,841 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<String, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:00,841 [main:28] - Try №79 of 712
2021-03-11 12:00:00,858 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 12:00:00,858 [main:66] - Compilation checking started
2021-03-11 12:00:01,382 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({ testULong(it) })
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:01,382 [main:28] - Try №80 of 712
2021-03-11 12:00:01,390 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 12:00:01,391 [main:28] - Try №81 of 712
2021-03-11 12:00:01,400 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:00:01,401 [main:66] - Compilation checking started
2021-03-11 12:00:01,917 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { list1() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:01,917 [main:28] - Try №82 of 712
2021-03-11 12:00:01,927 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:00:01,928 [main:66] - Compilation checking started
2021-03-11 12:00:02,477 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> a()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:02,477 [main:28] - Try №83 of 712
2021-03-11 12:00:02,484 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:00:02,485 [main:66] - Compilation checking started
2021-03-11 12:00:03,015 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (11.z).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:03,015 [main:28] - Try №84 of 712
2021-03-11 12:00:03,024 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:00:03,025 [main:66] - Compilation checking started
2021-03-11 12:00:03,549 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: foo<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:03,549 [main:28] - Try №85 of 712
2021-03-11 12:00:03,560 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 12:00:03,561 [main:66] - Compilation checking started
2021-03-11 12:00:04,080 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4(2)
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:04,081 [main:28] - Try №86 of 712
2021-03-11 12:00:04,098 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-11 12:00:04,099 [main:66] - Compilation checking started
2021-03-11 12:00:04,663 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if (("" + it.toUpperCase()).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:04,664 [main:28] - Try №87 of 712
2021-03-11 12:00:04,670 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:00:04,671 [main:66] - Compilation checking started
2021-03-11 12:00:05,420 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:05,420 [main:28] - Try №88 of 712
2021-03-11 12:00:05,428 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:00:05,428 [main:66] - Compilation checking started
2021-03-11 12:00:05,951 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        s.extVar?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:05,951 [main:28] - Try №89 of 712
2021-03-11 12:00:05,957 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 12:00:05,957 [main:66] - Compilation checking started
2021-03-11 12:00:06,471 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Local) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:06,471 [main:28] - Try №90 of 712
2021-03-11 12:00:06,479 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:00:06,480 [main:66] - Compilation checking started
2021-03-11 12:00:07,002 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun fu15(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if (0xDC56.toShort()) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:07,002 [main:28] - Try №91 of 712
2021-03-11 12:00:07,007 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 12:00:07,007 [main:66] - Compilation checking started
2021-03-11 12:00:07,748 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:07,748 [main:28] - Try №92 of 712
2021-03-11 12:00:07,758 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:00:07,758 [main:66] - Compilation checking started
2021-03-11 12:00:08,284 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().Int()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:08,284 [main:28] - Try №93 of 712
2021-03-11 12:00:08,291 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:00:08,292 [main:66] - Compilation checking started
2021-03-11 12:00:08,805 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.newCReceiver()
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:08,805 [main:28] - Try №94 of 712
2021-03-11 12:00:08,811 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 12:00:08,812 [main:66] - Compilation checking started
2021-03-11 12:00:09,341 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: String) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:09,341 [main:28] - Try №95 of 712
2021-03-11 12:00:09,345 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 12:00:09,346 [main:66] - Compilation checking started
2021-03-11 12:00:09,870 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = IC2()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:09,871 [main:28] - Try №96 of 712
2021-03-11 12:00:09,874 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 12:00:09,875 [main:66] - Compilation checking started
2021-03-11 12:00:10,387 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).Char("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:10,387 [main:28] - Try №97 of 712
2021-03-11 12:00:10,391 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 12:00:10,391 [main:66] - Compilation checking started
2021-03-11 12:00:11,135 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:11,135 [main:28] - Try №98 of 712
2021-03-11 12:00:11,139 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 12:00:11,139 [main:66] - Compilation checking started
2021-03-11 12:00:11,654 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).String().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:11,654 [main:28] - Try №99 of 712
2021-03-11 12:00:11,661 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:00:11,662 [main:66] - Compilation checking started
2021-03-11 12:00:12,180 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("kosqs"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).mutableListOf<ULong>()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:12,180 [main:28] - Try №100 of 712
2021-03-11 12:00:12,194 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-11 12:00:12,195 [main:66] - Compilation checking started
2021-03-11 12:00:12,918 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:12,918 [main:28] - Try №101 of 712
2021-03-11 12:00:12,924 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 12:00:12,924 [main:66] - Compilation checking started
2021-03-11 12:00:13,452 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : s<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:13,452 [main:28] - Try №102 of 712
2021-03-11 12:00:13,468 [main:28] - Try №103 of 712
2021-03-11 12:00:13,482 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 12:00:13,483 [main:28] - Try №104 of 712
2021-03-11 12:00:13,486 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 12:00:13,487 [main:66] - Compilation checking started
2021-03-11 12:00:14,008 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = call()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:14,008 [main:28] - Try №105 of 712
2021-03-11 12:00:14,020 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 12:00:14,021 [main:66] - Compilation checking started
2021-03-11 12:00:14,561 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString(11)
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:14,561 [main:28] - Try №106 of 712
2021-03-11 12:00:14,565 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 12:00:14,566 [main:66] - Compilation checking started
2021-03-11 12:00:15,078 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: Ann2 = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:15,078 [main:28] - Try №107 of 712
2021-03-11 12:00:15,084 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:00:15,085 [main:66] - Compilation checking started
2021-03-11 12:00:15,607 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).noInlineLambda()).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:15,607 [main:28] - Try №108 of 712
2021-03-11 12:00:15,611 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 12:00:15,612 [main:66] - Compilation checking started
2021-03-11 12:00:16,346 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:16,346 [main:28] - Try №109 of 712
2021-03-11 12:00:16,355 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 12:00:16,355 [main:28] - Try №110 of 712
2021-03-11 12:00:16,359 [main:33] - Trying to replace Element(CLASS) on Element(CLASS)
2021-03-11 12:00:16,359 [main:66] - Compilation checking started
2021-03-11 12:00:16,963 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

class CClassWithCompanion {
    companion object {
        @JvmStatic
        @JvmOverloads
        fun String.showSnackbar(@StringRes stringResId: Int, duration: Int = 2) {

        }

        @JvmStatic
        @JvmOverloads
        fun showSnackbarNoExtension(@StringRes stringResId: Int, duration: Int = 2) {

        }

        @JvmStatic
        @JvmOverloads
        fun String.showSnackbarLong(@StringRes stringResId: Int, @DefRes duration: Int = 2, @LongRes oneMoreNonDefault: Long, andDefaultOne: String = "Default") {

        }

        @JvmStatic
        @JvmOverloads
        fun showSnackbarLongNoExtension(@StringRes stringResId: Int, @DefRes duration: Int = 2, @LongRes oneMoreNonDefault: Long, andDefaultOne: String = "Default") {

        }
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:16,963 [main:28] - Try №111 of 712
2021-03-11 12:00:16,970 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:00:16,970 [main:66] - Compilation checking started
2021-03-11 12:00:17,499 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).{invokeOrder+="0_"; i}().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:17,499 [main:28] - Try №112 of 712
2021-03-11 12:00:17,509 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:00:17,509 [main:66] - Compilation checking started
2021-03-11 12:00:18,031 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Int())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:18,031 [main:28] - Try №113 of 712
2021-03-11 12:00:18,037 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:00:18,038 [main:66] - Compilation checking started
2021-03-11 12:00:18,562 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        ok()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:18,562 [main:28] - Try №114 of 712
2021-03-11 12:00:18,570 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 12:00:18,571 [main:28] - Try №115 of 712
2021-03-11 12:00:18,580 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:00:18,581 [main:66] - Compilation checking started
2021-03-11 12:00:19,108 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<x>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:19,108 [main:28] - Try №116 of 712
2021-03-11 12:00:19,126 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-11 12:00:19,126 [main:66] - Compilation checking started
2021-03-11 12:00:19,639 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = ("O" to "").toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:19,639 [main:28] - Try №117 of 712
2021-03-11 12:00:19,650 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 12:00:19,650 [main:66] - Compilation checking started
2021-03-11 12:00:20,170 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt("This loop shoud not be executed")).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:20,170 [main:28] - Try №118 of 712
2021-03-11 12:00:20,186 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:00:20,187 [main:66] - Compilation checking started
2021-03-11 12:00:20,715 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.java()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:20,715 [main:28] - Try №119 of 712
2021-03-11 12:00:20,724 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 12:00:20,725 [main:66] - Compilation checking started
2021-03-11 12:00:21,239 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(i: UInt?): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:21,240 [main:28] - Try №120 of 712
2021-03-11 12:00:21,245 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-11 12:00:21,246 [main:66] - Compilation checking started
2021-03-11 12:00:21,775 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    private object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:21,775 [main:28] - Try №121 of 712
2021-03-11 12:00:21,787 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:00:21,788 [main:66] - Compilation checking started
2021-03-11 12:00:22,342 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((log.append(msg)).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:22,342 [main:28] - Try №122 of 712
2021-03-11 12:00:22,349 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:00:22,350 [main:66] - Compilation checking started
2021-03-11 12:00:22,361 [main:71] - Wrong syntax or breaks conditions
2021-03-11 12:00:22,362 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import Nested().foo().toString().jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:22,362 [main:28] - Try №123 of 712
2021-03-11 12:00:22,372 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 12:00:22,373 [main:28] - Try №124 of 712
2021-03-11 12:00:22,377 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 12:00:22,377 [main:66] - Compilation checking started
2021-03-11 12:00:22,909 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(KProperty1()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("kosqs").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:22,909 [main:28] - Try №125 of 712
2021-03-11 12:00:22,917 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 12:00:22,918 [main:28] - Try №126 of 712
2021-03-11 12:00:22,929 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 12:00:22,929 [main:28] - Try №127 of 712
2021-03-11 12:00:22,941 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 12:00:22,942 [main:66] - Compilation checking started
2021-03-11 12:00:23,687 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:23,687 [main:28] - Try №128 of 712
2021-03-11 12:00:23,691 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 12:00:23,692 [main:66] - Compilation checking started
2021-03-11 12:00:24,220 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ String<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:24,220 [main:28] - Try №129 of 712
2021-03-11 12:00:24,235 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-11 12:00:24,236 [main:66] - Compilation checking started
2021-03-11 12:00:24,748 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:24,748 [main:28] - Try №130 of 712
2021-03-11 12:00:24,752 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 12:00:24,753 [main:66] - Compilation checking started
2021-03-11 12:00:25,257 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.b()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:25,257 [main:28] - Try №131 of 712
2021-03-11 12:00:25,266 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:00:25,267 [main:66] - Compilation checking started
2021-03-11 12:00:25,778 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).Int(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:25,778 [main:28] - Try №132 of 712
2021-03-11 12:00:25,787 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 12:00:25,788 [main:28] - Try №133 of 712
2021-03-11 12:00:25,793 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 12:00:25,793 [main:66] - Compilation checking started
2021-03-11 12:00:26,307 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in bindee = subject) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:26,307 [main:28] - Try №134 of 712
2021-03-11 12:00:26,321 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-11 12:00:26,321 [main:66] - Compilation checking started
2021-03-11 12:00:26,839 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<ULong>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:26,839 [main:28] - Try №135 of 712
2021-03-11 12:00:26,843 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 12:00:26,843 [main:66] - Compilation checking started
2021-03-11 12:00:27,370 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun result<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:27,370 [main:28] - Try №136 of 712
2021-03-11 12:00:27,377 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:00:27,377 [main:66] - Compilation checking started
2021-03-11 12:00:27,896 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = getDeclaredMethod("hashCode", Any::class.java)
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:27,896 [main:28] - Try №137 of 712
2021-03-11 12:00:27,903 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 12:00:27,904 [main:66] - Compilation checking started
2021-03-11 12:00:28,421 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String { return "p2:$p2" }

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:28,422 [main:28] - Try №138 of 712
2021-03-11 12:00:28,437 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 12:00:28,437 [main:28] - Try №139 of 712
2021-03-11 12:00:28,454 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:00:28,454 [main:66] - Compilation checking started
2021-03-11 12:00:29,001 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: ulongList.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:29,001 [main:28] - Try №140 of 712
2021-03-11 12:00:29,009 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:00:29,010 [main:66] - Compilation checking started
2021-03-11 12:00:29,528 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = e.message.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:29,528 [main:28] - Try №141 of 712
2021-03-11 12:00:29,538 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 12:00:29,539 [main:66] - Compilation checking started
2021-03-11 12:00:30,084 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: BaseClass) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:30,085 [main:28] - Try №142 of 712
2021-03-11 12:00:30,090 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 12:00:30,091 [main:66] - Compilation checking started
2021-03-11 12:00:30,611 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {(s: () -> Unit) -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:30,612 [main:28] - Try №143 of 712
2021-03-11 12:00:30,619 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:00:30,620 [main:66] - Compilation checking started
2021-03-11 12:00:31,135 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).assertEquals("efg_ghi", foo1("ghi"))).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:31,135 [main:28] - Try №144 of 712
2021-03-11 12:00:31,146 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 12:00:31,147 [main:66] - Compilation checking started
2021-03-11 12:00:31,662 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, "K", Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:31,662 [main:28] - Try №145 of 712
2021-03-11 12:00:31,672 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:00:31,672 [main:66] - Compilation checking started
2021-03-11 12:00:32,183 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, foo())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:32,183 [main:28] - Try №146 of 712
2021-03-11 12:00:32,201 [main:33] - Trying to replace PsiElement(ESCAPE_SEQUENCE) on PsiElement(ESCAPE_SEQUENCE)
2021-03-11 12:00:32,202 [main:66] - Compilation checking started
2021-03-11 12:00:32,934 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:32,934 [main:28] - Try №147 of 712
2021-03-11 12:00:32,938 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 12:00:32,939 [main:66] - Compilation checking started
2021-03-11 12:00:33,449 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: toByte = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:33,449 [main:28] - Try №148 of 712
2021-03-11 12:00:33,456 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 12:00:33,457 [main:66] - Compilation checking started
2021-03-11 12:00:33,975 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        ulongList += i
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:33,975 [main:28] - Try №149 of 712
2021-03-11 12:00:33,986 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 12:00:33,987 [main:28] - Try №150 of 712
2021-03-11 12:00:34,005 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(IS_EXPRESSION)
2021-03-11 12:00:34,005 [main:66] - Compilation checking started
2021-03-11 12:00:34,534 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if ((intArrayOf() as Any) is Array<*>) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:34,534 [main:28] - Try №151 of 712
2021-03-11 12:00:34,552 [main:33] - Trying to replace Element(FUNCTION_TYPE_RECEIVER) on Element(FUNCTION_TYPE_RECEIVER)
2021-03-11 12:00:34,553 [main:66] - Compilation checking started
2021-03-11 12:00:35,062 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Controller.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:35,062 [main:28] - Try №152 of 712
2021-03-11 12:00:35,070 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:00:35,071 [main:66] - Compilation checking started
2021-03-11 12:00:35,576 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((kotlin.reflect).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:35,576 [main:28] - Try №153 of 712
2021-03-11 12:00:35,583 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 12:00:35,584 [main:66] - Compilation checking started
2021-03-11 12:00:36,101 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
        c(e)
    }

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:36,101 [main:28] - Try №154 of 712
2021-03-11 12:00:36,110 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:00:36,111 [main:66] - Compilation checking started
2021-03-11 12:00:36,634 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Z()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:36,634 [main:28] - Try №155 of 712
2021-03-11 12:00:36,645 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 12:00:36,645 [main:28] - Try №156 of 712
2021-03-11 12:00:36,649 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 12:00:36,650 [main:66] - Compilation checking started
2021-03-11 12:00:37,164 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val ub = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:37,164 [main:28] - Try №157 of 712
2021-03-11 12:00:37,171 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:00:37,171 [main:66] - Compilation checking started
2021-03-11 12:00:37,680 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.inlineFun2(param).toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:37,680 [main:28] - Try №158 of 712
2021-03-11 12:00:37,691 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 12:00:37,692 [main:66] - Compilation checking started
2021-03-11 12:00:38,199 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>()).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:38,200 [main:28] - Try №159 of 712
2021-03-11 12:00:38,208 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 12:00:38,208 [main:28] - Try №160 of 712
2021-03-11 12:00:38,220 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-11 12:00:38,220 [main:66] - Compilation checking started
2021-03-11 12:00:38,745 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    var res = ""
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:38,745 [main:28] - Try №161 of 712
2021-03-11 12:00:38,753 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 12:00:38,754 [main:28] - Try №162 of 712
2021-03-11 12:00:38,759 [main:33] - Trying to replace Element(SUPER_TYPE_LIST) on Element(SUPER_TYPE_LIST)
2021-03-11 12:00:38,759 [main:66] - Compilation checking started
2021-03-11 12:00:39,277 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: IBar {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:39,277 [main:28] - Try №163 of 712
2021-03-11 12:00:39,284 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:00:39,284 [main:66] - Compilation checking started
2021-03-11 12:00:39,801 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = test(1000000)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {a: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:39,801 [main:28] - Try №164 of 712
2021-03-11 12:00:39,811 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 12:00:39,812 [main:28] - Try №165 of 712
2021-03-11 12:00:39,815 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 12:00:39,816 [main:66] - Compilation checking started
2021-03-11 12:00:40,548 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:40,548 [main:28] - Try №166 of 712
2021-03-11 12:00:40,560 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 12:00:40,560 [main:66] - Compilation checking started
2021-03-11 12:00:41,075 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Ann::class.java)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:41,076 [main:28] - Try №167 of 712
2021-03-11 12:00:41,086 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 12:00:41,087 [main:28] - Try №168 of 712
2021-03-11 12:00:41,091 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 12:00:41,091 [main:66] - Compilation checking started
2021-03-11 12:00:41,602 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().parameterTypes).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:41,602 [main:28] - Try №169 of 712
2021-03-11 12:00:41,613 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:00:41,613 [main:66] - Compilation checking started
2021-03-11 12:00:42,139 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    String(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:42,139 [main:28] - Try №170 of 712
2021-03-11 12:00:42,150 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 12:00:42,151 [main:66] - Compilation checking started
2021-03-11 12:00:42,694 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>(AsInt(getInt()))

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:42,694 [main:28] - Try №171 of 712
2021-03-11 12:00:42,700 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 12:00:42,701 [main:66] - Compilation checking started
2021-03-11 12:00:43,220 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        a downTo b
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:43,221 [main:28] - Try №172 of 712
2021-03-11 12:00:43,224 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 12:00:43,225 [main:66] - Compilation checking started
2021-03-11 12:00:43,740 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = x.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:43,740 [main:28] - Try №173 of 712
2021-03-11 12:00:43,747 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:00:43,748 [main:66] - Compilation checking started
2021-03-11 12:00:44,259 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = m.containsKey(A.nil()).Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:44,260 [main:28] - Try №174 of 712
2021-03-11 12:00:44,267 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 12:00:44,268 [main:66] - Compilation checking started
2021-03-11 12:00:44,817 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
    builder {
        useR(call(::ok))
    }
    c?.resumeWithException(IllegalStateException("OK"))
    return result
}
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:44,817 [main:28] - Try №175 of 712
2021-03-11 12:00:44,827 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:00:44,828 [main:66] - Compilation checking started
2021-03-11 12:00:45,356 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: list3<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:45,356 [main:28] - Try №176 of 712
2021-03-11 12:00:45,363 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:00:45,364 [main:66] - Compilation checking started
2021-03-11 12:00:45,905 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        Outer().Inner().callback()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:45,905 [main:28] - Try №177 of 712
2021-03-11 12:00:45,924 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 12:00:45,924 [main:28] - Try №178 of 712
2021-03-11 12:00:45,952 [main:33] - Trying to replace Element(IF) on Element(IF)
2021-03-11 12:00:45,953 [main:66] - Compilation checking started
2021-03-11 12:00:46,509 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if (element6 !in 3.0F .. 1.0F != !range1.contains(element6)) throw AssertionError()
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:46,509 [main:28] - Try №179 of 712
2021-03-11 12:00:46,513 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 12:00:46,513 [main:66] - Compilation checking started
2021-03-11 12:00:47,030 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.arg.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:47,030 [main:28] - Try №180 of 712
2021-03-11 12:00:47,038 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:00:47,038 [main:66] - Compilation checking started
2021-03-11 12:00:47,564 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (n.get(null)).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:47,564 [main:28] - Try №181 of 712
2021-03-11 12:00:47,569 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 12:00:47,570 [main:66] - Compilation checking started
2021-03-11 12:00:47,580 [main:71] - Wrong syntax or breaks conditions
2021-03-11 12:00:47,580 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {(val data: Int) -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:47,580 [main:28] - Try №182 of 712
2021-03-11 12:00:47,584 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 12:00:47,585 [main:66] - Compilation checking started
2021-03-11 12:00:48,117 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<a>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:48,117 [main:28] - Try №183 of 712
2021-03-11 12:00:48,124 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:00:48,125 [main:66] - Compilation checking started
2021-03-11 12:00:48,652 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (kotlin.coroutines).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:48,652 [main:28] - Try №184 of 712
2021-03-11 12:00:48,658 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:00:48,659 [main:66] - Compilation checking started
2021-03-11 12:00:49,177 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = func(1)

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:49,177 [main:28] - Try №185 of 712
2021-03-11 12:00:49,189 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 12:00:49,190 [main:66] - Compilation checking started
2021-03-11 12:00:49,720 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString(continuation)
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:49,721 [main:28] - Try №186 of 712
2021-03-11 12:00:49,731 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 12:00:49,731 [main:66] - Compilation checking started
2021-03-11 12:00:50,258 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(i, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:50,258 [main:28] - Try №187 of 712
2021-03-11 12:00:50,269 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 12:00:50,270 [main:66] - Compilation checking started
2021-03-11 12:00:50,789 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString("FAIL")
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:50,790 [main:28] - Try №188 of 712
2021-03-11 12:00:50,805 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-11 12:00:50,806 [main:28] - Try №189 of 712
2021-03-11 12:00:50,823 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 12:00:50,824 [main:66] - Compilation checking started
2021-03-11 12:00:51,348 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8(Bar())).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:51,348 [main:28] - Try №190 of 712
2021-03-11 12:00:51,365 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-11 12:00:51,365 [main:66] - Compilation checking started
2021-03-11 12:00:51,889 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<T>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:51,890 [main:28] - Try №191 of 712
2021-03-11 12:00:51,896 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:00:51,897 [main:66] - Compilation checking started
2021-03-11 12:00:52,425 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().f(JavaClass())
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:52,425 [main:28] - Try №192 of 712
2021-03-11 12:00:52,437 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:00:52,439 [main:66] - Compilation checking started
2021-03-11 12:00:52,947 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).controller(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:52,947 [main:28] - Try №193 of 712
2021-03-11 12:00:52,963 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-11 12:00:52,963 [main:66] - Compilation checking started
2021-03-11 12:00:53,682 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:53,682 [main:28] - Try №194 of 712
2021-03-11 12:00:53,691 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:00:53,692 [main:66] - Compilation checking started
2021-03-11 12:00:54,206 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        test2 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:54,206 [main:28] - Try №195 of 712
2021-03-11 12:00:54,219 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 12:00:54,220 [main:28] - Try №196 of 712
2021-03-11 12:00:54,226 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:00:54,227 [main:66] - Compilation checking started
2021-03-11 12:00:54,758 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = invoke() {
        return "OK";
    }
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:54,758 [main:28] - Try №197 of 712
2021-03-11 12:00:54,766 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 12:00:54,767 [main:28] - Try №198 of 712
2021-03-11 12:00:54,772 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 12:00:54,772 [main:66] - Compilation checking started
2021-03-11 12:00:55,486 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:55,486 [main:28] - Try №199 of 712
2021-03-11 12:00:55,497 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 12:00:55,497 [main:28] - Try №200 of 712
2021-03-11 12:00:55,502 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-11 12:00:55,503 [main:66] - Compilation checking started
2021-03-11 12:00:56,020 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    inline val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:56,020 [main:28] - Try №201 of 712
2021-03-11 12:00:56,030 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 12:00:56,031 [main:66] - Compilation checking started
2021-03-11 12:00:56,587 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) + (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<String>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:56,587 [main:28] - Try №202 of 712
2021-03-11 12:00:56,593 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 12:00:56,594 [main:66] - Compilation checking started
2021-03-11 12:00:57,322 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<Boolean>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:57,322 [main:28] - Try №203 of 712
2021-03-11 12:00:57,325 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 12:00:57,326 [main:66] - Compilation checking started
2021-03-11 12:00:57,846 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            box(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<Boolean>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:57,846 [main:28] - Try №204 of 712
2021-03-11 12:00:57,859 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 12:00:57,860 [main:66] - Compilation checking started
2021-03-11 12:00:58,392 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(JavaAnn::class.java)
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<Boolean>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:58,392 [main:28] - Try №205 of 712
2021-03-11 12:00:58,396 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 12:00:58,397 [main:66] - Compilation checking started
2021-03-11 12:00:58,910 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(Foo = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<Boolean>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:58,910 [main:28] - Try №206 of 712
2021-03-11 12:00:58,922 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 12:00:58,923 [main:66] - Compilation checking started
2021-03-11 12:00:59,440 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<Boolean>()) {
        {a: String -> println("zxuhg")}(i)
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:59,440 [main:28] - Try №207 of 712
2021-03-11 12:00:59,444 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 12:00:59,444 [main:66] - Compilation checking started
2021-03-11 12:00:59,969 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<intrinsics, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<Boolean>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:00:59,969 [main:28] - Try №208 of 712
2021-03-11 12:00:59,986 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:00:59,987 [main:66] - Compilation checking started
2021-03-11 12:01:00,723 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Any): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<Boolean>()) {
        {a: String -> println("zxuhg")}("sbjno")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:01:00,723 [main:28] - Try №209 of 712
2021-03-11 12:01:00,741 [main:33] - Trying to replace PsiElement(ARROW) on PsiElement(ARROW)
2021-03-11 12:01:00,742 [main:28] - Try №210 of 712
2021-03-11 12:01:00,756 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 12:01:00,756 [main:66] - Compilation checking started
2021-03-11 12:01:01,481 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Any): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<Boolean>()) {
        {a: String -> println("zxuhg")}("fail")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:01:01,482 [main:28] - Try №211 of 712
2021-03-11 12:01:01,491 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:01:01,491 [main:66] - Compilation checking started
2021-03-11 12:01:02,004 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, foo2(null), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Any): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<Boolean>()) {
        {a: String -> println("zxuhg")}("fail")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:01:02,004 [main:28] - Try №212 of 712
2021-03-11 12:01:02,012 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:01:02,013 [main:66] - Compilation checking started
2021-03-11 12:01:02,524 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Any): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().testGlobalProperties()
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<Boolean>()) {
        {a: String -> println("zxuhg")}("fail")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:01:02,524 [main:28] - Try №213 of 712
2021-03-11 12:01:02,531 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:01:02,531 [main:66] - Compilation checking started
2021-03-11 12:01:03,063 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Any): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().foo()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "test4: ${"lhgkb"}, holder: ${"yozdq"}"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<Boolean>()) {
        {a: String -> println("zxuhg")}("fail")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:01:03,063 [main:28] - Try №214 of 712
2021-03-11 12:01:03,075 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-11 12:01:03,076 [main:66] - Compilation checking started
2021-03-11 12:01:03,803 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Any): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "OK"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<Boolean>()) {
        {a: String -> println("zxuhg")}("fail")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:01:03,803 [main:28] - Try №215 of 712
2021-03-11 12:01:03,820 [main:28] - Try №216 of 712
2021-03-11 12:01:03,826 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 12:01:03,827 [main:66] - Compilation checking started
2021-03-11 12:01:04,344 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Any): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "OK"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<Boolean>()) {
        {a: String -> println("zxuhg")}("fail")
    }
}

fun Array<String>.fu21(fn: (String) -> String) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:01:04,344 [main:28] - Try №217 of 712
2021-03-11 12:01:04,354 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:01:04,355 [main:66] - Compilation checking started
2021-03-11 12:01:04,875 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toString()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Any): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "OK"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<Boolean>()) {
        {a: String -> println("zxuhg")}("fail")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:01:04,876 [main:28] - Try №218 of 712
2021-03-11 12:01:04,886 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 12:01:04,887 [main:28] - Try №219 of 712
2021-03-11 12:01:04,898 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 12:01:04,899 [main:28] - Try №220 of 712
2021-03-11 12:01:04,907 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 12:01:04,907 [main:66] - Compilation checking started
2021-03-11 12:01:05,419 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Any): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, SuspendRunnable>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "OK"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<Boolean>()) {
        {a: String -> println("zxuhg")}("fail")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:01:05,420 [main:28] - Try №221 of 712
2021-03-11 12:01:05,423 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 12:01:05,424 [main:66] - Compilation checking started
2021-03-11 12:01:05,950 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : c<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Any): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "OK"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<Boolean>()) {
        {a: String -> println("zxuhg")}("fail")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:01:05,950 [main:28] - Try №222 of 712
2021-03-11 12:01:05,961 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 12:01:05,961 [main:66] - Compilation checking started
2021-03-11 12:01:06,675 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Any): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "OK"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<Boolean>()) {
        {a: String -> println("zxuhg")}("fail")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString()
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:01:06,675 [main:28] - Try №223 of 712
2021-03-11 12:01:06,682 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:01:06,682 [main:66] - Compilation checking started
2021-03-11 12:01:07,192 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Any): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (C().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "OK"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<Boolean>()) {
        {a: String -> println("zxuhg")}("fail")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString()
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:01:07,192 [main:28] - Try №224 of 712
2021-03-11 12:01:07,197 [main:33] - Trying to replace Element(CLASS_BODY) on Element(CLASS_BODY)
2021-03-11 12:01:07,198 [main:66] - Compilation checking started
2021-03-11 12:01:07,718 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
        inline class IC2(val s: String)
    }

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Any): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "OK"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<Boolean>()) {
        {a: String -> println("zxuhg")}("fail")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString()
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:01:07,718 [main:28] - Try №225 of 712
2021-03-11 12:01:07,721 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 12:01:07,722 [main:66] - Compilation checking started
2021-03-11 12:01:08,235 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Test, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Any): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "OK"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<Boolean>()) {
        {a: String -> println("zxuhg")}("fail")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString()
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:01:08,235 [main:28] - Try №226 of 712
2021-03-11 12:01:08,246 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 12:01:08,247 [main:66] - Compilation checking started
2021-03-11 12:01:08,772 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow("summer", a.bar2(Season.SUMMER)))
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("wofwl")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Any): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "OK"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<Boolean>()) {
        {a: String -> println("zxuhg")}("fail")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString()
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:01:08,772 [main:28] - Try №227 of 712
2021-03-11 12:01:08,786 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 12:01:08,787 [main:66] - Compilation checking started
2021-03-11 12:01:09,504 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Short, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("OK")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Any): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "OK"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<Boolean>()) {
        {a: String -> println("zxuhg")}("fail")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString()
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:01:09,504 [main:28] - Try №228 of 712
2021-03-11 12:01:09,524 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 12:01:09,524 [main:28] - Try №229 of 712
2021-03-11 12:01:09,534 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:01:09,534 [main:66] - Compilation checking started
2021-03-11 12:01:10,252 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Int, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("OK")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Any): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "OK"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<Boolean>()) {
        {a: String -> println("zxuhg")}("fail")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString()
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:01:10,252 [main:28] - Try №230 of 712
2021-03-11 12:01:10,258 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 12:01:10,259 [main:66] - Compilation checking started
2021-03-11 12:01:10,985 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Int): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Int, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("OK")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Any): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "OK"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<Boolean>()) {
        {a: String -> println("zxuhg")}("fail")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString()
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:01:10,985 [main:28] - Try №231 of 712
2021-03-11 12:01:10,990 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 12:01:10,990 [main:28] - Try №232 of 712
2021-03-11 12:01:11,001 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 12:01:11,002 [main:66] - Compilation checking started
2021-03-11 12:01:11,547 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Int): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Int, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("OK")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Any): Int {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "OK"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<Boolean>()) {
        {a: String -> println("zxuhg")}("fail")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString()
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:01:11,547 [main:28] - Try №233 of 712
2021-03-11 12:01:11,550 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 12:01:11,551 [main:66] - Compilation checking started
2021-03-11 12:01:12,073 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Int): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Int, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("OK")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Any): foo {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "OK"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<Boolean>()) {
        {a: String -> println("zxuhg")}("fail")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString()
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:01:12,074 [main:28] - Try №234 of 712
2021-03-11 12:01:12,078 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 12:01:12,079 [main:28] - Try №235 of 712
2021-03-11 12:01:12,082 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 12:01:12,083 [main:66] - Compilation checking started
2021-03-11 12:01:12,596 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Int): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Int, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("OK")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Any): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "OK"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<Boolean>()) {
        {a: String -> println("zxuhg")}("fail")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString()
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
ZImpl2(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:01:12,597 [main:28] - Try №236 of 712
2021-03-11 12:01:12,611 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-11 12:01:12,611 [main:66] - Compilation checking started
2021-03-11 12:01:13,121 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Int): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Int, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<String>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("OK")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1374817785.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Any): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "OK"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<Boolean>()) {
        {a: String -> println("zxuhg")}("fail")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString()
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:01:13,122 [main:28] - Try №237 of 712
2021-03-11 12:01:13,138 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-11 12:01:13,138 [main:66] - Compilation checking started
2021-03-11 12:01:13,877 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Int): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Int, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("OK")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Any): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "OK"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<Boolean>()) {
        {a: String -> println("zxuhg")}("fail")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString()
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:01:13,877 [main:28] - Try №238 of 712
2021-03-11 12:01:13,880 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 12:01:13,881 [main:66] - Compilation checking started
2021-03-11 12:01:14,594 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Int): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Int, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("OK")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Any): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val Request = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "OK"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<Boolean>()) {
        {a: String -> println("zxuhg")}("fail")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString()
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:01:14,594 [main:28] - Try №239 of 712
2021-03-11 12:01:14,603 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 12:01:14,604 [main:28] - Try №240 of 712
2021-03-11 12:01:14,615 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-11 12:01:14,615 [main:66] - Compilation checking started
2021-03-11 12:01:15,333 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() : String {
    val t = java.lang.String.copyValueOf(java.lang.String("s").toCharArray())
    val i = java.lang.Integer.MAX_VALUE
    val j = java.lang.Integer.valueOf(15)
    val ax: Boolean? = true
    val l = java.util.Collections.emptyList<Int>()
    return "OK"
}

class Kla0 {
    var prope2 = (1374817785).toChar().titlecase()

    suspend inline fun fu4(c: Kla0.() -> Unit) {
        { require(true, { "yzvau"})}()
    }

    inline fun fu5(crossinline c: suspend Kla0.() -> Unit) {
        fu0(Kla0()) { c() }
    }
}

fun fu0(prope3: Kla0, c: suspend Kla0.() -> Unit) {
    c.startCoroutine(Kla0(), Kla1)
}

suspend fun fu1() = "svova"

fun box344() : String {
    val prope3 = Kla0()
    fu0(Kla0()) {
        fu4 { require(true)}
    }
    if (Kla0().prope2 != "gvkjb") return Kla0().prope2
    fu0(Kla0()) {
        fu4 { print("ugfkf")}
    }
    return Kla0().prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        {a: Ty0 -> println()}(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Int): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        UnsupportedOperationException(IllegalArgumentException(Throwable(UnsupportedOperationException(NullPointerException()))))?.let({a: Throwable -> println("ztyvt")})
    }
}

open class Kla1(override val context: CoroutineContext = (Triple<Int, Kla2, Kla2>(15797, Kla2(), Kla2())).second.context) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla2().prope4 = "dawxo"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(T: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {foo: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<ULong>) {
        if (c !is CoroutineStackFrame) error("gspwc")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { true}?.let { error("wsihj")}
    }

    fun fu10(method: String) {
        prope5.find { true} ?: error("loksw" +
                prope5.joinToString(separator = "\$"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = true

    var prope8: () -> Unit = { println()}

    fun fu11() {
        prope6 = 848936537
        prope7 = false
        prope8 = { repeat(15, {a: Int -> print("OK")})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 867106068..((0.3064453f)?.dec())?.dec().toBits()) {
            if (true) error("ueqra" + ((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec())
            prope8()
        }
        if ((Kla4()).equals("fail 3").equals("xnjqo"))
            error((arrayOfNulls<Array<String>>(47)).contentDeepToString())
        if ((Kla5()).prope7) error((6605136401679491436.toULong()).toShort().toString((2588)))
        prope8()
        if ((1.toUInt()).compareTo(1242295978.toUByte()).equals("twwwe")) error("ymojm")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope8 = {
            Kla5().prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}

public inline fun <Ty1> fu14(block: ()-> Ty1, finallyBlock: ()-> Ty1) : Ty1 {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
try {
        return block()
    } finally {
        return finallyBlock()
    }
}

class Kla8 {
    var prope10: String = (Kla5().prope7).compareTo(equals("entbv")).toString((2588))
}

fun setAccessible(prope12: Any): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = String()
val prope11 = (Kla2().prope4).toString()

    return (Kla5().prope7).compareTo(true).toString(15);
}

fun fu16(prope12: Kla8): String {
    val prope3 = Kla0()
val test = Kla4()
val Request = Kla5()
val prope11 = (Kla8()).prope10.filterIndexed({a: Int, b: Char -> (Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")})

    return (-29252)?.toChar().lowercase();
}

fun fu17(prope12: Kla8): String {
    val prope3 = String()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = fu14 (
            {
                Kla8().prope10 += (Kla0().prope2).removeSurrounding("jwzzl")
                return "OK_NONLOCAL"
            }, { TODO("xflyx")})

    return (1374817785.toUInt()).toByte().toString(-1680850887);
}

fun fu18(prope12: Kla8): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
val prope11 = (Kla8())?.prope10.prependIndent("fftki")

    return "zokmb";
}

fun box854(): String {
    val prope3 = Kla0()
val prope0 = Kla4()
val prope1 = Kla5()
var prope12 = Kla8()
    val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
    if ((Kla5().prope7).not()) return ('').toShort().toString()

    prope12 = Kla8()
    val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
    if ((Kla8()).equals("OK").xor((Kla5().prope7))) return (Kla0().prope2).trim()

    prope12 = Kla8()
    val fu17 = fu17(Kla8())
    if (false) return (Kla2().prope4).toString()

    prope12 = Kla8()
    val fu18 = (Kla2().prope4).toString()
    if ((Kla5().prope7).or(true) || (fu2<Pair<Byte, Kla0>>({a: Pair<Byte, Kla0> -> println("xpuud")})).resumeWith(runCatching<Pair<Byte, Kla0>>({ Pair<Byte, Kla0>(-3, Kla0())})).equals("entbv")) return "OK"

    return (Kla8()).prope10.slice(linkedSetOf<Int>())
}

fun coroutines(): String? = null

inline fun Array<String>.fu20(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val Int = listOf(4uL, 3uL, 2uL, 1uL)
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
for (string in emptyArray<Boolean>()) {
        {a: String -> println("zxuhg")}("fail")
    }
}

fun Array<String>.fu21(fn: (String) -> Unit) {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString()
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu20({a: Any -> require((Kla8()).equals("fail 5"))})
}

inline fun Array<String>.fu22(crossinline fn: (String) -> Unit) {
    fu21 { fn(it) }
}

fun fu23(a: Array<String>) {
    var result = "FAIL"
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
Array<String>(1242295978, {a: Int -> "zyeuh"}).fu20 {a: String -> require((Kla8()).equals("OK").xor((Kla5().prope7)), { "yxklh"})}
    a.fu21 {arr: String -> println()}
    emptyArray<String>().fu22 {}
}

fun box980(): String {
    val prope3 = Kla0()
var prope12 = Kla8()
val fu15 = (6605136401679491436.toULong()).toUByte().toString(1374817785)
val fu16 = (((1374817785.toUInt()).compareTo(1242295978.toUByte())).compareTo(399295028).dec().toUShort()).toUByte().toString((-29252))
val fu17 = fu17(Kla8())
val fu18 = (Kla2().prope4).toString()
val prope0 = Kla4()
val prope1 = Kla5()
fu23(arrayOf("rpnnj"))
    return ((6605136401679491436.toULong())).toUByte().toString(15)
}


2021-03-11 12:01:15,333 [main:28] - Try №241 of 712
2021-03-11 12:01:15,337 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 12:01:15,338 [main:66] - Compilation checking started
