2021-03-12 09:08:27,612 [main:66] - Compilation checking started
2021-03-12 09:08:30,217 [main:45] - Trying to change 30 nodes
2021-03-12 09:08:30,220 [main:53] - replacing (2, Int)
2021-03-12 09:08:30,221 [main:50] - replacing 2 Int
2021-03-12 09:08:30,221 [main:54] - Getting value of type Int
2021-03-12 09:08:30,389 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:08:30,391 [main:58] - GENERATED VALUE OF TYPE Int = -420653107
2021-03-12 09:08:30,392 [main:61] - GENERATED IS CALL =false
2021-03-12 09:08:31,511 [main:67] - randomType = Function1<HashMap<UByte, ULong>, Double>
2021-03-12 09:08:31,512 [main:106] - GETTING Int from Int
2021-03-12 09:08:31,694 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a279d9e]]
2021-03-12 09:08:31,694 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a279d9e]
2021-03-12 09:08:31,695 [main:117] - GENERATED CALL = (two()).countOneBits()
2021-03-12 09:08:31,696 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@7ee7e1bb]]
2021-03-12 09:08:31,696 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896]
2021-03-12 09:08:31,697 [main:117] - GENERATED CALL = (two()).toChar().code
2021-03-12 09:08:31,697 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@14d8c418], public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@18aca796]]
2021-03-12 09:08:31,697 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@14d8c418]
2021-03-12 09:08:31,698 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@18aca796]
2021-03-12 09:08:31,699 [main:117] - GENERATED CALL = (two()).toLong().toInt()
2021-03-12 09:08:31,700 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@14d8c418], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@6cede900]]
2021-03-12 09:08:31,700 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@14d8c418]
2021-03-12 09:08:31,701 [main:117] - GENERATED CALL = (two()).toLong().sign
2021-03-12 09:08:31,701 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3481e4d]]
2021-03-12 09:08:31,701 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae]
2021-03-12 09:08:31,872 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:08:31,873 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3481e4d]
2021-03-12 09:08:32,006 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:08:32,008 [main:117] - GENERATED CALL = (two()).compareTo(592803282).minus(72)
2021-03-12 09:08:32,008 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d664d50]]
2021-03-12 09:08:32,008 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae]
2021-03-12 09:08:32,173 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:08:32,175 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d664d50]
2021-03-12 09:08:32,176 [main:117] - GENERATED CALL = (two()).compareTo(1235301370).takeLowestOneBit()
2021-03-12 09:08:32,176 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5bdd3b29]]
2021-03-12 09:08:32,176 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1]
2021-03-12 09:08:32,177 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5bdd3b29]
2021-03-12 09:08:32,178 [main:117] - GENERATED CALL = (two()).toInt().takeHighestOneBit()
2021-03-12 09:08:32,178 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3481e4d]]
2021-03-12 09:08:32,179 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1]
2021-03-12 09:08:32,179 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3481e4d]
2021-03-12 09:08:32,319 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:08:32,321 [main:117] - GENERATED CALL = (two()).toInt().minus(-61)
2021-03-12 09:08:32,321 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@23f22146]]
2021-03-12 09:08:32,321 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1]
2021-03-12 09:08:32,322 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@23f22146]
2021-03-12 09:08:32,324 [main:117] - GENERATED CALL = (two()).toInt().ushr(two())
2021-03-12 09:08:32,324 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d664d50]]
2021-03-12 09:08:32,324 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1]
2021-03-12 09:08:32,325 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d664d50]
2021-03-12 09:08:32,326 [main:117] - GENERATED CALL = (two()).toInt().takeLowestOneBit()
2021-03-12 09:08:32,326 [main:61] - replacement of 2 of type Int is (two()).toLong().sign
2021-03-12 09:08:32,494 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:08:32,494 [main:66] - Compilation checking started
2021-03-12 09:08:32,917 [main:49] - Result = false
Text:
import kotlin.test.*

fun two() = (two()).toLong().sign

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}
2021-03-12 09:08:32,920 [main:53] - replacing (i, ULong)
2021-03-12 09:08:32,920 [main:50] - replacing i ULong
2021-03-12 09:08:32,920 [main:54] - Getting value of type ULong
2021-03-12 09:08:33,075 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 09:08:33,075 [main:58] - GENERATED VALUE OF TYPE ULong = 2364687974001196789.toULong()
2021-03-12 09:08:33,076 [main:61] - GENERATED IS CALL =false
2021-03-12 09:08:33,377 [main:67] - randomType = Double?
2021-03-12 09:08:33,560 [main:302] - generating value of type = Double true depth = 0
2021-03-12 09:08:33,668 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@7572d8b3]
2021-03-12 09:08:33,669 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@1273fee8]
2021-03-12 09:08:33,670 [main:78] - Generated call from random type = (0.3616869545969297)?.toShort().toULong()
2021-03-12 09:08:33,685 [main:106] - GETTING ULong from MutableList<ULong>
2021-03-12 09:08:33,794 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component2(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1874a8dc]]
2021-03-12 09:08:33,794 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component2(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1874a8dc]
2021-03-12 09:08:33,795 [main:117] - GENERATED CALL = (ulongList).component2()
2021-03-12 09:08:33,796 [main:113] - Case = [@kotlin.SinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.maxByOrNull(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6945ad46]]
2021-03-12 09:08:33,796 [main:149] - GENERATING call of type @kotlin.SinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.maxByOrNull(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6945ad46]
2021-03-12 09:08:33,918 [main:302] - generating value of type = Function1<T, R> false depth = 0
2021-03-12 09:08:33,919 [main:302] - generating value of type = R false depth = 1
2021-03-12 09:08:34,078 [main:43] - GENERATING CALL OF fun <R> synchronized(lock: kotlin.Any, block: ()->Int): R = TODO()
2021-03-12 09:08:34,081 [main:61] - WITHOUT TYPE PARAMS = fun <R> synchronized(lock: kotlin.Any, block: ()->Int): R = TODO()
2021-03-12 09:08:34,542 [main:302] - generating value of type = Any false depth = 4
2021-03-12 09:08:34,544 [main:302] - generating value of type = Function0<Int> false depth = 4
2021-03-12 09:08:34,545 [main:302] - generating value of type = Int true depth = 5
2021-03-12 09:08:34,547 [main:95] - GENERATED = synchronized<Int>("jjyfk", { 440658256})
2021-03-12 09:08:34,549 [main:117] - GENERATED CALL = (ulongList).maxByOrNull({a: T -> synchronized<Int>("jjyfk", { 440658256})})
2021-03-12 09:08:34,549 [main:113] - Case = [public abstract operator fun set(index: kotlin.Int, element: kotlin.ULong): kotlin.ULong defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@b36d3d0]]
2021-03-12 09:08:34,549 [main:149] - GENERATING call of type public abstract operator fun set(index: kotlin.Int, element: kotlin.ULong): kotlin.ULong defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@b36d3d0]
2021-03-12 09:08:34,660 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 09:08:34,661 [main:117] - GENERATED CALL = (ulongList).set(two(), 8257473629933053081.toULong())
2021-03-12 09:08:34,661 [main:113] - Case = [public abstract fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@75941ec3], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.coerceIn(minimumValue: kotlin.ULong, maximumValue: kotlin.ULong): kotlin.ULong defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4c372496]]
2021-03-12 09:08:34,661 [main:149] - GENERATING call of type public abstract fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@75941ec3]
2021-03-12 09:08:34,805 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:08:34,806 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.coerceIn(minimumValue: kotlin.ULong, maximumValue: kotlin.ULong): kotlin.ULong defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4c372496]
2021-03-12 09:08:34,943 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 09:08:35,066 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 09:08:35,068 [main:117] - GENERATED CALL = (ulongList).get(-572751134).coerceIn(7673014941930190596.toULong(), 582089846374144521.toULong())
2021-03-12 09:08:35,068 [main:113] - Case = [public abstract fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@75941ec3], @kotlin.internal.InlineOnly public final inline infix fun shl(bitCount: kotlin.Int): kotlin.ULong defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@263e02b5]]
2021-03-12 09:08:35,068 [main:149] - GENERATING call of type public abstract fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@75941ec3]
2021-03-12 09:08:35,201 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:08:35,202 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline infix fun shl(bitCount: kotlin.Int): kotlin.ULong defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@263e02b5]
2021-03-12 09:08:35,203 [main:117] - GENERATED CALL = (ulongList).get(152537828).shl(two())
2021-03-12 09:08:35,204 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.ULong): kotlin.ULong defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1ee17264]]
2021-03-12 09:08:35,204 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.ULong): kotlin.ULong defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1ee17264]
2021-03-12 09:08:35,336 [main:302] - generating value of type = Function1<T, ULong> false depth = 0
2021-03-12 09:08:35,336 [main:302] - generating value of type = ULong true depth = 1
2021-03-12 09:08:35,337 [main:117] - GENERATED CALL = (ulongList).sumOf({a: T -> 4947488306561089615.toULong()})
2021-03-12 09:08:35,337 [main:113] - Case = [public abstract fun removeAt(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@4995ca37]]
2021-03-12 09:08:35,338 [main:149] - GENERATING call of type public abstract fun removeAt(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@4995ca37]
2021-03-12 09:08:35,338 [main:117] - GENERATED CALL = (ulongList).removeAt(two())
2021-03-12 09:08:35,338 [main:113] - Case = [public abstract fun listIterator(): kotlin.collections.MutableListIterator<kotlin.ULong> defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@41604b98], public abstract fun next(): kotlin.ULong defined in kotlin.collections.MutableListIterator[DeserializedSimpleFunctionDescriptor@7ce02380]]
2021-03-12 09:08:35,338 [main:149] - GENERATING call of type public abstract fun listIterator(): kotlin.collections.MutableListIterator<kotlin.ULong> defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@41604b98]
2021-03-12 09:08:35,339 [main:149] - GENERATING call of type public abstract fun next(): kotlin.ULong defined in kotlin.collections.MutableListIterator[DeserializedSimpleFunctionDescriptor@7ce02380]
2021-03-12 09:08:35,339 [main:117] - GENERATED CALL = (ulongList).listIterator().next()
2021-03-12 09:08:35,339 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.min(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7cead8f9]]
2021-03-12 09:08:35,339 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.min(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7cead8f9]
2021-03-12 09:08:35,340 [main:117] - GENERATED CALL = (ulongList).min()
2021-03-12 09:08:35,340 [main:113] - Case = [@kotlin.SinceKotlin public fun <T> kotlin.collections.Iterable<T>.minWithOrNull(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@65cb9158]]
2021-03-12 09:08:35,340 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun <T> kotlin.collections.Iterable<T>.minWithOrNull(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@65cb9158]
2021-03-12 09:08:35,455 [main:302] - generating value of type = Comparator<in T> false depth = 0
2021-03-12 09:08:35,628 [main:43] - GENERATING CALL OF fun <T, K> compareBy(comparator: kotlin.Comparator<Int>, selector: (T)->Int): Comparator<T> = TODO()
2021-03-12 09:08:35,632 [main:61] - WITHOUT TYPE PARAMS = fun <T, K> compareBy(comparator: kotlin.Comparator<Int>, selector: (T)->Int): Comparator<T> = TODO()
2021-03-12 09:08:36,034 [main:302] - generating value of type = Comparator<Int> false depth = 3
2021-03-12 09:08:36,159 [main:43] - GENERATING CALL OF fun <T> reverseOrder(): Comparator<Int> = TODO()
2021-03-12 09:08:36,161 [main:61] - WITHOUT TYPE PARAMS = fun <T> reverseOrder(): Comparator<Int> = TODO()
2021-03-12 09:08:36,265 [main:95] - GENERATED = reverseOrder<Int>()
2021-03-12 09:08:36,265 [main:385] - Cant generate call of fun <T, K> compareBy(comparator: kotlin.Comparator<Int>, selector: (T)->Int): Comparator<T> = TODO()
2021-03-12 09:08:36,266 [main:158] - CANT GENERATE PARAMS FOR @kotlin.SinceKotlin public fun <T> kotlin.collections.Iterable<T>.minWithOrNull(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@65cb9158]
2021-03-12 09:08:36,266 [main:61] - replacement of i of type ULong is (ulongList).get(152537828).shl(two())
2021-03-12 09:08:36,414 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:08:36,415 [main:66] - Compilation checking started
2021-03-12 09:08:37,026 [main:53] - Result = true
Text:
import kotlin.test.*

fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += (ulongList).get(152537828).shl(two())
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}


2021-03-12 09:08:37,027 [main:53] - replacing (1u, UInt)
2021-03-12 09:08:37,027 [main:50] - replacing 1u UInt
2021-03-12 09:08:37,027 [main:54] - Getting value of type UInt
2021-03-12 09:08:37,144 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 09:08:37,144 [main:58] - GENERATED VALUE OF TYPE UInt = 1943653921.toUInt()
2021-03-12 09:08:37,145 [main:61] - GENERATED IS CALL =false
2021-03-12 09:08:37,866 [main:67] - randomType = Map<Short, LinkedHashMap<Long?, Float>?>
2021-03-12 09:08:37,868 [main:106] - GETTING UInt from MutableList<UInt>
2021-03-12 09:08:37,967 [main:113] - Case = [public abstract fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@7e7e7c60], @kotlin.internal.InlineOnly public final inline infix fun xor(other: kotlin.UInt): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@168b3e67]]
2021-03-12 09:08:37,967 [main:149] - GENERATING call of type public abstract fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@7e7e7c60]
2021-03-12 09:08:37,968 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline infix fun xor(other: kotlin.UInt): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@168b3e67]
2021-03-12 09:08:38,080 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 09:08:38,081 [main:117] - GENERATED CALL = (uintList).get(two()).xor(151327507.toUInt())
2021-03-12 09:08:38,081 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component5(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@63928f9f]]
2021-03-12 09:08:38,082 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component5(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@63928f9f]
2021-03-12 09:08:38,082 [main:117] - GENERATED CALL = (uintList).component5()
2021-03-12 09:08:38,082 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun <T> kotlin.collections.MutableList<T>.removeLast(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5f38ea4c]]
2021-03-12 09:08:38,082 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun <T> kotlin.collections.MutableList<T>.removeLast(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5f38ea4c]
2021-03-12 09:08:38,083 [main:117] - GENERATED CALL = (uintList).removeLast()
2021-03-12 09:08:38,083 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.List<T>.elementAtOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> T): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4c28b19f]]
2021-03-12 09:08:38,083 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.List<T>.elementAtOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> T): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4c28b19f]
2021-03-12 09:08:38,189 [main:302] - generating value of type = Function1<Int, T> false depth = 0
2021-03-12 09:08:38,189 [main:302] - generating value of type = T false depth = 1
2021-03-12 09:08:38,546 [main:43] - GENERATING CALL OF fun <T> maxOf(a: Array<UInt?>, b: Array<UInt?>, comparator: kotlin.Comparator<Array<UInt?>>): T = TODO()
2021-03-12 09:08:38,549 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: Array<UInt?>, b: Array<UInt?>, comparator: kotlin.Comparator<Array<UInt?>>): T = TODO()
2021-03-12 09:08:38,749 [main:302] - generating value of type = Array<UInt?> false depth = 4
2021-03-12 09:08:38,891 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->UInt?): Array<UInt?> = TODO()
2021-03-12 09:08:38,893 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->UInt?): Array<UInt?> = TODO()
2021-03-12 09:08:39,251 [main:302] - generating value of type = Int true depth = 7
2021-03-12 09:08:39,251 [main:302] - generating value of type = Function1<Int, UInt?> false depth = 7
2021-03-12 09:08:39,251 [main:302] - generating value of type = UInt true depth = 8
2021-03-12 09:08:39,252 [main:95] - GENERATED = Array<UInt?>(807643592, {a: Int -> 1060722156.toUInt()})
2021-03-12 09:08:39,252 [main:302] - generating value of type = Array<UInt?> false depth = 4
2021-03-12 09:08:39,397 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->UInt?): Array<UInt?> = TODO()
2021-03-12 09:08:39,400 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->UInt?): Array<UInt?> = TODO()
2021-03-12 09:08:39,713 [main:302] - generating value of type = Int true depth = 7
2021-03-12 09:08:39,714 [main:302] - generating value of type = Function1<Int, UInt?> false depth = 7
2021-03-12 09:08:39,714 [main:302] - generating value of type = UInt true depth = 8
2021-03-12 09:08:39,714 [main:95] - GENERATED = Array<UInt?>(-599377446, {a: Int -> 2089347710.toUInt()})
2021-03-12 09:08:39,715 [main:302] - generating value of type = Comparator<Array<UInt?>> false depth = 4
2021-03-12 09:08:39,846 [main:43] - GENERATING CALL OF fun <T> nullsFirst(comparator: kotlin.Comparator<Array<UInt?>>): Comparator<Array<UInt?>> = TODO()
2021-03-12 09:08:39,848 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsFirst(comparator: kotlin.Comparator<Array<UInt?>>): Comparator<Array<UInt?>> = TODO()
2021-03-12 09:08:40,058 [main:302] - generating value of type = Comparator<Array<UInt?>> false depth = 7
2021-03-12 09:08:40,156 [main:43] - GENERATING CALL OF fun <T> nullsLast(): Comparator<Array<UInt?>> = TODO()
2021-03-12 09:08:40,157 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsLast(): Comparator<Array<UInt?>> = TODO()
2021-03-12 09:08:40,280 [main:95] - GENERATED = nullsLast<Array<UInt?>>()
2021-03-12 09:08:40,281 [main:95] - GENERATED = nullsFirst<Array<UInt?>>(nullsLast<Array<UInt?>>())
2021-03-12 09:08:40,282 [main:95] - GENERATED = maxOf<Array<UInt?>>(Array<UInt?>(807643592, {a: Int -> 1060722156.toUInt()}), Array<UInt?>(-599377446, {a: Int -> 2089347710.toUInt()}), nullsFirst<Array<UInt?>>(nullsLast<Array<UInt?>>()))
2021-03-12 09:08:40,284 [main:117] - GENERATED CALL = (uintList).elementAtOrElse(two(), {a: Int -> maxOf<Array<UInt?>>(Array<UInt?>(807643592, {a: Int -> 1060722156.toUInt()}), Array<UInt?>(-599377446, {a: Int -> 2089347710.toUInt()}), nullsFirst<Array<UInt?>>(nullsLast<Array<UInt?>>()))})
2021-03-12 09:08:40,284 [main:113] - Case = [public abstract fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@7e7e7c60], @kotlin.internal.InlineOnly public final inline operator fun inc(): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2c97d89e]]
2021-03-12 09:08:40,284 [main:149] - GENERATING call of type public abstract fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@7e7e7c60]
2021-03-12 09:08:40,284 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun inc(): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2c97d89e]
2021-03-12 09:08:40,285 [main:117] - GENERATED CALL = (uintList).get(two()).inc()
2021-03-12 09:08:40,285 [main:113] - Case = [public fun <T> kotlin.collections.List<T>.single(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1dafed7b]]
2021-03-12 09:08:40,285 [main:149] - GENERATING call of type public fun <T> kotlin.collections.List<T>.single(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1dafed7b]
2021-03-12 09:08:40,285 [main:117] - GENERATED CALL = (uintList).single()
2021-03-12 09:08:40,286 [main:113] - Case = [public abstract fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@7e7e7c60], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.coerceAtLeast(minimumValue: kotlin.UInt): kotlin.UInt defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3cc27ab4]]
2021-03-12 09:08:40,286 [main:149] - GENERATING call of type public abstract fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@7e7e7c60]
2021-03-12 09:08:40,286 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.coerceAtLeast(minimumValue: kotlin.UInt): kotlin.UInt defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3cc27ab4]
2021-03-12 09:08:40,409 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 09:08:40,410 [main:117] - GENERATED CALL = (uintList).get(two()).coerceAtLeast(1564195403.toUInt())
2021-03-12 09:08:40,410 [main:113] - Case = [public abstract fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@7e7e7c60], @kotlin.internal.InlineOnly public final inline infix fun and(other: kotlin.UInt): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@527bdc42]]
2021-03-12 09:08:40,410 [main:149] - GENERATING call of type public abstract fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@7e7e7c60]
2021-03-12 09:08:40,509 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:08:40,510 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline infix fun and(other: kotlin.UInt): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@527bdc42]
2021-03-12 09:08:40,610 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 09:08:40,611 [main:117] - GENERATED CALL = (uintList).get(2078620491).and(1903057292.toUInt())
2021-03-12 09:08:40,611 [main:113] - Case = [public abstract fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@7e7e7c60], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.coerceIn(minimumValue: kotlin.UInt, maximumValue: kotlin.UInt): kotlin.UInt defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@616e867b]]
2021-03-12 09:08:40,611 [main:149] - GENERATING call of type public abstract fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@7e7e7c60]
2021-03-12 09:08:40,743 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:08:40,743 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.coerceIn(minimumValue: kotlin.UInt, maximumValue: kotlin.UInt): kotlin.UInt defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@616e867b]
2021-03-12 09:08:40,859 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 09:08:40,955 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 09:08:40,956 [main:117] - GENERATED CALL = (uintList).get(1740349582).coerceIn(1254065998.toUInt(), 1805898882.toUInt())
2021-03-12 09:08:40,956 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.randomOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6a82e59d]]
2021-03-12 09:08:40,956 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.randomOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6a82e59d]
2021-03-12 09:08:40,957 [main:117] - GENERATED CALL = (uintList).randomOrNull()
2021-03-12 09:08:40,957 [main:61] - replacement of 1u of type UInt is 1943653921.toUInt()
2021-03-12 09:08:41,045 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:08:41,045 [main:66] - Compilation checking started
2021-03-12 09:08:41,541 [main:53] - Result = true
Text:
import kotlin.test.*

fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1943653921.toUInt() until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += (ulongList).get(152537828).shl(two())
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}


2021-03-12 09:08:41,542 [main:53] - replacing ("OK", String)
2021-03-12 09:08:41,542 [main:50] - replacing "OK" String
2021-03-12 09:08:41,543 [main:54] - Getting value of type String
2021-03-12 09:08:41,648 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:08:41,648 [main:58] - GENERATED VALUE OF TYPE String = "hpphr"
2021-03-12 09:08:41,649 [main:61] - GENERATED IS CALL =false
2021-03-12 09:08:42,278 [main:67] - randomType = Array<Function1<MutableMap<Char?, ULong>, ULong?>>
2021-03-12 09:08:42,397 [main:302] - generating value of type = Array<Function1<MutableMap<Char?, ULong>, ULong?>> false depth = 0
2021-03-12 09:08:42,505 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Function1<MutableMap<Char?, ULong>, ULong?>> = TODO()
2021-03-12 09:08:42,506 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Function1<MutableMap<Char?, ULong>, ULong?>> = TODO()
2021-03-12 09:08:42,608 [main:95] - GENERATED = emptyArray<Function1<MutableMap<Char?, ULong>, ULong?>>()
2021-03-12 09:08:42,642 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2ee3bf7f]
2021-03-12 09:08:42,742 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:08:42,869 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:08:42,979 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 09:08:42,981 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 09:08:43,190 [main:302] - generating value of type = String true depth = 3
2021-03-12 09:08:43,191 [main:95] - GENERATED = StringBuilder("jpmnc")
2021-03-12 09:08:43,279 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:08:43,391 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 09:08:43,393 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 09:08:43,606 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 09:08:43,610 [main:95] - GENERATED = StringBuilder("fipal")
2021-03-12 09:08:43,709 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:08:43,809 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 09:08:43,812 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 09:08:44,065 [main:302] - generating value of type = Int true depth = 3
2021-03-12 09:08:44,066 [main:95] - GENERATED = StringBuilder(-1439744710)
2021-03-12 09:08:44,179 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 09:08:44,179 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 09:08:44,184 [main:78] - Generated call from random type = (emptyArray<Function1<MutableMap<Char?, ULong>, ULong?>>()).joinToString("fbqdi", StringBuilder("jpmnc"), StringBuilder("fipal"), two(), StringBuilder(-1439744710), {a: T -> "sswnc"})
2021-03-12 09:08:44,184 [main:61] - replacement of "OK" of type String is (emptyArray<Function1<MutableMap<Char?, ULong>, ULong?>>()).joinToString("fbqdi", StringBuilder("jpmnc"), StringBuilder("fipal"), two(), StringBuilder(-1439744710), {a: T -> "sswnc"})
2021-03-12 09:08:44,288 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:08:44,289 [main:66] - Compilation checking started
2021-03-12 09:08:44,684 [main:49] - Result = false
Text:
import kotlin.test.*

fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1943653921.toUInt() until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += (ulongList).get(152537828).shl(two())
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return (emptyArray<Function1<MutableMap<Char?, ULong>, ULong?>>()).joinToString("fbqdi", StringBuilder("jpmnc"), StringBuilder("fipal"), two(), StringBuilder(-1439744710), {a: T -> "sswnc"})
}


2021-03-12 09:08:44,685 [main:53] - replacing (two().toLong(), Long)
2021-03-12 09:08:44,686 [main:50] - replacing two().toLong() Long
2021-03-12 09:08:44,686 [main:54] - Getting value of type Long
2021-03-12 09:08:44,806 [main:302] - generating value of type = Long true depth = 0
2021-03-12 09:08:44,807 [main:58] - GENERATED VALUE OF TYPE Long = -647639056894702064
2021-03-12 09:08:44,807 [main:61] - GENERATED IS CALL =false
2021-03-12 09:08:45,148 [main:67] - randomType = MutableMap<Double, Int>
2021-03-12 09:08:45,150 [main:106] - GETTING Long from MutableList<ULong>
2021-03-12 09:08:45,234 [main:113] - Case = [public abstract fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@75941ec3], @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@28408ad7]]
2021-03-12 09:08:45,234 [main:149] - GENERATING call of type public abstract fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@75941ec3]
2021-03-12 09:08:45,334 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:08:45,334 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@28408ad7]
2021-03-12 09:08:45,335 [main:117] - GENERATED CALL = (ulongList).get(923679368).toLong()
2021-03-12 09:08:45,335 [main:113] - Case = [@kotlin.jvm.JvmName public fun kotlin.collections.Iterable<kotlin.Long>.sum(): kotlin.Long defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2841dcb6]]
2021-03-12 09:08:45,335 [main:149] - GENERATING call of type @kotlin.jvm.JvmName public fun kotlin.collections.Iterable<kotlin.Long>.sum(): kotlin.Long defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2841dcb6]
2021-03-12 09:08:45,335 [main:117] - GENERATED CALL = (ulongList).sum()
2021-03-12 09:08:45,335 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@45f5fdd], public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2561aada]]
2021-03-12 09:08:45,335 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2561aada]
2021-03-12 09:08:45,430 [main:302] - generating value of type = Long true depth = 0
2021-03-12 09:08:45,431 [main:117] - GENERATED CALL = (ulongList).size.times(5327696451955743584)
2021-03-12 09:08:45,431 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.Long): kotlin.Long defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@547dd11e]]
2021-03-12 09:08:45,431 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.Long): kotlin.Long defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@547dd11e]
2021-03-12 09:08:45,537 [main:302] - generating value of type = Function1<T, Long> false depth = 0
2021-03-12 09:08:45,537 [main:302] - generating value of type = Long true depth = 1
2021-03-12 09:08:45,538 [main:117] - GENERATED CALL = (ulongList).sumOf({a: T -> 2786912613647413919})
2021-03-12 09:08:45,538 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@45f5fdd], public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@f8f9ce0]]
2021-03-12 09:08:45,538 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@f8f9ce0]
2021-03-12 09:08:45,538 [main:117] - GENERATED CALL = (ulongList).size.toLong()
2021-03-12 09:08:45,539 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@45f5fdd], public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18a204c]]
2021-03-12 09:08:45,539 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18a204c]
2021-03-12 09:08:45,644 [main:302] - generating value of type = Long true depth = 0
2021-03-12 09:08:45,645 [main:117] - GENERATED CALL = (ulongList).size.plus(4254022292922650505)
2021-03-12 09:08:45,645 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@45f5fdd], public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1a5fdcae]]
2021-03-12 09:08:45,645 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1a5fdcae]
2021-03-12 09:08:45,812 [main:302] - generating value of type = Long true depth = 0
2021-03-12 09:08:45,813 [main:117] - GENERATED CALL = (ulongList).size.div(-6706011333213376255)
2021-03-12 09:08:45,814 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@45f5fdd], public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b41a3f9]]
2021-03-12 09:08:45,814 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b41a3f9]
2021-03-12 09:08:45,927 [main:302] - generating value of type = Long true depth = 0
2021-03-12 09:08:45,928 [main:117] - GENERATED CALL = (ulongList).size.minus(3341289567071491059)
2021-03-12 09:08:45,928 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@45f5fdd], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@15f83813]]
2021-03-12 09:08:45,928 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@15f83813]
2021-03-12 09:08:46,027 [main:302] - generating value of type = Long true depth = 0
2021-03-12 09:08:46,028 [main:117] - GENERATED CALL = (ulongList).size.rem(8519598566092744441)
2021-03-12 09:08:46,028 [main:61] - replacement of two().toLong() of type Long is -647639056894702064
2021-03-12 09:08:46,128 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 09:08:46,129 [main:66] - Compilation checking started
2021-03-12 09:08:46,626 [main:53] - Result = true
Text:
import kotlin.test.*

fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1943653921.toUInt() until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step -647639056894702064) {
        ulongList += (ulongList).get(152537828).shl(two())
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}


2021-03-12 09:08:46,627 [main:53] - replacing (2, Int)
2021-03-12 09:08:46,627 [main:50] - replacing 2 Int
2021-03-12 09:08:46,627 [main:54] - Getting value of type Int
2021-03-12 09:08:46,739 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:08:46,740 [main:58] - GENERATED VALUE OF TYPE Int = -1000756386
2021-03-12 09:08:46,740 [main:61] - GENERATED IS CALL =false
2021-03-12 09:08:46,741 [main:67] - randomType = Int
2021-03-12 09:08:46,858 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:08:46,938 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1]
2021-03-12 09:08:46,939 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4b6167]
2021-03-12 09:08:46,939 [main:78] - Generated call from random type = (1226916116).toInt().toInt()
2021-03-12 09:08:46,939 [main:61] - replacement of 2 of type Int is (1226916116).toInt().toInt()
2021-03-12 09:08:47,039 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:08:47,039 [main:66] - Compilation checking started
2021-03-12 09:08:47,553 [main:53] - Result = true
Text:
import kotlin.test.*

fun two() = (1226916116).toInt().toInt()

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1943653921.toUInt() until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step -647639056894702064) {
        ulongList += (ulongList).get(152537828).shl(two())
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}


2021-03-12 09:08:47,555 [main:53] - replacing (1943653921.toUInt() until 9u, UIntRange)
2021-03-12 09:08:47,555 [main:50] - replacing 1943653921.toUInt() until 9u UIntRange
2021-03-12 09:08:47,555 [main:54] - Getting value of type UIntRange
2021-03-12 09:08:47,662 [main:302] - generating value of type = UIntRange false depth = 0
2021-03-12 09:08:47,763 [main:43] - GENERATING CALL OF fun UIntRange(start: kotlin.UInt, endInclusive: kotlin.UInt): UIntRange = TODO()
2021-03-12 09:08:47,764 [main:61] - WITHOUT TYPE PARAMS = fun UIntRange(start: kotlin.UInt, endInclusive: kotlin.UInt): UIntRange = TODO()
2021-03-12 09:08:48,093 [main:302] - generating value of type = UInt true depth = 3
2021-03-12 09:08:48,093 [main:302] - generating value of type = UInt true depth = 3
2021-03-12 09:08:48,093 [main:95] - GENERATED = UIntRange(435543442.toUInt(), 470057114.toUInt())
2021-03-12 09:08:48,094 [main:58] - GENERATED VALUE OF TYPE UIntRange = UIntRange(435543442.toUInt(), 470057114.toUInt())
2021-03-12 09:08:48,094 [main:61] - GENERATED IS CALL =true
2021-03-12 09:08:48,283 [main:67] - randomType = Sequence<UInt?>
2021-03-12 09:08:48,286 [main:106] - GETTING UIntRange from MutableList<UInt>
2021-03-12 09:08:48,344 [main:113] - Case = [public abstract fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@7e7e7c60], @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UInt): kotlin.ranges.UIntRange defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@6bf41db8]]
2021-03-12 09:08:48,344 [main:149] - GENERATING call of type public abstract fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@7e7e7c60]
2021-03-12 09:08:48,433 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:08:48,434 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UInt): kotlin.ranges.UIntRange defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@6bf41db8]
2021-03-12 09:08:48,529 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 09:08:48,531 [main:117] - GENERATED CALL = (uintList).get(-804644562).rangeTo(1311665604.toUInt())
2021-03-12 09:08:48,531 [main:113] - Case = [public abstract fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@7e7e7c60], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public infix fun kotlin.UInt.until(to: kotlin.UInt): kotlin.ranges.UIntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7ed5d439]]
2021-03-12 09:08:48,531 [main:149] - GENERATING call of type public abstract fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@7e7e7c60]
2021-03-12 09:08:48,532 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public infix fun kotlin.UInt.until(to: kotlin.UInt): kotlin.ranges.UIntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7ed5d439]
2021-03-12 09:08:48,640 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 09:08:48,641 [main:117] - GENERATED CALL = (uintList).get(two()).until(1163408121.toUInt())
2021-03-12 09:08:48,641 [main:61] - replacement of 1943653921.toUInt() until 9u of type UIntRange is (uintList).get(two()).until(1163408121.toUInt())
2021-03-12 09:08:48,751 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:08:48,751 [main:66] - Compilation checking started
2021-03-12 09:08:49,229 [main:53] - Result = true
Text:
import kotlin.test.*

fun two() = (1226916116).toInt().toInt()

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in (uintList).get(two()).until(1163408121.toUInt()) step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step -647639056894702064) {
        ulongList += (ulongList).get(152537828).shl(two())
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}


2021-03-12 09:08:49,230 [main:53] - replacing (1uL, ULong)
2021-03-12 09:08:49,231 [main:50] - replacing 1uL ULong
2021-03-12 09:08:49,231 [main:54] - Getting value of type ULong
2021-03-12 09:08:49,326 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 09:08:49,327 [main:58] - GENERATED VALUE OF TYPE ULong = 7308024844006642363.toULong()
2021-03-12 09:08:49,327 [main:61] - GENERATED IS CALL =false
2021-03-12 09:08:49,430 [main:67] - randomType = Short
2021-03-12 09:08:49,532 [main:302] - generating value of type = Short true depth = 0
2021-03-12 09:08:49,615 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1753339a]
2021-03-12 09:08:49,615 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@7cee5f2f]
2021-03-12 09:08:49,616 [main:78] - Generated call from random type = (-26572).toByte().toULong()
2021-03-12 09:08:49,617 [main:106] - GETTING ULong from MutableList<ULong>
2021-03-12 09:08:49,709 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun <T> kotlin.collections.MutableList<T>.removeLast(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5f38ea4c]]
2021-03-12 09:08:49,709 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun <T> kotlin.collections.MutableList<T>.removeLast(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5f38ea4c]
2021-03-12 09:08:49,710 [main:117] - GENERATED CALL = (ulongList).removeLast()
2021-03-12 09:08:49,710 [main:113] - Case = [public abstract fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@75941ec3], @kotlin.internal.InlineOnly public final inline operator fun inc(): kotlin.ULong defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@30172b56]]
2021-03-12 09:08:49,711 [main:149] - GENERATING call of type public abstract fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@75941ec3]
2021-03-12 09:08:49,823 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:08:49,824 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun inc(): kotlin.ULong defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@30172b56]
2021-03-12 09:08:49,824 [main:117] - GENERATED CALL = (ulongList).get(-2043581822).inc()
2021-03-12 09:08:49,824 [main:113] - Case = [public abstract fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@75941ec3], @kotlin.internal.InlineOnly public final inline infix fun shl(bitCount: kotlin.Int): kotlin.ULong defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@263e02b5]]
2021-03-12 09:08:49,824 [main:149] - GENERATING call of type public abstract fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@75941ec3]
2021-03-12 09:08:49,923 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:08:49,923 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline infix fun shl(bitCount: kotlin.Int): kotlin.ULong defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@263e02b5]
2021-03-12 09:08:50,020 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:08:50,021 [main:117] - GENERATED CALL = (ulongList).get(109038829).shl(-1958183881)
2021-03-12 09:08:50,021 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component1(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@20a72653]]
2021-03-12 09:08:50,021 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component1(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@20a72653]
2021-03-12 09:08:50,021 [main:117] - GENERATED CALL = (ulongList).component1()
2021-03-12 09:08:50,022 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun <T> kotlin.collections.MutableList<T>.removeLastOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@607b3ed4]]
2021-03-12 09:08:50,022 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun <T> kotlin.collections.MutableList<T>.removeLastOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@607b3ed4]
2021-03-12 09:08:50,022 [main:117] - GENERATED CALL = (ulongList).removeLastOrNull()
2021-03-12 09:08:50,022 [main:113] - Case = [public abstract fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@75941ec3], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.ULong.rotateLeft(bitCount: kotlin.Int): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@15b97f0]]
2021-03-12 09:08:50,022 [main:149] - GENERATING call of type public abstract fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@75941ec3]
2021-03-12 09:08:50,022 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.ULong.rotateLeft(bitCount: kotlin.Int): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@15b97f0]
2021-03-12 09:08:50,023 [main:117] - GENERATED CALL = (ulongList).get(two()).rotateLeft(two())
2021-03-12 09:08:50,023 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component3(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4632eae3]]
2021-03-12 09:08:50,023 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component3(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4632eae3]
2021-03-12 09:08:50,023 [main:117] - GENERATED CALL = (ulongList).component3()
2021-03-12 09:08:50,023 [main:113] - Case = [public abstract fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@75941ec3], @kotlin.internal.InlineOnly public final inline fun toULong(): kotlin.ULong defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@6eaee43c]]
2021-03-12 09:08:50,023 [main:149] - GENERATING call of type public abstract fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@75941ec3]
2021-03-12 09:08:50,122 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:08:50,123 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toULong(): kotlin.ULong defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@6eaee43c]
2021-03-12 09:08:50,124 [main:117] - GENERATED CALL = (ulongList).get(33045868).toULong()
2021-03-12 09:08:50,124 [main:113] - Case = [public abstract fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@75941ec3], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.ULong.rotateRight(bitCount: kotlin.Int): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@22057f80]]
2021-03-12 09:08:50,124 [main:149] - GENERATING call of type public abstract fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@75941ec3]
2021-03-12 09:08:50,125 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.ULong.rotateRight(bitCount: kotlin.Int): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@22057f80]
2021-03-12 09:08:50,125 [main:117] - GENERATED CALL = (ulongList).get(two()).rotateRight(two())
2021-03-12 09:08:50,125 [main:113] - Case = [@kotlin.SinceKotlin public fun <T> kotlin.collections.Iterable<T>.minWithOrNull(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@65cb9158]]
2021-03-12 09:08:50,126 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun <T> kotlin.collections.Iterable<T>.minWithOrNull(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@65cb9158]
2021-03-12 09:08:50,225 [main:302] - generating value of type = Comparator<in T> false depth = 0
2021-03-12 09:08:50,893 [main:43] - GENERATING CALL OF fun <T, K> compareBy(comparator: kotlin.Comparator<ArrayList<MutableMap<Byte?, UByte>>>, selector: (T)->ArrayList<MutableMap<Byte?, UByte>>): Comparator<T> = TODO()
2021-03-12 09:08:50,894 [main:61] - WITHOUT TYPE PARAMS = fun <T, K> compareBy(comparator: kotlin.Comparator<ArrayList<MutableMap<Byte?, UByte>>>, selector: (T)->ArrayList<MutableMap<Byte?, UByte>>): Comparator<T> = TODO()
2021-03-12 09:08:51,244 [main:302] - generating value of type = Comparator<ArrayList<MutableMap<Byte?, UByte>>> false depth = 3
2021-03-12 09:08:51,352 [main:43] - GENERATING CALL OF fun <T> compareBy(selector: (ArrayList<MutableMap<Byte?, UByte>>)->kotlin.Comparable<*>?): Comparator<ArrayList<MutableMap<Byte?, UByte>>> = TODO()
2021-03-12 09:08:51,354 [main:61] - WITHOUT TYPE PARAMS = fun <T> compareBy(selector: (ArrayList<MutableMap<Byte?, UByte>>)->kotlin.Comparable<*>?): Comparator<ArrayList<MutableMap<Byte?, UByte>>> = TODO()
2021-03-12 09:08:51,557 [main:302] - generating value of type = Function1<ArrayList<MutableMap<Byte?, UByte>>, Comparable<*>?> false depth = 6
2021-03-12 09:08:51,557 [main:302] - generating value of type = Comparable<*> false depth = 7
2021-03-12 09:08:51,563 [main:95] - GENERATED = compareBy<ArrayList<MutableMap<Byte?, UByte>>>({a: ArrayList<MutableMap<Byte?, UByte>> -> 667776843106739568.toULong()})
2021-03-12 09:08:51,564 [main:302] - generating value of type = Function1<T, ArrayList<MutableMap<Byte?, UByte>>> false depth = 3
2021-03-12 09:08:51,564 [main:302] - generating value of type = ArrayList<MutableMap<Byte?, UByte>> false depth = 4
2021-03-12 09:08:51,704 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<MutableMap<Byte?, UByte>> = TODO()
2021-03-12 09:08:51,705 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<MutableMap<Byte?, UByte>> = TODO()
2021-03-12 09:08:51,855 [main:95] - GENERATED = arrayListOf<MutableMap<Byte?, UByte>>()
2021-03-12 09:08:51,856 [main:95] - GENERATED = compareBy<T, ArrayList<MutableMap<Byte?, UByte>>>(compareBy<ArrayList<MutableMap<Byte?, UByte>>>({a: ArrayList<MutableMap<Byte?, UByte>> -> 667776843106739568.toULong()}), {a: T -> arrayListOf<MutableMap<Byte?, UByte>>()})
2021-03-12 09:08:51,858 [main:117] - GENERATED CALL = (ulongList).minWithOrNull(compareBy<T, ArrayList<MutableMap<Byte?, UByte>>>(compareBy<ArrayList<MutableMap<Byte?, UByte>>>({a: ArrayList<MutableMap<Byte?, UByte>> -> 667776843106739568.toULong()}), {a: T -> arrayListOf<MutableMap<Byte?, UByte>>()}))
2021-03-12 09:08:51,858 [main:61] - replacement of 1uL of type ULong is (ulongList).removeLast()
2021-03-12 09:08:51,961 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:08:51,962 [main:66] - Compilation checking started
2021-03-12 09:08:52,372 [main:53] - Result = true
Text:
import kotlin.test.*

fun two() = (1226916116).toInt().toInt()

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in (uintList).get(two()).until(1163408121.toUInt()) step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in (ulongList).removeLast() until 9uL step -647639056894702064) {
        ulongList += (ulongList).get(152537828).shl(two())
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}


2021-03-12 09:08:52,373 [main:53] - replacing ((ulongList).removeLast() until 9uL step -647639056894702064, ULongProgression)
2021-03-12 09:08:52,373 [main:50] - replacing (ulongList).removeLast() until 9uL step -647639056894702064 ULongProgression
2021-03-12 09:08:52,373 [main:54] - Getting value of type ULongProgression
2021-03-12 09:08:52,463 [main:302] - generating value of type = ULongProgression false depth = 0
2021-03-12 09:08:52,553 [main:43] - GENERATING CALL OF fun ULongRange(start: kotlin.ULong, endInclusive: kotlin.ULong): ULongProgression = TODO()
2021-03-12 09:08:52,554 [main:61] - WITHOUT TYPE PARAMS = fun ULongRange(start: kotlin.ULong, endInclusive: kotlin.ULong): ULongProgression = TODO()
2021-03-12 09:08:52,851 [main:302] - generating value of type = ULong true depth = 3
2021-03-12 09:08:52,851 [main:302] - generating value of type = ULong true depth = 3
2021-03-12 09:08:52,852 [main:95] - GENERATED = ULongRange(7281808982947671226.toULong(), 8144950154961018777.toULong())
2021-03-12 09:08:52,852 [main:58] - GENERATED VALUE OF TYPE ULongProgression = ULongRange(7281808982947671226.toULong(), 8144950154961018777.toULong())
2021-03-12 09:08:52,852 [main:61] - GENERATED IS CALL =true
2021-03-12 09:08:52,952 [main:67] - randomType = Array<String>
2021-03-12 09:08:53,047 [main:302] - generating value of type = Array<String> false depth = 0
2021-03-12 09:08:53,168 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->String): Array<String> = TODO()
2021-03-12 09:08:53,170 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->String): Array<String> = TODO()
2021-03-12 09:08:53,461 [main:302] - generating value of type = Int true depth = 3
2021-03-12 09:08:53,461 [main:302] - generating value of type = Function1<Int, String> false depth = 3
2021-03-12 09:08:53,461 [main:302] - generating value of type = String true depth = 4
2021-03-12 09:08:53,462 [main:95] - GENERATED = Array<String>(-1559999977, {a: Int -> "inmtt"})
2021-03-12 09:08:53,481 [main:106] - GETTING ULongProgression from MutableList<ULong>
2021-03-12 09:08:53,563 [main:113] - Case = [public abstract fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@75941ec3], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public infix fun kotlin.ULong.downTo(to: kotlin.ULong): kotlin.ranges.ULongProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2179e280]]
2021-03-12 09:08:53,563 [main:149] - GENERATING call of type public abstract fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@75941ec3]
2021-03-12 09:08:53,659 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:08:53,659 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public infix fun kotlin.ULong.downTo(to: kotlin.ULong): kotlin.ranges.ULongProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2179e280]
2021-03-12 09:08:53,759 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 09:08:53,759 [main:117] - GENERATED CALL = (ulongList).get(666788009).downTo(1253252256304931741.toULong())
2021-03-12 09:08:53,759 [main:61] - replacement of (ulongList).removeLast() until 9uL step -647639056894702064 of type ULongProgression is (ulongList).get(666788009).downTo(1253252256304931741.toULong())
2021-03-12 09:08:53,887 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:08:53,887 [main:66] - Compilation checking started
2021-03-12 09:08:54,324 [main:53] - Result = true
Text:
import kotlin.test.*

fun two() = (1226916116).toInt().toInt()

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in (uintList).get(two()).until(1163408121.toUInt()) step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in (ulongList).get(666788009).downTo(1253252256304931741.toULong())) {
        ulongList += (ulongList).get(152537828).shl(two())
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}


2021-03-12 09:08:54,324 [main:53] - replacing (9uL, ULong)
2021-03-12 09:08:54,325 [main:50] - replacing 9uL ULong
2021-03-12 09:08:54,325 [main:54] - Getting value of type ULong
2021-03-12 09:08:54,411 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 09:08:54,411 [main:58] - GENERATED VALUE OF TYPE ULong = 840290196925616641.toULong()
2021-03-12 09:08:54,412 [main:61] - GENERATED IS CALL =false
2021-03-12 09:08:54,412 [main:67] - randomType = String
2021-03-12 09:08:54,537 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:08:54,580 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@54bffb34]
2021-03-12 09:08:54,688 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:08:54,689 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@4dbf26c7]
2021-03-12 09:08:54,690 [main:78] - Generated call from random type = ("imliw").compareTo("ohipc").toULong()
2021-03-12 09:08:54,691 [main:106] - GETTING ULong from Int
2021-03-12 09:08:54,757 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ff36540], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@1273fee8]]
2021-03-12 09:08:54,757 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ff36540]
2021-03-12 09:08:54,758 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@1273fee8]
2021-03-12 09:08:54,758 [main:117] - GENERATED CALL = (two()).toShort().toULong()
2021-03-12 09:08:54,758 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@4dbf26c7]]
2021-03-12 09:08:54,758 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1]
2021-03-12 09:08:54,759 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@4dbf26c7]
2021-03-12 09:08:54,759 [main:117] - GENERATED CALL = (two()).toInt().toULong()
2021-03-12 09:08:54,759 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3ce30c43], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Float.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5d8b2f90]]
2021-03-12 09:08:54,759 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3ce30c43]
2021-03-12 09:08:54,759 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Float.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5d8b2f90]
2021-03-12 09:08:54,759 [main:117] - GENERATED CALL = (two()).toFloat().toULong()
2021-03-12 09:08:54,760 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@14d8c418], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@43a60f78]]
2021-03-12 09:08:54,760 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@14d8c418]
2021-03-12 09:08:54,760 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@43a60f78]
2021-03-12 09:08:54,760 [main:117] - GENERATED CALL = (two()).toLong().toULong()
2021-03-12 09:08:54,760 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3dfef25d], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@7cee5f2f]]
2021-03-12 09:08:54,760 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3dfef25d]
2021-03-12 09:08:54,760 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@7cee5f2f]
2021-03-12 09:08:54,760 [main:117] - GENERATED CALL = (two()).toByte().toULong()
2021-03-12 09:08:54,761 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78635f79], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@342ca509]]
2021-03-12 09:08:54,761 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78635f79]
2021-03-12 09:08:54,761 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@342ca509]
2021-03-12 09:08:54,761 [main:117] - GENERATED CALL = (two()).toDouble().toULong()
2021-03-12 09:08:54,761 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@4dbf26c7]]
2021-03-12 09:08:54,761 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae]
2021-03-12 09:08:54,761 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@4dbf26c7]
2021-03-12 09:08:54,761 [main:117] - GENERATED CALL = (two()).compareTo(two()).toULong()
2021-03-12 09:08:54,762 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@4dbf26c7]]
2021-03-12 09:08:54,762 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@4dbf26c7]
2021-03-12 09:08:54,762 [main:117] - GENERATED CALL = (two()).toULong()
2021-03-12 09:08:54,762 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@59ecbff6], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@342ca509]]
2021-03-12 09:08:54,762 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@59ecbff6]
2021-03-12 09:08:54,859 [main:302] - generating value of type = Double true depth = 0
2021-03-12 09:08:54,859 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@342ca509]
2021-03-12 09:08:54,860 [main:117] - GENERATED CALL = (two()).div(0.22923985623372134).toULong()
2021-03-12 09:08:54,860 [main:61] - replacement of 9uL of type ULong is (two()).toDouble().toULong()
2021-03-12 09:08:54,967 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:08:54,968 [main:53] - replacing (i, ULong)
2021-03-12 09:08:54,968 [main:50] - replacing i ULong
2021-03-12 09:08:54,968 [main:54] - Getting value of type ULong
2021-03-12 09:08:55,065 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 09:08:55,065 [main:58] - GENERATED VALUE OF TYPE ULong = 8804318359812999010.toULong()
2021-03-12 09:08:55,066 [main:61] - GENERATED IS CALL =false
2021-03-12 09:08:55,066 [main:67] - randomType = Int
2021-03-12 09:08:55,162 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:08:55,210 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3dfef25d]
2021-03-12 09:08:55,210 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@7cee5f2f]
2021-03-12 09:08:55,211 [main:78] - Generated call from random type = (-822435826).toByte().toULong()
2021-03-12 09:08:55,212 [main:106] - GETTING ULong from Int
2021-03-12 09:08:55,256 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78635f79], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@342ca509]]
2021-03-12 09:08:55,256 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78635f79]
2021-03-12 09:08:55,256 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@342ca509]
2021-03-12 09:08:55,256 [main:117] - GENERATED CALL = (two()).toDouble().toULong()
2021-03-12 09:08:55,256 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@14d8c418], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@43a60f78]]
2021-03-12 09:08:55,256 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@14d8c418]
2021-03-12 09:08:55,257 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@43a60f78]
2021-03-12 09:08:55,257 [main:117] - GENERATED CALL = (two()).toLong().toULong()
2021-03-12 09:08:55,257 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@4dbf26c7]]
2021-03-12 09:08:55,257 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@4dbf26c7]
2021-03-12 09:08:55,257 [main:117] - GENERATED CALL = (two()).toULong()
2021-03-12 09:08:55,257 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3ce30c43], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Float.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5d8b2f90]]
2021-03-12 09:08:55,257 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3ce30c43]
2021-03-12 09:08:55,258 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Float.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5d8b2f90]
2021-03-12 09:08:55,258 [main:117] - GENERATED CALL = (two()).toFloat().toULong()
2021-03-12 09:08:55,258 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3dfef25d], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@7cee5f2f]]
2021-03-12 09:08:55,258 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3dfef25d]
2021-03-12 09:08:55,258 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@7cee5f2f]
2021-03-12 09:08:55,258 [main:117] - GENERATED CALL = (two()).toByte().toULong()
2021-03-12 09:08:55,258 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ff36540], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@1273fee8]]
2021-03-12 09:08:55,258 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ff36540]
2021-03-12 09:08:55,258 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@1273fee8]
2021-03-12 09:08:55,259 [main:117] - GENERATED CALL = (two()).toShort().toULong()
2021-03-12 09:08:55,259 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@4dbf26c7]]
2021-03-12 09:08:55,259 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1]
2021-03-12 09:08:55,259 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@4dbf26c7]
2021-03-12 09:08:55,259 [main:117] - GENERATED CALL = (two()).toInt().toULong()
2021-03-12 09:08:55,259 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@59ecbff6], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@342ca509]]
2021-03-12 09:08:55,259 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@59ecbff6]
2021-03-12 09:08:55,348 [main:302] - generating value of type = Double true depth = 0
2021-03-12 09:08:55,349 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@342ca509]
2021-03-12 09:08:55,349 [main:117] - GENERATED CALL = (two()).div(0.23975179826517967).toULong()
2021-03-12 09:08:55,349 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@4dbf26c7]]
2021-03-12 09:08:55,349 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae]
2021-03-12 09:08:55,349 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@4dbf26c7]
2021-03-12 09:08:55,350 [main:117] - GENERATED CALL = (two()).compareTo(two()).toULong()
2021-03-12 09:08:55,350 [main:61] - replacement of i of type ULong is 8804318359812999010.toULong()
2021-03-12 09:08:55,434 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:08:55,435 [main:53] - replacing (listOf(1u, 3u, 5u, 7u), List<UInt>)
2021-03-12 09:08:55,435 [main:50] - replacing listOf(1u, 3u, 5u, 7u) List<UInt>
2021-03-12 09:08:55,435 [main:54] - Getting value of type List<UInt>
2021-03-12 09:08:55,519 [main:302] - generating value of type = List<UInt> false depth = 0
2021-03-12 09:08:55,649 [main:43] - GENERATING CALL OF fun <T> MutableList(size: kotlin.Int, init: (index: kotlin.Int)->UInt): List<UInt> = TODO()
2021-03-12 09:08:55,651 [main:61] - WITHOUT TYPE PARAMS = fun <T> MutableList(size: kotlin.Int, init: (index: kotlin.Int)->UInt): List<UInt> = TODO()
2021-03-12 09:08:55,951 [main:302] - generating value of type = Int true depth = 3
2021-03-12 09:08:55,951 [main:302] - generating value of type = Function1<[@kotlin.ParameterName] Int, UInt> false depth = 3
2021-03-12 09:08:55,952 [main:302] - generating value of type = UInt true depth = 4
2021-03-12 09:08:55,952 [main:95] - GENERATED = MutableList<UInt>(-147448853, {a: Int -> 1623988986.toUInt()})
2021-03-12 09:08:55,952 [main:58] - GENERATED VALUE OF TYPE List<UInt> = MutableList<UInt>(-147448853, {a: Int -> 1623988986.toUInt()})
2021-03-12 09:08:55,952 [main:61] - GENERATED IS CALL =true
2021-03-12 09:08:55,953 [main:67] - randomType = ULong
2021-03-12 09:08:56,040 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 09:08:56,173 [main:106] - GETTING List<UInt> from MutableList<UInt>
2021-03-12 09:08:56,227 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.plusElement(element: T): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@45985fe9]]
2021-03-12 09:08:56,227 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.plusElement(element: T): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@45985fe9]
2021-03-12 09:08:56,333 [main:302] - generating value of type = T false depth = 0
2021-03-12 09:08:56,635 [main:43] - GENERATING CALL OF fun <T> maxOf(a: UShort?, other: UShort?, comparator: kotlin.Comparator<UShort?>): T = TODO()
2021-03-12 09:08:56,637 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: UShort?, other: UShort?, comparator: kotlin.Comparator<UShort?>): T = TODO()
2021-03-12 09:08:56,813 [main:302] - generating value of type = UShort true depth = 3
2021-03-12 09:08:56,814 [main:302] - generating value of type = UShort true depth = 3
2021-03-12 09:08:56,814 [main:302] - generating value of type = Comparator<UShort?> false depth = 3
2021-03-12 09:08:56,904 [main:43] - GENERATING CALL OF fun <T> nullsFirst(): Comparator<UShort?> = TODO()
2021-03-12 09:08:56,906 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsFirst(): Comparator<UShort?> = TODO()
2021-03-12 09:08:57,024 [main:95] - GENERATED = nullsFirst<UShort?>()
2021-03-12 09:08:57,024 [main:95] - GENERATED = maxOf<UShort?>(6290.toUShort(), 21483.toUShort(), nullsFirst<UShort?>())
2021-03-12 09:08:57,025 [main:117] - GENERATED CALL = (uintList).plusElement(maxOf<UShort?>(6290.toUShort(), 21483.toUShort(), nullsFirst<UShort?>()))
2021-03-12 09:08:57,025 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.toList(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@358720a0]]
2021-03-12 09:08:57,025 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.toList(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@358720a0]
2021-03-12 09:08:57,026 [main:117] - GENERATED CALL = (uintList).toList()
2021-03-12 09:08:57,026 [main:113] - Case = [public inline fun <T, K> kotlin.collections.Iterable<T>.distinctBy(selector: (T) -> K): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4f0e977a]]
2021-03-12 09:08:57,026 [main:149] - GENERATING call of type public inline fun <T, K> kotlin.collections.Iterable<T>.distinctBy(selector: (T) -> K): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4f0e977a]
2021-03-12 09:08:57,121 [main:302] - generating value of type = Function1<T, K> false depth = 0
2021-03-12 09:08:57,122 [main:302] - generating value of type = K false depth = 1
2021-03-12 09:08:57,125 [main:117] - GENERATED CALL = (uintList).distinctBy({a: T -> })
2021-03-12 09:08:57,125 [main:113] - Case = [public inline fun <T> kotlin.collections.List<T>.takeLastWhile(predicate: (T) -> kotlin.Boolean): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@189f0c19]]
2021-03-12 09:08:57,125 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.List<T>.takeLastWhile(predicate: (T) -> kotlin.Boolean): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@189f0c19]
2021-03-12 09:08:57,215 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-12 09:08:57,215 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:08:57,216 [main:117] - GENERATED CALL = (uintList).takeLastWhile({a: T -> false})
2021-03-12 09:08:57,217 [main:113] - Case = [public operator fun <T> kotlin.collections.Iterable<T>.minus(element: T): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@339c70e9]]
2021-03-12 09:08:57,217 [main:149] - GENERATING call of type public operator fun <T> kotlin.collections.Iterable<T>.minus(element: T): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@339c70e9]
2021-03-12 09:08:57,305 [main:302] - generating value of type = T false depth = 0
2021-03-12 09:08:57,599 [main:43] - GENERATING CALL OF fun <T> minOf(a: ArrayDeque<ULong>, b: ArrayDeque<ULong>, comparator: kotlin.Comparator<ArrayDeque<ULong>>): T = TODO()
2021-03-12 09:08:57,601 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: ArrayDeque<ULong>, b: ArrayDeque<ULong>, comparator: kotlin.Comparator<ArrayDeque<ULong>>): T = TODO()
2021-03-12 09:08:57,791 [main:302] - generating value of type = ArrayDeque<ULong> false depth = 3
2021-03-12 09:08:57,879 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<ULong> = TODO()
2021-03-12 09:08:57,880 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<ULong> = TODO()
2021-03-12 09:08:57,965 [main:95] - GENERATED = ArrayDeque<ULong>()
2021-03-12 09:08:57,966 [main:302] - generating value of type = ArrayDeque<ULong> false depth = 3
2021-03-12 09:08:58,058 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<ULong> = TODO()
2021-03-12 09:08:58,060 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<ULong> = TODO()
2021-03-12 09:08:58,177 [main:95] - GENERATED = ArrayDeque<ULong>()
2021-03-12 09:08:58,177 [main:302] - generating value of type = Comparator<ArrayDeque<ULong>> false depth = 3
2021-03-12 09:08:58,287 [main:43] - GENERATING CALL OF fun <T> compareBy(selector: (ArrayDeque<ULong>)->kotlin.Comparable<*>?): Comparator<ArrayDeque<ULong>> = TODO()
2021-03-12 09:08:58,289 [main:61] - WITHOUT TYPE PARAMS = fun <T> compareBy(selector: (ArrayDeque<ULong>)->kotlin.Comparable<*>?): Comparator<ArrayDeque<ULong>> = TODO()
2021-03-12 09:08:58,490 [main:302] - generating value of type = Function1<ArrayDeque<ULong>, Comparable<*>?> false depth = 6
2021-03-12 09:08:58,490 [main:302] - generating value of type = Comparable<*> false depth = 7
2021-03-12 09:08:58,495 [main:95] - GENERATED = compareBy<ArrayDeque<ULong>>({a: ArrayDeque<ULong> -> -118})
2021-03-12 09:08:58,495 [main:95] - GENERATED = minOf<ArrayDeque<ULong>>(ArrayDeque<ULong>(), ArrayDeque<ULong>(), compareBy<ArrayDeque<ULong>>({a: ArrayDeque<ULong> -> -118}))
2021-03-12 09:08:58,496 [main:117] - GENERATED CALL = (uintList).minus(minOf<ArrayDeque<ULong>>(ArrayDeque<ULong>(), ArrayDeque<ULong>(), compareBy<ArrayDeque<ULong>>({a: ArrayDeque<ULong> -> -118})))
2021-03-12 09:08:58,497 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.take(n: kotlin.Int): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1641ee27]]
2021-03-12 09:08:58,497 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.take(n: kotlin.Int): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1641ee27]
2021-03-12 09:08:58,497 [main:117] - GENERATED CALL = (uintList).take(two())
2021-03-12 09:08:58,497 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.filterIndexed(predicate: (index: kotlin.Int, T) -> kotlin.Boolean): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3a54a40f]]
2021-03-12 09:08:58,497 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.filterIndexed(predicate: (index: kotlin.Int, T) -> kotlin.Boolean): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3a54a40f]
2021-03-12 09:08:58,580 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, T, Boolean> false depth = 0
2021-03-12 09:08:58,581 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:08:58,582 [main:117] - GENERATED CALL = (uintList).filterIndexed({a: Int, b: T -> true})
2021-03-12 09:08:58,582 [main:113] - Case = [public fun <T> kotlin.collections.List<T>.asReversed(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@258f3e5]]
2021-03-12 09:08:58,582 [main:149] - GENERATING call of type public fun <T> kotlin.collections.List<T>.asReversed(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@258f3e5]
2021-03-12 09:08:58,582 [main:117] - GENERATED CALL = (uintList).asReversed()
2021-03-12 09:08:58,582 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.distinct(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@40308cf8]]
2021-03-12 09:08:58,582 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.distinct(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@40308cf8]
2021-03-12 09:08:58,582 [main:117] - GENERATED CALL = (uintList).distinct()
2021-03-12 09:08:58,582 [main:113] - Case = [public fun <T> kotlin.collections.List<T>.dropLast(n: kotlin.Int): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6723c986]]
2021-03-12 09:08:58,582 [main:149] - GENERATING call of type public fun <T> kotlin.collections.List<T>.dropLast(n: kotlin.Int): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6723c986]
2021-03-12 09:08:58,583 [main:117] - GENERATED CALL = (uintList).dropLast(two())
2021-03-12 09:08:58,583 [main:61] - replacement of listOf(1u, 3u, 5u, 7u) of type List<UInt> is (uintList).filterIndexed({a: Int, b: T -> true})
2021-03-12 09:08:58,677 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:08:58,678 [main:66] - Compilation checking started
2021-03-12 09:08:59,006 [main:49] - Result = false
Text:
import kotlin.test.*

fun two() = (1226916116).toInt().toInt()

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in (uintList).get(two()).until(1163408121.toUInt()) step two()) {
        uintList += i
    }
    assertEquals((uintList).filterIndexed({a: Int, b: T -> true}), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in (ulongList).get(666788009).downTo(1253252256304931741.toULong())) {
        ulongList += (ulongList).get(152537828).shl(two())
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}


2021-03-12 09:08:59,007 [main:53] - replacing ((ulongList).removeLast() until (two()).toDouble().toULong(), ULongRange)
2021-03-12 09:08:59,007 [main:50] - replacing (ulongList).removeLast() until (two()).toDouble().toULong() ULongRange
2021-03-12 09:08:59,007 [main:54] - Getting value of type ULongRange
2021-03-12 09:08:59,095 [main:302] - generating value of type = ULongRange false depth = 0
2021-03-12 09:08:59,180 [main:43] - GENERATING CALL OF fun ULongRange(start: kotlin.ULong, endInclusive: kotlin.ULong): ULongRange = TODO()
2021-03-12 09:08:59,181 [main:61] - WITHOUT TYPE PARAMS = fun ULongRange(start: kotlin.ULong, endInclusive: kotlin.ULong): ULongRange = TODO()
2021-03-12 09:08:59,435 [main:302] - generating value of type = ULong true depth = 3
2021-03-12 09:08:59,435 [main:302] - generating value of type = ULong true depth = 3
2021-03-12 09:08:59,436 [main:95] - GENERATED = ULongRange(2061378416525848538.toULong(), 1109253259051400136.toULong())
2021-03-12 09:08:59,436 [main:58] - GENERATED VALUE OF TYPE ULongRange = ULongRange(2061378416525848538.toULong(), 1109253259051400136.toULong())
2021-03-12 09:08:59,437 [main:61] - GENERATED IS CALL =true
2021-03-12 09:08:59,536 [main:67] - randomType = Char
2021-03-12 09:08:59,645 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:08:59,675 [main:106] - GETTING ULongRange from Int
2021-03-12 09:08:59,711 [main:61] - replacement of (ulongList).removeLast() until (two()).toDouble().toULong() of type ULongRange is ULongRange(2061378416525848538.toULong(), 1109253259051400136.toULong())
2021-03-12 09:08:59,795 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 09:08:59,797 [main:53] - replacing ("OK", String)
2021-03-12 09:08:59,797 [main:50] - replacing "OK" String
2021-03-12 09:08:59,797 [main:54] - Getting value of type String
2021-03-12 09:08:59,881 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:08:59,882 [main:58] - GENERATED VALUE OF TYPE String = "gbdrl"
2021-03-12 09:08:59,882 [main:61] - GENERATED IS CALL =false
2021-03-12 09:09:00,177 [main:67] - randomType = Pair<Short, UByte>
2021-03-12 09:09:00,305 [main:302] - generating value of type = Pair<Short, UByte> false depth = 0
2021-03-12 09:09:00,403 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Short, second: UByte): Pair<Short, UByte> = TODO()
2021-03-12 09:09:00,405 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Short, second: UByte): Pair<Short, UByte> = TODO()
2021-03-12 09:09:00,500 [main:302] - generating value of type = Short true depth = 3
2021-03-12 09:09:00,501 [main:302] - generating value of type = UByte true depth = 3
2021-03-12 09:09:00,501 [main:95] - GENERATED = Pair<Short, UByte>(8821, 63.toUByte())
2021-03-12 09:09:00,518 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d0dcfb1]
2021-03-12 09:09:00,519 [main:78] - Generated call from random type = (Pair<Short, UByte>(8821, 63.toUByte())).second.toString(two())
2021-03-12 09:09:00,519 [main:61] - replacement of "OK" of type String is (Pair<Short, UByte>(8821, 63.toUByte())).second.toString(two())
2021-03-12 09:09:00,604 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:09:00,604 [main:66] - Compilation checking started
2021-03-12 09:09:01,054 [main:53] - Result = true
Text:
import kotlin.test.*

fun two() = (1226916116).toInt().toInt()

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in (uintList).get(two()).until(1163408121.toUInt()) step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in (ulongList).get(666788009).downTo(1253252256304931741.toULong())) {
        ulongList += (ulongList).get(152537828).shl(two())
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return (Pair<Short, UByte>(8821, 63.toUByte())).second.toString(two())
}


2021-03-12 09:09:01,056 [main:53] - replacing (ulongList, MutableList<ULong>)
2021-03-12 09:09:01,056 [main:50] - replacing ulongList MutableList<ULong>
2021-03-12 09:09:01,056 [main:54] - Getting value of type MutableList<ULong>
2021-03-12 09:09:01,177 [main:302] - generating value of type = MutableList<ULong> false depth = 0
2021-03-12 09:09:01,314 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): MutableList<ULong> = TODO()
2021-03-12 09:09:01,315 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): MutableList<ULong> = TODO()
2021-03-12 09:09:01,440 [main:95] - GENERATED = arrayListOf<ULong>()
2021-03-12 09:09:01,440 [main:58] - GENERATED VALUE OF TYPE MutableList<ULong> = arrayListOf<ULong>()
2021-03-12 09:09:01,440 [main:61] - GENERATED IS CALL =true
2021-03-12 09:09:01,545 [main:67] - randomType = Collection<Short>
2021-03-12 09:09:01,549 [main:106] - GETTING MutableList<ULong> from MutableList<UInt>
2021-03-12 09:09:01,607 [main:106] - GETTING MutableList<ULong> from Int
2021-03-12 09:09:01,641 [main:106] - GETTING MutableList<ULong> from MutableList<ULong>
2021-03-12 09:09:01,694 [main:113] - Case = [public fun <T> kotlin.collections.Collection<T>.toMutableList(): kotlin.collections.MutableList<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5af50d9b]]
2021-03-12 09:09:01,694 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Collection<T>.toMutableList(): kotlin.collections.MutableList<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5af50d9b]
2021-03-12 09:09:01,695 [main:117] - GENERATED CALL = (ulongList).toMutableList()
2021-03-12 09:09:01,695 [main:113] - Case = [@kotlin.jvm.JvmName public fun <T> kotlin.collections.MutableList<T>.asReversed(): kotlin.collections.MutableList<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@45f675a4]]
2021-03-12 09:09:01,695 [main:149] - GENERATING call of type @kotlin.jvm.JvmName public fun <T> kotlin.collections.MutableList<T>.asReversed(): kotlin.collections.MutableList<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@45f675a4]
2021-03-12 09:09:01,695 [main:117] - GENERATED CALL = (ulongList).asReversed()
2021-03-12 09:09:01,695 [main:113] - Case = [public abstract fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.ULong> defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@345183da]]
2021-03-12 09:09:01,695 [main:149] - GENERATING call of type public abstract fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.ULong> defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@345183da]
2021-03-12 09:09:01,783 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:09:01,869 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:09:01,869 [main:117] - GENERATED CALL = (ulongList).subList(-536516436, -1196494474)
2021-03-12 09:09:01,869 [main:61] - replacement of ulongList of type MutableList<ULong> is (ulongList).asReversed()
2021-03-12 09:09:01,968 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:09:01,968 [main:66] - Compilation checking started
2021-03-12 09:09:02,495 [main:53] - Result = true
Text:
import kotlin.test.*

fun two() = (1226916116).toInt().toInt()

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in (uintList).get(two()).until(1163408121.toUInt()) step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in (ulongList).get(666788009).downTo(1253252256304931741.toULong())) {
        (ulongList).asReversed() += (ulongList).get(152537828).shl(two())
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return (Pair<Short, UByte>(8821, 63.toUByte())).second.toString(two())
}


2021-03-12 09:09:02,496 [main:53] - replacing (ulongList, MutableList<ULong>)
2021-03-12 09:09:02,496 [main:50] - replacing ulongList MutableList<ULong>
2021-03-12 09:09:02,496 [main:54] - Getting value of type MutableList<ULong>
2021-03-12 09:09:02,588 [main:302] - generating value of type = MutableList<ULong> false depth = 0
2021-03-12 09:09:02,685 [main:43] - GENERATING CALL OF fun <T> mutableListOf(elements: ULong): MutableList<ULong> = TODO()
2021-03-12 09:09:02,686 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableListOf(elements: ULong): MutableList<ULong> = TODO()
2021-03-12 09:09:02,781 [main:302] - generating value of type = ULong true depth = 3
2021-03-12 09:09:02,782 [main:95] - GENERATED = mutableListOf<ULong>(6622018255251775324.toULong())
2021-03-12 09:09:02,782 [main:58] - GENERATED VALUE OF TYPE MutableList<ULong> = mutableListOf<ULong>(6622018255251775324.toULong())
2021-03-12 09:09:02,782 [main:61] - GENERATED IS CALL =true
2021-03-12 09:09:02,783 [main:67] - randomType = UByte
2021-03-12 09:09:02,877 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 09:09:02,924 [main:106] - GETTING MutableList<ULong> from Int
2021-03-12 09:09:02,965 [main:61] - replacement of ulongList of type MutableList<ULong> is mutableListOf<ULong>(6622018255251775324.toULong())
2021-03-12 09:09:03,054 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 09:09:03,054 [main:53] - replacing (1u, UInt)
2021-03-12 09:09:03,054 [main:50] - replacing 1u UInt
2021-03-12 09:09:03,054 [main:54] - Getting value of type UInt
2021-03-12 09:09:03,181 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 09:09:03,181 [main:58] - GENERATED VALUE OF TYPE UInt = 905047091.toUInt()
2021-03-12 09:09:03,182 [main:61] - GENERATED IS CALL =false
2021-03-12 09:09:03,452 [main:67] - randomType = Set<UShort>
2021-03-12 09:09:03,454 [main:106] - GETTING UInt from Int
2021-03-12 09:09:03,485 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ff36540], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2596a640]]
2021-03-12 09:09:03,486 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ff36540]
2021-03-12 09:09:03,486 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2596a640]
2021-03-12 09:09:03,486 [main:117] - GENERATED CALL = (two()).toShort().toUInt()
2021-03-12 09:09:03,486 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3ce30c43], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Float.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@5781d401]]
2021-03-12 09:09:03,486 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3ce30c43]
2021-03-12 09:09:03,486 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Float.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@5781d401]
2021-03-12 09:09:03,486 [main:117] - GENERATED CALL = (two()).toFloat().toUInt()
2021-03-12 09:09:03,486 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@14d8c418], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2c58a2ce]]
2021-03-12 09:09:03,487 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@14d8c418]
2021-03-12 09:09:03,487 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2c58a2ce]
2021-03-12 09:09:03,487 [main:117] - GENERATED CALL = (two()).toLong().toUInt()
2021-03-12 09:09:03,487 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@59ecbff6], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@731dec3]]
2021-03-12 09:09:03,487 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@59ecbff6]
2021-03-12 09:09:03,571 [main:302] - generating value of type = Double true depth = 0
2021-03-12 09:09:03,572 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@731dec3]
2021-03-12 09:09:03,572 [main:117] - GENERATED CALL = (two()).div(0.8389246503898238).toUInt()
2021-03-12 09:09:03,572 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3dfef25d], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@dbdeeea]]
2021-03-12 09:09:03,572 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3dfef25d]
2021-03-12 09:09:03,572 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@dbdeeea]
2021-03-12 09:09:03,572 [main:117] - GENERATED CALL = (two()).toByte().toUInt()
2021-03-12 09:09:03,572 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78635f79], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@731dec3]]
2021-03-12 09:09:03,572 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78635f79]
2021-03-12 09:09:03,573 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@731dec3]
2021-03-12 09:09:03,573 [main:117] - GENERATED CALL = (two()).toDouble().toUInt()
2021-03-12 09:09:03,573 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@4ef0df44]]
2021-03-12 09:09:03,573 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae]
2021-03-12 09:09:03,573 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@4ef0df44]
2021-03-12 09:09:03,573 [main:117] - GENERATED CALL = (two()).compareTo(two()).toUInt()
2021-03-12 09:09:03,573 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@4ef0df44]]
2021-03-12 09:09:03,573 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1]
2021-03-12 09:09:03,574 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@4ef0df44]
2021-03-12 09:09:03,574 [main:117] - GENERATED CALL = (two()).toInt().toUInt()
2021-03-12 09:09:03,574 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@4ef0df44]]
2021-03-12 09:09:03,574 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@4ef0df44]
2021-03-12 09:09:03,574 [main:117] - GENERATED CALL = (two()).toUInt()
2021-03-12 09:09:03,574 [main:61] - replacement of 1u of type UInt is (two()).toShort().toUInt()
2021-03-12 09:09:03,660 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:09:03,661 [main:53] - replacing (mutableListOf<ULong>(), MutableList<ULong>)
2021-03-12 09:09:03,661 [main:50] - replacing mutableListOf<ULong>() MutableList<ULong>
2021-03-12 09:09:03,661 [main:54] - Getting value of type MutableList<ULong>
2021-03-12 09:09:03,753 [main:302] - generating value of type = MutableList<ULong> false depth = 0
2021-03-12 09:09:03,841 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): MutableList<ULong> = TODO()
2021-03-12 09:09:03,842 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): MutableList<ULong> = TODO()
2021-03-12 09:09:03,979 [main:95] - GENERATED = arrayListOf<ULong>()
2021-03-12 09:09:03,979 [main:58] - GENERATED VALUE OF TYPE MutableList<ULong> = arrayListOf<ULong>()
2021-03-12 09:09:03,979 [main:61] - GENERATED IS CALL =true
2021-03-12 09:09:04,262 [main:67] - randomType = Collection<UShort?>
2021-03-12 09:09:04,266 [main:106] - GETTING MutableList<ULong> from MutableList<UInt>
2021-03-12 09:09:04,319 [main:106] - GETTING MutableList<ULong> from Int
2021-03-12 09:09:04,350 [main:106] - GETTING MutableList<ULong> from MutableList<ULong>
2021-03-12 09:09:04,401 [main:113] - Case = [public abstract fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.ULong> defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@345183da]]
2021-03-12 09:09:04,401 [main:149] - GENERATING call of type public abstract fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.ULong> defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@345183da]
2021-03-12 09:09:04,485 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:09:04,486 [main:117] - GENERATED CALL = (ulongList).subList(-1439835365, two())
2021-03-12 09:09:04,486 [main:113] - Case = [public fun <T> kotlin.collections.Collection<T>.toMutableList(): kotlin.collections.MutableList<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5af50d9b]]
2021-03-12 09:09:04,486 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Collection<T>.toMutableList(): kotlin.collections.MutableList<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5af50d9b]
2021-03-12 09:09:04,486 [main:117] - GENERATED CALL = (ulongList).toMutableList()
2021-03-12 09:09:04,486 [main:113] - Case = [@kotlin.jvm.JvmName public fun <T> kotlin.collections.MutableList<T>.asReversed(): kotlin.collections.MutableList<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@45f675a4]]
2021-03-12 09:09:04,486 [main:149] - GENERATING call of type @kotlin.jvm.JvmName public fun <T> kotlin.collections.MutableList<T>.asReversed(): kotlin.collections.MutableList<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@45f675a4]
2021-03-12 09:09:04,486 [main:117] - GENERATED CALL = (ulongList).asReversed()
2021-03-12 09:09:04,486 [main:61] - replacement of mutableListOf<ULong>() of type MutableList<ULong> is ulongList
2021-03-12 09:09:04,572 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 09:09:04,572 [main:66] - Compilation checking started
2021-03-12 09:09:04,861 [main:49] - Result = false
Text:
import kotlin.test.*

fun two() = (1226916116).toInt().toInt()

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in (uintList).get(two()).until(1163408121.toUInt()) step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = ulongList
    for (i in (ulongList).get(666788009).downTo(1253252256304931741.toULong())) {
        (ulongList).asReversed() += (ulongList).get(152537828).shl(two())
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return (Pair<Short, UByte>(8821, 63.toUByte())).second.toString(two())
}


2021-03-12 09:09:04,861 [main:53] - replacing (i, ULong)
2021-03-12 09:09:04,861 [main:50] - replacing i ULong
2021-03-12 09:09:04,861 [main:54] - Getting value of type ULong
2021-03-12 09:09:04,956 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 09:09:04,956 [main:58] - GENERATED VALUE OF TYPE ULong = 8893603968328486312.toULong()
2021-03-12 09:09:04,956 [main:61] - GENERATED IS CALL =false
2021-03-12 09:09:04,957 [main:67] - randomType = UByte
2021-03-12 09:09:05,046 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 09:09:05,078 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.ULong): kotlin.ULong defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@346df600]
2021-03-12 09:09:05,165 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 09:09:05,165 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.ULong.rotateRight(bitCount: kotlin.Int): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@22057f80]
2021-03-12 09:09:05,256 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:09:05,256 [main:78] - Generated call from random type = (115.toUByte()).div(6273956775358359613.toULong()).rotateRight(-1985585940)
2021-03-12 09:09:05,258 [main:106] - GETTING ULong from Int
2021-03-12 09:09:05,307 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3ce30c43], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Float.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5d8b2f90]]
2021-03-12 09:09:05,307 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3ce30c43]
2021-03-12 09:09:05,308 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Float.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5d8b2f90]
2021-03-12 09:09:05,308 [main:117] - GENERATED CALL = (two()).toFloat().toULong()
2021-03-12 09:09:05,308 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@4dbf26c7]]
2021-03-12 09:09:05,308 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@4dbf26c7]
2021-03-12 09:09:05,308 [main:117] - GENERATED CALL = (two()).toULong()
2021-03-12 09:09:05,308 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3dfef25d], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@7cee5f2f]]
2021-03-12 09:09:05,308 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3dfef25d]
2021-03-12 09:09:05,308 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@7cee5f2f]
2021-03-12 09:09:05,309 [main:117] - GENERATED CALL = (two()).toByte().toULong()
2021-03-12 09:09:05,309 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@59ecbff6], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@342ca509]]
2021-03-12 09:09:05,309 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@59ecbff6]
2021-03-12 09:09:05,394 [main:302] - generating value of type = Double true depth = 0
2021-03-12 09:09:05,395 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@342ca509]
2021-03-12 09:09:05,395 [main:117] - GENERATED CALL = (two()).div(0.21016665265636503).toULong()
2021-03-12 09:09:05,395 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78635f79], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@342ca509]]
2021-03-12 09:09:05,395 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78635f79]
2021-03-12 09:09:05,395 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@342ca509]
2021-03-12 09:09:05,396 [main:117] - GENERATED CALL = (two()).toDouble().toULong()
2021-03-12 09:09:05,396 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@4dbf26c7]]
2021-03-12 09:09:05,396 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1]
2021-03-12 09:09:05,396 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@4dbf26c7]
2021-03-12 09:09:05,396 [main:117] - GENERATED CALL = (two()).toInt().toULong()
2021-03-12 09:09:05,396 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ff36540], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@1273fee8]]
2021-03-12 09:09:05,396 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ff36540]
2021-03-12 09:09:05,396 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@1273fee8]
2021-03-12 09:09:05,396 [main:117] - GENERATED CALL = (two()).toShort().toULong()
2021-03-12 09:09:05,396 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@14d8c418], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@43a60f78]]
2021-03-12 09:09:05,397 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@14d8c418]
2021-03-12 09:09:05,397 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@43a60f78]
2021-03-12 09:09:05,397 [main:117] - GENERATED CALL = (two()).toLong().toULong()
2021-03-12 09:09:05,397 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@4dbf26c7]]
2021-03-12 09:09:05,397 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae]
2021-03-12 09:09:05,397 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@4dbf26c7]
2021-03-12 09:09:05,397 [main:117] - GENERATED CALL = (two()).compareTo(two()).toULong()
2021-03-12 09:09:05,397 [main:61] - replacement of i of type ULong is (two()).toDouble().toULong()
2021-03-12 09:09:05,483 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:09:05,484 [main:53] - replacing (5u, UInt)
2021-03-12 09:09:05,485 [main:50] - replacing 5u UInt
2021-03-12 09:09:05,485 [main:54] - Getting value of type UInt
2021-03-12 09:09:05,571 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 09:09:05,571 [main:58] - GENERATED VALUE OF TYPE UInt = 1088115844.toUInt()
2021-03-12 09:09:05,571 [main:61] - GENERATED IS CALL =false
2021-03-12 09:09:05,894 [main:67] - randomType = ArrayDeque<Function1<Int, UShort>>
2021-03-12 09:09:05,984 [main:302] - generating value of type = ArrayDeque<Function1<Int, UShort>> false depth = 0
2021-03-12 09:09:06,077 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Function1<Int, UShort>>): ArrayDeque<Function1<Int, UShort>> = TODO()
2021-03-12 09:09:06,078 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Function1<Int, UShort>>): ArrayDeque<Function1<Int, UShort>> = TODO()
2021-03-12 09:09:06,259 [main:302] - generating value of type = Collection<Function1<Int, UShort>> false depth = 3
2021-03-12 09:09:06,374 [main:43] - GENERATING CALL OF fun <T> mutableSetOf(elements: Function1<Int, UShort>): Collection<Function1<Int, UShort>> = TODO()
2021-03-12 09:09:06,376 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableSetOf(elements: Function1<Int, UShort>): Collection<Function1<Int, UShort>> = TODO()
2021-03-12 09:09:06,480 [main:302] - generating value of type = Function1<Int, UShort> false depth = 6
2021-03-12 09:09:06,480 [main:302] - generating value of type = UShort true depth = 7
2021-03-12 09:09:06,481 [main:95] - GENERATED = mutableSetOf<Function1<Int, UShort>>({a: Int -> 4685.toUShort()})
2021-03-12 09:09:06,481 [main:95] - GENERATED = ArrayDeque<Function1<Int, UShort>>(mutableSetOf<Function1<Int, UShort>>({a: Int -> 4685.toUShort()}))
2021-03-12 09:09:06,767 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@4ef0df44]
2021-03-12 09:09:06,768 [main:78] - Generated call from random type = (ArrayDeque<Function1<Int, UShort>>(mutableSetOf<Function1<Int, UShort>>({a: Int -> 4685.toUShort()}))).modCount.toUInt()
2021-03-12 09:09:06,770 [main:106] - GETTING UInt from MutableList<UInt>
2021-03-12 09:09:06,863 [main:113] - Case = [@kotlin.SinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.minByOrNull(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@16951bb]]
2021-03-12 09:09:06,864 [main:149] - GENERATING call of type @kotlin.SinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.minByOrNull(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@16951bb]
2021-03-12 09:09:06,975 [main:302] - generating value of type = Function1<T, R> false depth = 0
2021-03-12 09:09:06,976 [main:302] - generating value of type = R false depth = 1
2021-03-12 09:09:07,495 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: Triple<Array<Long?>, ULong, UByte?>, block: T.()->Short): R = TODO()
2021-03-12 09:09:07,497 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: Triple<Array<Long?>, ULong, UByte?>, block: T.()->Short): R = TODO()
2021-03-12 09:09:07,684 [main:302] - generating value of type = Triple<Array<Long?>, ULong, UByte?> false depth = 4
2021-03-12 09:09:07,788 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Array<Long?>, second: ULong, third: UByte?): Triple<Array<Long?>, ULong, UByte?> = TODO()
2021-03-12 09:09:07,790 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Array<Long?>, second: ULong, third: UByte?): Triple<Array<Long?>, ULong, UByte?> = TODO()
2021-03-12 09:09:07,893 [main:302] - generating value of type = Array<Long?> false depth = 7
2021-03-12 09:09:07,988 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Long?): Array<Long?> = TODO()
2021-03-12 09:09:07,989 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Long?): Array<Long?> = TODO()
2021-03-12 09:09:08,355 [main:302] - generating value of type = Int true depth = 10
2021-03-12 09:09:08,356 [main:302] - generating value of type = Function1<Int, Long?> false depth = 10
2021-03-12 09:09:08,356 [main:302] - generating value of type = Long true depth = 11
2021-03-12 09:09:08,357 [main:95] - GENERATED = Array<Long?>(-1888610952, {a: Int -> -3462816402965558497})
2021-03-12 09:09:08,357 [main:302] - generating value of type = ULong true depth = 7
2021-03-12 09:09:08,357 [main:302] - generating value of type = UByte true depth = 7
2021-03-12 09:09:08,358 [main:95] - GENERATED = Triple<Array<Long?>, ULong, UByte?>(Array<Long?>(-1888610952, {a: Int -> -3462816402965558497}), 6153794598086679410.toULong(), 44.toUByte())
2021-03-12 09:09:08,358 [main:385] - Cant generate call of fun <T, R> with(receiver: Triple<Array<Long?>, ULong, UByte?>, block: T.()->Short): R = TODO()
2021-03-12 09:09:08,359 [main:117] - GENERATED CALL = (uintList).minByOrNull({a: T -> })
2021-03-12 09:09:08,359 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@3be681dc], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@4ef0df44]]
2021-03-12 09:09:08,359 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@4ef0df44]
2021-03-12 09:09:08,360 [main:117] - GENERATED CALL = (uintList).size.toUInt()
2021-03-12 09:09:08,360 [main:113] - Case = [public abstract operator fun set(index: kotlin.Int, element: kotlin.UInt): kotlin.UInt defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@3e46c46e]]
2021-03-12 09:09:08,360 [main:149] - GENERATING call of type public abstract operator fun set(index: kotlin.Int, element: kotlin.UInt): kotlin.UInt defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@3e46c46e]
2021-03-12 09:09:08,472 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 09:09:08,473 [main:117] - GENERATED CALL = (uintList).set(two(), 2073189933.toUInt())
2021-03-12 09:09:08,473 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.random(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6f664ab3]]
2021-03-12 09:09:08,474 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.random(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6f664ab3]
2021-03-12 09:09:08,474 [main:117] - GENERATED CALL = (uintList).random()
2021-03-12 09:09:08,474 [main:113] - Case = [public abstract fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@7e7e7c60], @kotlin.internal.InlineOnly public final inline infix fun shl(bitCount: kotlin.Int): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@6dfffacc]]
2021-03-12 09:09:08,474 [main:149] - GENERATING call of type public abstract fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@7e7e7c60]
2021-03-12 09:09:08,561 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:09:08,562 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline infix fun shl(bitCount: kotlin.Int): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@6dfffacc]
2021-03-12 09:09:08,562 [main:117] - GENERATED CALL = (uintList).get(21895182).shl(two())
2021-03-12 09:09:08,562 [main:113] - Case = [public abstract fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@7e7e7c60], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.coerceAtMost(maximumValue: kotlin.UInt): kotlin.UInt defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5ba0ad41]]
2021-03-12 09:09:08,562 [main:149] - GENERATING call of type public abstract fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@7e7e7c60]
2021-03-12 09:09:08,646 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:09:08,647 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.coerceAtMost(maximumValue: kotlin.UInt): kotlin.UInt defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5ba0ad41]
2021-03-12 09:09:08,732 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 09:09:08,733 [main:117] - GENERATED CALL = (uintList).get(195628773).coerceAtMost(1485758066.toUInt())
2021-03-12 09:09:08,733 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component5(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@63928f9f]]
2021-03-12 09:09:08,733 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component5(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@63928f9f]
2021-03-12 09:09:08,733 [main:117] - GENERATED CALL = (uintList).component5()
2021-03-12 09:09:08,733 [main:113] - Case = [public abstract fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@7e7e7c60]]
2021-03-12 09:09:08,734 [main:149] - GENERATING call of type public abstract fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@7e7e7c60]
2021-03-12 09:09:08,823 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:09:08,824 [main:117] - GENERATED CALL = (uintList).get(1879667049)
2021-03-12 09:09:08,824 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component4(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6a3323fb]]
2021-03-12 09:09:08,824 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component4(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6a3323fb]
2021-03-12 09:09:08,825 [main:117] - GENERATED CALL = (uintList).component4()
2021-03-12 09:09:08,825 [main:113] - Case = [public abstract fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@7e7e7c60], @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@238142bd]]
2021-03-12 09:09:08,825 [main:149] - GENERATING call of type public abstract fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@7e7e7c60]
2021-03-12 09:09:08,825 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@238142bd]
2021-03-12 09:09:08,912 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 09:09:08,912 [main:117] - GENERATED CALL = (uintList).get(two()).div(83.toUByte())
2021-03-12 09:09:08,912 [main:61] - replacement of 5u of type UInt is (uintList).component5()
2021-03-12 09:09:09,019 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:09:09,019 [main:66] - Compilation checking started
2021-03-12 09:09:09,520 [main:53] - Result = true
Text:
import kotlin.test.*

fun two() = (1226916116).toInt().toInt()

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in (uintList).get(two()).until(1163408121.toUInt()) step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, (uintList).component5(), 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in (ulongList).get(666788009).downTo(1253252256304931741.toULong())) {
        (ulongList).asReversed() += (ulongList).get(152537828).shl(two())
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return (Pair<Short, UByte>(8821, 63.toUByte())).second.toString(two())
}


2021-03-12 09:09:09,613 [main:119] - TRYING TO REPLACE CONSTANT 152537828
2021-03-12 09:09:09,709 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 09:09:09,709 [main:66] - Compilation checking started
2021-03-12 09:09:10,140 [main:119] - TRYING TO REPLACE CONSTANT 1226916116
2021-03-12 09:09:10,233 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 09:09:10,233 [main:66] - Compilation checking started
2021-03-12 09:09:10,528 [main:49] - Result = false
Text:
import kotlin.test.*

fun two() = (toInt()).toInt().toInt()

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in (uintList).get(two()).until(1163408121.toUInt()) step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, (uintList).component5(), 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in (ulongList).get(666788009).downTo(1253252256304931741.toULong())) {
        (ulongList).asReversed() += (ulongList).get(152537828).shl(two())
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return (Pair<Short, UByte>(8821, 63.toUByte())).second.toString(two())
}


2021-03-12 09:09:10,528 [main:119] - TRYING TO REPLACE CONSTANT 1163408121
2021-03-12 09:09:10,621 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 09:09:10,622 [main:66] - Compilation checking started
2021-03-12 09:09:11,036 [main:53] - Result = true
Text:
import kotlin.test.*

fun two() = (1226916116).toInt().toInt()

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in (uintList).get(two()).until(two().toUInt()) step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, (uintList).component5(), 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in (ulongList).get(666788009).downTo(1253252256304931741.toULong())) {
        (ulongList).asReversed() += (ulongList).get(152537828).shl(two())
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return (Pair<Short, UByte>(8821, 63.toUByte())).second.toString(two())
}


2021-03-12 09:09:11,036 [main:119] - TRYING TO REPLACE CONSTANT 666788009
2021-03-12 09:09:11,123 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 09:09:11,124 [main:66] - Compilation checking started
2021-03-12 09:09:11,526 [main:53] - Result = true
Text:
import kotlin.test.*

fun two() = (1226916116).toInt().toInt()

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in (uintList).get(two()).until(two().toUInt()) step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, (uintList).component5(), 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in (ulongList).get(1163408121).downTo(1253252256304931741.toULong())) {
        (ulongList).asReversed() += (ulongList).get(152537828).shl(two())
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return (Pair<Short, UByte>(8821, 63.toUByte())).second.toString(two())
}


2021-03-12 09:09:11,526 [main:119] - TRYING TO REPLACE CONSTANT 1253252256304931741
2021-03-12 09:09:11,618 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 09:09:11,618 [main:66] - Compilation checking started
2021-03-12 09:09:11,980 [main:119] - TRYING TO REPLACE CONSTANT 8821
2021-03-12 09:09:12,087 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 09:09:12,087 [main:66] - Compilation checking started
2021-03-12 09:09:12,462 [main:119] - TRYING TO REPLACE CONSTANT 63
2021-03-12 09:09:12,553 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 09:09:12,553 [main:66] - Compilation checking started
2021-03-12 09:09:12,931 [main:53] - Result = true
Text:
import kotlin.test.*

fun two() = (1226916116).toInt().toInt()

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in (uintList).get(two()).until(two().toUInt()) step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, (uintList).component5(), 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in (ulongList).get(1163408121).downTo(1253252256304931741.toULong())) {
        (ulongList).asReversed() += (ulongList).get(152537828).shl(two())
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return (Pair<Short, UByte>(8821, two().toUByte())).second.toString(two())
}


2021-03-12 09:09:12,953 [main:41] - AFTER TRY 0 res = import kotlin.test.*

fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}
2021-03-12 09:09:13,285 [main:43] - Try №0
2021-03-12 09:09:24,456 [main:48] - Already checked
2021-03-12 09:09:24,676 [main:48] - Already checked
2021-03-12 09:09:29,016 [main:69] - Trying to insert override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
2021-03-12 09:09:29,276 [main:66] - Compilation checking started
2021-03-12 09:09:30,463 [main:103] - Trying to change 162 nodes
2021-03-12 09:09:30,463 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got ", String)
2021-03-12 09:09:30,465 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " String
2021-03-12 09:09:30,465 [main:54] - Getting value of type String
2021-03-12 09:09:30,633 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:09:30,636 [main:58] - GENERATED VALUE OF TYPE String = "goaog"
2021-03-12 09:09:30,636 [main:61] - GENERATED IS CALL =false
2021-03-12 09:09:31,029 [main:67] - randomType = Kla3<Kla5?>
2021-03-12 09:09:31,190 [main:302] - generating value of type = Kla3<Kla5?> false depth = 0
2021-03-12 09:09:31,193 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 09:09:32,192 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-12 09:09:32,195 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}
2021-03-12 09:09:32,220 [main:106] - GETTING String from Int
2021-03-12 09:09:32,278 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ff36540], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c194fe]]
2021-03-12 09:09:32,278 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ff36540]
2021-03-12 09:09:32,278 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c194fe]
2021-03-12 09:09:32,435 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:09:32,440 [main:117] - GENERATED CALL = (two()).toShort().toString(1640719832)
2021-03-12 09:09:32,440 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b5abe35]]
2021-03-12 09:09:32,440 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1]
2021-03-12 09:09:32,440 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b5abe35]
2021-03-12 09:09:32,441 [main:117] - GENERATED CALL = (two()).toInt().toString(two())
2021-03-12 09:09:32,441 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d1103ac]]
2021-03-12 09:09:32,441 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896]
2021-03-12 09:09:32,441 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d1103ac]
2021-03-12 09:09:32,441 [main:117] - GENERATED CALL = (two()).toChar().titlecase()
2021-03-12 09:09:32,442 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c8a7cb7]]
2021-03-12 09:09:32,442 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896]
2021-03-12 09:09:32,442 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c8a7cb7]
2021-03-12 09:09:32,442 [main:117] - GENERATED CALL = (two()).toChar().uppercase()
2021-03-12 09:09:32,442 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3dfef25d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f9dc957]]
2021-03-12 09:09:32,442 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3dfef25d]
2021-03-12 09:09:32,443 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f9dc957]
2021-03-12 09:09:32,622 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:09:32,626 [main:117] - GENERATED CALL = (two()).toByte().toString(440079356)
2021-03-12 09:09:32,626 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4763293a]]
2021-03-12 09:09:32,627 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896]
2021-03-12 09:09:32,627 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4763293a]
2021-03-12 09:09:32,627 [main:117] - GENERATED CALL = (two()).toChar().lowercase()
2021-03-12 09:09:32,627 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@14d8c418], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46eeb2f7]]
2021-03-12 09:09:32,627 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@14d8c418]
2021-03-12 09:09:32,628 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46eeb2f7]
2021-03-12 09:09:32,795 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:09:32,798 [main:117] - GENERATED CALL = (two()).toLong().toString(1743188652)
2021-03-12 09:09:32,798 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1a5fdcae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46eeb2f7]]
2021-03-12 09:09:32,798 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1a5fdcae]
2021-03-12 09:09:33,005 [main:302] - generating value of type = Long true depth = 0
2021-03-12 09:09:33,010 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46eeb2f7]
2021-03-12 09:09:33,193 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:09:33,196 [main:117] - GENERATED CALL = (two()).div(-161311220949616405).toString(1467138623)
2021-03-12 09:09:33,196 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b5abe35]]
2021-03-12 09:09:33,196 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b5abe35]
2021-03-12 09:09:33,356 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:09:33,359 [main:117] - GENERATED CALL = (two()).toString(277154251)
2021-03-12 09:09:33,359 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b5abe35]]
2021-03-12 09:09:33,359 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae]
2021-03-12 09:09:33,360 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b5abe35]
2021-03-12 09:09:33,501 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:09:33,504 [main:117] - GENERATED CALL = (two()).compareTo(two()).toString(481145816)
2021-03-12 09:09:33,504 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " of type String is "goaog"
2021-03-12 09:09:33,649 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 09:09:33,649 [main:66] - Compilation checking started
2021-03-12 09:09:34,398 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 { suspendCoroutine<String> { cont ->
            @Suppress("UNCHECKED_CAST")
            prope1 = cont as Continuation<Any>
        }}
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:09:34,401 [main:107] - replacing ({
        prope0.exceptionOrNull()?.let(x)
    }, Unit?)
2021-03-12 09:09:34,404 [main:50] - replacing {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope0.exceptionOrNull()?.let(x)
    } Unit?
2021-03-12 09:09:34,404 [main:54] - Getting value of type Unit?
2021-03-12 09:09:34,580 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 09:09:34,586 [main:58] - GENERATED VALUE OF TYPE Unit? = println()
2021-03-12 09:09:34,586 [main:61] - GENERATED IS CALL =true
2021-03-12 09:09:34,591 [main:67] - randomType = Int
2021-03-12 09:09:34,727 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:09:34,776 [main:106] - GETTING Unit? from ULongRange
2021-03-12 09:09:34,833 [main:113] - Case = [@kotlin.internal.HidesMembers public inline fun <T> kotlin.collections.Iterable<T>.forEach(action: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5fc9593d]]
2021-03-12 09:09:34,833 [main:149] - GENERATING call of type @kotlin.internal.HidesMembers public inline fun <T> kotlin.collections.Iterable<T>.forEach(action: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5fc9593d]
2021-03-12 09:09:34,985 [main:302] - generating value of type = Function1<T, Unit> false depth = 0
2021-03-12 09:09:34,990 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:09:35,154 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 09:09:35,158 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 09:09:35,463 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 09:09:35,466 [main:95] - GENERATED = check(false)
2021-03-12 09:09:35,466 [main:117] - GENERATED CALL = (1uL until 9uL)?.forEach({a: T -> check(false)})
2021-03-12 09:09:35,466 [main:113] - Case = [public abstract operator fun iterator(): kotlin.collections.Iterator<kotlin.ULong> defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@7b8e4bf3], public inline fun <T> kotlin.collections.Iterator<T>.forEach(operation: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@672c8149]]
2021-03-12 09:09:35,466 [main:149] - GENERATING call of type public abstract operator fun iterator(): kotlin.collections.Iterator<kotlin.ULong> defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@7b8e4bf3]
2021-03-12 09:09:35,467 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterator<T>.forEach(operation: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@672c8149]
2021-03-12 09:09:35,614 [main:302] - generating value of type = Function1<T, Unit> false depth = 0
2021-03-12 09:09:35,618 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:09:35,774 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:09:35,778 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:09:36,372 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 09:09:36,375 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 09:09:36,377 [main:302] - generating value of type = Any false depth = 5
2021-03-12 09:09:36,378 [main:95] - GENERATED = require(false, { "yhxuy"})
2021-03-12 09:09:36,378 [main:117] - GENERATED CALL = (1uL until 9uL)?.iterator().forEach({a: T -> require(false, { "yhxuy"})})
2021-03-12 09:09:36,378 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.forEachIndexed(action: (index: kotlin.Int, T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@27e3bf50]]
2021-03-12 09:09:36,378 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.forEachIndexed(action: (index: kotlin.Int, T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@27e3bf50]
2021-03-12 09:09:36,516 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, T, Unit> false depth = 0
2021-03-12 09:09:36,518 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:09:36,669 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 09:09:36,673 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 09:09:36,983 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 09:09:36,986 [main:95] - GENERATED = require(true)
2021-03-12 09:09:36,987 [main:117] - GENERATED CALL = (1uL until 9uL)?.forEachIndexed({a: Int, b: T -> require(true)})
2021-03-12 09:09:36,987 [main:114] - replacement of {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope0.exceptionOrNull()?.let(x)
    } of type Unit? is (1uL until 9uL)?.iterator().forEach({a: T -> require(false, { "yhxuy"})})
2021-03-12 09:09:37,124 [main:33] - Trying to replace BLOCK on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:09:37,124 [main:66] - Compilation checking started
2021-03-12 09:09:37,130 [main:71] - Wrong syntax or breaks conditions
2021-03-12 09:09:37,130 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 { suspendCoroutine<String> { cont ->
            @Suppress("UNCHECKED_CAST")
            prope1 = cont as Continuation<Any>
        }}
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) (1uL until 9uL)?.iterator().forEach({a: T -> require(false, { "yhxuy"})})
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:09:37,132 [main:107] - replacing (checkFinished && !prope6, Boolean)
2021-03-12 09:09:37,132 [main:50] - replacing checkFinished && !prope6 Boolean
2021-03-12 09:09:37,132 [main:54] - Getting value of type Boolean
2021-03-12 09:09:37,315 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:09:37,318 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 09:09:37,318 [main:61] - GENERATED IS CALL =false
2021-03-12 09:09:37,803 [main:67] - randomType = Function1<Int?, Kla3<Kla5>>
2021-03-12 09:09:37,804 [main:106] - GETTING Boolean from Int
2021-03-12 09:09:37,846 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@290b5e62], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@289254fe]]
2021-03-12 09:09:37,846 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@290b5e62]
2021-03-12 09:09:37,982 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:09:37,984 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@289254fe]
2021-03-12 09:09:38,125 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:09:38,125 [main:117] - GENERATED CALL = (two()).rangeTo(43).equals("jfyrh")
2021-03-12 09:09:38,126 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31f97aea]]
2021-03-12 09:09:38,126 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896]
2021-03-12 09:09:38,126 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31f97aea]
2021-03-12 09:09:38,256 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:09:38,422 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:09:38,425 [main:117] - GENERATED CALL = (two()).toChar().equals('茫', true)
2021-03-12 09:09:38,426 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3db4ba49], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3c3c290e]]
2021-03-12 09:09:38,426 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3db4ba49]
2021-03-12 09:09:38,603 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:09:38,604 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3c3c290e]
2021-03-12 09:09:38,741 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:09:38,743 [main:117] - GENERATED CALL = (two()).equals("scbqv").and(false)
2021-03-12 09:09:38,744 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ca9e0eb]]
2021-03-12 09:09:38,744 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896]
2021-03-12 09:09:38,744 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ca9e0eb]
2021-03-12 09:09:38,744 [main:117] - GENERATED CALL = (two()).toChar().isSurrogate()
2021-03-12 09:09:38,744 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ae43d77]]
2021-03-12 09:09:38,744 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896]
2021-03-12 09:09:38,744 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ae43d77]
2021-03-12 09:09:38,744 [main:117] - GENERATED CALL = (two()).toChar().isDigit()
2021-03-12 09:09:38,744 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78635f79], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6ce5eb9b]]
2021-03-12 09:09:38,744 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78635f79]
2021-03-12 09:09:38,745 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6ce5eb9b]
2021-03-12 09:09:38,745 [main:117] - GENERATED CALL = (two()).toDouble().isInfinite()
2021-03-12 09:09:38,745 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3db4ba49]]
2021-03-12 09:09:38,745 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1]
2021-03-12 09:09:38,745 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3db4ba49]
2021-03-12 09:09:38,893 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:09:38,893 [main:117] - GENERATED CALL = (two()).toInt().equals("oknbc")
2021-03-12 09:09:38,893 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3ce30c43], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@61d18376]]
2021-03-12 09:09:38,893 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3ce30c43]
2021-03-12 09:09:38,894 [main:149] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@61d18376]
2021-03-12 09:09:38,894 [main:117] - GENERATED CALL = (two()).toFloat().isFinite()
2021-03-12 09:09:38,894 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@59ecbff6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4f19f08e]]
2021-03-12 09:09:38,894 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@59ecbff6]
2021-03-12 09:09:39,033 [main:302] - generating value of type = Double true depth = 0
2021-03-12 09:09:39,036 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4f19f08e]
2021-03-12 09:09:39,182 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:09:39,183 [main:117] - GENERATED CALL = (two()).div(0.8856235759251055).equals("wtipp")
2021-03-12 09:09:39,183 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3db4ba49], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c743b01]]
2021-03-12 09:09:39,183 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3db4ba49]
2021-03-12 09:09:39,322 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:09:39,322 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c743b01]
2021-03-12 09:09:39,504 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:09:39,508 [main:117] - GENERATED CALL = (two()).equals("huvzx").xor(false)
2021-03-12 09:09:39,508 [main:114] - replacement of checkFinished && !prope6 of type Boolean is (two()).toChar().equals('茫', true)
2021-03-12 09:09:39,674 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:09:39,674 [main:66] - Compilation checking started
2021-03-12 09:09:40,543 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 { suspendCoroutine<String> { cont ->
            @Suppress("UNCHECKED_CAST")
            prope1 = cont as Continuation<Any>
        }}
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:09:40,545 [main:107] - replacing (prope0, Result<Any?>)
2021-03-12 09:09:40,545 [main:50] - replacing prope0 Result<Any?>
2021-03-12 09:09:40,545 [main:54] - Getting value of type Result<Any?>
2021-03-12 09:09:40,683 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 09:09:40,847 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 09:09:40,852 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 09:09:41,217 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 09:09:41,220 [main:302] - generating value of type = Any false depth = 4
2021-03-12 09:09:41,221 [main:95] - GENERATED = runCatching<Any?>({ "jtqbs"})
2021-03-12 09:09:41,221 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "jtqbs"})
2021-03-12 09:09:41,221 [main:61] - GENERATED IS CALL =true
2021-03-12 09:09:41,545 [main:67] - randomType = UByte?
2021-03-12 09:09:41,673 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 09:09:41,715 [main:106] - GETTING Result<Any?> from ULongRange
2021-03-12 09:09:41,752 [main:106] - GETTING Result<Any?> from Int
2021-03-12 09:09:41,798 [main:106] - GETTING Result<Any?> from UIntRange
2021-03-12 09:09:41,826 [main:114] - replacement of prope0 of type Result<Any?> is runCatching<Any?>({ "jtqbs"})
2021-03-12 09:09:41,953 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 09:09:41,953 [main:66] - Compilation checking started
2021-03-12 09:09:42,736 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 { suspendCoroutine<String> { cont ->
            @Suppress("UNCHECKED_CAST")
            prope1 = cont as Continuation<Any>
        }}
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:09:42,739 [main:107] - replacing ("FAIL", String)
2021-03-12 09:09:42,739 [main:50] - replacing "FAIL" String
2021-03-12 09:09:42,739 [main:54] - Getting value of type String
2021-03-12 09:09:42,936 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:09:42,940 [main:58] - GENERATED VALUE OF TYPE String = "lrkib"
2021-03-12 09:09:42,940 [main:61] - GENERATED IS CALL =false
2021-03-12 09:09:43,646 [main:67] - randomType = Set<Kla6?>?
2021-03-12 09:09:43,647 [main:106] - GETTING String from UIntRange
2021-03-12 09:09:43,687 [main:113] - Case = [public open val endInclusive: kotlin.UInt defined in kotlin.ranges.UIntRange[DeserializedPropertyDescriptor@3aa24759], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@128d1276]]
2021-03-12 09:09:43,687 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@128d1276]
2021-03-12 09:09:43,687 [main:117] - GENERATED CALL = (1u until 9u).endInclusive.toString(two())
2021-03-12 09:09:43,687 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5036158]]
2021-03-12 09:09:43,687 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5036158]
2021-03-12 09:09:43,814 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:09:43,950 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:09:44,106 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:09:44,277 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 09:09:44,281 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 09:09:44,587 [main:302] - generating value of type = Int true depth = 3
2021-03-12 09:09:44,591 [main:95] - GENERATED = StringBuilder(1705282425)
2021-03-12 09:09:44,727 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:09:44,859 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 09:09:44,862 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 09:09:44,868 [main:117] - GENERATED CALL = (1u until 9u).joinToString("qgzxm", "hhdiv", StringBuilder(1705282425), two(), "qccyf", {a: T -> "rprxd"})
2021-03-12 09:09:44,868 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.UIntRange[DeserializedPropertyDescriptor@1cb25d15], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b5abe35]]
2021-03-12 09:09:44,869 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b5abe35]
2021-03-12 09:09:44,869 [main:117] - GENERATED CALL = (1u until 9u).step.toString(two())
2021-03-12 09:09:44,869 [main:113] - Case = [public final val first: kotlin.UInt defined in kotlin.ranges.UIntProgression[DeserializedPropertyDescriptor@254382a8], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@128d1276]]
2021-03-12 09:09:44,869 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@128d1276]
2021-03-12 09:09:44,995 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:09:44,998 [main:117] - GENERATED CALL = (1u until 9u).first.toString(1083676691)
2021-03-12 09:09:44,998 [main:114] - replacement of "FAIL" of type String is (1u until 9u).endInclusive.toString(two())
2021-03-12 09:09:45,148 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:09:45,149 [main:66] - Compilation checking started
2021-03-12 09:09:45,958 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = (1u until 9u).endInclusive.toString(two())

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 { suspendCoroutine<String> { cont ->
            @Suppress("UNCHECKED_CAST")
            prope1 = cont as Continuation<Any>
        }}
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:09:45,961 [main:107] - replacing (1, Int)
2021-03-12 09:09:45,961 [main:50] - replacing 1 Int
2021-03-12 09:09:45,961 [main:54] - Getting value of type Int
2021-03-12 09:09:46,111 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:09:46,115 [main:58] - GENERATED VALUE OF TYPE Int = 1075087087
2021-03-12 09:09:46,116 [main:61] - GENERATED IS CALL =false
2021-03-12 09:09:46,124 [main:67] - randomType = Char
2021-03-12 09:09:46,306 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:09:46,345 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@39e7c16d]
2021-03-12 09:09:46,345 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@244a60a0]
2021-03-12 09:09:46,346 [main:78] - Generated call from random type = ('펲').toByte().countTrailingZeroBits()
2021-03-12 09:09:46,346 [main:106] - GETTING Int from Int
2021-03-12 09:09:46,410 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3dfef25d], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3ef72d49]]
2021-03-12 09:09:46,410 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3dfef25d]
2021-03-12 09:09:46,411 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3ef72d49]
2021-03-12 09:09:46,411 [main:117] - GENERATED CALL = (two()).toByte().toInt()
2021-03-12 09:09:46,411 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3ce30c43], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@16334851]]
2021-03-12 09:09:46,411 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3ce30c43]
2021-03-12 09:09:46,412 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@16334851]
2021-03-12 09:09:46,552 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:09:46,555 [main:117] - GENERATED CALL = (two()).toFloat().compareTo(-91)
2021-03-12 09:09:46,556 [main:113] - Case = [public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@703898a9]]
2021-03-12 09:09:46,556 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@703898a9]
2021-03-12 09:09:46,556 [main:117] - GENERATED CALL = (two()).unaryMinus()
2021-03-12 09:09:46,556 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6af2cbd5]]
2021-03-12 09:09:46,556 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1]
2021-03-12 09:09:46,556 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6af2cbd5]
2021-03-12 09:09:46,693 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:09:46,697 [main:117] - GENERATED CALL = (two()).toInt().times(43)
2021-03-12 09:09:46,697 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@617fea5b]]
2021-03-12 09:09:46,697 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1]
2021-03-12 09:09:46,697 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@617fea5b]
2021-03-12 09:09:46,848 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:09:46,851 [main:117] - GENERATED CALL = (two()).toInt().div(45)
2021-03-12 09:09:46,851 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fc15525]]
2021-03-12 09:09:46,851 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896]
2021-03-12 09:09:46,851 [main:149] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fc15525]
2021-03-12 09:09:46,851 [main:117] - GENERATED CALL = (two()).toChar().digitToInt()
2021-03-12 09:09:46,851 [main:113] - Case = [public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f89fc23]]
2021-03-12 09:09:46,851 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f89fc23]
2021-03-12 09:09:46,851 [main:117] - GENERATED CALL = (two()).xor(two())
2021-03-12 09:09:46,851 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d8ffe07]]
2021-03-12 09:09:46,852 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae]
2021-03-12 09:09:46,852 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d8ffe07]
2021-03-12 09:09:46,852 [main:117] - GENERATED CALL = (two()).compareTo(two()).countTrailingZeroBits()
2021-03-12 09:09:46,852 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a0f91b6]]
2021-03-12 09:09:46,852 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae]
2021-03-12 09:09:46,852 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a0f91b6]
2021-03-12 09:09:46,852 [main:117] - GENERATED CALL = (two()).compareTo(two()).or(two())
2021-03-12 09:09:46,852 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@21e4c4d4]]
2021-03-12 09:09:46,852 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@21e4c4d4]
2021-03-12 09:09:46,852 [main:117] - GENERATED CALL = (two()).countLeadingZeroBits()
2021-03-12 09:09:46,853 [main:114] - replacement of 1 of type Int is (two()).compareTo(two()).countTrailingZeroBits()
2021-03-12 09:09:46,986 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:09:46,986 [main:66] - Compilation checking started
2021-03-12 09:09:47,670 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = (1u until 9u).endInclusive.toString(two())

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 { suspendCoroutine<String> { cont ->
            @Suppress("UNCHECKED_CAST")
            prope1 = cont as Continuation<Any>
        }}
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if (prope5 != i) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:09:47,673 [main:107] - replacing ({ suspendCoroutine<String> { cont ->
            @Suppress("UNCHECKED_CAST")
            prope1 = cont as Continuation<Any>
        }}, SuspendFunction1<Kla0, Unit>)
2021-03-12 09:09:47,675 [main:50] - replacing { suspendCoroutine<String> { cont ->
            @Suppress("UNCHECKED_CAST")
            prope1 = cont as Continuation<Any>
        }} SuspendFunction1<Kla0, Unit>
2021-03-12 09:09:47,675 [main:54] - Getting value of type SuspendFunction1<Kla0, Unit>
2021-03-12 09:09:47,858 [main:302] - generating value of type = SuspendFunction1<Kla0, Unit> false depth = 0
2021-03-12 09:09:47,862 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:09:48,003 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 09:09:48,007 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 09:09:48,334 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 09:09:48,337 [main:95] - GENERATED = check(true)
2021-03-12 09:09:48,337 [main:58] - GENERATED VALUE OF TYPE SuspendFunction1<Kla0, Unit> = {a: Kla0 -> check(true)}
2021-03-12 09:09:48,338 [main:61] - GENERATED IS CALL =false
2021-03-12 09:09:48,713 [main:67] - randomType = Array<Kla6>
2021-03-12 09:09:48,872 [main:302] - generating value of type = Array<Kla6> false depth = 0
2021-03-12 09:09:49,046 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Kla6): Array<Kla6> = TODO()
2021-03-12 09:09:49,050 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Kla6): Array<Kla6> = TODO()
2021-03-12 09:09:49,511 [main:302] - generating value of type = Int true depth = 3
2021-03-12 09:09:49,514 [main:302] - generating value of type = Function1<Int, Kla6> false depth = 3
2021-03-12 09:09:49,516 [main:302] - generating value of type = Kla6 false depth = 4
2021-03-12 09:09:49,519 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}
2021-03-12 09:09:49,520 [main:95] - GENERATED = Array<Kla6>(663846081, {a: Int -> Kla6})
2021-03-12 09:09:49,540 [main:106] - GETTING SuspendFunction1<Kla0, Unit> from ULongRange
2021-03-12 09:09:49,574 [main:106] - GETTING SuspendFunction1<Kla0, Unit> from UIntRange
2021-03-12 09:09:49,605 [main:106] - GETTING SuspendFunction1<Kla0, Unit> from Int
2021-03-12 09:09:49,652 [main:114] - replacement of { suspendCoroutine<String> { cont ->
            @Suppress("UNCHECKED_CAST")
            prope1 = cont as Continuation<Any>
        }} of type SuspendFunction1<Kla0, Unit> is {a: Kla0 -> check(true)}
2021-03-12 09:09:49,785 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 09:09:49,786 [main:66] - Compilation checking started
2021-03-12 09:09:50,625 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = (1u until 9u).endInclusive.toString(two())

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 {a: Kla0 -> check(true)}
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if (prope5 != i) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:09:50,629 [main:107] - replacing (prope0.exceptionOrNull(), Throwable?)
2021-03-12 09:09:50,630 [main:50] - replacing prope0.exceptionOrNull() Throwable?
2021-03-12 09:09:50,630 [main:54] - Getting value of type Throwable?
2021-03-12 09:09:50,795 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 09:09:50,947 [main:43] - GENERATING CALL OF fun UninitializedPropertyAccessException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 09:09:50,949 [main:61] - WITHOUT TYPE PARAMS = fun UninitializedPropertyAccessException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 09:09:51,241 [main:302] - generating value of type = Throwable false depth = 3
2021-03-12 09:09:51,247 [main:95] - GENERATED = UninitializedPropertyAccessException(NoSuchElementException())
2021-03-12 09:09:51,247 [main:58] - GENERATED VALUE OF TYPE Throwable? = UninitializedPropertyAccessException(NoSuchElementException())
2021-03-12 09:09:51,247 [main:61] - GENERATED IS CALL =true
2021-03-12 09:09:51,389 [main:67] - randomType = Float
2021-03-12 09:09:51,524 [main:302] - generating value of type = Float true depth = 0
2021-03-12 09:09:51,569 [main:106] - GETTING Throwable? from UIntRange
2021-03-12 09:09:51,602 [main:106] - GETTING Throwable? from Int
2021-03-12 09:09:51,657 [main:106] - GETTING Throwable? from ULongRange
2021-03-12 09:09:51,695 [main:114] - replacement of prope0.exceptionOrNull() of type Throwable? is UninitializedPropertyAccessException(NoSuchElementException())
2021-03-12 09:09:51,850 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 09:09:51,853 [main:107] - replacing (0, Int)
2021-03-12 09:09:51,853 [main:50] - replacing 0 Int
2021-03-12 09:09:51,853 [main:54] - Getting value of type Int
2021-03-12 09:09:51,995 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:09:51,997 [main:58] - GENERATED VALUE OF TYPE Int = 58093773
2021-03-12 09:09:51,997 [main:61] - GENERATED IS CALL =false
2021-03-12 09:09:52,005 [main:67] - randomType = Kla5
2021-03-12 09:09:52,138 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 09:09:52,141 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if (prope5 != i) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 09:09:52,154 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@31714ae9]
2021-03-12 09:09:52,282 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:09:52,284 [main:78] - Generated call from random type = (Kla5()).prope6.compareTo(false)
2021-03-12 09:09:52,284 [main:106] - GETTING Int from Int
2021-03-12 09:09:52,322 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3dfef25d], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3ef72d49]]
2021-03-12 09:09:52,322 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3dfef25d]
2021-03-12 09:09:52,322 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3ef72d49]
2021-03-12 09:09:52,322 [main:117] - GENERATED CALL = (two()).toByte().toInt()
2021-03-12 09:09:52,322 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d664d50]]
2021-03-12 09:09:52,322 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1]
2021-03-12 09:09:52,322 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d664d50]
2021-03-12 09:09:52,323 [main:117] - GENERATED CALL = (two()).toInt().takeLowestOneBit()
2021-03-12 09:09:52,323 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2fce34b7]]
2021-03-12 09:09:52,323 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae]
2021-03-12 09:09:52,467 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:09:52,469 [main:117] - GENERATED CALL = (two()).compareTo(1683915097).sign
2021-03-12 09:09:52,469 [main:113] - Case = [public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4b6167]]
2021-03-12 09:09:52,470 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4b6167]
2021-03-12 09:09:52,470 [main:117] - GENERATED CALL = (two()).toInt()
2021-03-12 09:09:52,470 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a0f91b6]]
2021-03-12 09:09:52,470 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae]
2021-03-12 09:09:52,470 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a0f91b6]
2021-03-12 09:09:52,599 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:09:52,602 [main:117] - GENERATED CALL = (two()).compareTo(two()).or(-125303819)
2021-03-12 09:09:52,602 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@235d6e6c]]
2021-03-12 09:09:52,602 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae]
2021-03-12 09:09:52,602 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@235d6e6c]
2021-03-12 09:09:52,602 [main:117] - GENERATED CALL = (two()).compareTo(two()).dec()
2021-03-12 09:09:52,602 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d8ffe07]]
2021-03-12 09:09:52,602 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae]
2021-03-12 09:09:52,730 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:09:52,733 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d8ffe07]
2021-03-12 09:09:52,733 [main:117] - GENERATED CALL = (two()).compareTo(-753246133).countTrailingZeroBits()
2021-03-12 09:09:52,733 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@290b5e62], public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@dcba21c]]
2021-03-12 09:09:52,733 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@290b5e62]
2021-03-12 09:09:52,859 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:09:52,862 [main:117] - GENERATED CALL = (two()).rangeTo(19).endInclusive
2021-03-12 09:09:52,862 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@11177e20]]
2021-03-12 09:09:52,862 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1]
2021-03-12 09:09:52,862 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@11177e20]
2021-03-12 09:09:52,862 [main:117] - GENERATED CALL = (two()).toInt().rotateLeft(two())
2021-03-12 09:09:52,862 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3dfef25d], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@78071dc3]]
2021-03-12 09:09:52,862 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3dfef25d]
2021-03-12 09:09:52,862 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@78071dc3]
2021-03-12 09:09:52,992 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:09:52,994 [main:117] - GENERATED CALL = (two()).toByte().rem(119)
2021-03-12 09:09:52,994 [main:114] - replacement of 0 of type Int is (two()).compareTo(1683915097).sign
2021-03-12 09:09:53,152 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:09:53,153 [main:66] - Compilation checking started
2021-03-12 09:09:53,620 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = (1u until 9u).endInclusive.toString(two())

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 {a: Kla0 -> check(true)}
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = (two()).compareTo(1683915097).sign
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if (prope5 != i) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:09:53,622 [main:107] - replacing (prope6, Boolean)
2021-03-12 09:09:53,623 [main:50] - replacing prope6 Boolean
2021-03-12 09:09:53,623 [main:54] - Getting value of type Boolean
2021-03-12 09:09:53,754 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:09:53,756 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 09:09:53,756 [main:61] - GENERATED IS CALL =false
2021-03-12 09:09:53,760 [main:67] - randomType = String
2021-03-12 09:09:53,890 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:09:53,916 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6db2c43a]
2021-03-12 09:09:53,917 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4075b827]
2021-03-12 09:09:53,917 [main:78] - Generated call from random type = ("bmoal").get(two()).isLowSurrogate()
2021-03-12 09:09:53,918 [main:106] - GETTING Boolean from Int
2021-03-12 09:09:53,962 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3db4ba49]]
2021-03-12 09:09:53,962 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3db4ba49]
2021-03-12 09:09:54,090 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:09:54,090 [main:117] - GENERATED CALL = (two()).equals("ubshk")
2021-03-12 09:09:54,090 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ae43d77]]
2021-03-12 09:09:54,090 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896]
2021-03-12 09:09:54,090 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ae43d77]
2021-03-12 09:09:54,091 [main:117] - GENERATED CALL = (two()).toChar().isDigit()
2021-03-12 09:09:54,091 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ff36540], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@395d0861]]
2021-03-12 09:09:54,091 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ff36540]
2021-03-12 09:09:54,091 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@395d0861]
2021-03-12 09:09:54,220 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:09:54,220 [main:117] - GENERATED CALL = (two()).toShort().equals("gprki")
2021-03-12 09:09:54,220 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78635f79], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@40426682]]
2021-03-12 09:09:54,220 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78635f79]
2021-03-12 09:09:54,221 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@40426682]
2021-03-12 09:09:54,221 [main:117] - GENERATED CALL = (two()).toDouble().isFinite()
2021-03-12 09:09:54,221 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@284f0562]]
2021-03-12 09:09:54,221 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896]
2021-03-12 09:09:54,221 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@284f0562]
2021-03-12 09:09:54,221 [main:117] - GENERATED CALL = (two()).toChar().isLetterOrDigit()
2021-03-12 09:09:54,221 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78635f79], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4f19f08e]]
2021-03-12 09:09:54,221 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78635f79]
2021-03-12 09:09:54,221 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4f19f08e]
2021-03-12 09:09:54,349 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:09:54,349 [main:117] - GENERATED CALL = (two()).toDouble().equals("ryocs")
2021-03-12 09:09:54,349 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@396ed1aa]]
2021-03-12 09:09:54,349 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896]
2021-03-12 09:09:54,349 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@396ed1aa]
2021-03-12 09:09:54,350 [main:117] - GENERATED CALL = (two()).toChar().isUpperCase()
2021-03-12 09:09:54,350 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3db4ba49], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6891f0e5]]
2021-03-12 09:09:54,350 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3db4ba49]
2021-03-12 09:09:54,480 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:09:54,480 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6891f0e5]
2021-03-12 09:09:54,629 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:09:54,631 [main:117] - GENERATED CALL = (two()).equals("gxjtk").or(false)
2021-03-12 09:09:54,631 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3db4ba49]]
2021-03-12 09:09:54,631 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1]
2021-03-12 09:09:54,631 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3db4ba49]
2021-03-12 09:09:54,761 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:09:54,761 [main:117] - GENERATED CALL = (two()).toInt().equals("kemmp")
2021-03-12 09:09:54,761 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3db4ba49], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3236e8bc]]
2021-03-12 09:09:54,761 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3db4ba49]
2021-03-12 09:09:54,891 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:09:54,892 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3236e8bc]
2021-03-12 09:09:55,020 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:09:55,021 [main:117] - GENERATED CALL = (two()).equals("zlfsp").equals("eacjq")
2021-03-12 09:09:55,021 [main:114] - replacement of prope6 of type Boolean is false
2021-03-12 09:09:55,152 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-12 09:09:55,153 [main:66] - Compilation checking started
2021-03-12 09:09:55,545 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = (1u until 9u).endInclusive.toString(two())

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 {a: Kla0 -> check(true)}
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if (prope5 != i) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope3.prope7 = {
            prope3.false = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:09:55,547 [main:107] - replacing (0, Int)
2021-03-12 09:09:55,547 [main:50] - replacing 0 Int
2021-03-12 09:09:55,547 [main:54] - Getting value of type Int
2021-03-12 09:09:55,678 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:09:55,681 [main:58] - GENERATED VALUE OF TYPE Int = -149568109
2021-03-12 09:09:55,681 [main:61] - GENERATED IS CALL =false
2021-03-12 09:09:55,844 [main:67] - randomType = Double
2021-03-12 09:09:55,999 [main:302] - generating value of type = Double true depth = 0
2021-03-12 09:09:56,035 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@2025402]
2021-03-12 09:09:56,165 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:09:56,167 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4d2da8e6]
2021-03-12 09:09:56,296 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:09:56,299 [main:78] - Generated call from random type = (0.4809535623601674).compareTo(-113).coerceAtMost(-1748100045)
2021-03-12 09:09:56,300 [main:106] - GETTING Int from ULongRange
2021-03-12 09:09:56,334 [main:113] - Case = [public open val endInclusive: kotlin.ULong defined in kotlin.ranges.ULongRange[DeserializedPropertyDescriptor@4ad5892e], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.ULong.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1564d9cc]]
2021-03-12 09:09:56,334 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.ULong.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1564d9cc]
2021-03-12 09:09:56,334 [main:117] - GENERATED CALL = (1uL until 9uL).endInclusive.countOneBits()
2021-03-12 09:09:56,334 [main:113] - Case = [public final val step: kotlin.Long defined in kotlin.ranges.ULongRange[DeserializedPropertyDescriptor@517da33a], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@48b1f682]]
2021-03-12 09:09:56,334 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@48b1f682]
2021-03-12 09:09:56,334 [main:117] - GENERATED CALL = (1uL until 9uL).step.countLeadingZeroBits()
2021-03-12 09:09:56,335 [main:113] - Case = [public final val step: kotlin.Long defined in kotlin.ranges.ULongRange[DeserializedPropertyDescriptor@517da33a], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4f1c0bfe]]
2021-03-12 09:09:56,335 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4f1c0bfe]
2021-03-12 09:09:56,335 [main:117] - GENERATED CALL = (1uL until 9uL).step.countOneBits()
2021-03-12 09:09:56,335 [main:113] - Case = [public fun <@kotlin.internal.OnlyInputTypes T> kotlin.collections.Iterable<T>.indexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6ca919e]]
2021-03-12 09:09:56,335 [main:149] - GENERATING call of type public fun <@kotlin.internal.OnlyInputTypes T> kotlin.collections.Iterable<T>.indexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6ca919e]
2021-03-12 09:09:56,464 [main:302] - generating value of type = T false depth = 0
2021-03-12 09:09:56,606 [main:43] - GENERATING CALL OF fun <T> checkNotNull(value: Boolean): T = TODO()
2021-03-12 09:09:56,611 [main:61] - WITHOUT TYPE PARAMS = fun <T> checkNotNull(value: Boolean): T = TODO()
2021-03-12 09:09:56,752 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 09:09:56,755 [main:95] - GENERATED = checkNotNull<Boolean>(true)
2021-03-12 09:09:56,755 [main:117] - GENERATED CALL = (1uL until 9uL).indexOf(checkNotNull<Boolean>(true))
2021-03-12 09:09:56,755 [main:113] - Case = [public final val step: kotlin.Long defined in kotlin.ranges.ULongRange[DeserializedPropertyDescriptor@517da33a], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6e16e6c3]]
2021-03-12 09:09:56,755 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6e16e6c3]
2021-03-12 09:09:56,755 [main:117] - GENERATED CALL = (1uL until 9uL).step.countTrailingZeroBits()
2021-03-12 09:09:56,755 [main:113] - Case = [@kotlin.jvm.JvmName public fun kotlin.collections.Iterable<kotlin.Byte>.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@40d35e50]]
2021-03-12 09:09:56,755 [main:149] - GENERATING call of type @kotlin.jvm.JvmName public fun kotlin.collections.Iterable<kotlin.Byte>.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@40d35e50]
2021-03-12 09:09:56,756 [main:117] - GENERATED CALL = (1uL until 9uL).sum()
2021-03-12 09:09:56,756 [main:113] - Case = [public final val first: kotlin.ULong defined in kotlin.ranges.ULongProgression[DeserializedPropertyDescriptor@1ff228b1], @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@6a409cee]]
2021-03-12 09:09:56,756 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@6a409cee]
2021-03-12 09:09:56,888 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 09:09:56,890 [main:117] - GENERATED CALL = (1uL until 9uL).first.compareTo(96.toUByte())
2021-03-12 09:09:56,891 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.sumBy(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1084b6f7]]
2021-03-12 09:09:56,891 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.sumBy(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1084b6f7]
2021-03-12 09:09:57,022 [main:302] - generating value of type = Function1<T, Int> false depth = 0
2021-03-12 09:09:57,024 [main:302] - generating value of type = Int true depth = 1
2021-03-12 09:09:57,027 [main:117] - GENERATED CALL = (1uL until 9uL).sumBy({a: T -> -546277362})
2021-03-12 09:09:57,027 [main:113] - Case = [public final val first: kotlin.ULong defined in kotlin.ranges.ULongProgression[DeserializedPropertyDescriptor@1ff228b1], @kotlin.internal.InlineOnly public final inline fun toInt(): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@7c31caeb]]
2021-03-12 09:09:57,027 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toInt(): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@7c31caeb]
2021-03-12 09:09:57,027 [main:117] - GENERATED CALL = (1uL until 9uL).first.toInt()
2021-03-12 09:09:57,027 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2b8acd9d]]
2021-03-12 09:09:57,027 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2b8acd9d]
2021-03-12 09:09:57,155 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-12 09:09:57,157 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:09:57,159 [main:117] - GENERATED CALL = (1uL until 9uL).indexOfLast({a: T -> false})
2021-03-12 09:09:57,159 [main:114] - replacement of 0 of type Int is (1uL until 9uL).indexOfLast({a: T -> false})
2021-03-12 09:09:57,339 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:09:57,339 [main:66] - Compilation checking started
2021-03-12 09:09:57,774 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = (1u until 9u).endInclusive.toString(two())

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 {a: Kla0 -> check(true)}
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = (1uL until 9uL).indexOfLast({a: T -> false})
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if (prope5 != i) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:09:57,777 [main:107] - replacing (Kla4(), Kla4)
2021-03-12 09:09:57,777 [main:50] - replacing Kla4() Kla4
2021-03-12 09:09:57,777 [main:54] - Getting value of type Kla4
2021-03-12 09:09:57,936 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 09:09:57,939 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 09:09:57,939 [main:58] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-12 09:09:57,939 [main:61] - GENERATED IS CALL =true
2021-03-12 09:09:57,943 [main:67] - randomType = Boolean
2021-03-12 09:09:58,074 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:09:58,090 [main:106] - GETTING Kla4 from ULongRange
2021-03-12 09:09:58,120 [main:106] - GETTING Kla4 from UIntRange
2021-03-12 09:09:58,146 [main:106] - GETTING Kla4 from Int
2021-03-12 09:09:58,179 [main:114] - replacement of Kla4() of type Kla4 is Kla4()
2021-03-12 09:09:58,306 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 09:09:58,308 [main:107] - replacing (prope6, Boolean)
2021-03-12 09:09:58,308 [main:50] - replacing prope6 Boolean
2021-03-12 09:09:58,308 [main:54] - Getting value of type Boolean
2021-03-12 09:09:58,434 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:09:58,436 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 09:09:58,436 [main:61] - GENERATED IS CALL =false
2021-03-12 09:09:58,933 [main:67] - randomType = MutableMap<List<Kla6>, String>
2021-03-12 09:09:58,934 [main:106] - GETTING Boolean from Int
2021-03-12 09:09:58,975 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3ce30c43], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@15eae4fa]]
2021-03-12 09:09:58,975 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3ce30c43]
2021-03-12 09:09:58,975 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@15eae4fa]
2021-03-12 09:09:58,975 [main:117] - GENERATED CALL = (two()).toFloat().isNaN()
2021-03-12 09:09:58,975 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4075b827]]
2021-03-12 09:09:58,975 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896]
2021-03-12 09:09:58,975 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4075b827]
2021-03-12 09:09:58,975 [main:117] - GENERATED CALL = (two()).toChar().isLowSurrogate()
2021-03-12 09:09:58,975 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3db4ba49]]
2021-03-12 09:09:58,975 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1]
2021-03-12 09:09:58,976 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3db4ba49]
2021-03-12 09:09:59,102 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:09:59,103 [main:117] - GENERATED CALL = (two()).toInt().equals("xlxan")
2021-03-12 09:09:59,103 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4363c277]]
2021-03-12 09:09:59,103 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896]
2021-03-12 09:09:59,103 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4363c277]
2021-03-12 09:09:59,103 [main:117] - GENERATED CALL = (two()).toChar().isTitleCase()
2021-03-12 09:09:59,103 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31f97aea]]
2021-03-12 09:09:59,103 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896]
2021-03-12 09:09:59,103 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31f97aea]
2021-03-12 09:09:59,238 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:09:59,374 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:09:59,376 [main:117] - GENERATED CALL = (two()).toChar().equals('⅌', true)
2021-03-12 09:09:59,376 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3db4ba49], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3c3c290e]]
2021-03-12 09:09:59,376 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3db4ba49]
2021-03-12 09:09:59,505 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:09:59,505 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3c3c290e]
2021-03-12 09:09:59,635 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:09:59,637 [main:117] - GENERATED CALL = (two()).equals("ttjvz").and(true)
2021-03-12 09:09:59,637 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3db4ba49], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3236e8bc]]
2021-03-12 09:09:59,637 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3db4ba49]
2021-03-12 09:09:59,769 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:09:59,770 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3236e8bc]
2021-03-12 09:09:59,896 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:09:59,896 [main:117] - GENERATED CALL = (two()).equals("kdvwo").equals("cndhd")
2021-03-12 09:09:59,897 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@459be900]]
2021-03-12 09:09:59,897 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896]
2021-03-12 09:09:59,897 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@459be900]
2021-03-12 09:09:59,897 [main:117] - GENERATED CALL = (two()).toChar().isISOControl()
2021-03-12 09:09:59,897 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b11c9b7]]
2021-03-12 09:09:59,897 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896]
2021-03-12 09:09:59,897 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b11c9b7]
2021-03-12 09:09:59,897 [main:117] - GENERATED CALL = (two()).toChar().isLetter()
2021-03-12 09:09:59,897 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@396ed1aa]]
2021-03-12 09:09:59,897 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896]
2021-03-12 09:09:59,897 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@396ed1aa]
2021-03-12 09:09:59,898 [main:117] - GENERATED CALL = (two()).toChar().isUpperCase()
2021-03-12 09:09:59,898 [main:114] - replacement of prope6 of type Boolean is (two()).equals("kdvwo").equals("cndhd")
2021-03-12 09:10:00,047 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:10:00,047 [main:66] - Compilation checking started
2021-03-12 09:10:00,470 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = (1u until 9u).endInclusive.toString(two())

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 {a: Kla0 -> check(true)}
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if (prope5 != i) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope3.prope7 = {
            prope3.(two()).equals("kdvwo").equals("cndhd") = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:10:00,472 [main:107] - replacing ("tail-call optimization hit: method " + method, String)
2021-03-12 09:10:00,472 [main:50] - replacing "tail-call optimization hit: method " + method String
2021-03-12 09:10:00,473 [main:54] - Getting value of type String
2021-03-12 09:10:00,622 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:10:00,624 [main:58] - GENERATED VALUE OF TYPE String = "rwbkh"
2021-03-12 09:10:00,624 [main:61] - GENERATED IS CALL =false
2021-03-12 09:10:00,628 [main:67] - randomType = UInt
2021-03-12 09:10:00,758 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 09:10:00,794 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@aebb516]
2021-03-12 09:10:00,794 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46eeb2f7]
2021-03-12 09:10:00,794 [main:78] - Generated call from random type = (499423193.toUInt()).toLong().toString(two())
2021-03-12 09:10:00,795 [main:106] - GETTING String from Int
2021-03-12 09:10:00,828 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b5abe35]]
2021-03-12 09:10:00,828 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b5abe35]
2021-03-12 09:10:00,960 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:10:00,963 [main:117] - GENERATED CALL = (two()).toString(-83320057)
2021-03-12 09:10:00,963 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@14d8c418], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46eeb2f7]]
2021-03-12 09:10:00,963 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@14d8c418]
2021-03-12 09:10:00,963 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46eeb2f7]
2021-03-12 09:10:00,963 [main:117] - GENERATED CALL = (two()).toLong().toString(two())
2021-03-12 09:10:00,963 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@565e1e09]]
2021-03-12 09:10:00,963 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896]
2021-03-12 09:10:00,963 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@565e1e09]
2021-03-12 09:10:01,102 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:10:01,104 [main:117] - GENERATED CALL = (two()).toChar().plus("iuxcz")
2021-03-12 09:10:01,104 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c8a7cb7]]
2021-03-12 09:10:01,104 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896]
2021-03-12 09:10:01,105 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c8a7cb7]
2021-03-12 09:10:01,105 [main:117] - GENERATED CALL = (two()).toChar().uppercase()
2021-03-12 09:10:01,105 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d1103ac]]
2021-03-12 09:10:01,105 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896]
2021-03-12 09:10:01,105 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d1103ac]
2021-03-12 09:10:01,105 [main:117] - GENERATED CALL = (two()).toChar().titlecase()
2021-03-12 09:10:01,105 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b5abe35]]
2021-03-12 09:10:01,105 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1]
2021-03-12 09:10:01,105 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b5abe35]
2021-03-12 09:10:01,106 [main:117] - GENERATED CALL = (two()).toInt().toString(two())
2021-03-12 09:10:01,106 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1a5fdcae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46eeb2f7]]
2021-03-12 09:10:01,106 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1a5fdcae]
2021-03-12 09:10:01,238 [main:302] - generating value of type = Long true depth = 0
2021-03-12 09:10:01,240 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46eeb2f7]
2021-03-12 09:10:01,240 [main:117] - GENERATED CALL = (two()).div(-899031451530676359).toString(two())
2021-03-12 09:10:01,240 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4763293a]]
2021-03-12 09:10:01,240 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896]
2021-03-12 09:10:01,241 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4763293a]
2021-03-12 09:10:01,241 [main:117] - GENERATED CALL = (two()).toChar().lowercase()
2021-03-12 09:10:01,241 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ff36540], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c194fe]]
2021-03-12 09:10:01,241 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ff36540]
2021-03-12 09:10:01,241 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c194fe]
2021-03-12 09:10:01,241 [main:117] - GENERATED CALL = (two()).toShort().toString(two())
2021-03-12 09:10:01,241 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b5abe35]]
2021-03-12 09:10:01,241 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae]
2021-03-12 09:10:01,241 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b5abe35]
2021-03-12 09:10:01,241 [main:117] - GENERATED CALL = (two()).compareTo(two()).toString(two())
2021-03-12 09:10:01,241 [main:114] - replacement of "tail-call optimization hit: method " + method of type String is (two()).toInt().toString(two())
2021-03-12 09:10:01,373 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:10:01,373 [main:66] - Compilation checking started
2021-03-12 09:10:02,070 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = (1u until 9u).endInclusive.toString(two())

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 {a: Kla0 -> check(true)}
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true } ?: error((two()).toInt().toString(two()) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if (prope5 != i) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:10:02,073 [main:107] - replacing ("\n", String)
2021-03-12 09:10:02,074 [main:50] - replacing "\n" String
2021-03-12 09:10:02,075 [main:54] - Getting value of type String
2021-03-12 09:10:02,259 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:10:02,261 [main:58] - GENERATED VALUE OF TYPE String = "ieean"
2021-03-12 09:10:02,261 [main:61] - GENERATED IS CALL =false
2021-03-12 09:10:02,877 [main:67] - randomType = HashMap<UShort?, Kla5>?
2021-03-12 09:10:03,005 [main:302] - generating value of type = HashMap<UShort?, Kla5> false depth = 0
2021-03-12 09:10:03,139 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(pairs: Pair<UShort?, Kla5>): HashMap<UShort?, Kla5> = TODO()
2021-03-12 09:10:03,142 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(pairs: Pair<UShort?, Kla5>): HashMap<UShort?, Kla5> = TODO()
2021-03-12 09:10:03,301 [main:302] - generating value of type = Pair<UShort?, Kla5> false depth = 3
2021-03-12 09:10:03,436 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UShort?, second: Kla5): Pair<UShort?, Kla5> = TODO()
2021-03-12 09:10:03,439 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UShort?, second: Kla5): Pair<UShort?, Kla5> = TODO()
2021-03-12 09:10:03,574 [main:302] - generating value of type = UShort true depth = 6
2021-03-12 09:10:03,577 [main:302] - generating value of type = Kla5 false depth = 6
2021-03-12 09:10:03,579 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if (prope5 != i) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 09:10:03,579 [main:95] - GENERATED = Pair<UShort?, Kla5>(20250.toUShort(), Kla5())
2021-03-12 09:10:03,580 [main:95] - GENERATED = hashMapOf<UShort?, Kla5>(Pair<UShort?, Kla5>(20250.toUShort(), Kla5()))
2021-03-12 09:10:03,741 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b5abe35]
2021-03-12 09:10:03,742 [main:78] - Generated call from random type = (hashMapOf<UShort?, Kla5>(Pair<UShort?, Kla5>(20250.toUShort(), Kla5())))?.size.toString(two())
2021-03-12 09:10:03,743 [main:106] - GETTING String from ULongRange
2021-03-12 09:10:03,792 [main:113] - Case = [public final val step: kotlin.Long defined in kotlin.ranges.ULongRange[DeserializedPropertyDescriptor@517da33a], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46eeb2f7]]
2021-03-12 09:10:03,792 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46eeb2f7]
2021-03-12 09:10:03,793 [main:117] - GENERATED CALL = (1uL until 9uL).step.toString(two())
2021-03-12 09:10:03,793 [main:113] - Case = [public final val first: kotlin.ULong defined in kotlin.ranges.ULongProgression[DeserializedPropertyDescriptor@1ff228b1], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b9fb00b]]
2021-03-12 09:10:03,793 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b9fb00b]
2021-03-12 09:10:03,794 [main:117] - GENERATED CALL = (1uL until 9uL).first.toString(two())
2021-03-12 09:10:03,794 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5036158]]
2021-03-12 09:10:03,794 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5036158]
2021-03-12 09:10:03,962 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:10:04,120 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:10:04,269 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:10:04,411 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:10:04,542 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:10:04,681 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 09:10:04,684 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 09:10:04,689 [main:117] - GENERATED CALL = (1uL until 9uL).joinToString("epquy", "cfzbc", "vaokg", 837714891, "nlkjt", {a: T -> "qgqry"})
2021-03-12 09:10:04,689 [main:113] - Case = [public open val endInclusive: kotlin.ULong defined in kotlin.ranges.ULongRange[DeserializedPropertyDescriptor@4ad5892e], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b9fb00b]]
2021-03-12 09:10:04,689 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b9fb00b]
2021-03-12 09:10:04,690 [main:117] - GENERATED CALL = (1uL until 9uL).endInclusive.toString(two())
2021-03-12 09:10:04,690 [main:114] - replacement of "\n" of type String is (1uL until 9uL).step.toString(two())
2021-03-12 09:10:04,843 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:10:04,843 [main:66] - Compilation checking started
2021-03-12 09:10:05,543 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = (1u until 9u).endInclusive.toString(two())

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 {a: Kla0 -> check(true)}
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = (1uL until 9uL).step.toString(two()))) }
    }

    fun fu8(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true } ?: error((two()).toInt().toString(two()) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if (prope5 != i) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:10:05,547 [main:107] - replacing (prope0.getOrThrow(), Ty0)
2021-03-12 09:10:05,548 [main:50] - replacing prope0.getOrThrow() Ty0
2021-03-12 09:10:05,548 [main:54] - Getting value of type Ty0
2021-03-12 09:10:05,731 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 09:10:05,737 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 09:10:05,743 [main:67] - randomType = UInt
2021-03-12 09:10:05,879 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 09:10:05,925 [main:106] - GETTING Ty0 from UIntRange
2021-03-12 09:10:05,969 [main:106] - GETTING Ty0 from Int
2021-03-12 09:10:06,025 [main:106] - GETTING Ty0 from ULongRange
2021-03-12 09:10:06,067 [main:111] - Cant find and generate replacement for prope0.getOrThrow() type Ty0
2021-03-12 09:10:06,067 [main:107] - replacing (it.message, String?)
2021-03-12 09:10:06,068 [main:50] - replacing it.message String?
2021-03-12 09:10:06,068 [main:54] - Getting value of type String?
2021-03-12 09:10:06,215 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:10:06,218 [main:58] - GENERATED VALUE OF TYPE String? = "bmmgs"
2021-03-12 09:10:06,218 [main:61] - GENERATED IS CALL =false
2021-03-12 09:10:06,378 [main:67] - randomType = UShort
2021-03-12 09:10:06,516 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 09:10:06,559 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@7131e739]
2021-03-12 09:10:06,707 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 09:10:06,710 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b5abe35]
2021-03-12 09:10:06,842 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:10:06,845 [main:78] - Generated call from random type = (19422.toUShort()).compareTo(11.toUByte()).toString(-1268859974)
2021-03-12 09:10:06,846 [main:106] - GETTING String? from Int
2021-03-12 09:10:06,881 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@565e1e09]]
2021-03-12 09:10:06,881 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896]
2021-03-12 09:10:06,881 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@565e1e09]
2021-03-12 09:10:07,011 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:10:07,014 [main:117] - GENERATED CALL = (two())?.toChar().plus("ywodh")
2021-03-12 09:10:07,014 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@14d8c418], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46eeb2f7]]
2021-03-12 09:10:07,014 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@14d8c418]
2021-03-12 09:10:07,014 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46eeb2f7]
2021-03-12 09:10:07,014 [main:117] - GENERATED CALL = (two())?.toLong().toString(two())
2021-03-12 09:10:07,014 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b5abe35]]
2021-03-12 09:10:07,014 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1]
2021-03-12 09:10:07,014 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b5abe35]
2021-03-12 09:10:07,015 [main:117] - GENERATED CALL = (two())?.toInt().toString(two())
2021-03-12 09:10:07,015 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4763293a]]
2021-03-12 09:10:07,015 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896]
2021-03-12 09:10:07,015 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4763293a]
2021-03-12 09:10:07,015 [main:117] - GENERATED CALL = (two())?.toChar().lowercase()
2021-03-12 09:10:07,015 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c8a7cb7]]
2021-03-12 09:10:07,015 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896]
2021-03-12 09:10:07,015 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c8a7cb7]
2021-03-12 09:10:07,015 [main:117] - GENERATED CALL = (two())?.toChar().uppercase()
2021-03-12 09:10:07,015 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ff36540], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c194fe]]
2021-03-12 09:10:07,015 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ff36540]
2021-03-12 09:10:07,016 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c194fe]
2021-03-12 09:10:07,016 [main:117] - GENERATED CALL = (two())?.toShort().toString(two())
2021-03-12 09:10:07,016 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b5abe35]]
2021-03-12 09:10:07,016 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae]
2021-03-12 09:10:07,016 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b5abe35]
2021-03-12 09:10:07,156 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:10:07,159 [main:117] - GENERATED CALL = (two())?.compareTo(two()).toString(479448474)
2021-03-12 09:10:07,159 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1a5fdcae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46eeb2f7]]
2021-03-12 09:10:07,159 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1a5fdcae]
2021-03-12 09:10:07,290 [main:302] - generating value of type = Long true depth = 0
2021-03-12 09:10:07,293 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46eeb2f7]
2021-03-12 09:10:07,293 [main:117] - GENERATED CALL = (two())?.div(8590470674279827256).toString(two())
2021-03-12 09:10:07,293 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b5abe35]]
2021-03-12 09:10:07,293 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b5abe35]
2021-03-12 09:10:07,294 [main:117] - GENERATED CALL = (two())?.toString(two())
2021-03-12 09:10:07,294 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3dfef25d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f9dc957]]
2021-03-12 09:10:07,294 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3dfef25d]
2021-03-12 09:10:07,294 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f9dc957]
2021-03-12 09:10:07,431 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:10:07,434 [main:117] - GENERATED CALL = (two())?.toByte().toString(1722057256)
2021-03-12 09:10:07,434 [main:114] - replacement of it.message of type String? is (two())?.toInt().toString(two())
2021-03-12 09:10:07,565 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:10:07,565 [main:66] - Compilation checking started
2021-03-12 09:10:08,248 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = (1u until 9u).endInclusive.toString(two())

fun fu0(prope1: suspend () -> Unit) {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope1.startCoroutine(fu3 {
        prope0 = (two())?.toInt().toString(two())!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 {a: Kla0 -> check(true)}
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = (1uL until 9uL).step.toString(two()))) }
    }

    fun fu8(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true } ?: error((two()).toInt().toString(two()) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if (prope5 != i) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:10:08,252 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 09:10:08,252 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 09:10:08,252 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 09:10:08,448 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 09:10:08,454 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 09:10:08,610 [main:67] - randomType = Kla6
2021-03-12 09:10:08,741 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 09:10:08,744 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}
2021-03-12 09:10:08,782 [main:106] - GETTING EmptyCoroutineContext from ULongRange
2021-03-12 09:10:08,815 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 09:10:08,849 [main:106] - GETTING EmptyCoroutineContext from UIntRange
2021-03-12 09:10:08,881 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 09:10:08,881 [main:107] - replacing ((two()).toInt().toString(two()) + " has no state-machine " +
                prope4.joinToString(separator = "\n"), String)
2021-03-12 09:10:08,881 [main:50] - replacing (two()).toInt().toString(two()) + " has no state-machine " +
                prope4.joinToString(separator = "\n") String
2021-03-12 09:10:08,882 [main:54] - Getting value of type String
2021-03-12 09:10:09,026 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:10:09,028 [main:58] - GENERATED VALUE OF TYPE String = "glkml"
2021-03-12 09:10:09,029 [main:61] - GENERATED IS CALL =false
2021-03-12 09:10:09,034 [main:67] - randomType = ULong
2021-03-12 09:10:09,171 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 09:10:09,213 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@28eaacf]
2021-03-12 09:10:09,214 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d0dcfb1]
2021-03-12 09:10:09,348 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:10:09,351 [main:78] - Generated call from random type = (1175999352460025235.toULong()).toUByte().toString(410428326)
2021-03-12 09:10:09,352 [main:106] - GETTING String from ULongRange
2021-03-12 09:10:09,384 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5036158]]
2021-03-12 09:10:09,384 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5036158]
2021-03-12 09:10:09,516 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:10:09,656 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:10:09,791 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 09:10:09,795 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 09:10:10,111 [main:302] - generating value of type = String true depth = 3
2021-03-12 09:10:10,114 [main:95] - GENERATED = StringBuilder("mcpar")
2021-03-12 09:10:10,246 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:10:10,385 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:10:10,520 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:10:10,662 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 09:10:10,664 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 09:10:10,671 [main:117] - GENERATED CALL = (1uL until 9uL).joinToString("assco", StringBuilder("mcpar"), "xhsby", 775945588, StringBuilder(), {a: T -> "wvtcp"})
2021-03-12 09:10:10,671 [main:113] - Case = [public final val step: kotlin.Long defined in kotlin.ranges.ULongRange[DeserializedPropertyDescriptor@517da33a], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46eeb2f7]]
2021-03-12 09:10:10,671 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46eeb2f7]
2021-03-12 09:10:10,671 [main:117] - GENERATED CALL = (1uL until 9uL).step.toString(two())
2021-03-12 09:10:10,672 [main:113] - Case = [public final val first: kotlin.ULong defined in kotlin.ranges.ULongProgression[DeserializedPropertyDescriptor@1ff228b1], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b9fb00b]]
2021-03-12 09:10:10,672 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b9fb00b]
2021-03-12 09:10:10,672 [main:117] - GENERATED CALL = (1uL until 9uL).first.toString(two())
2021-03-12 09:10:10,672 [main:113] - Case = [public open val endInclusive: kotlin.ULong defined in kotlin.ranges.ULongRange[DeserializedPropertyDescriptor@4ad5892e], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b9fb00b]]
2021-03-12 09:10:10,672 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b9fb00b]
2021-03-12 09:10:10,672 [main:117] - GENERATED CALL = (1uL until 9uL).endInclusive.toString(two())
2021-03-12 09:10:10,672 [main:114] - replacement of (two()).toInt().toString(two()) + " has no state-machine " +
                prope4.joinToString(separator = "\n") of type String is (1175999352460025235.toULong()).toUByte().toString(410428326)
2021-03-12 09:10:10,811 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:10:10,811 [main:66] - Compilation checking started
2021-03-12 09:10:11,484 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = (1u until 9u).endInclusive.toString(two())

fun fu0(prope1: suspend () -> Unit) {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope1.startCoroutine(fu3 {
        prope0 = (two())?.toInt().toString(two())!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 {a: Kla0 -> check(true)}
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = (1uL until 9uL).step.toString(two()))) }
    }

    fun fu8(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true } ?: error((1175999352460025235.toULong()).toUByte().toString(410428326))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if (prope5 != i) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:10:11,486 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected ", String)
2021-03-12 09:10:11,486 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " String
2021-03-12 09:10:11,486 [main:54] - Getting value of type String
2021-03-12 09:10:11,623 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:10:11,626 [main:58] - GENERATED VALUE OF TYPE String = "zfgeu"
2021-03-12 09:10:11,627 [main:61] - GENERATED IS CALL =false
2021-03-12 09:10:11,632 [main:67] - randomType = UInt
2021-03-12 09:10:11,781 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 09:10:11,814 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@27545dbb]
2021-03-12 09:10:11,815 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c194fe]
2021-03-12 09:10:11,815 [main:78] - Generated call from random type = (2024173524.toUInt()).toShort().toString(two())
2021-03-12 09:10:11,816 [main:106] - GETTING String from ULongRange
2021-03-12 09:10:11,843 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5036158]]
2021-03-12 09:10:11,844 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5036158]
2021-03-12 09:10:11,973 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:10:12,108 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 09:10:12,111 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 09:10:12,395 [main:302] - generating value of type = Int true depth = 3
2021-03-12 09:10:12,397 [main:95] - GENERATED = StringBuilder(-1354192344)
2021-03-12 09:10:12,529 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:10:12,667 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:10:12,801 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:10:12,942 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 09:10:12,946 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 09:10:13,227 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 09:10:13,437 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 09:10:13,443 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 09:10:13,813 [main:302] - generating value of type = Int true depth = 6
2021-03-12 09:10:13,816 [main:95] - GENERATED = StringBuilder(1189419321)
2021-03-12 09:10:13,816 [main:95] - GENERATED = StringBuilder(StringBuilder(1189419321))
2021-03-12 09:10:13,949 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 09:10:13,952 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 09:10:14,088 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 09:10:14,092 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 09:10:14,376 [main:302] - generating value of type = String true depth = 4
2021-03-12 09:10:14,379 [main:95] - GENERATED = StringBuilder("fevqd")
2021-03-12 09:10:14,379 [main:117] - GENERATED CALL = (1uL until 9uL).joinToString(StringBuilder(-1354192344), "fdagb", "numhy", two(), StringBuilder(StringBuilder(1189419321)), {a: T -> StringBuilder("fevqd")})
2021-03-12 09:10:14,379 [main:113] - Case = [public final val first: kotlin.ULong defined in kotlin.ranges.ULongProgression[DeserializedPropertyDescriptor@1ff228b1], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b9fb00b]]
2021-03-12 09:10:14,379 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b9fb00b]
2021-03-12 09:10:14,379 [main:117] - GENERATED CALL = (1uL until 9uL).first.toString(two())
2021-03-12 09:10:14,380 [main:113] - Case = [public open val endInclusive: kotlin.ULong defined in kotlin.ranges.ULongRange[DeserializedPropertyDescriptor@4ad5892e], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b9fb00b]]
2021-03-12 09:10:14,380 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b9fb00b]
2021-03-12 09:10:14,380 [main:117] - GENERATED CALL = (1uL until 9uL).endInclusive.toString(two())
2021-03-12 09:10:14,380 [main:113] - Case = [public final val step: kotlin.Long defined in kotlin.ranges.ULongRange[DeserializedPropertyDescriptor@517da33a], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46eeb2f7]]
2021-03-12 09:10:14,380 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46eeb2f7]
2021-03-12 09:10:14,380 [main:117] - GENERATED CALL = (1uL until 9uL).step.toString(two())
2021-03-12 09:10:14,380 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " of type String is (1uL until 9uL).endInclusive.toString(two())
2021-03-12 09:10:14,510 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:10:14,510 [main:66] - Compilation checking started
2021-03-12 09:10:15,259 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = (1u until 9u).endInclusive.toString(two())

fun fu0(prope1: suspend () -> Unit) {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope1.startCoroutine(fu3 {
        prope0 = (two())?.toInt().toString(two())!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 {a: Kla0 -> check(true)}
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = (1uL until 9uL).step.toString(two()))) }
    }

    fun fu8(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true } ?: error((1175999352460025235.toULong()).toUByte().toString(410428326))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if (prope5 != i) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((1uL until 9uL).endInclusive.toString(two()) + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:10:15,263 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 09:10:15,263 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 09:10:15,263 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 09:10:15,438 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 09:10:15,445 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 09:10:15,450 [main:67] - randomType = Int
2021-03-12 09:10:15,582 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:10:15,625 [main:106] - GETTING EmptyCoroutineContext from ULongRange
2021-03-12 09:10:15,650 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 09:10:15,684 [main:106] - GETTING EmptyCoroutineContext from UIntRange
2021-03-12 09:10:15,711 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 09:10:15,711 [main:107] - replacing (" has state-machine ", String)
2021-03-12 09:10:15,711 [main:50] - replacing " has state-machine " String
2021-03-12 09:10:15,711 [main:54] - Getting value of type String
2021-03-12 09:10:15,842 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:10:15,844 [main:58] - GENERATED VALUE OF TYPE String = "iawqg"
2021-03-12 09:10:15,844 [main:61] - GENERATED IS CALL =false
2021-03-12 09:10:15,854 [main:67] - randomType = Kla5
2021-03-12 09:10:15,995 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 09:10:15,998 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if (prope5 != i) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((1uL until 9uL).endInclusive.toString(two()) + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 09:10:16,009 [main:106] - GETTING String from ULongRange
2021-03-12 09:10:16,042 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5036158]]
2021-03-12 09:10:16,042 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5036158]
2021-03-12 09:10:16,178 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:10:16,315 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 09:10:16,319 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 09:10:16,639 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 09:10:16,646 [main:95] - GENERATED = StringBuilder("xsfst")
2021-03-12 09:10:16,779 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:10:16,925 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 09:10:16,929 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 09:10:17,228 [main:302] - generating value of type = String true depth = 3
2021-03-12 09:10:17,230 [main:95] - GENERATED = StringBuilder("czzzv")
2021-03-12 09:10:17,364 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:10:17,502 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:10:17,637 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:10:17,775 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 09:10:17,778 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 09:10:17,784 [main:117] - GENERATED CALL = (1uL until 9uL).joinToString(StringBuilder("xsfst"), StringBuilder("czzzv"), "hozye", -2057528167, StringBuilder(), {a: T -> "wztea"})
2021-03-12 09:10:17,784 [main:113] - Case = [public open val endInclusive: kotlin.ULong defined in kotlin.ranges.ULongRange[DeserializedPropertyDescriptor@4ad5892e], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b9fb00b]]
2021-03-12 09:10:17,784 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b9fb00b]
2021-03-12 09:10:17,784 [main:117] - GENERATED CALL = (1uL until 9uL).endInclusive.toString(two())
2021-03-12 09:10:17,784 [main:113] - Case = [public final val step: kotlin.Long defined in kotlin.ranges.ULongRange[DeserializedPropertyDescriptor@517da33a], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46eeb2f7]]
2021-03-12 09:10:17,784 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46eeb2f7]
2021-03-12 09:10:17,915 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:10:17,918 [main:117] - GENERATED CALL = (1uL until 9uL).step.toString(-763259472)
2021-03-12 09:10:17,918 [main:113] - Case = [public final val first: kotlin.ULong defined in kotlin.ranges.ULongProgression[DeserializedPropertyDescriptor@1ff228b1], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b9fb00b]]
2021-03-12 09:10:17,918 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b9fb00b]
2021-03-12 09:10:18,055 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:10:18,058 [main:117] - GENERATED CALL = (1uL until 9uL).first.toString(-156820685)
2021-03-12 09:10:18,058 [main:114] - replacement of " has state-machine " of type String is (1uL until 9uL).endInclusive.toString(two())
2021-03-12 09:10:18,224 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:10:18,225 [main:66] - Compilation checking started
2021-03-12 09:10:18,944 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = (1u until 9u).endInclusive.toString(two())

fun fu0(prope1: suspend () -> Unit) {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope1.startCoroutine(fu3 {
        prope0 = (two())?.toInt().toString(two())!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 {a: Kla0 -> check(true)}
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (1uL until 9uL).endInclusive.toString(two()) +
                prope4.joinToString(separator = (1uL until 9uL).step.toString(two()))) }
    }

    fun fu8(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true } ?: error((1175999352460025235.toULong()).toUByte().toString(410428326))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if (prope5 != i) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((1uL until 9uL).endInclusive.toString(two()) + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:10:18,946 [main:107] - replacing (fu3 {
        prope0 = (two())?.toInt().toString(two())!!
    }, Continuation<Any?>)
2021-03-12 09:10:18,946 [main:50] - replacing fu3 {
        prope0 = (two())?.toInt().toString(two())!!
    } Continuation<Any?>
2021-03-12 09:10:18,946 [main:54] - Getting value of type Continuation<Any?>
2021-03-12 09:10:19,087 [main:302] - generating value of type = Continuation<Any?> false depth = 0
2021-03-12 09:10:19,228 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<Any?> = TODO()
2021-03-12 09:10:19,232 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<Any?> = TODO()
2021-03-12 09:10:19,689 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 09:10:19,830 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:10:19,833 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:10:20,163 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 09:10:20,311 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:10:20,315 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:10:20,813 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-12 09:10:20,975 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:10:20,979 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:10:21,462 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 12
2021-03-12 09:10:21,674 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:10:21,677 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:10:22,154 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 15
2021-03-12 09:10:22,300 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:10:22,304 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:10:22,770 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:10:22,770 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:10:22,770 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:10:22,770 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:10:22,770 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:10:22,770 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<Any?> = TODO()
2021-03-12 09:10:22,770 [main:58] - GENERATED VALUE OF TYPE Continuation<Any?> = 
2021-03-12 09:10:25,099 [main:67] - randomType = Triple<ArrayDeque<Function2<List<Kla4>, Double, HashMap<Function1<Kla6, MutableMap<Kla6, Double>>, Kla3<Kla0>>>>, Kla6, Float>
2021-03-12 09:10:25,260 [main:302] - generating value of type = Triple<ArrayDeque<Function2<List<Kla4>, Double, HashMap<Function1<Kla6, MutableMap<Kla6, Double>>, Kla3<Kla0>>>>, Kla6, Float> false depth = 0
2021-03-12 09:10:25,405 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: ArrayDeque<Function2<List<Kla4>, Double, HashMap<Function1<Kla6, MutableMap<Kla6, Double>>, Kla3<Kla0>>>>, second: Kla6, third: Float): Triple<ArrayDeque<Function2<List<Kla4>, Double, HashMap<Function1<Kla6, MutableMap<Kla6, Double>>, Kla3<Kla0>>>>, Kla6, Float> = TODO()
2021-03-12 09:10:25,409 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: ArrayDeque<Function2<List<Kla4>, Double, HashMap<Function1<Kla6, MutableMap<Kla6, Double>>, Kla3<Kla0>>>>, second: Kla6, third: Float): Triple<ArrayDeque<Function2<List<Kla4>, Double, HashMap<Function1<Kla6, MutableMap<Kla6, Double>>, Kla3<Kla0>>>>, Kla6, Float> = TODO()
2021-03-12 09:10:25,548 [main:302] - generating value of type = ArrayDeque<Function2<List<Kla4>, Double, HashMap<Function1<Kla6, MutableMap<Kla6, Double>>, Kla3<Kla0>>>> false depth = 3
2021-03-12 09:10:25,693 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Function2<List<Kla4>, Double, HashMap<Function1<Kla6, MutableMap<Kla6, Double>>, Kla3<Kla0>>>>): ArrayDeque<Function2<List<Kla4>, Double, HashMap<Function1<Kla6, MutableMap<Kla6, Double>>, Kla3<Kla0>>>> = TODO()
2021-03-12 09:10:25,696 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Function2<List<Kla4>, Double, HashMap<Function1<Kla6, MutableMap<Kla6, Double>>, Kla3<Kla0>>>>): ArrayDeque<Function2<List<Kla4>, Double, HashMap<Function1<Kla6, MutableMap<Kla6, Double>>, Kla3<Kla0>>>> = TODO()
2021-03-12 09:10:26,007 [main:302] - generating value of type = Collection<Function2<List<Kla4>, Double, HashMap<Function1<Kla6, MutableMap<Kla6, Double>>, Kla3<Kla0>>>> false depth = 6
2021-03-12 09:10:26,151 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): Collection<Function2<List<Kla4>, Double, HashMap<Function1<Kla6, MutableMap<Kla6, Double>>, Kla3<Kla0>>>> = TODO()
2021-03-12 09:10:26,154 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): Collection<Function2<List<Kla4>, Double, HashMap<Function1<Kla6, MutableMap<Kla6, Double>>, Kla3<Kla0>>>> = TODO()
2021-03-12 09:10:26,449 [main:302] - generating value of type = Int true depth = 9
2021-03-12 09:10:26,452 [main:95] - GENERATED = ArrayDeque<Function2<List<Kla4>, Double, HashMap<Function1<Kla6, MutableMap<Kla6, Double>>, Kla3<Kla0>>>>(-439662288)
2021-03-12 09:10:26,452 [main:95] - GENERATED = ArrayDeque<Function2<List<Kla4>, Double, HashMap<Function1<Kla6, MutableMap<Kla6, Double>>, Kla3<Kla0>>>>(ArrayDeque<Function2<List<Kla4>, Double, HashMap<Function1<Kla6, MutableMap<Kla6, Double>>, Kla3<Kla0>>>>(-439662288))
2021-03-12 09:10:26,453 [main:302] - generating value of type = Kla6 false depth = 3
2021-03-12 09:10:26,455 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}
2021-03-12 09:10:26,455 [main:302] - generating value of type = Float true depth = 3
2021-03-12 09:10:26,458 [main:95] - GENERATED = Triple<ArrayDeque<Function2<List<Kla4>, Double, HashMap<Function1<Kla6, MutableMap<Kla6, Double>>, Kla3<Kla0>>>>, Kla6, Float>(ArrayDeque<Function2<List<Kla4>, Double, HashMap<Function1<Kla6, MutableMap<Kla6, Double>>, Kla3<Kla0>>>>(ArrayDeque<Function2<List<Kla4>, Double, HashMap<Function1<Kla6, MutableMap<Kla6, Double>>, Kla3<Kla0>>>>(-439662288)), Kla6, 0.5904503f)
2021-03-12 09:10:26,503 [main:106] - GETTING Continuation<Any?> from Int
2021-03-12 09:10:26,541 [main:106] - GETTING Continuation<Any?> from ULongRange
2021-03-12 09:10:26,568 [main:106] - GETTING Continuation<Any?> from UIntRange
2021-03-12 09:10:26,593 [main:111] - Cant find and generate replacement for fu3 {
        prope0 = (two())?.toInt().toString(two())!!
    } type Continuation<Any?>
2021-03-12 09:10:26,593 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 09:10:26,593 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 09:10:26,593 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 09:10:26,725 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 09:10:26,730 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 09:10:27,557 [main:67] - randomType = Function2<ArrayDeque<ArrayDeque<UInt>>, ULong?, Kla2?>
2021-03-12 09:10:27,558 [main:106] - GETTING EmptyCoroutineContext from ULongRange
2021-03-12 09:10:27,589 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 09:10:27,623 [main:106] - GETTING EmptyCoroutineContext from UIntRange
2021-03-12 09:10:27,647 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 09:10:27,647 [main:107] - replacing (prope0.getOrThrow(), Ty0)
2021-03-12 09:10:27,647 [main:50] - replacing prope0.getOrThrow() Ty0
2021-03-12 09:10:27,647 [main:54] - Getting value of type Ty0
2021-03-12 09:10:27,780 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 09:10:27,785 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 09:10:27,791 [main:67] - randomType = String
2021-03-12 09:10:27,924 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:10:27,950 [main:106] - GETTING Ty0 from UIntRange
2021-03-12 09:10:27,977 [main:106] - GETTING Ty0 from Int
2021-03-12 09:10:28,010 [main:106] - GETTING Ty0 from ULongRange
2021-03-12 09:10:28,036 [main:111] - Cant find and generate replacement for prope0.getOrThrow() type Ty0
2021-03-12 09:10:28,036 [main:107] - replacing ((1uL until 9uL).endInclusive.toString(two()) + numberOfSuspensions + ", got " + prope5, String)
2021-03-12 09:10:28,036 [main:50] - replacing (1uL until 9uL).endInclusive.toString(two()) + numberOfSuspensions + ", got " + prope5 String
2021-03-12 09:10:28,036 [main:54] - Getting value of type String
2021-03-12 09:10:28,170 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:10:28,172 [main:58] - GENERATED VALUE OF TYPE String = "fwyne"
2021-03-12 09:10:28,173 [main:61] - GENERATED IS CALL =false
2021-03-12 09:10:28,485 [main:67] - randomType = Kla3<UInt>
2021-03-12 09:10:28,617 [main:302] - generating value of type = Kla3<UInt> false depth = 0
2021-03-12 09:10:28,620 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 09:10:29,075 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-12 09:10:29,078 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}
2021-03-12 09:10:29,093 [main:106] - GETTING String from ULongRange
2021-03-12 09:10:29,120 [main:113] - Case = [public final val first: kotlin.ULong defined in kotlin.ranges.ULongProgression[DeserializedPropertyDescriptor@1ff228b1], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b9fb00b]]
2021-03-12 09:10:29,120 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b9fb00b]
2021-03-12 09:10:29,120 [main:117] - GENERATED CALL = (1uL until 9uL).first.toString(two())
2021-03-12 09:10:29,120 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5036158]]
2021-03-12 09:10:29,120 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5036158]
2021-03-12 09:10:29,252 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:10:29,391 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:10:29,534 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 09:10:29,538 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 09:10:29,835 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 09:10:29,841 [main:95] - GENERATED = StringBuilder("crtji")
2021-03-12 09:10:29,973 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:10:30,112 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 09:10:30,116 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 09:10:30,402 [main:302] - generating value of type = String true depth = 3
2021-03-12 09:10:30,405 [main:95] - GENERATED = StringBuilder("vahma")
2021-03-12 09:10:30,537 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:10:30,729 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 09:10:30,732 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 09:10:30,924 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 09:10:30,928 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 09:10:31,219 [main:302] - generating value of type = Int true depth = 4
2021-03-12 09:10:31,221 [main:95] - GENERATED = StringBuilder(-777636837)
2021-03-12 09:10:31,222 [main:117] - GENERATED CALL = (1uL until 9uL).joinToString(StringBuilder(), StringBuilder("crtji"), StringBuilder("vahma"), two(), "wppxr", {a: T -> StringBuilder(-777636837)})
2021-03-12 09:10:31,222 [main:113] - Case = [public open val endInclusive: kotlin.ULong defined in kotlin.ranges.ULongRange[DeserializedPropertyDescriptor@4ad5892e], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b9fb00b]]
2021-03-12 09:10:31,222 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b9fb00b]
2021-03-12 09:10:31,355 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:10:31,358 [main:117] - GENERATED CALL = (1uL until 9uL).endInclusive.toString(-708528497)
2021-03-12 09:10:31,358 [main:113] - Case = [public final val step: kotlin.Long defined in kotlin.ranges.ULongRange[DeserializedPropertyDescriptor@517da33a], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46eeb2f7]]
2021-03-12 09:10:31,358 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46eeb2f7]
2021-03-12 09:10:31,358 [main:117] - GENERATED CALL = (1uL until 9uL).step.toString(two())
2021-03-12 09:10:31,358 [main:114] - replacement of (1uL until 9uL).endInclusive.toString(two()) + numberOfSuspensions + ", got " + prope5 of type String is (1uL until 9uL).first.toString(two())
2021-03-12 09:10:31,489 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:10:31,489 [main:66] - Compilation checking started
2021-03-12 09:10:32,140 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = (1u until 9u).endInclusive.toString(two())

fun fu0(prope1: suspend () -> Unit) {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope1.startCoroutine(fu3 {
        prope0 = (two())?.toInt().toString(two())!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 {a: Kla0 -> check(true)}
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (1uL until 9uL).endInclusive.toString(two()) +
                prope4.joinToString(separator = (1uL until 9uL).step.toString(two()))) }
    }

    fun fu8(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true } ?: error((1175999352460025235.toULong()).toUByte().toString(410428326))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if (prope5 != i) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((1uL until 9uL).first.toString(two()))
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:10:32,143 [main:107] - replacing (prope6, Boolean)
2021-03-12 09:10:32,144 [main:50] - replacing prope6 Boolean
2021-03-12 09:10:32,144 [main:54] - Getting value of type Boolean
2021-03-12 09:10:32,286 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:10:32,289 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 09:10:32,289 [main:61] - GENERATED IS CALL =false
2021-03-12 09:10:32,765 [main:67] - randomType = MutableMap<Long?, Kla0?>
2021-03-12 09:10:32,767 [main:106] - GETTING Boolean from Int
2021-03-12 09:10:32,804 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@459be900]]
2021-03-12 09:10:32,804 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896]
2021-03-12 09:10:32,804 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@459be900]
2021-03-12 09:10:32,804 [main:117] - GENERATED CALL = (two()).toChar().isISOControl()
2021-03-12 09:10:32,804 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3ce30c43], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@2b68172f]]
2021-03-12 09:10:32,804 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3ce30c43]
2021-03-12 09:10:32,804 [main:149] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@2b68172f]
2021-03-12 09:10:32,805 [main:117] - GENERATED CALL = (two()).toFloat().isInfinite()
2021-03-12 09:10:32,805 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3ce30c43], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@61d18376]]
2021-03-12 09:10:32,805 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3ce30c43]
2021-03-12 09:10:32,805 [main:149] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@61d18376]
2021-03-12 09:10:32,805 [main:117] - GENERATED CALL = (two()).toFloat().isFinite()
2021-03-12 09:10:32,805 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3dfef25d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@292b7b88]]
2021-03-12 09:10:32,805 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3dfef25d]
2021-03-12 09:10:32,805 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@292b7b88]
2021-03-12 09:10:32,938 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:10:32,939 [main:117] - GENERATED CALL = (two()).toByte().equals("dqimg")
2021-03-12 09:10:32,939 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3db4ba49], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@530cce6f]]
2021-03-12 09:10:32,939 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3db4ba49]
2021-03-12 09:10:33,080 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:10:33,081 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@530cce6f]
2021-03-12 09:10:33,081 [main:117] - GENERATED CALL = (two()).equals("fkltv").not()
2021-03-12 09:10:33,081 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@59ecbff6], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@40426682]]
2021-03-12 09:10:33,081 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@59ecbff6]
2021-03-12 09:10:33,221 [main:302] - generating value of type = Double true depth = 0
2021-03-12 09:10:33,225 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@40426682]
2021-03-12 09:10:33,225 [main:117] - GENERATED CALL = (two()).div(0.8997389649398596).isFinite()
2021-03-12 09:10:33,225 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78635f79], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@40426682]]
2021-03-12 09:10:33,225 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78635f79]
2021-03-12 09:10:33,225 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@40426682]
2021-03-12 09:10:33,226 [main:117] - GENERATED CALL = (two()).toDouble().isFinite()
2021-03-12 09:10:33,226 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27e1566f]]
2021-03-12 09:10:33,226 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896]
2021-03-12 09:10:33,226 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27e1566f]
2021-03-12 09:10:33,226 [main:117] - GENERATED CALL = (two()).toChar().isWhitespace()
2021-03-12 09:10:33,226 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78635f79], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6ce5eb9b]]
2021-03-12 09:10:33,226 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78635f79]
2021-03-12 09:10:33,226 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6ce5eb9b]
2021-03-12 09:10:33,226 [main:117] - GENERATED CALL = (two()).toDouble().isInfinite()
2021-03-12 09:10:33,226 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b11c9b7]]
2021-03-12 09:10:33,226 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896]
2021-03-12 09:10:33,226 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b11c9b7]
2021-03-12 09:10:33,226 [main:117] - GENERATED CALL = (two()).toChar().isLetter()
2021-03-12 09:10:33,226 [main:114] - replacement of prope6 of type Boolean is (two()).toChar().isWhitespace()
2021-03-12 09:10:33,380 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:10:33,380 [main:66] - Compilation checking started
2021-03-12 09:10:34,117 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = (1u until 9u).endInclusive.toString(two())

fun fu0(prope1: suspend () -> Unit) {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope1.startCoroutine(fu3 {
        prope0 = (two())?.toInt().toString(two())!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 {a: Kla0 -> check(true)}
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (1uL until 9uL).endInclusive.toString(two()) +
                prope4.joinToString(separator = (1uL until 9uL).step.toString(two()))) }
    }

    fun fu8(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true } ?: error((1175999352460025235.toULong()).toUByte().toString(410428326))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if (prope5 != i) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((1uL until 9uL).first.toString(two()))
        if ((two()).toChar().isWhitespace()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:10:34,120 [main:107] - replacing (prope5, Int)
2021-03-12 09:10:34,122 [main:50] - replacing prope5 Int
2021-03-12 09:10:34,122 [main:54] - Getting value of type Int
2021-03-12 09:10:34,267 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:10:34,270 [main:58] - GENERATED VALUE OF TYPE Int = -1549516004
2021-03-12 09:10:34,270 [main:61] - GENERATED IS CALL =false
2021-03-12 09:10:34,280 [main:67] - randomType = Kla4
2021-03-12 09:10:34,424 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 09:10:34,427 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (1uL until 9uL).endInclusive.toString(two()) +
                prope4.joinToString(separator = (1uL until 9uL).step.toString(two()))) }
    }

    fun fu8(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true } ?: error((1175999352460025235.toULong()).toUByte().toString(410428326))
    }
}
2021-03-12 09:10:34,436 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla4[DeserializedSimpleFunctionDescriptor@255800fd]
2021-03-12 09:10:34,581 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:10:34,581 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@31714ae9]
2021-03-12 09:10:34,731 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:10:34,734 [main:78] - Generated call from random type = (Kla4()).equals("vndno").compareTo(true)
2021-03-12 09:10:34,734 [main:106] - GETTING Int from Int
2021-03-12 09:10:34,788 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3dfef25d], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@4a618065]]
2021-03-12 09:10:34,789 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3dfef25d]
2021-03-12 09:10:34,789 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@4a618065]
2021-03-12 09:10:34,932 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:10:34,935 [main:117] - GENERATED CALL = (two()).toByte().times(56)
2021-03-12 09:10:34,935 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b7ec5c0]]
2021-03-12 09:10:34,935 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae]
2021-03-12 09:10:34,935 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b7ec5c0]
2021-03-12 09:10:34,936 [main:117] - GENERATED CALL = (two()).compareTo(two()).inc()
2021-03-12 09:10:34,936 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3dfef25d], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1feb4e09]]
2021-03-12 09:10:34,936 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3dfef25d]
2021-03-12 09:10:34,936 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1feb4e09]
2021-03-12 09:10:34,936 [main:117] - GENERATED CALL = (two()).toByte().countOneBits()
2021-03-12 09:10:34,936 [main:113] - Case = [public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@175c25dd]]
2021-03-12 09:10:34,936 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@175c25dd]
2021-03-12 09:10:34,936 [main:117] - GENERATED CALL = (two()).coerceAtLeast(two())
2021-03-12 09:10:34,936 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4b6167]]
2021-03-12 09:10:34,936 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1]
2021-03-12 09:10:34,936 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4b6167]
2021-03-12 09:10:34,937 [main:117] - GENERATED CALL = (two()).toInt().toInt()
2021-03-12 09:10:34,937 [main:113] - Case = [@kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2fce34b7]]
2021-03-12 09:10:34,937 [main:117] - GENERATED CALL = (two()).sign
2021-03-12 09:10:34,937 [main:113] - Case = [public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4b6167]]
2021-03-12 09:10:34,937 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4b6167]
2021-03-12 09:10:34,937 [main:117] - GENERATED CALL = (two()).toInt()
2021-03-12 09:10:34,937 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a0f91b6]]
2021-03-12 09:10:34,937 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1]
2021-03-12 09:10:34,937 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a0f91b6]
2021-03-12 09:10:34,937 [main:117] - GENERATED CALL = (two()).toInt().or(two())
2021-03-12 09:10:34,937 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2fce34b7]]
2021-03-12 09:10:34,937 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1]
2021-03-12 09:10:34,937 [main:117] - GENERATED CALL = (two()).toInt().sign
2021-03-12 09:10:34,937 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1a5fdcae], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@6cede900]]
2021-03-12 09:10:34,937 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1a5fdcae]
2021-03-12 09:10:35,087 [main:302] - generating value of type = Long true depth = 0
2021-03-12 09:10:35,090 [main:117] - GENERATED CALL = (two()).div(7806395707098413499).sign
2021-03-12 09:10:35,091 [main:114] - replacement of prope5 of type Int is (two()).toInt().sign
2021-03-12 09:10:35,222 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:10:35,222 [main:66] - Compilation checking started
2021-03-12 09:10:35,666 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = (1u until 9u).endInclusive.toString(two())

fun fu0(prope1: suspend () -> Unit) {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope1.startCoroutine(fu3 {
        prope0 = (two())?.toInt().toString(two())!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 {a: Kla0 -> check(true)}
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (1uL until 9uL).endInclusive.toString(two()) +
                prope4.joinToString(separator = (1uL until 9uL).step.toString(two()))) }
    }

    fun fu8(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true } ?: error((1175999352460025235.toULong()).toUByte().toString(410428326))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
(two()).toInt().sign = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if (prope5 != i) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((1uL until 9uL).first.toString(two()))
        if ((two()).toChar().isWhitespace()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:10:35,669 [main:107] - replacing (prope3, Kla5)
2021-03-12 09:10:35,670 [main:50] - replacing prope3 Kla5
2021-03-12 09:10:35,670 [main:54] - Getting value of type Kla5
2021-03-12 09:10:35,826 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 09:10:35,828 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if (prope5 != i) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((1uL until 9uL).first.toString(two()))
        if ((two()).toChar().isWhitespace()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 09:10:35,829 [main:58] - GENERATED VALUE OF TYPE Kla5 = Kla5()
2021-03-12 09:10:35,829 [main:61] - GENERATED IS CALL =true
2021-03-12 09:10:35,834 [main:67] - randomType = Boolean
2021-03-12 09:10:35,965 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:10:35,979 [main:106] - GETTING Kla5 from Int
2021-03-12 09:10:36,012 [main:106] - GETTING Kla5 from ULongRange
2021-03-12 09:10:36,037 [main:106] - GETTING Kla5 from UIntRange
2021-03-12 09:10:36,064 [main:114] - replacement of prope3 of type Kla5 is Kla5()
2021-03-12 09:10:36,194 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 09:10:36,194 [main:66] - Compilation checking started
2021-03-12 09:10:36,924 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = (1u until 9u).endInclusive.toString(two())

fun fu0(prope1: suspend () -> Unit) {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope1.startCoroutine(fu3 {
        prope0 = (two())?.toInt().toString(two())!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 {a: Kla0 -> check(true)}
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (1uL until 9uL).endInclusive.toString(two()) +
                prope4.joinToString(separator = (1uL until 9uL).step.toString(two()))) }
    }

    fun fu8(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true } ?: error((1175999352460025235.toULong()).toUByte().toString(410428326))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if (prope5 != i) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((1uL until 9uL).first.toString(two()))
        if ((two()).toChar().isWhitespace()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope3.prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:10:36,926 [main:107] - replacing ({ prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 09:10:36,926 [main:50] - replacing { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    } Function1<Continuation<Unit>, Unit>
2021-03-12 09:10:36,926 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 09:10:37,065 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 09:10:37,068 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:10:37,233 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 09:10:37,236 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 09:10:37,531 [main:302] - generating value of type = Any false depth = 4
2021-03-12 09:10:37,531 [main:95] - GENERATED = println("zmmte")
2021-03-12 09:10:37,531 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> println("zmmte")}
2021-03-12 09:10:37,531 [main:61] - GENERATED IS CALL =false
2021-03-12 09:10:37,868 [main:67] - randomType = Pair<Collection<Kla0>, Kla2>
2021-03-12 09:10:38,001 [main:302] - generating value of type = Pair<Collection<Kla0>, Kla2> false depth = 0
2021-03-12 09:10:38,141 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Collection<Kla0>, second: Kla2): Pair<Collection<Kla0>, Kla2> = TODO()
2021-03-12 09:10:38,145 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Collection<Kla0>, second: Kla2): Pair<Collection<Kla0>, Kla2> = TODO()
2021-03-12 09:10:38,284 [main:302] - generating value of type = Collection<Kla0> false depth = 3
2021-03-12 09:10:38,423 [main:43] - GENERATING CALL OF fun <T> emptySet(): Collection<Kla0> = TODO()
2021-03-12 09:10:38,427 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptySet(): Collection<Kla0> = TODO()
2021-03-12 09:10:38,589 [main:95] - GENERATED = emptySet<Kla0>()
2021-03-12 09:10:38,590 [main:302] - generating value of type = Kla2 false depth = 3
2021-03-12 09:10:38,592 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}
2021-03-12 09:10:38,592 [main:95] - GENERATED = Pair<Collection<Kla0>, Kla2>(emptySet<Kla0>(), Kla2())
2021-03-12 09:10:38,611 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 09:10:38,655 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from ULongRange
2021-03-12 09:10:38,683 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from UIntRange
2021-03-12 09:10:38,712 [main:114] - replacement of { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> println("zmmte")}
2021-03-12 09:10:38,853 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 09:10:38,854 [main:66] - Compilation checking started
2021-03-12 09:10:39,531 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = (1u until 9u).endInclusive.toString(two())

fun fu0(prope1: suspend () -> Unit) {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope1.startCoroutine(fu3 {
        prope0 = (two())?.toInt().toString(two())!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 {a: Kla0 -> check(true)}
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (1uL until 9uL).endInclusive.toString(two()) +
                prope4.joinToString(separator = (1uL until 9uL).step.toString(two()))) }
    }

    fun fu8(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true } ?: error((1175999352460025235.toULong()).toUByte().toString(410428326))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("zmmte")}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if (prope5 != i) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((1uL until 9uL).first.toString(two()))
        if ((two()).toChar().isWhitespace()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope3.prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:10:39,534 [main:107] - replacing (prope5 != i, Boolean)
2021-03-12 09:10:39,534 [main:50] - replacing prope5 != i Boolean
2021-03-12 09:10:39,534 [main:54] - Getting value of type Boolean
2021-03-12 09:10:39,682 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:10:39,685 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 09:10:39,686 [main:61] - GENERATED IS CALL =false
2021-03-12 09:10:39,696 [main:67] - randomType = Kla1
2021-03-12 09:10:39,840 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 09:10:39,843 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}
2021-03-12 09:10:39,977 [main:194] - Type params = []
2021-03-12 09:10:40,109 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 09:10:40,246 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:10:40,250 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:10:40,568 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 09:10:40,739 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:10:40,742 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:10:41,207 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-12 09:10:41,352 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:10:41,355 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:10:41,796 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 11
2021-03-12 09:10:41,934 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:10:41,938 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:10:42,464 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 14
2021-03-12 09:10:42,629 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:10:42,633 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:10:43,083 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:10:43,083 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:10:43,084 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:10:43,084 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:10:43,084 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:10:43,098 [main:149] - GENERATING call of type public open fun resumeWith(prope0: kotlin.Result<kotlin.Any?>): kotlin.Unit defined in Kla1[SimpleFunctionDescriptorImpl@60be0ebe]
2021-03-12 09:10:43,227 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 09:10:43,362 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 09:10:43,366 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 09:10:43,650 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 09:10:43,652 [main:302] - generating value of type = Any false depth = 4
2021-03-12 09:10:43,653 [main:95] - GENERATED = runCatching<Any?>({ "rlegv"})
2021-03-12 09:10:43,653 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@6f8d2f3d]
2021-03-12 09:10:43,781 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:10:43,782 [main:78] - Generated call from random type = (Kla1()).resumeWith(runCatching<Any?>({ "rlegv"})).equals("sygwa")
2021-03-12 09:10:43,783 [main:106] - GETTING Boolean from Int
2021-03-12 09:10:43,816 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3dfef25d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@292b7b88]]
2021-03-12 09:10:43,816 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3dfef25d]
2021-03-12 09:10:43,816 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@292b7b88]
2021-03-12 09:10:43,945 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:10:43,945 [main:117] - GENERATED CALL = (two()).toByte().equals("ngbfd")
2021-03-12 09:10:43,945 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@59ecbff6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4f19f08e]]
2021-03-12 09:10:43,945 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@59ecbff6]
2021-03-12 09:10:44,076 [main:302] - generating value of type = Double true depth = 0
2021-03-12 09:10:44,079 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4f19f08e]
2021-03-12 09:10:44,260 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:10:44,260 [main:117] - GENERATED CALL = (two()).div(0.6546956028552655).equals("hkowj")
2021-03-12 09:10:44,260 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@59ecbff6], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@784d12b6]]
2021-03-12 09:10:44,260 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@59ecbff6]
2021-03-12 09:10:44,401 [main:302] - generating value of type = Double true depth = 0
2021-03-12 09:10:44,404 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@784d12b6]
2021-03-12 09:10:44,404 [main:117] - GENERATED CALL = (two()).div(0.23716009802216764).isNaN()
2021-03-12 09:10:44,404 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28e4e8cd]]
2021-03-12 09:10:44,404 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896]
2021-03-12 09:10:44,404 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28e4e8cd]
2021-03-12 09:10:44,404 [main:117] - GENERATED CALL = (two()).toChar().isDefined()
2021-03-12 09:10:44,404 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3ce30c43], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@61d18376]]
2021-03-12 09:10:44,405 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3ce30c43]
2021-03-12 09:10:44,405 [main:149] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@61d18376]
2021-03-12 09:10:44,405 [main:117] - GENERATED CALL = (two()).toFloat().isFinite()
2021-03-12 09:10:44,405 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@290b5e62], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@289254fe]]
2021-03-12 09:10:44,405 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@290b5e62]
2021-03-12 09:10:44,546 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:10:44,549 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@289254fe]
2021-03-12 09:10:44,694 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:10:44,694 [main:117] - GENERATED CALL = (two()).rangeTo(-59).equals("bqbaf")
2021-03-12 09:10:44,695 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3ce30c43], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@15eae4fa]]
2021-03-12 09:10:44,695 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3ce30c43]
2021-03-12 09:10:44,695 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@15eae4fa]
2021-03-12 09:10:44,695 [main:117] - GENERATED CALL = (two()).toFloat().isNaN()
2021-03-12 09:10:44,695 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ae43d77]]
2021-03-12 09:10:44,695 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896]
2021-03-12 09:10:44,695 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ae43d77]
2021-03-12 09:10:44,695 [main:117] - GENERATED CALL = (two()).toChar().isDigit()
2021-03-12 09:10:44,695 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42a96483]]
2021-03-12 09:10:44,696 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f6f8896]
2021-03-12 09:10:44,696 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42a96483]
2021-03-12 09:10:44,696 [main:117] - GENERATED CALL = (two()).toChar().isHighSurrogate()
2021-03-12 09:10:44,696 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3db4ba49]]
2021-03-12 09:10:44,696 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae]
2021-03-12 09:10:44,856 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:10:44,859 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3db4ba49]
2021-03-12 09:10:44,990 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:10:44,990 [main:117] - GENERATED CALL = (two()).compareTo(341510786).equals("lsnya")
2021-03-12 09:10:44,990 [main:114] - replacement of prope5 != i of type Boolean is (two()).toChar().isHighSurrogate()
2021-03-12 09:10:45,122 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:10:45,123 [main:66] - Compilation checking started
2021-03-12 09:10:45,761 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = (1u until 9u).endInclusive.toString(two())

fun fu0(prope1: suspend () -> Unit) {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope1.startCoroutine(fu3 {
        prope0 = (two())?.toInt().toString(two())!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 {a: Kla0 -> check(true)}
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (1uL until 9uL).endInclusive.toString(two()) +
                prope4.joinToString(separator = (1uL until 9uL).step.toString(two()))) }
    }

    fun fu8(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true } ?: error((1175999352460025235.toULong()).toUByte().toString(410428326))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("zmmte")}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if ((two()).toChar().isHighSurrogate()) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((1uL until 9uL).first.toString(two()))
        if ((two()).toChar().isWhitespace()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope3.prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:10:45,765 [main:107] - replacing (exception, Throwable)
2021-03-12 09:10:45,766 [main:50] - replacing exception Throwable
2021-03-12 09:10:45,766 [main:54] - Getting value of type Throwable
2021-03-12 09:10:45,942 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 09:10:45,949 [main:58] - GENERATED VALUE OF TYPE Throwable = IllegalArgumentException()
2021-03-12 09:10:45,950 [main:61] - GENERATED IS CALL =true
2021-03-12 09:10:46,119 [main:67] - randomType = Short
2021-03-12 09:10:46,252 [main:302] - generating value of type = Short true depth = 0
2021-03-12 09:10:46,295 [main:106] - GETTING Throwable from UIntRange
2021-03-12 09:10:46,320 [main:106] - GETTING Throwable from Int
2021-03-12 09:10:46,356 [main:106] - GETTING Throwable from ULongRange
2021-03-12 09:10:46,381 [main:114] - replacement of exception of type Throwable is IllegalArgumentException()
2021-03-12 09:10:46,515 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 09:10:46,515 [main:66] - Compilation checking started
2021-03-12 09:10:47,240 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = (1u until 9u).endInclusive.toString(two())

fun fu0(prope1: suspend () -> Unit) {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope1.startCoroutine(fu3 {
        prope0 = (two())?.toInt().toString(two())!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 {a: Kla0 -> check(true)}
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (1uL until 9uL).endInclusive.toString(two()) +
                prope4.joinToString(separator = (1uL until 9uL).step.toString(two()))) }
    }

    fun fu8(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true } ?: error((1175999352460025235.toULong()).toUByte().toString(410428326))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("zmmte")}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if ((two()).toChar().isHighSurrogate()) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((1uL until 9uL).first.toString(two()))
        if ((two()).toChar().isWhitespace()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope3.prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
throw IllegalArgumentException()
    }
}


2021-03-12 09:10:47,242 [main:107] - replacing (IllegalStateException("OK"), IllegalStateException)
2021-03-12 09:10:47,242 [main:50] - replacing IllegalStateException("OK") IllegalStateException
2021-03-12 09:10:47,242 [main:54] - Getting value of type IllegalStateException
2021-03-12 09:10:47,388 [main:302] - generating value of type = IllegalStateException false depth = 0
2021-03-12 09:10:47,528 [main:43] - GENERATING CALL OF fun IllegalStateException(cause: kotlin.Throwable?): IllegalStateException = TODO()
2021-03-12 09:10:47,532 [main:61] - WITHOUT TYPE PARAMS = fun IllegalStateException(cause: kotlin.Throwable?): IllegalStateException = TODO()
2021-03-12 09:10:47,816 [main:302] - generating value of type = Throwable false depth = 3
2021-03-12 09:10:47,822 [main:95] - GENERATED = IllegalStateException(ConcurrentModificationException())
2021-03-12 09:10:47,822 [main:58] - GENERATED VALUE OF TYPE IllegalStateException = IllegalStateException(ConcurrentModificationException())
2021-03-12 09:10:47,822 [main:61] - GENERATED IS CALL =true
2021-03-12 09:10:47,833 [main:67] - randomType = Kla1
2021-03-12 09:10:47,964 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 09:10:47,967 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}
2021-03-12 09:10:48,099 [main:194] - Type params = []
2021-03-12 09:10:48,231 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 09:10:48,367 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:10:48,371 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:10:48,665 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 09:10:48,806 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:10:48,810 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:10:49,291 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-12 09:10:49,431 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:10:49,434 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:10:49,928 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:10:49,928 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:10:49,928 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:10:49,943 [main:106] - GETTING IllegalStateException from Int
2021-03-12 09:10:49,975 [main:106] - GETTING IllegalStateException from UIntRange
2021-03-12 09:10:50,003 [main:106] - GETTING IllegalStateException from ULongRange
2021-03-12 09:10:50,027 [main:114] - replacement of IllegalStateException("OK") of type IllegalStateException is IllegalStateException(ConcurrentModificationException())
2021-03-12 09:10:50,164 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 09:10:50,165 [main:66] - Compilation checking started
2021-03-12 09:10:50,809 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = (1u until 9u).endInclusive.toString(two())

fun fu0(prope1: suspend () -> Unit) {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope1.startCoroutine(fu3 {
        prope0 = (two())?.toInt().toString(two())!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 {a: Kla0 -> check(true)}
    }
    prope1?.resumeWithException(IllegalStateException(ConcurrentModificationException()))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (1uL until 9uL).endInclusive.toString(two()) +
                prope4.joinToString(separator = (1uL until 9uL).step.toString(two()))) }
    }

    fun fu8(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true } ?: error((1175999352460025235.toULong()).toUByte().toString(410428326))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("zmmte")}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if ((two()).toChar().isHighSurrogate()) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((1uL until 9uL).first.toString(two()))
        if ((two()).toChar().isWhitespace()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope3.prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
throw IllegalArgumentException()
    }
}


2021-03-12 09:10:50,812 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 09:10:50,813 [main:50] - replacing getOrThrow() Any?
2021-03-12 09:10:50,813 [main:54] - Getting value of type Any?
2021-03-12 09:10:50,956 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:10:50,956 [main:58] - GENERATED VALUE OF TYPE Any? = "citje"
2021-03-12 09:10:50,957 [main:61] - GENERATED IS CALL =false
2021-03-12 09:10:51,118 [main:67] - randomType = Short
2021-03-12 09:10:51,264 [main:302] - generating value of type = Short true depth = 0
2021-03-12 09:10:51,303 [main:106] - GETTING Any? from Int
2021-03-12 09:10:51,340 [main:106] - GETTING Any? from ULongRange
2021-03-12 09:10:51,370 [main:106] - GETTING Any? from UIntRange
2021-03-12 09:10:51,396 [main:114] - replacement of getOrThrow() of type Any? is "citje"
2021-03-12 09:10:51,527 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 09:10:51,528 [main:66] - Compilation checking started
2021-03-12 09:10:51,951 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = (1u until 9u).endInclusive.toString(two())

fun fu0(prope1: suspend () -> Unit) {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope1.startCoroutine(fu3 {
        prope0 = (two())?.toInt().toString(two())!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 {a: Kla0 -> check(true)}
    }
    prope1?.resumeWithException(IllegalStateException(ConcurrentModificationException()))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope0."citje"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (1uL until 9uL).endInclusive.toString(two()) +
                prope4.joinToString(separator = (1uL until 9uL).step.toString(two()))) }
    }

    fun fu8(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true } ?: error((1175999352460025235.toULong()).toUByte().toString(410428326))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("zmmte")}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if ((two()).toChar().isHighSurrogate()) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((1uL until 9uL).first.toString(two()))
        if ((two()).toChar().isWhitespace()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope3.prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
throw IllegalArgumentException()
    }
}


2021-03-12 09:10:51,953 [main:107] - replacing (0, Int)
2021-03-12 09:10:51,953 [main:50] - replacing 0 Int
2021-03-12 09:10:51,953 [main:54] - Getting value of type Int
2021-03-12 09:10:52,084 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:10:52,087 [main:58] - GENERATED VALUE OF TYPE Int = 1024537032
2021-03-12 09:10:52,087 [main:61] - GENERATED IS CALL =false
2021-03-12 09:10:52,246 [main:67] - randomType = Float
2021-03-12 09:10:52,378 [main:302] - generating value of type = Float true depth = 0
2021-03-12 09:10:52,412 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@16334851]
2021-03-12 09:10:52,544 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:10:52,547 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@15348b93]
2021-03-12 09:10:52,678 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:10:52,681 [main:78] - Generated call from random type = (0.52224684f).compareTo(-65).compareTo(-76)
2021-03-12 09:10:52,681 [main:106] - GETTING Int from Int
2021-03-12 09:10:52,715 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a0f91b6]]
2021-03-12 09:10:52,716 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1]
2021-03-12 09:10:52,716 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a0f91b6]
2021-03-12 09:10:52,716 [main:117] - GENERATED CALL = (two()).toInt().or(two())
2021-03-12 09:10:52,716 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@218a2462]]
2021-03-12 09:10:52,716 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae]
2021-03-12 09:10:52,846 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:10:52,849 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@218a2462]
2021-03-12 09:10:52,979 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:10:52,981 [main:117] - GENERATED CALL = (two()).compareTo(413340320).plus(75)
2021-03-12 09:10:52,982 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@218a2462]]
2021-03-12 09:10:52,982 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@87fdcd1]
2021-03-12 09:10:52,982 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@218a2462]
2021-03-12 09:10:53,111 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:10:53,114 [main:117] - GENERATED CALL = (two()).toInt().plus(49)
2021-03-12 09:10:53,114 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3dfef25d], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6ba4e288]]
2021-03-12 09:10:53,114 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3dfef25d]
2021-03-12 09:10:53,115 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6ba4e288]
2021-03-12 09:10:53,246 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:10:53,249 [main:117] - GENERATED CALL = (two()).toByte().plus(104)
2021-03-12 09:10:53,249 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ff36540], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@31d90af9]]
2021-03-12 09:10:53,249 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ff36540]
2021-03-12 09:10:53,249 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@31d90af9]
2021-03-12 09:10:53,249 [main:117] - GENERATED CALL = (two()).toShort().countLeadingZeroBits()
2021-03-12 09:10:53,249 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a279d9e]]
2021-03-12 09:10:53,249 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4b81e8ae]
2021-03-12 09:10:53,379 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:10:53,382 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a279d9e]
2021-03-12 09:10:53,382 [main:117] - GENERATED CALL = (two()).compareTo(-1662824058).countOneBits()
2021-03-12 09:10:53,382 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78635f79], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@2025402]]
2021-03-12 09:10:53,382 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78635f79]
2021-03-12 09:10:53,382 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@2025402]
2021-03-12 09:10:53,527 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:10:53,530 [main:117] - GENERATED CALL = (two()).toDouble().compareTo(-23)
2021-03-12 09:10:53,530 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d8ffe07]]
2021-03-12 09:10:53,530 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d8ffe07]
2021-03-12 09:10:53,530 [main:117] - GENERATED CALL = (two()).countTrailingZeroBits()
2021-03-12 09:10:53,530 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@69049435]]
2021-03-12 09:10:53,531 [main:117] - GENERATED CALL = (two()).absoluteValue
2021-03-12 09:10:53,531 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ff36540], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@223a6a89]]
2021-03-12 09:10:53,531 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ff36540]
2021-03-12 09:10:53,531 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@223a6a89]
2021-03-12 09:10:53,660 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:10:53,663 [main:117] - GENERATED CALL = (two()).toShort().div(97)
2021-03-12 09:10:53,664 [main:114] - replacement of 0 of type Int is (two()).compareTo(413340320).plus(75)
2021-03-12 09:10:53,796 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:10:53,796 [main:66] - Compilation checking started
2021-03-12 09:10:54,460 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = (1u until 9u).endInclusive.toString(two())

fun fu0(prope1: suspend () -> Unit) {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope1.startCoroutine(fu3 {
        prope0 = (two())?.toInt().toString(two())!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 {a: Kla0 -> check(true)}
    }
    prope1?.resumeWithException(IllegalStateException(ConcurrentModificationException()))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (1uL until 9uL).endInclusive.toString(two()) +
                prope4.joinToString(separator = (1uL until 9uL).step.toString(two()))) }
    }

    fun fu8(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true } ?: error((1175999352460025235.toULong()).toUByte().toString(410428326))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = (two()).compareTo(413340320).plus(75)
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("zmmte")}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if ((two()).toChar().isHighSurrogate()) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((1uL until 9uL).first.toString(two()))
        if ((two()).toChar().isWhitespace()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope3.prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
throw IllegalArgumentException()
    }
}


2021-03-12 09:10:54,462 [main:107] - replacing (prope1, Continuation<*>)
2021-03-12 09:10:54,463 [main:50] - replacing prope1 Continuation<*>
2021-03-12 09:10:54,463 [main:54] - Getting value of type Continuation<*>
2021-03-12 09:10:54,606 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 09:10:54,746 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 09:10:54,750 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 09:10:55,223 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 09:10:55,359 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:10:55,363 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:10:55,664 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 09:10:55,806 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:10:55,810 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:10:56,297 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-12 09:10:56,440 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:10:56,444 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:10:56,917 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:10:56,918 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:10:56,918 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:10:56,918 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 09:10:56,918 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 09:10:56,929 [main:67] - randomType = Kla0
2021-03-12 09:10:57,063 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 09:10:57,066 [main:112] - generating klass Kla0 text = inline class Kla0(val s: String)
2021-03-12 09:10:57,199 [main:194] - Type params = []
2021-03-12 09:10:57,332 [main:302] - generating value of type = String true depth = 2
2021-03-12 09:10:57,341 [main:106] - GETTING Continuation<*> from Int
2021-03-12 09:10:57,375 [main:106] - GETTING Continuation<*> from UIntRange
2021-03-12 09:10:57,400 [main:106] - GETTING Continuation<*> from ULongRange
2021-03-12 09:10:57,427 [main:111] - Cant find and generate replacement for prope1 type Continuation<*>
2021-03-12 09:10:57,428 [main:107] - replacing ({
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    }, Unit?)
2021-03-12 09:10:57,428 [main:50] - replacing {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    } Unit?
2021-03-12 09:10:57,428 [main:54] - Getting value of type Unit?
2021-03-12 09:10:57,559 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 09:10:57,700 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:10:57,704 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:10:58,187 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 09:10:58,190 [main:302] - generating value of type = Function0<Any> false depth = 3
2021-03-12 09:10:58,192 [main:302] - generating value of type = Any false depth = 4
2021-03-12 09:10:58,193 [main:95] - GENERATED = check(false, { "shyss"})
2021-03-12 09:10:58,193 [main:58] - GENERATED VALUE OF TYPE Unit? = check(false, { "shyss"})
2021-03-12 09:10:58,193 [main:61] - GENERATED IS CALL =true
2021-03-12 09:10:58,205 [main:67] - randomType = Kla2
2021-03-12 09:10:58,338 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 09:10:58,341 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}
2021-03-12 09:10:58,357 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.coroutines.Continuation<T>.resumeWithException(exception: kotlin.Throwable): kotlin.Unit defined in kotlin.coroutines[DeserializedSimpleFunctionDescriptor@5d4f3b82]
2021-03-12 09:10:58,495 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 09:10:58,638 [main:43] - GENERATING CALL OF fun UninitializedPropertyAccessException(message: kotlin.String?): Throwable = TODO()
2021-03-12 09:10:58,641 [main:61] - WITHOUT TYPE PARAMS = fun UninitializedPropertyAccessException(message: kotlin.String?): Throwable = TODO()
2021-03-12 09:10:58,943 [main:302] - generating value of type = String true depth = 3
2021-03-12 09:10:58,946 [main:95] - GENERATED = UninitializedPropertyAccessException("picki")
2021-03-12 09:10:58,946 [main:78] - Generated call from random type = (Kla2()).resumeWithException(UninitializedPropertyAccessException("picki"))
2021-03-12 09:10:58,947 [main:106] - GETTING Unit? from Int
2021-03-12 09:10:58,993 [main:106] - GETTING Unit? from UIntRange
2021-03-12 09:10:59,017 [main:113] - Case = [public abstract operator fun iterator(): kotlin.collections.Iterator<kotlin.UInt> defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@14132611], public inline fun <T> kotlin.collections.Iterator<T>.forEach(operation: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@672c8149]]
2021-03-12 09:10:59,018 [main:149] - GENERATING call of type public abstract operator fun iterator(): kotlin.collections.Iterator<kotlin.UInt> defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@14132611]
2021-03-12 09:10:59,018 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterator<T>.forEach(operation: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@672c8149]
2021-03-12 09:10:59,155 [main:302] - generating value of type = Function1<T, Unit> false depth = 0
2021-03-12 09:10:59,159 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:10:59,307 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 09:10:59,311 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 09:10:59,616 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 09:10:59,620 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 09:10:59,757 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:10:59,761 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:11:00,214 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 09:11:00,217 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-12 09:11:00,219 [main:302] - generating value of type = Any false depth = 9
2021-03-12 09:11:00,220 [main:95] - GENERATED = check(false, { "gbmvj"})
2021-03-12 09:11:00,220 [main:95] - GENERATED = contract({ check(false, { "gbmvj"})})
2021-03-12 09:11:00,220 [main:117] - GENERATED CALL = (1u until 9u)?.iterator().forEach({a: T -> contract({ check(false, { "gbmvj"})})})
2021-03-12 09:11:00,221 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.forEachIndexed(action: (index: kotlin.Int, T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@27e3bf50]]
2021-03-12 09:11:00,221 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.forEachIndexed(action: (index: kotlin.Int, T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@27e3bf50]
2021-03-12 09:11:00,364 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, T, Unit> false depth = 0
2021-03-12 09:11:00,367 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:11:00,537 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 09:11:00,541 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 09:11:00,845 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 09:11:00,848 [main:95] - GENERATED = require(true)
2021-03-12 09:11:00,849 [main:117] - GENERATED CALL = (1u until 9u)?.forEachIndexed({a: Int, b: T -> require(true)})
2021-03-12 09:11:00,849 [main:113] - Case = [@kotlin.internal.HidesMembers public inline fun <T> kotlin.collections.Iterable<T>.forEach(action: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5fc9593d]]
2021-03-12 09:11:00,849 [main:149] - GENERATING call of type @kotlin.internal.HidesMembers public inline fun <T> kotlin.collections.Iterable<T>.forEach(action: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5fc9593d]
2021-03-12 09:11:00,982 [main:302] - generating value of type = Function1<T, Unit> false depth = 0
2021-03-12 09:11:00,985 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:11:01,133 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 09:11:01,137 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 09:11:01,576 [main:302] - generating value of type = Int true depth = 4
2021-03-12 09:11:01,579 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 09:11:01,581 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 09:11:01,719 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 09:11:01,723 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 09:11:02,182 [main:302] - generating value of type = Int true depth = 8
2021-03-12 09:11:02,185 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-12 09:11:02,187 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 09:11:02,324 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 09:11:02,327 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 09:11:02,612 [main:302] - generating value of type = Boolean true depth = 12
2021-03-12 09:11:02,615 [main:95] - GENERATED = check(false)
2021-03-12 09:11:02,615 [main:95] - GENERATED = repeat(-1802525971, {a: Int -> check(false)})
2021-03-12 09:11:02,615 [main:95] - GENERATED = repeat(-441669025, {a: Int -> repeat(-1802525971, {a: Int -> check(false)})})
2021-03-12 09:11:02,616 [main:117] - GENERATED CALL = (1u until 9u)?.forEach({a: T -> repeat(-441669025, {a: Int -> repeat(-1802525971, {a: Int -> check(false)})})})
2021-03-12 09:11:02,616 [main:114] - replacement of {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    } of type Unit? is (1u until 9u)?.iterator().forEach({a: T -> contract({ check(false, { "gbmvj"})})})
2021-03-12 09:11:02,748 [main:33] - Trying to replace BLOCK on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:11:02,749 [main:66] - Compilation checking started
2021-03-12 09:11:02,754 [main:71] - Wrong syntax or breaks conditions
2021-03-12 09:11:02,754 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = (1u until 9u).endInclusive.toString(two())

fun fu0(prope1: suspend () -> Unit) {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope1.startCoroutine(fu3 {
        prope0 = (two())?.toInt().toString(two())!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 {a: Kla0 -> check(true)}
    }
    prope1?.resumeWithException(IllegalStateException(ConcurrentModificationException()))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) (1u until 9u)?.iterator().forEach({a: T -> contract({ check(false, { "gbmvj"})})})
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (1uL until 9uL).endInclusive.toString(two()) +
                prope4.joinToString(separator = (1uL until 9uL).step.toString(two()))) }
    }

    fun fu8(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true } ?: error((1175999352460025235.toULong()).toUByte().toString(410428326))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = (two()).compareTo(413340320).plus(75)
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("zmmte")}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if ((two()).toChar().isHighSurrogate()) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((1uL until 9uL).first.toString(two()))
        if ((two()).toChar().isWhitespace()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope3.prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
throw IllegalArgumentException()
    }
}


2021-03-12 09:11:02,756 [main:107] - replacing (prope7, Function0<Unit>)
2021-03-12 09:11:02,756 [main:50] - replacing prope7 Function0<Unit>
2021-03-12 09:11:02,756 [main:54] - Getting value of type Function0<Unit>
2021-03-12 09:11:02,911 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 09:11:02,914 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:11:03,052 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 09:11:03,056 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 09:11:03,343 [main:302] - generating value of type = Any false depth = 4
2021-03-12 09:11:03,344 [main:95] - GENERATED = print("xhzre")
2021-03-12 09:11:03,344 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { print("xhzre")}
2021-03-12 09:11:03,344 [main:61] - GENERATED IS CALL =false
2021-03-12 09:11:03,648 [main:67] - randomType = List<Float>
2021-03-12 09:11:03,649 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 09:11:03,692 [main:106] - GETTING Function0<Unit> from ULongRange
2021-03-12 09:11:03,727 [main:106] - GETTING Function0<Unit> from UIntRange
2021-03-12 09:11:03,762 [main:114] - replacement of prope7 of type Function0<Unit> is { print("xhzre")}
2021-03-12 09:11:03,896 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 09:11:03,896 [main:66] - Compilation checking started
2021-03-12 09:11:04,310 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = (1u until 9u).endInclusive.toString(two())

fun fu0(prope1: suspend () -> Unit) {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope1.startCoroutine(fu3 {
        prope0 = (two())?.toInt().toString(two())!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 {a: Kla0 -> check(true)}
    }
    prope1?.resumeWithException(IllegalStateException(ConcurrentModificationException()))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (1uL until 9uL).endInclusive.toString(two()) +
                prope4.joinToString(separator = (1uL until 9uL).step.toString(two()))) }
    }

    fun fu8(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true } ?: error((1175999352460025235.toULong()).toUByte().toString(410428326))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = (two()).compareTo(413340320).plus(75)
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("zmmte")}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if ((two()).toChar().isHighSurrogate()) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((1uL until 9uL).first.toString(two()))
        if ((two()).toChar().isWhitespace()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope3.{ print("xhzre")} = {
            Kla5().prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
throw IllegalArgumentException()
    }
}


2021-03-12 09:11:04,313 [main:107] - replacing (false, Boolean)
2021-03-12 09:11:04,313 [main:50] - replacing false Boolean
2021-03-12 09:11:04,313 [main:54] - Getting value of type Boolean
2021-03-12 09:11:04,458 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:11:04,461 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 09:11:04,461 [main:61] - GENERATED IS CALL =false
2021-03-12 09:11:04,633 [main:67] - randomType = UInt?
2021-03-12 09:11:04,772 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 09:11:04,804 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@4941a87d]
2021-03-12 09:11:04,936 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:11:04,936 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c743b01]
2021-03-12 09:11:05,074 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:11:05,077 [main:78] - Generated call from random type = (868436922.toUInt())?.equals("hbfrt").xor(true)
2021-03-12 09:11:05,078 [main:106] - GETTING Boolean from UIntRange
2021-03-12 09:11:05,106 [main:113] - Case = [public open fun contains(value: kotlin.UInt): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@397d1d80], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@530cce6f]]
2021-03-12 09:11:05,106 [main:149] - GENERATING call of type public open fun contains(value: kotlin.UInt): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@397d1d80]
2021-03-12 09:11:05,238 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 09:11:05,240 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@530cce6f]
2021-03-12 09:11:05,241 [main:117] - GENERATED CALL = (1u until 9u).contains(1541077547.toUInt()).not()
2021-03-12 09:11:05,241 [main:113] - Case = [public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@59d5a728]]
2021-03-12 09:11:05,241 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@59d5a728]
2021-03-12 09:11:05,241 [main:117] - GENERATED CALL = (1u until 9u).isEmpty()
2021-03-12 09:11:05,241 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@2b9fe004]]
2021-03-12 09:11:05,241 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@2b9fe004]
2021-03-12 09:11:05,375 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:11:05,375 [main:117] - GENERATED CALL = (1u until 9u).equals("jvtsr")
2021-03-12 09:11:05,375 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.UIntProgression[DeserializedSimpleFunctionDescriptor@52801d2b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3236e8bc]]
2021-03-12 09:11:05,375 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.UIntProgression[DeserializedSimpleFunctionDescriptor@52801d2b]
2021-03-12 09:11:05,547 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:11:05,547 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3236e8bc]
2021-03-12 09:11:05,698 [main:117] - GENERATED CALL = (1u until 9u).equals("eymtn").equals(null)
2021-03-12 09:11:05,698 [main:113] - Case = [public open fun contains(value: kotlin.UInt): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@397d1d80], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3236e8bc]]
2021-03-12 09:11:05,698 [main:149] - GENERATING call of type public open fun contains(value: kotlin.UInt): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@397d1d80]
2021-03-12 09:11:05,845 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 09:11:05,849 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3236e8bc]
2021-03-12 09:11:05,991 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:11:05,992 [main:117] - GENERATED CALL = (1u until 9u).contains(2100807696.toUInt()).equals("tizss")
2021-03-12 09:11:05,992 [main:113] - Case = [public open fun iterator(): kotlin.collections.UIntIterator defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@815208f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.UIntIterator[DeserializedSimpleFunctionDescriptor@5d4c3e82]]
2021-03-12 09:11:05,992 [main:149] - GENERATING call of type public open fun iterator(): kotlin.collections.UIntIterator defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@815208f]
2021-03-12 09:11:05,992 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.UIntIterator[DeserializedSimpleFunctionDescriptor@5d4c3e82]
2021-03-12 09:11:06,140 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:11:06,140 [main:117] - GENERATED CALL = (1u until 9u).iterator().equals("mnagb")
2021-03-12 09:11:06,140 [main:113] - Case = [public open fun contains(value: kotlin.UInt): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@397d1d80], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3c3c290e]]
2021-03-12 09:11:06,140 [main:149] - GENERATING call of type public open fun contains(value: kotlin.UInt): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@397d1d80]
2021-03-12 09:11:06,286 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 09:11:06,290 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3c3c290e]
2021-03-12 09:11:06,430 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:11:06,433 [main:117] - GENERATED CALL = (1u until 9u).contains(2134252007.toUInt()).and(false)
2021-03-12 09:11:06,434 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5087eb35]]
2021-03-12 09:11:06,434 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5087eb35]
2021-03-12 09:11:06,434 [main:117] - GENERATED CALL = (1u until 9u).none()
2021-03-12 09:11:06,434 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.UIntProgression[DeserializedSimpleFunctionDescriptor@52801d2b], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c743b01]]
2021-03-12 09:11:06,434 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.UIntProgression[DeserializedSimpleFunctionDescriptor@52801d2b]
2021-03-12 09:11:06,565 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:11:06,565 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c743b01]
2021-03-12 09:11:06,697 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:11:06,700 [main:117] - GENERATED CALL = (1u until 9u).equals("nhvvh").xor(true)
2021-03-12 09:11:06,700 [main:113] - Case = [public open val endInclusive: kotlin.UInt defined in kotlin.ranges.UIntRange[DeserializedPropertyDescriptor@3aa24759], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@5e904b9a]]
2021-03-12 09:11:06,700 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@5e904b9a]
2021-03-12 09:11:06,830 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:11:06,830 [main:117] - GENERATED CALL = (1u until 9u).endInclusive.equals("bwjhw")
2021-03-12 09:11:06,830 [main:114] - replacement of false of type Boolean is (1u until 9u).contains(2134252007.toUInt()).and(false)
2021-03-12 09:11:06,963 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:11:06,963 [main:66] - Compilation checking started
2021-03-12 09:11:07,790 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = (1u until 9u).endInclusive.toString(two())

fun fu0(prope1: suspend () -> Unit) {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope1.startCoroutine(fu3 {
        prope0 = (two())?.toInt().toString(two())!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 {a: Kla0 -> check(true)}
    }
    prope1?.resumeWithException(IllegalStateException(ConcurrentModificationException()))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (1uL until 9uL).endInclusive.toString(two()) +
                prope4.joinToString(separator = (1uL until 9uL).step.toString(two()))) }
    }

    fun fu8(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true } ?: error((1175999352460025235.toULong()).toUByte().toString(410428326))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = (two()).compareTo(413340320).plus(75)
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope5 = 0
        prope6 = (1u until 9u).contains(2134252007.toUInt()).and(false)
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("zmmte")}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if ((two()).toChar().isHighSurrogate()) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((1uL until 9uL).first.toString(two()))
        if ((two()).toChar().isWhitespace()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope3.prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
throw IllegalArgumentException()
    }
}


2021-03-12 09:11:07,792 [main:107] - replacing ({}, Function0<Unit>)
2021-03-12 09:11:07,792 [main:50] - replacing {} Function0<Unit>
2021-03-12 09:11:07,792 [main:54] - Getting value of type Function0<Unit>
2021-03-12 09:11:07,928 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 09:11:07,930 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:11:08,074 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:11:08,078 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:11:08,580 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 09:11:08,583 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 09:11:08,586 [main:302] - generating value of type = Any false depth = 5
2021-03-12 09:11:08,586 [main:95] - GENERATED = require(true, { "omljf"})
2021-03-12 09:11:08,586 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true, { "omljf"})}
2021-03-12 09:11:08,586 [main:61] - GENERATED IS CALL =false
2021-03-12 09:11:08,750 [main:67] - randomType = Byte
2021-03-12 09:11:08,882 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:11:08,917 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 09:11:08,949 [main:106] - GETTING Function0<Unit> from UIntRange
2021-03-12 09:11:08,975 [main:106] - GETTING Function0<Unit> from ULongRange
2021-03-12 09:11:09,001 [main:114] - replacement of {} of type Function0<Unit> is { require(true, { "omljf"})}
2021-03-12 09:11:09,134 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 09:11:09,134 [main:66] - Compilation checking started
2021-03-12 09:11:09,787 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = (1u until 9u).endInclusive.toString(two())

fun fu0(prope1: suspend () -> Unit) {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope1.startCoroutine(fu3 {
        prope0 = (two())?.toInt().toString(two())!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 {a: Kla0 -> check(true)}
    }
    prope1?.resumeWithException(IllegalStateException(ConcurrentModificationException()))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (1uL until 9uL).endInclusive.toString(two()) +
                prope4.joinToString(separator = (1uL until 9uL).step.toString(two()))) }
    }

    fun fu8(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true } ?: error((1175999352460025235.toULong()).toUByte().toString(410428326))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = (two()).compareTo(413340320).plus(75)
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope5 = 0
        prope6 = (1u until 9u).contains(2134252007.toUInt()).and(false)
        prope7 = { require(true, { "omljf"})}
    }

    suspend fun fu10() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("zmmte")}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if ((two()).toChar().isHighSurrogate()) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((1uL until 9uL).first.toString(two()))
        if ((two()).toChar().isWhitespace()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope3.prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
throw IllegalArgumentException()
    }
}


2021-03-12 09:11:09,789 [main:107] - replacing (prope0.isSuccess, Boolean)
2021-03-12 09:11:09,789 [main:50] - replacing prope0.isSuccess Boolean
2021-03-12 09:11:09,789 [main:54] - Getting value of type Boolean
2021-03-12 09:11:09,926 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:11:09,929 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 09:11:09,929 [main:61] - GENERATED IS CALL =false
2021-03-12 09:11:10,081 [main:67] - randomType = Short
2021-03-12 09:11:10,216 [main:302] - generating value of type = Short true depth = 0
2021-03-12 09:11:10,256 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@375e6e24]
2021-03-12 09:11:10,392 [main:302] - generating value of type = Double true depth = 0
2021-03-12 09:11:10,395 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6ce5eb9b]
2021-03-12 09:11:10,395 [main:78] - Generated call from random type = (-31964).div(0.7897749576094785).isInfinite()
2021-03-12 09:11:10,396 [main:106] - GETTING Boolean from ULongRange
2021-03-12 09:11:10,421 [main:113] - Case = [public open fun contains(value: kotlin.ULong): kotlin.Boolean defined in kotlin.ranges.ULongRange[DeserializedSimpleFunctionDescriptor@78e0350], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3c3c290e]]
2021-03-12 09:11:10,421 [main:149] - GENERATING call of type public open fun contains(value: kotlin.ULong): kotlin.Boolean defined in kotlin.ranges.ULongRange[DeserializedSimpleFunctionDescriptor@78e0350]
2021-03-12 09:11:10,567 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 09:11:10,569 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3c3c290e]
2021-03-12 09:11:10,702 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:11:10,705 [main:117] - GENERATED CALL = (1uL until 9uL).contains(6257914042226534434.toULong()).and(true)
2021-03-12 09:11:10,705 [main:113] - Case = [public final val first: kotlin.ULong defined in kotlin.ranges.ULongProgression[DeserializedPropertyDescriptor@1ff228b1], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@112fc89c]]
2021-03-12 09:11:10,706 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@112fc89c]
2021-03-12 09:11:10,846 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:11:10,846 [main:117] - GENERATED CALL = (1uL until 9uL).first.equals("jaojd")
2021-03-12 09:11:10,846 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.ULongProgression[DeserializedSimpleFunctionDescriptor@12d651d0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3236e8bc]]
2021-03-12 09:11:10,846 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.ULongProgression[DeserializedSimpleFunctionDescriptor@12d651d0]
2021-03-12 09:11:10,979 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:11:10,979 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3236e8bc]
2021-03-12 09:11:11,136 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:11:11,136 [main:117] - GENERATED CALL = (1uL until 9uL).equals("dstrt").equals("wblny")
2021-03-12 09:11:11,136 [main:113] - Case = [public open fun contains(value: kotlin.ULong): kotlin.Boolean defined in kotlin.ranges.ULongRange[DeserializedSimpleFunctionDescriptor@78e0350], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c743b01]]
2021-03-12 09:11:11,136 [main:149] - GENERATING call of type public open fun contains(value: kotlin.ULong): kotlin.Boolean defined in kotlin.ranges.ULongRange[DeserializedSimpleFunctionDescriptor@78e0350]
2021-03-12 09:11:11,269 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 09:11:11,272 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c743b01]
2021-03-12 09:11:11,405 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:11:11,408 [main:117] - GENERATED CALL = (1uL until 9uL).contains(449025944104912180.toULong()).xor(false)
2021-03-12 09:11:11,408 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.ULongProgression[DeserializedSimpleFunctionDescriptor@12d651d0], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c743b01]]
2021-03-12 09:11:11,408 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.ULongProgression[DeserializedSimpleFunctionDescriptor@12d651d0]
2021-03-12 09:11:11,543 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:11:11,543 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c743b01]
2021-03-12 09:11:11,681 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:11:11,683 [main:117] - GENERATED CALL = (1uL until 9uL).equals("oakwo").xor(false)
2021-03-12 09:11:11,684 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public operator fun kotlin.ranges.ULongRange.contains(value: kotlin.UByte): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3a2b797]]
2021-03-12 09:11:11,684 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public operator fun kotlin.ranges.ULongRange.contains(value: kotlin.UByte): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3a2b797]
2021-03-12 09:11:11,819 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 09:11:11,823 [main:117] - GENERATED CALL = (1uL until 9uL).contains(95.toUByte())
2021-03-12 09:11:11,823 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.ULongProgression[DeserializedSimpleFunctionDescriptor@12d651d0], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6891f0e5]]
2021-03-12 09:11:11,823 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.ULongProgression[DeserializedSimpleFunctionDescriptor@12d651d0]
2021-03-12 09:11:11,958 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6891f0e5]
2021-03-12 09:11:12,094 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:11:12,098 [main:117] - GENERATED CALL = (1uL until 9uL).equals(null).or(true)
2021-03-12 09:11:12,098 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.all(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@14bca240]]
2021-03-12 09:11:12,098 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.all(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@14bca240]
2021-03-12 09:11:12,241 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-12 09:11:12,244 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:11:12,247 [main:117] - GENERATED CALL = (1uL until 9uL).all({a: T -> false})
2021-03-12 09:11:12,247 [main:113] - Case = [public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.ULongRange[DeserializedSimpleFunctionDescriptor@aa50fba]]
2021-03-12 09:11:12,247 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.ULongRange[DeserializedSimpleFunctionDescriptor@aa50fba]
2021-03-12 09:11:12,247 [main:117] - GENERATED CALL = (1uL until 9uL).isEmpty()
2021-03-12 09:11:12,247 [main:113] - Case = [public open val endInclusive: kotlin.ULong defined in kotlin.ranges.ULongRange[DeserializedPropertyDescriptor@4ad5892e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@112fc89c]]
2021-03-12 09:11:12,247 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@112fc89c]
2021-03-12 09:11:12,382 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:11:12,382 [main:117] - GENERATED CALL = (1uL until 9uL).endInclusive.equals("xlwkf")
2021-03-12 09:11:12,382 [main:114] - replacement of prope0.isSuccess of type Boolean is (1uL until 9uL).contains(449025944104912180.toULong()).xor(false)
2021-03-12 09:11:12,515 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:11:12,517 [main:107] - replacing ({ it?.methodName?.startsWith(method) == true }, Function0<Boolean>)
2021-03-12 09:11:12,517 [main:50] - replacing { it?.methodName?.startsWith(method) == true } Function0<Boolean>
2021-03-12 09:11:12,517 [main:54] - Getting value of type Function0<Boolean>
2021-03-12 09:11:12,651 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-12 09:11:12,654 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:11:12,657 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { true}
2021-03-12 09:11:12,657 [main:61] - GENERATED IS CALL =false
2021-03-12 09:11:12,668 [main:67] - randomType = Kla1
2021-03-12 09:11:12,802 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 09:11:12,805 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope0.getOrThrow()
    }
}
2021-03-12 09:11:12,941 [main:194] - Type params = []
2021-03-12 09:11:13,080 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 09:11:13,229 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:11:13,233 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:11:13,567 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 09:11:13,765 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:11:13,770 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:11:14,272 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:11:14,272 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:11:14,289 [main:106] - GETTING Function0<Boolean> from Int
2021-03-12 09:11:14,328 [main:106] - GETTING Function0<Boolean> from ULongRange
2021-03-12 09:11:14,355 [main:106] - GETTING Function0<Boolean> from UIntRange
2021-03-12 09:11:14,386 [main:114] - replacement of { it?.methodName?.startsWith(method) == true } of type Function0<Boolean> is { true}
2021-03-12 09:11:14,535 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 09:11:14,536 [main:66] - Compilation checking started
2021-03-12 09:11:15,177 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = (1u until 9u).endInclusive.toString(two())

fun fu0(prope1: suspend () -> Unit) {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope1.startCoroutine(fu3 {
        prope0 = (two())?.toInt().toString(two())!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 {a: Kla0 -> check(true)}
    }
    prope1?.resumeWithException(IllegalStateException(ConcurrentModificationException()))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (1uL until 9uL).endInclusive.toString(two()) +
                prope4.joinToString(separator = (1uL until 9uL).step.toString(two()))) }
    }

    fun fu8(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { true} ?: error((1175999352460025235.toULong()).toUByte().toString(410428326))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = (two()).compareTo(413340320).plus(75)
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope5 = 0
        prope6 = (1u until 9u).contains(2134252007.toUInt()).and(false)
        prope7 = { require(true, { "omljf"})}
    }

    suspend fun fu10() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("zmmte")}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if ((two()).toChar().isHighSurrogate()) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((1uL until 9uL).first.toString(two()))
        if ((two()).toChar().isWhitespace()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope3.prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
throw IllegalArgumentException()
    }
}


2021-03-12 09:11:15,180 [main:107] - replacing ("Wrong state-machine generated: it is finished early", String)
2021-03-12 09:11:15,181 [main:50] - replacing "Wrong state-machine generated: it is finished early" String
2021-03-12 09:11:15,181 [main:54] - Getting value of type String
2021-03-12 09:11:15,331 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:11:15,334 [main:58] - GENERATED VALUE OF TYPE String = "ogwir"
2021-03-12 09:11:15,334 [main:61] - GENERATED IS CALL =false
2021-03-12 09:11:15,339 [main:67] - randomType = Int
2021-03-12 09:11:15,472 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:11:15,508 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@14d8c418]
2021-03-12 09:11:15,508 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46eeb2f7]
2021-03-12 09:11:15,508 [main:78] - Generated call from random type = (-1167890246).toLong().toString(two())
2021-03-12 09:11:15,509 [main:106] - GETTING String from UIntRange
2021-03-12 09:11:15,533 [main:113] - Case = [public final val first: kotlin.UInt defined in kotlin.ranges.UIntProgression[DeserializedPropertyDescriptor@254382a8], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@128d1276]]
2021-03-12 09:11:15,533 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@128d1276]
2021-03-12 09:11:15,666 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:11:15,669 [main:117] - GENERATED CALL = (1u until 9u).first.toString(1481839561)
2021-03-12 09:11:15,669 [main:113] - Case = [public open val endInclusive: kotlin.UInt defined in kotlin.ranges.UIntRange[DeserializedPropertyDescriptor@3aa24759], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@128d1276]]
2021-03-12 09:11:15,669 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@128d1276]
2021-03-12 09:11:15,669 [main:117] - GENERATED CALL = (1u until 9u).endInclusive.toString(two())
2021-03-12 09:11:15,670 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5036158]]
2021-03-12 09:11:15,670 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5036158]
2021-03-12 09:11:15,805 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:11:15,949 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:11:16,122 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:11:16,262 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:11:16,397 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:11:16,535 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 09:11:16,538 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 09:11:16,544 [main:117] - GENERATED CALL = (1u until 9u).joinToString("fczhg", "ggojs", "pdvio", 1817390221, "xkijk", {a: T -> StringBuilder()})
2021-03-12 09:11:16,544 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.UIntRange[DeserializedPropertyDescriptor@1cb25d15], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b5abe35]]
2021-03-12 09:11:16,544 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b5abe35]
2021-03-12 09:11:16,544 [main:117] - GENERATED CALL = (1u until 9u).step.toString(two())
2021-03-12 09:11:16,544 [main:114] - replacement of "Wrong state-machine generated: it is finished early" of type String is (1u until 9u).step.toString(two())
2021-03-12 09:11:16,677 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:11:16,677 [main:66] - Compilation checking started
2021-03-12 09:11:17,336 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = (1u until 9u).endInclusive.toString(two())

fun fu0(prope1: suspend () -> Unit) {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope1.startCoroutine(fu3 {
        prope0 = (two())?.toInt().toString(two())!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 {a: Kla0 -> check(true)}
    }
    prope1?.resumeWithException(IllegalStateException(ConcurrentModificationException()))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (1uL until 9uL).endInclusive.toString(two()) +
                prope4.joinToString(separator = (1uL until 9uL).step.toString(two()))) }
    }

    fun fu8(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { true} ?: error((1175999352460025235.toULong()).toUByte().toString(410428326))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = (two()).compareTo(413340320).plus(75)
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope5 = 0
        prope6 = (1u until 9u).contains(2134252007.toUInt()).and(false)
        prope7 = { require(true, { "omljf"})}
    }

    suspend fun fu10() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("zmmte")}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if ((two()).toChar().isHighSurrogate()) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((1uL until 9uL).first.toString(two()))
        if ((two()).toChar().isWhitespace()) error((1u until 9u).step.toString(two()))
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope3.prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
throw IllegalArgumentException()
    }
}


2021-03-12 09:11:17,338 [main:107] - replacing (this, Kla2)
2021-03-12 09:11:17,339 [main:50] - replacing this Kla2
2021-03-12 09:11:17,339 [main:54] - Getting value of type Kla2
2021-03-12 09:11:17,475 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 09:11:17,478 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}
2021-03-12 09:11:17,478 [main:58] - GENERATED VALUE OF TYPE Kla2 = Kla2()
2021-03-12 09:11:17,478 [main:61] - GENERATED IS CALL =true
2021-03-12 09:11:17,640 [main:67] - randomType = Short
2021-03-12 09:11:17,774 [main:302] - generating value of type = Short true depth = 0
2021-03-12 09:11:17,813 [main:106] - GETTING Kla2 from UIntRange
2021-03-12 09:11:17,839 [main:106] - GETTING Kla2 from Int
2021-03-12 09:11:17,874 [main:106] - GETTING Kla2 from ULongRange
2021-03-12 09:11:17,901 [main:114] - replacement of this of type Kla2 is Kla2()
2021-03-12 09:11:18,037 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 09:11:18,037 [main:66] - Compilation checking started
2021-03-12 09:11:18,753 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun two() = 2

fun box(): String {
    val uintList = mutableListOf<UInt>()
    for (i in 1u until 9u step two()) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    val ulongList = mutableListOf<ULong>()
    for (i in 1uL until 9uL step two().toLong()) {
        ulongList += i
    }
    assertEquals(listOf(1uL, 3uL, 5uL, 7uL), ulongList)

    return "OK"
}

var prope0 = (1u until 9u).endInclusive.toString(two())

fun fu0(prope1: suspend () -> Unit) {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope1.startCoroutine(fu3 {
        prope0 = (two())?.toInt().toString(two())!!
    })
}

inline class Kla0(val s: String)

suspend fun <Ty0> List<Ty0>.fu1(prope1: suspend (Ty0) -> Unit) {
    for (e in this) {
        prope1(e)
    }
}

var prope1: Continuation<Any>? = null

fun box414(): String {
    val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
fu0 {
        listOf(Kla0("O"), Kla0("K")).fu1 {a: Kla0 -> check(true)}
    }
    prope1?.resumeWithException(IllegalStateException(ConcurrentModificationException()))
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
runCatching<Any?>({ "jtqbs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope0.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
Kla2().prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(prope1: Continuation<*>) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (1uL until 9uL).endInclusive.toString(two()) +
                prope4.joinToString(separator = (1uL until 9uL).step.toString(two()))) }
    }

    fun fu8(method: String) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope4.find { true} ?: error((1175999352460025235.toULong()).toUByte().toString(410428326))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope5 = (two()).compareTo(413340320).plus(75)
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope5 = 0
        prope6 = (1u until 9u).contains(2134252007.toUInt()).and(false)
        prope7 = { require(true, { "omljf"})}
    }

    suspend fun fu10() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("zmmte")}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
for (i in (two()).compareTo(two()).countTrailingZeroBits()..numberOfSuspensions) {
            if ((two()).toChar().isHighSurrogate()) error("goaog" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((1uL until 9uL).first.toString(two()))
        if ((two()).toChar().isWhitespace()) error((1u until 9u).step.toString(two()))
        prope7()
        if ((two()).toChar().equals('茫', true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
prope3.prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        val uintList = mutableListOf<UInt>()
val ulongList = mutableListOf<ULong>()
throw IllegalArgumentException()
    }
}


2021-03-12 09:11:18,757 [main:107] - replacing ("tail-call optimization miss: method at " + it, String)
2021-03-12 09:11:18,757 [main:50] - replacing "tail-call optimization miss: method at " + it String
2021-03-12 09:11:18,757 [main:54] - Getting value of type String
