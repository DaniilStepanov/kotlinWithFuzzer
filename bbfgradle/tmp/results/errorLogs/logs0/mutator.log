2021-03-11 10:44:58,811 [main:66] - Compilation checking started
2021-03-11 10:45:02,400 [main:112] - generating klass MyCollection1 text = class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}
2021-03-11 10:45:02,748 [main:194] - Type params = []
2021-03-11 10:45:03,009 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}
2021-03-11 10:45:03,292 [main:194] - Type params = []
2021-03-11 10:45:03,604 [main:112] - generating klass MyCollection3 text = class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = k > 0
    }
}
2021-03-11 10:45:03,915 [main:194] - Type params = []
2021-03-11 10:45:04,257 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = k > 0
    }
}
2021-03-11 10:45:04,514 [main:194] - Type params = []
2021-03-11 10:45:04,773 [main:112] - generating klass MyIterator text = class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
2021-03-11 10:45:04,775 [main:112] - generating klass MyIterator text = class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
2021-03-11 10:45:04,777 [main:112] - generating klass MyIterator text = class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = k > 0
    }
2021-03-11 10:45:04,779 [main:112] - generating klass MyIterator text = class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = k > 0
    }
2021-03-11 10:45:05,337 [main:52] - Trying to change 822 nodes
2021-03-11 10:45:05,337 [main:56] - replacing (k, Int)
2021-03-11 10:45:05,337 [main:38] - replacing k Int
2021-03-11 10:45:05,337 [main:42] - Getting value of type Int
2021-03-11 10:45:05,536 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:05,540 [main:46] - GENERATED VALUE OF TYPE Int = -733275643
2021-03-11 10:45:05,541 [main:49] - GENERATED IS CALL =false
2021-03-11 10:45:06,237 [main:55] - randomType = Byte
2021-03-11 10:45:06,522 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:06,721 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:45:06,722 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:45:06,931 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:07,171 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:07,173 [main:66] - Generated call from random type = (35).toInt().coerceIn(1954024864, -1506917785)
2021-03-11 10:45:07,186 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:45:07,198 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:45:07,198 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:45:07,199 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:45:07,377 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:07,379 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().compareTo(55)
2021-03-11 10:45:07,381 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:45:07,381 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:45:07,382 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:45:07,382 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().countTrailingZeroBits()
2021-03-11 10:45:07,382 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:45:07,383 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:45:07,383 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:45:07,614 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:07,616 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().rotateLeft(1053573842)
2021-03-11 10:45:07,617 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:45:07,617 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:45:07,617 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:45:07,787 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:07,788 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().minus(97)
2021-03-11 10:45:07,789 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:45:07,789 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:45:07,789 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:45:07,789 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().toInt()
2021-03-11 10:45:07,789 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:45:07,789 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:45:07,790 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:45:07,790 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().inc()
2021-03-11 10:45:07,790 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:45:07,790 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:45:07,790 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:45:07,983 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:07,985 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().div(-69)
2021-03-11 10:45:07,986 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:45:07,986 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:45:07,986 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:45:07,987 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().countLeadingZeroBits()
2021-03-11 10:45:07,987 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:45:07,987 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:45:07,987 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:45:07,987 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().unaryMinus()
2021-03-11 10:45:07,988 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:45:07,988 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:45:07,988 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:45:08,159 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:08,162 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().coerceAtLeast(-1148780722)
2021-03-11 10:45:08,162 [main:63] - replacement of k of type Int is (MyCollection1().iterator()).next().unaryMinus()
2021-03-11 10:45:08,353 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:45:08,354 [main:66] - Compilation checking started
2021-03-11 10:45:09,260 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if(sum != 15) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (el ?: 0)
    }
    if(sum != 15) return "c5 failed"

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != 15) return "c1 failed"

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != 15) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if(sum != 15) return "c3 failed"

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = sum + el!!
    }
    if(sum != 15) return "c4 failed"

    val a : Array<Int> = arrayOfNulls<Int>(5) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = 0
    for (el in a) {
        sum = sum + el!!
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (el ?: 0)
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = k > 0
    }
}
2021-03-11 10:45:09,267 [main:56] - replacing (MyCollection2(), MyCollection2)
2021-03-11 10:45:09,268 [main:38] - replacing MyCollection2() MyCollection2
2021-03-11 10:45:09,268 [main:42] - Getting value of type MyCollection2
2021-03-11 10:45:09,439 [main:302] - generating value of type = MyCollection2 false depth = 0
2021-03-11 10:45:09,440 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}
2021-03-11 10:45:09,597 [main:194] - Type params = []
2021-03-11 10:45:09,773 [main:46] - GENERATED VALUE OF TYPE MyCollection2 = MyCollection2()
2021-03-11 10:45:09,773 [main:49] - GENERATED IS CALL =true
2021-03-11 10:45:11,540 [main:55] - randomType = MutableMap<MyCollection3, ArrayDeque<Function1<Map<MyCollection2, MyCollection2?>, UByte?>>>?
2021-03-11 10:45:11,542 [main:94] - GETTING MyCollection2 from Iterator<Int>
2021-03-11 10:45:11,561 [main:94] - GETTING MyCollection2 from MyIterator
2021-03-11 10:45:11,579 [main:94] - GETTING MyCollection2 from MyIterator
2021-03-11 10:45:11,582 [main:94] - GETTING MyCollection2 from Array<Int?>
2021-03-11 10:45:11,617 [main:94] - GETTING MyCollection2 from Int
2021-03-11 10:45:11,707 [main:94] - GETTING MyCollection2 from Int
2021-03-11 10:45:11,708 [main:94] - GETTING MyCollection2 from Int
2021-03-11 10:45:11,710 [main:94] - GETTING MyCollection2 from Iterator<Int>
2021-03-11 10:45:11,710 [main:63] - replacement of MyCollection2() of type MyCollection2 is MyCollection2()
2021-03-11 10:45:11,889 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 10:45:11,895 [main:56] - replacing (k > 0, Boolean)
2021-03-11 10:45:11,895 [main:38] - replacing k > 0 Boolean
2021-03-11 10:45:11,895 [main:42] - Getting value of type Boolean
2021-03-11 10:45:12,059 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:45:12,060 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:45:12,061 [main:49] - GENERATED IS CALL =false
2021-03-11 10:45:12,065 [main:55] - randomType = MyCollection1
2021-03-11 10:45:12,270 [main:302] - generating value of type = MyCollection1 false depth = 0
2021-03-11 10:45:12,271 [main:112] - generating klass MyCollection1 text = class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}
2021-03-11 10:45:12,427 [main:194] - Type params = []
2021-03-11 10:45:12,591 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyCollection1[DeserializedSimpleFunctionDescriptor@577953cb]
2021-03-11 10:45:12,746 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:45:12,748 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@35500bca]
2021-03-11 10:45:12,902 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:45:12,903 [main:66] - Generated call from random type = (MyCollection1()).equals("ugviy").equals("rwrdq")
2021-03-11 10:45:12,903 [main:63] - replacement of k > 0 of type Boolean is (MyCollection1()).equals("ugviy").equals("rwrdq")
2021-03-11 10:45:13,101 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:45:13,102 [main:66] - Compilation checking started
2021-03-11 10:45:13,886 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if(sum != 15) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (el ?: 0)
    }
    if(sum != 15) return "c5 failed"

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != 15) return "c1 failed"

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != 15) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if(sum != 15) return "c3 failed"

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = sum + el!!
    }
    if(sum != 15) return "c4 failed"

    val a : Array<Int> = arrayOfNulls<Int>(5) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = 0
    for (el in a) {
        sum = sum + el!!
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (el ?: 0)
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}
2021-03-11 10:45:13,890 [main:56] - replacing (sum, Int)
2021-03-11 10:45:13,891 [main:38] - replacing sum Int
2021-03-11 10:45:13,891 [main:42] - Getting value of type Int
2021-03-11 10:45:14,065 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:14,067 [main:46] - GENERATED VALUE OF TYPE Int = 48388584
2021-03-11 10:45:14,068 [main:49] - GENERATED IS CALL =false
2021-03-11 10:45:14,611 [main:55] - randomType = HashMap<Long, Double>
2021-03-11 10:45:14,775 [main:302] - generating value of type = HashMap<Long, Double> false depth = 0
2021-03-11 10:45:14,945 [main:43] - GENERATING CALL OF fun <K, V> HashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashMap<Long, Double> = TODO()
2021-03-11 10:45:14,954 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> HashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashMap<Long, Double> = TODO()
2021-03-11 10:45:15,583 [main:302] - generating value of type = Int true depth = 3
2021-03-11 10:45:15,584 [main:302] - generating value of type = Float true depth = 3
2021-03-11 10:45:15,587 [main:95] - GENERATED = HashMap<Long, Double>(1258808423, 0.0051142573f)
2021-03-11 10:45:15,793 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:45:15,923 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:16,099 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:16,100 [main:66] - Generated call from random type = (HashMap<Long, Double>(1258808423, 0.0051142573f)).size.coerceIn(-804500272, -651377875)
2021-03-11 10:45:16,101 [main:94] - GETTING Int from Int
2021-03-11 10:45:16,189 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@140b0a8d]]
2021-03-11 10:45:16,190 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f]
2021-03-11 10:45:16,328 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:45:16,329 [main:105] - GENERATED CALL = (sum).div(7907014370183239714).sign
2021-03-11 10:45:16,329 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:45:16,330 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:45:16,330 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:45:16,458 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:16,680 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:16,683 [main:105] - GENERATED CALL = (sum).toInt().coerceIn(-2018460518, 261749363)
2021-03-11 10:45:16,683 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12f06cb], @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@5959e353]]
2021-03-11 10:45:16,683 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12f06cb]
2021-03-11 10:45:16,684 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@5959e353]
2021-03-11 10:45:16,684 [main:105] - GENERATED CALL = (sum).toDouble().roundToInt()
2021-03-11 10:45:16,685 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@22a1cf7f]]
2021-03-11 10:45:16,685 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:45:16,685 [main:137] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@22a1cf7f]
2021-03-11 10:45:16,686 [main:105] - GENERATED CALL = (sum).toChar().toInt()
2021-03-11 10:45:16,686 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@21bef933]]
2021-03-11 10:45:16,686 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:45:16,686 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@21bef933]
2021-03-11 10:45:16,877 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:16,878 [main:105] - GENERATED CALL = (sum).toByte().div(93)
2021-03-11 10:45:16,878 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], public open val start: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@4e51b8]]
2021-03-11 10:45:16,878 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:45:17,005 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:17,006 [main:105] - GENERATED CALL = (sum).rangeTo(-39).start
2021-03-11 10:45:17,006 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:45:17,006 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:45:17,130 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:17,131 [main:105] - GENERATED CALL = (sum).compareTo(46)
2021-03-11 10:45:17,131 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:45:17,132 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:45:17,297 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:17,299 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:45:17,526 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:17,528 [main:105] - GENERATED CALL = (sum).compareTo(155812329).shr(-2021018019)
2021-03-11 10:45:17,528 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:45:17,528 [main:105] - GENERATED CALL = (sum).absoluteValue
2021-03-11 10:45:17,528 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:45:17,528 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:45:17,529 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:45:17,659 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:17,661 [main:105] - GENERATED CALL = (sum).toInt().rem(98)
2021-03-11 10:45:17,661 [main:63] - replacement of sum of type Int is (sum).toChar().toInt()
2021-03-11 10:45:17,785 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:45:17,786 [main:66] - Compilation checking started
2021-03-11 10:45:18,223 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if(sum != 15) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (el ?: 0)
    }
    if(sum != 15) return "c5 failed"

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != 15) return "c1 failed"

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != 15) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        (sum).toChar().toInt() = sum + el!!
    }
    if(sum != 15) return "c3 failed"

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = sum + el!!
    }
    if(sum != 15) return "c4 failed"

    val a : Array<Int> = arrayOfNulls<Int>(5) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = 0
    for (el in a) {
        sum = sum + el!!
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (el ?: 0)
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:45:18,229 [main:56] - replacing (k, Int)
2021-03-11 10:45:18,229 [main:38] - replacing k Int
2021-03-11 10:45:18,229 [main:42] - Getting value of type Int
2021-03-11 10:45:18,434 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:18,435 [main:46] - GENERATED VALUE OF TYPE Int = 2007508668
2021-03-11 10:45:18,435 [main:49] - GENERATED IS CALL =false
2021-03-11 10:45:18,437 [main:55] - randomType = String
2021-03-11 10:45:18,589 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:45:18,629 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3eb0c1d0]
2021-03-11 10:45:18,770 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:45:18,905 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:45:18,907 [main:66] - Generated call from random type = ("odafy").compareTo("fnaqe", true)
2021-03-11 10:45:18,907 [main:94] - GETTING Int from Int
2021-03-11 10:45:18,961 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@674346bc]]
2021-03-11 10:45:18,961 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f]
2021-03-11 10:45:19,082 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:45:19,084 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@674346bc]
2021-03-11 10:45:19,084 [main:105] - GENERATED CALL = (i).div(8413870036251254060).countTrailingZeroBits()
2021-03-11 10:45:19,084 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:45:19,084 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:45:19,295 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:19,297 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:45:19,297 [main:105] - GENERATED CALL = (i).compareTo(1855959354).toInt()
2021-03-11 10:45:19,297 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@55d433d4]]
2021-03-11 10:45:19,297 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:45:19,297 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@55d433d4]
2021-03-11 10:45:19,440 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:19,441 [main:105] - GENERATED CALL = (i).toShort().div(70)
2021-03-11 10:45:19,442 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:45:19,442 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:45:19,442 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:45:19,442 [main:105] - GENERATED CALL = (i).toInt().inc()
2021-03-11 10:45:19,443 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:45:19,443 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:45:19,443 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:45:19,568 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:19,569 [main:105] - GENERATED CALL = (i).toInt().xor(1966157634)
2021-03-11 10:45:19,569 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:45:19,569 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:45:19,701 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:19,703 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:45:19,703 [main:105] - GENERATED CALL = (i).compareTo(-691142230).inv()
2021-03-11 10:45:19,704 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:45:19,704 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:45:19,704 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:45:19,865 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:19,866 [main:105] - GENERATED CALL = (i).toInt().minus(59)
2021-03-11 10:45:19,867 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:45:19,867 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:45:20,003 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:20,004 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:45:20,122 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:20,123 [main:105] - GENERATED CALL = (i).compareTo(1366067042).rem(-70)
2021-03-11 10:45:20,124 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:45:20,124 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:45:20,124 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:45:20,124 [main:105] - GENERATED CALL = (i).toInt().inv()
2021-03-11 10:45:20,124 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@57d953ba]]
2021-03-11 10:45:20,124 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:45:20,124 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@57d953ba]
2021-03-11 10:45:20,124 [main:105] - GENERATED CALL = (i).toByte().toInt()
2021-03-11 10:45:20,125 [main:63] - replacement of k of type Int is ("odafy").compareTo("fnaqe", true)
2021-03-11 10:45:20,250 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:45:20,251 [main:66] - Compilation checking started
2021-03-11 10:45:20,682 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if(sum != 15) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (el ?: 0)
    }
    if(sum != 15) return "c5 failed"

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != 15) return "c1 failed"

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != 15) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if(sum != 15) return "c3 failed"

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = sum + el!!
    }
    if(sum != 15) return "c4 failed"

    val a : Array<Int> = arrayOfNulls<Int>(5) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = 0
    for (el in a) {
        sum = sum + el!!
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (el ?: 0)
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = ("odafy").compareTo("fnaqe", true)--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:45:20,688 [main:56] - replacing (sum, Int)
2021-03-11 10:45:20,689 [main:38] - replacing sum Int
2021-03-11 10:45:20,689 [main:42] - Getting value of type Int
2021-03-11 10:45:20,864 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:20,865 [main:46] - GENERATED VALUE OF TYPE Int = 1209897969
2021-03-11 10:45:20,865 [main:49] - GENERATED IS CALL =false
2021-03-11 10:45:21,133 [main:55] - randomType = UByte?
2021-03-11 10:45:21,248 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:45:21,333 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline infix fun and(other: kotlin.UByte): kotlin.UByte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1e10bd69]
2021-03-11 10:45:21,530 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:45:21,532 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UByte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@71d93d18]
2021-03-11 10:45:21,532 [main:66] - Generated call from random type = (20.toUByte())?.and(30.toUByte()).countTrailingZeroBits()
2021-03-11 10:45:21,535 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:45:21,573 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:45:21,574 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:45:21,574 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:45:21,719 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:21,721 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().and(1169253757)
2021-03-11 10:45:21,721 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:45:21,721 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:45:21,721 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:45:21,844 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:21,846 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().ushr(77427581)
2021-03-11 10:45:21,846 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:45:21,846 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:45:21,846 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:45:21,847 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().toInt()
2021-03-11 10:45:21,847 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:45:21,847 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:45:21,847 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().sign
2021-03-11 10:45:21,848 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:45:21,848 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:45:21,848 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:45:21,983 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:21,984 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().compareTo(-40)
2021-03-11 10:45:21,984 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:45:21,984 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:45:21,984 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:45:22,100 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:22,101 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().shl(-2088067267)
2021-03-11 10:45:22,101 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:45:22,101 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:45:22,102 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().absoluteValue
2021-03-11 10:45:22,102 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:45:22,102 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:45:22,102 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:45:22,102 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().takeHighestOneBit()
2021-03-11 10:45:22,102 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:45:22,102 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:45:22,103 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:45:22,103 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().inc()
2021-03-11 10:45:22,103 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:45:22,103 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:45:22,103 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:45:22,261 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:22,262 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().xor(-406033877)
2021-03-11 10:45:22,262 [main:63] - replacement of sum of type Int is (MyCollection2().iterator()).next().inc()
2021-03-11 10:45:22,391 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:45:22,392 [main:66] - Compilation checking started
2021-03-11 10:45:22,699 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if(sum != 15) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (el ?: 0)
    }
    if(sum != 15) return "c5 failed"

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != 15) return "c1 failed"

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != 15) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        (MyCollection2().iterator()).next().inc() = sum + el!!
    }
    if(sum != 15) return "c3 failed"

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = sum + el!!
    }
    if(sum != 15) return "c4 failed"

    val a : Array<Int> = arrayOfNulls<Int>(5) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = 0
    for (el in a) {
        sum = sum + el!!
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (el ?: 0)
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:45:22,704 [main:56] - replacing (el ?: 0, Int)
2021-03-11 10:45:22,705 [main:38] - replacing el ?: 0 Int
2021-03-11 10:45:22,705 [main:42] - Getting value of type Int
2021-03-11 10:45:22,850 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:22,851 [main:46] - GENERATED VALUE OF TYPE Int = -455854151
2021-03-11 10:45:22,851 [main:49] - GENERATED IS CALL =false
2021-03-11 10:45:22,855 [main:55] - randomType = MyCollection2
2021-03-11 10:45:23,013 [main:302] - generating value of type = MyCollection2 false depth = 0
2021-03-11 10:45:23,014 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}
2021-03-11 10:45:23,164 [main:194] - Type params = []
2021-03-11 10:45:23,356 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun <T> kotlin.collections.Iterable<T>.minWithOrNull(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1c8144b0]
2021-03-11 10:45:23,498 [main:302] - generating value of type = Comparator<in T> false depth = 0
2021-03-11 10:45:23,675 [main:43] - GENERATING CALL OF fun <T> compareBy(selectors: Function1<T, Comparable<*>?>): Comparator<T> = TODO()
2021-03-11 10:45:23,679 [main:61] - WITHOUT TYPE PARAMS = fun <T> compareBy(selectors: Function1<T, Comparable<*>?>): Comparator<T> = TODO()
2021-03-11 10:45:23,903 [main:302] - generating value of type = Function1<T, Comparable<*>?> false depth = 3
2021-03-11 10:45:23,904 [main:302] - generating value of type = Comparable<*> false depth = 4
2021-03-11 10:45:23,932 [main:95] - GENERATED = compareBy<T>({a: T -> -3})
2021-03-11 10:45:23,933 [main:66] - Generated call from random type = (MyCollection2()).minWithOrNull(compareBy<T>({a: T -> -3}))!!
2021-03-11 10:45:23,937 [main:94] - GETTING Int from MyIterator
2021-03-11 10:45:23,950 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:45:23,951 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:45:24,101 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:24,102 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.div(-71)
2021-03-11 10:45:24,103 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:45:24,103 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:45:24,239 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:24,241 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.compareTo(117)
2021-03-11 10:45:24,241 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:45:24,242 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:45:24,363 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:24,365 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.and(-1384469847)
2021-03-11 10:45:24,366 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:45:24,366 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.sign
2021-03-11 10:45:24,366 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:45:24,366 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:45:24,520 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:24,522 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.ushr(2083891374)
2021-03-11 10:45:24,522 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:45:24,522 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:45:24,694 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:24,695 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.xor(1158368547)
2021-03-11 10:45:24,695 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:45:24,695 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:45:24,695 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.inc()
2021-03-11 10:45:24,696 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:45:24,696 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:45:24,696 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.takeHighestOneBit()
2021-03-11 10:45:24,696 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:45:24,696 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:45:24,697 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.unaryMinus()
2021-03-11 10:45:24,697 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:45:24,697 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:45:24,832 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:24,833 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.rotateLeft(1503638101)
2021-03-11 10:45:24,833 [main:63] - replacement of el ?: 0 of type Int is (MyCollection2()).minWithOrNull(compareBy<T>({a: T -> -3}))!!
2021-03-11 10:45:24,962 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-11 10:45:24,963 [main:66] - Compilation checking started
2021-03-11 10:45:25,724 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if(sum != 15) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((MyCollection2()).minWithOrNull(compareBy<T>({a: T -> -3}))!!)
    }
    if(sum != 15) return "c5 failed"

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != 15) return "c1 failed"

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != 15) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if(sum != 15) return "c3 failed"

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = sum + el!!
    }
    if(sum != 15) return "c4 failed"

    val a : Array<Int> = arrayOfNulls<Int>(5) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = 0
    for (el in a) {
        sum = sum + el!!
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (el ?: 0)
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:45:25,730 [main:56] - replacing (el!!, Int)
2021-03-11 10:45:25,731 [main:38] - replacing el!! Int
2021-03-11 10:45:25,731 [main:42] - Getting value of type Int
2021-03-11 10:45:25,927 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:25,928 [main:46] - GENERATED VALUE OF TYPE Int = 639932657
2021-03-11 10:45:25,928 [main:49] - GENERATED IS CALL =false
2021-03-11 10:45:26,437 [main:55] - randomType = Function1<UInt, Byte>
2021-03-11 10:45:26,438 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:45:26,449 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:45:26,449 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:45:26,449 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:45:26,450 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().unaryMinus()
2021-03-11 10:45:26,450 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:45:26,450 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:45:26,450 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:45:26,587 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:26,588 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().or(1656585240)
2021-03-11 10:45:26,589 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:45:26,589 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:45:26,589 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:45:26,589 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().takeHighestOneBit()
2021-03-11 10:45:26,589 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:45:26,589 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:45:26,589 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:45:26,717 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:26,718 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().rotateRight(288292717)
2021-03-11 10:45:26,718 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:45:26,719 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:45:26,719 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:45:26,719 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().dec()
2021-03-11 10:45:26,719 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:45:26,719 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:45:26,719 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:45:26,875 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:26,876 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().coerceAtLeast(2110819572)
2021-03-11 10:45:26,877 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:45:26,877 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:45:26,877 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:45:26,877 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().countOneBits()
2021-03-11 10:45:26,877 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:45:26,877 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:45:26,877 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:45:26,878 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().unaryPlus()
2021-03-11 10:45:26,878 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:45:26,878 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:45:26,878 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:45:27,042 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:27,044 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().compareTo(13)
2021-03-11 10:45:27,045 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:45:27,045 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:45:27,045 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:45:27,206 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:27,207 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().and(-866255008)
2021-03-11 10:45:27,207 [main:63] - replacement of el!! of type Int is (MyCollection2().iterator()).next().and(-866255008)
2021-03-11 10:45:27,363 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:45:27,363 [main:66] - Compilation checking started
2021-03-11 10:45:28,079 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if(sum != 15) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (el ?: 0)
    }
    if(sum != 15) return "c5 failed"

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != 15) return "c1 failed"

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != 15) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if(sum != 15) return "c3 failed"

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = sum + el!!
    }
    if(sum != 15) return "c4 failed"

    val a : Array<Int> = arrayOfNulls<Int>(5) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = 0
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (el ?: 0)
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:45:28,085 [main:56] - replacing (sum, Int)
2021-03-11 10:45:28,086 [main:38] - replacing sum Int
2021-03-11 10:45:28,086 [main:42] - Getting value of type Int
2021-03-11 10:45:28,222 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:28,223 [main:46] - GENERATED VALUE OF TYPE Int = -1801803752
2021-03-11 10:45:28,223 [main:49] - GENERATED IS CALL =false
2021-03-11 10:45:28,226 [main:55] - randomType = MyCollection2
2021-03-11 10:45:28,353 [main:302] - generating value of type = MyCollection2 false depth = 0
2021-03-11 10:45:28,354 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}
2021-03-11 10:45:28,472 [main:194] - Type params = []
2021-03-11 10:45:28,608 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.first(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@454da158]
2021-03-11 10:45:28,609 [main:66] - Generated call from random type = (MyCollection2()).first()!!
2021-03-11 10:45:28,609 [main:94] - GETTING Int from Int
2021-03-11 10:45:28,677 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], public final val step: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@d97c869]]
2021-03-11 10:45:28,678 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:45:28,790 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:28,791 [main:105] - GENERATED CALL = (i).rangeTo(-100).step
2021-03-11 10:45:28,792 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:45:28,792 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:45:28,906 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:28,907 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:45:29,059 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:29,061 [main:105] - GENERATED CALL = (i).compareTo(1064052095).rotateLeft(-405818028)
2021-03-11 10:45:29,061 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@32620f7e]]
2021-03-11 10:45:29,061 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:45:29,062 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@32620f7e]
2021-03-11 10:45:29,203 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:29,204 [main:105] - GENERATED CALL = (i).toByte().rem(-84)
2021-03-11 10:45:29,204 [main:101] - Case = [public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:45:29,204 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:45:29,320 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:29,321 [main:105] - GENERATED CALL = (i).shr(-1296070548)
2021-03-11 10:45:29,321 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@719372c6]]
2021-03-11 10:45:29,321 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:45:29,321 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@719372c6]
2021-03-11 10:45:29,322 [main:105] - GENERATED CALL = (i).toShort().unaryPlus()
2021-03-11 10:45:29,322 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:45:29,322 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:45:29,322 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:45:29,431 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:29,433 [main:105] - GENERATED CALL = (i).toInt().or(-1036339603)
2021-03-11 10:45:29,433 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:45:29,433 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:45:29,550 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:29,552 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:45:29,686 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:29,687 [main:105] - GENERATED CALL = (i).compareTo(-376243295).rem(-47)
2021-03-11 10:45:29,687 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:45:29,688 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:45:29,825 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:29,827 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:45:29,970 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:29,971 [main:105] - GENERATED CALL = (i).compareTo(251333909).coerceAtLeast(703089765)
2021-03-11 10:45:29,971 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:45:29,971 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:45:30,088 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:30,089 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:45:30,227 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:30,228 [main:105] - GENERATED CALL = (i).compareTo(-9101328).times(-73)
2021-03-11 10:45:30,228 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3c2cc2a6]]
2021-03-11 10:45:30,228 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:45:30,229 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3c2cc2a6]
2021-03-11 10:45:30,229 [main:105] - GENERATED CALL = (i).toShort().countLeadingZeroBits()
2021-03-11 10:45:30,229 [main:63] - replacement of sum of type Int is (i).compareTo(-376243295).rem(-47)
2021-03-11 10:45:30,379 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:45:30,380 [main:66] - Compilation checking started
2021-03-11 10:45:30,776 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if(sum != 15) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (el ?: 0)
    }
    if(sum != 15) return "c5 failed"

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != 15) return "c1 failed"

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != 15) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if(sum != 15) return "c3 failed"

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = sum + el!!
    }
    if(sum != 15) return "c4 failed"

    val a : Array<Int> = arrayOfNulls<Int>(5) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = 0
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        (i).compareTo(-376243295).rem(-47) = sum + (el ?: 0)
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:45:30,783 [main:56] - replacing (0, Int)
2021-03-11 10:45:30,783 [main:38] - replacing 0 Int
2021-03-11 10:45:30,783 [main:42] - Getting value of type Int
2021-03-11 10:45:30,903 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:30,904 [main:46] - GENERATED VALUE OF TYPE Int = 1809175323
2021-03-11 10:45:30,905 [main:49] - GENERATED IS CALL =false
2021-03-11 10:45:30,906 [main:55] - randomType = Boolean
2021-03-11 10:45:31,025 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:45:31,040 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:45:31,173 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:45:31,174 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:45:31,324 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:31,326 [main:66] - Generated call from random type = (true).compareTo(true).div(37)
2021-03-11 10:45:31,328 [main:94] - GETTING Int from Array<Int?>
2021-03-11 10:45:31,351 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:45:31,352 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:45:31,488 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:31,490 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.rotateRight(-1265801866)
2021-03-11 10:45:31,490 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepHashCode(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@46619276]]
2021-03-11 10:45:31,491 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepHashCode(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@46619276]
2021-03-11 10:45:31,491 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).contentDeepHashCode()
2021-03-11 10:45:31,492 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:45:31,492 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:45:31,492 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.countTrailingZeroBits()
2021-03-11 10:45:31,492 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:45:31,493 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.sign
2021-03-11 10:45:31,493 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:45:31,494 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:45:31,639 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:31,641 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.div(24)
2021-03-11 10:45:31,641 [main:101] - Case = [public final operator fun iterator(): kotlin.collections.Iterator<kotlin.Int?> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@688b308a], public abstract operator fun next(): kotlin.Int? defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@4b06cee5]]
2021-03-11 10:45:31,641 [main:137] - GENERATING call of type public final operator fun iterator(): kotlin.collections.Iterator<kotlin.Int?> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@688b308a]
2021-03-11 10:45:31,641 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int? defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@4b06cee5]
2021-03-11 10:45:31,642 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).iterator().next()
2021-03-11 10:45:31,642 [main:101] - Case = [@kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentHashCode(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6cbd4f7b]]
2021-03-11 10:45:31,642 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentHashCode(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6cbd4f7b]
2021-03-11 10:45:31,643 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).contentHashCode()
2021-03-11 10:45:31,643 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:45:31,643 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:45:31,804 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:31,805 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.xor(938427919)
2021-03-11 10:45:31,806 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2760da68], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:45:31,806 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2760da68]
2021-03-11 10:45:31,956 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:45:31,956 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:45:32,081 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:45:32,082 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).equals("ciktm").compareTo(false)
2021-03-11 10:45:32,083 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:45:32,083 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:45:32,211 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:32,212 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:45:32,462 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:32,464 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(537757886)?.compareTo(20)
2021-03-11 10:45:32,464 [main:63] - replacement of 0 of type Int is (arrayOfNulls<Int>(5)).iterator().next()
2021-03-11 10:45:32,654 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:45:32,655 [main:66] - Compilation checking started
2021-03-11 10:45:33,159 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if(sum != 15) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (el ?: 0)
    }
    if(sum != 15) return "c5 failed"

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != 15) return "c1 failed"

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != 15) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if(sum != 15) return "c3 failed"

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = sum + el!!
    }
    if(sum != 15) return "c4 failed"

    val a : Array<Int> = arrayOfNulls<Int>(5) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = 0
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (el ?: 0)
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > (arrayOfNulls<Int>(5)).iterator().next()
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:45:33,165 [main:56] - replacing (k, Int)
2021-03-11 10:45:33,166 [main:38] - replacing k Int
2021-03-11 10:45:33,166 [main:42] - Getting value of type Int
2021-03-11 10:45:33,331 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:33,332 [main:46] - GENERATED VALUE OF TYPE Int = -49939158
2021-03-11 10:45:33,332 [main:49] - GENERATED IS CALL =false
2021-03-11 10:45:33,337 [main:55] - randomType = MyCollection2
2021-03-11 10:45:33,496 [main:302] - generating value of type = MyCollection2 false depth = 0
2021-03-11 10:45:33,497 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}
2021-03-11 10:45:33,653 [main:194] - Type params = []
2021-03-11 10:45:33,860 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun <T> kotlin.collections.Iterable<T>.maxWithOrNull(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@122a96f9]
2021-03-11 10:45:34,054 [main:302] - generating value of type = Comparator<in T> false depth = 0
2021-03-11 10:45:34,224 [main:43] - GENERATING CALL OF fun <T> nullsFirst(comparator: kotlin.Comparator<T>): Comparator<T> = TODO()
2021-03-11 10:45:34,228 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsFirst(comparator: kotlin.Comparator<T>): Comparator<T> = TODO()
2021-03-11 10:45:34,585 [main:385] - Cant generate call of fun <T> nullsFirst(comparator: kotlin.Comparator<T>): Comparator<T> = TODO()
2021-03-11 10:45:34,585 [main:144] - CANT GENERATE PARAMS FOR @kotlin.SinceKotlin public fun <T> kotlin.collections.Iterable<T>.maxWithOrNull(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@122a96f9]
2021-03-11 10:45:34,585 [main:66] - Generated call from random type = (MyCollection2()).null!!
2021-03-11 10:45:34,585 [main:63] - replacement of k of type Int is (MyCollection2()).null!!
2021-03-11 10:45:34,696 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-11 10:45:34,697 [main:66] - Compilation checking started
2021-03-11 10:45:35,076 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if(sum != 15) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (el ?: 0)
    }
    if(sum != 15) return "c5 failed"

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != 15) return "c1 failed"

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != 15) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if(sum != 15) return "c3 failed"

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = sum + el!!
    }
    if(sum != 15) return "c4 failed"

    val a : Array<Int> = arrayOfNulls<Int>(5) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = 0
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (el ?: 0)
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = (MyCollection2()).null!!--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:45:35,083 [main:56] - replacing (sum, Int)
2021-03-11 10:45:35,084 [main:38] - replacing sum Int
2021-03-11 10:45:35,084 [main:42] - Getting value of type Int
2021-03-11 10:45:35,249 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:35,250 [main:46] - GENERATED VALUE OF TYPE Int = 1506163248
2021-03-11 10:45:35,251 [main:49] - GENERATED IS CALL =false
2021-03-11 10:45:35,453 [main:55] - randomType = UInt
2021-03-11 10:45:35,589 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 10:45:35,645 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@4d60be4b]
2021-03-11 10:45:35,766 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 10:45:35,767 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.ULong.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4fceeea3]
2021-03-11 10:45:35,767 [main:66] - Generated call from random type = (518536982.toUInt()).div(5077768901730634324.toULong()).countLeadingZeroBits()
2021-03-11 10:45:35,768 [main:94] - GETTING Int from MyIterator
2021-03-11 10:45:35,780 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:45:35,780 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:45:35,896 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:35,898 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.shr(988295295)
2021-03-11 10:45:35,898 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:45:35,898 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:45:35,899 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.toInt()
2021-03-11 10:45:35,899 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:45:35,899 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:45:35,899 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:45:36,034 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:36,035 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.ushr(988633677)
2021-03-11 10:45:36,036 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:45:36,036 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:45:36,160 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:36,161 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.shl(-2066020502)
2021-03-11 10:45:36,162 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:45:36,162 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:45:36,287 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:36,288 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.rotateLeft(-576349735)
2021-03-11 10:45:36,288 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:45:36,288 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:45:36,288 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:45:36,289 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.unaryPlus()
2021-03-11 10:45:36,289 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:45:36,289 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:45:36,289 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:45:36,457 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:36,459 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.shr(674422234)
2021-03-11 10:45:36,460 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:45:36,460 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:45:36,460 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:45:36,460 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.inc()
2021-03-11 10:45:36,460 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:45:36,460 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:45:36,461 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:45:36,599 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:36,600 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.or(-24331581)
2021-03-11 10:45:36,600 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:45:36,600 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:45:36,600 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:45:36,600 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.inv()
2021-03-11 10:45:36,600 [main:63] - replacement of sum of type Int is (MyCollection3().iterator()).k.rotateLeft(-576349735)
2021-03-11 10:45:36,719 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:45:36,720 [main:66] - Compilation checking started
2021-03-11 10:45:37,466 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if(sum != 15) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (el ?: 0)
    }
    if(sum != 15) return "c5 failed"

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != 15) return "c1 failed"

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != 15) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if(sum != 15) return "c3 failed"

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + el!!
    }
    if(sum != 15) return "c4 failed"

    val a : Array<Int> = arrayOfNulls<Int>(5) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = 0
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (el ?: 0)
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:45:37,472 [main:56] - replacing (sum, Int)
2021-03-11 10:45:37,473 [main:38] - replacing sum Int
2021-03-11 10:45:37,473 [main:42] - Getting value of type Int
2021-03-11 10:45:37,599 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:37,600 [main:46] - GENERATED VALUE OF TYPE Int = 2050706790
2021-03-11 10:45:37,601 [main:49] - GENERATED IS CALL =false
2021-03-11 10:45:37,734 [main:55] - randomType = Double
2021-03-11 10:45:37,876 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:45:37,938 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:45:37,939 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:45:38,057 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:38,059 [main:66] - Generated call from random type = (0.8459107328460612).toInt().shr(-1041968087)
2021-03-11 10:45:38,060 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:45:38,070 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:45:38,070 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:45:38,071 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:45:38,071 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().countTrailingZeroBits()
2021-03-11 10:45:38,071 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]]
2021-03-11 10:45:38,071 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:45:38,071 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next()
2021-03-11 10:45:38,071 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:45:38,071 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:45:38,072 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:45:38,072 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().countLeadingZeroBits()
2021-03-11 10:45:38,072 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:45:38,072 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:45:38,072 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:45:38,188 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:38,189 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().compareTo(27)
2021-03-11 10:45:38,190 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:45:38,190 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:45:38,190 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:45:38,308 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:38,309 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().shr(-1278744971)
2021-03-11 10:45:38,309 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:45:38,309 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:45:38,309 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:45:38,433 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:38,435 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().or(-1281595725)
2021-03-11 10:45:38,435 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:45:38,436 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09]
2021-03-11 10:45:38,566 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:45:38,566 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:45:38,680 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:45:38,681 [main:105] - GENERATED CALL = (MyCollection2().iterator()).equals("suxnp").compareTo(true)
2021-03-11 10:45:38,681 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:45:38,681 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:45:38,682 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:45:38,847 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:38,993 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:38,994 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().coerceIn(1365834613, -277402108)
2021-03-11 10:45:38,994 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:45:38,994 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:45:38,994 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:45:39,101 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:39,102 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().ushr(-535081157)
2021-03-11 10:45:39,102 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:45:39,102 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:45:39,102 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:45:39,212 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:39,213 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().coerceAtMost(-1634876627)
2021-03-11 10:45:39,214 [main:63] - replacement of sum of type Int is (MyCollection2().iterator()).next().countTrailingZeroBits()
2021-03-11 10:45:39,321 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:45:39,322 [main:66] - Compilation checking started
2021-03-11 10:45:39,673 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if(sum != 15) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (el ?: 0)
    }
    if(sum != 15) return "c5 failed"

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != 15) return "c1 failed"

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != 15) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        (MyCollection2().iterator()).next().countTrailingZeroBits() = sum + el!!
    }
    if(sum != 15) return "c3 failed"

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + el!!
    }
    if(sum != 15) return "c4 failed"

    val a : Array<Int> = arrayOfNulls<Int>(5) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = 0
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (el ?: 0)
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:45:39,677 [main:56] - replacing (0, Int)
2021-03-11 10:45:39,677 [main:38] - replacing 0 Int
2021-03-11 10:45:39,677 [main:42] - Getting value of type Int
2021-03-11 10:45:39,797 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:39,798 [main:46] - GENERATED VALUE OF TYPE Int = 349739297
2021-03-11 10:45:39,798 [main:49] - GENERATED IS CALL =false
2021-03-11 10:45:39,944 [main:55] - randomType = Byte
2021-03-11 10:45:40,062 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:40,119 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6b8bfcfc]
2021-03-11 10:45:40,230 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:40,232 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:45:40,344 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:40,345 [main:66] - Generated call from random type = (-37).compareTo(59).rotateLeft(1790833613)
2021-03-11 10:45:40,345 [main:94] - GETTING Int from Int
2021-03-11 10:45:40,412 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@26e773b5]]
2021-03-11 10:45:40,412 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:45:40,412 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@26e773b5]
2021-03-11 10:45:40,523 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:40,524 [main:105] - GENERATED CALL = (i).toShort().minus(63)
2021-03-11 10:45:40,524 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:45:40,524 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:45:40,642 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:40,643 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:45:40,745 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:40,747 [main:105] - GENERATED CALL = (i).compareTo(-380942449).rotateRight(-688056320)
2021-03-11 10:45:40,747 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:45:40,747 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:45:40,747 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:45:40,747 [main:105] - GENERATED CALL = (i).toInt().inv()
2021-03-11 10:45:40,747 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:45:40,747 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:45:40,856 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:40,857 [main:105] - GENERATED CALL = (i).rotateLeft(-338142276)
2021-03-11 10:45:40,857 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431], public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@74f66b42]]
2021-03-11 10:45:40,857 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431]
2021-03-11 10:45:40,998 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:45:40,999 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@74f66b42]
2021-03-11 10:45:40,999 [main:105] - GENERATED CALL = (i).div(0.36008229316954465).toInt()
2021-03-11 10:45:41,000 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1679473f]]
2021-03-11 10:45:41,000 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:45:41,000 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1679473f]
2021-03-11 10:45:41,000 [main:105] - GENERATED CALL = (i).toShort().countTrailingZeroBits()
2021-03-11 10:45:41,000 [main:101] - Case = [public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:45:41,000 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:45:41,110 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:41,111 [main:105] - GENERATED CALL = (i).coerceAtMost(200950970)
2021-03-11 10:45:41,111 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:45:41,111 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:45:41,235 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:41,236 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:45:41,236 [main:105] - GENERATED CALL = (i).compareTo(-1345783127).countOneBits()
2021-03-11 10:45:41,237 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@674346bc]]
2021-03-11 10:45:41,237 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f]
2021-03-11 10:45:41,351 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:45:41,352 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@674346bc]
2021-03-11 10:45:41,353 [main:105] - GENERATED CALL = (i).div(-3716881466560390925).countTrailingZeroBits()
2021-03-11 10:45:41,353 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], public final val first: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@46455b22]]
2021-03-11 10:45:41,353 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:45:41,476 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:41,478 [main:105] - GENERATED CALL = (i).rangeTo(-60).first
2021-03-11 10:45:41,478 [main:63] - replacement of 0 of type Int is (-37).compareTo(59).rotateLeft(1790833613)
2021-03-11 10:45:41,586 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:45:41,587 [main:66] - Compilation checking started
2021-03-11 10:45:42,192 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if(sum != 15) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (el ?: 0)
    }
    if(sum != 15) return "c5 failed"

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != 15) return "c1 failed"

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != 15) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if(sum != 15) return "c3 failed"

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + el!!
    }
    if(sum != 15) return "c4 failed"

    val a : Array<Int> = arrayOfNulls<Int>(5) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (el ?: 0)
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:45:42,198 [main:56] - replacing ((el ?: 0), Int)
2021-03-11 10:45:42,199 [main:38] - replacing (el ?: 0) Int
2021-03-11 10:45:42,199 [main:42] - Getting value of type Int
2021-03-11 10:45:42,354 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:42,355 [main:46] - GENERATED VALUE OF TYPE Int = -780820217
2021-03-11 10:45:42,355 [main:49] - GENERATED IS CALL =false
2021-03-11 10:45:42,473 [main:55] - randomType = Double
2021-03-11 10:45:42,589 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:45:42,654 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5e6d3a1e]
2021-03-11 10:45:42,654 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5e9d7b78]
2021-03-11 10:45:42,654 [main:66] - Generated call from random type = (0.8521790463916958).toByte().countOneBits()
2021-03-11 10:45:42,656 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:45:42,667 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:45:42,667 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:45:42,667 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:45:42,796 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:42,797 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().compareTo(93)
2021-03-11 10:45:42,798 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:45:42,798 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:45:42,798 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:45:42,920 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:42,921 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().shr(1553584644)
2021-03-11 10:45:42,921 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:45:42,921 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:45:42,921 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:45:43,034 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:43,035 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().shl(-93875207)
2021-03-11 10:45:43,035 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:45:43,035 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:45:43,035 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:45:43,036 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().takeHighestOneBit()
2021-03-11 10:45:43,036 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:45:43,036 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:45:43,036 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:45:43,036 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().unaryPlus()
2021-03-11 10:45:43,036 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:45:43,036 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:45:43,036 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:45:43,151 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:43,153 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().coerceAtMost(2055555900)
2021-03-11 10:45:43,153 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:45:43,153 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:45:43,153 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().absoluteValue
2021-03-11 10:45:43,153 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]]
2021-03-11 10:45:43,153 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:45:43,153 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next()
2021-03-11 10:45:43,153 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:45:43,153 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:45:43,154 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:45:43,265 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:43,266 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().or(1259333172)
2021-03-11 10:45:43,267 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:45:43,267 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:45:43,267 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:45:43,267 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().dec()
2021-03-11 10:45:43,267 [main:63] - replacement of (el ?: 0) of type Int is (MyCollection1().iterator()).next().unaryPlus()
2021-03-11 10:45:43,438 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:45:43,438 [main:66] - Compilation checking started
2021-03-11 10:45:44,060 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if(sum != 15) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (el ?: 0)
    }
    if(sum != 15) return "c5 failed"

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != 15) return "c1 failed"

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != 15) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if(sum != 15) return "c3 failed"

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + el!!
    }
    if(sum != 15) return "c4 failed"

    val a : Array<Int> = arrayOfNulls<Int>(5) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:45:44,067 [main:56] - replacing (MyIterator(), MyIterator)
2021-03-11 10:45:44,067 [main:38] - replacing MyIterator() MyIterator
2021-03-11 10:45:44,067 [main:42] - Getting value of type MyIterator
2021-03-11 10:45:44,221 [main:302] - generating value of type = MyIterator false depth = 0
2021-03-11 10:45:44,222 [main:112] - generating klass MyIterator text = class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
2021-03-11 10:45:44,223 [main:46] - GENERATED VALUE OF TYPE MyIterator = 
2021-03-11 10:45:44,227 [main:55] - randomType = MyCollection2
2021-03-11 10:45:44,353 [main:302] - generating value of type = MyCollection2 false depth = 0
2021-03-11 10:45:44,354 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}
2021-03-11 10:45:44,468 [main:194] - Type params = []
2021-03-11 10:45:44,609 [main:94] - GETTING MyIterator from Int
2021-03-11 10:45:44,672 [main:94] - GETTING MyIterator from Int
2021-03-11 10:45:44,673 [main:94] - GETTING MyIterator from Iterator<Int>
2021-03-11 10:45:44,681 [main:94] - GETTING MyIterator from MyIterator
2021-03-11 10:45:44,688 [main:63] - replacement of MyIterator() of type MyIterator is MyCollection4().iterator()
2021-03-11 10:45:44,836 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:45:44,837 [main:66] - Compilation checking started
2021-03-11 10:45:45,214 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if(sum != 15) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (el ?: 0)
    }
    if(sum != 15) return "c5 failed"

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != 15) return "c1 failed"

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != 15) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if(sum != 15) return "c3 failed"

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + el!!
    }
    if(sum != 15) return "c4 failed"

    val a : Array<Int> = arrayOfNulls<Int>(5) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection4().iterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:45:45,218 [main:56] - replacing (15, Int)
2021-03-11 10:45:45,218 [main:38] - replacing 15 Int
2021-03-11 10:45:45,218 [main:42] - Getting value of type Int
2021-03-11 10:45:45,344 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:45,345 [main:46] - GENERATED VALUE OF TYPE Int = 1182076010
2021-03-11 10:45:45,345 [main:49] - GENERATED IS CALL =false
2021-03-11 10:45:45,350 [main:55] - randomType = MyCollection3
2021-03-11 10:45:45,513 [main:302] - generating value of type = MyCollection3 false depth = 0
2021-03-11 10:45:45,515 [main:112] - generating klass MyCollection3 text = class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}
2021-03-11 10:45:45,671 [main:194] - Type params = []
2021-03-11 10:45:45,787 [main:137] - GENERATING call of type public final operator fun iterator(): MyCollection3.MyIterator defined in MyCollection3[SimpleFunctionDescriptorImpl@57e15433]
2021-03-11 10:45:45,788 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@2fe2430b]
2021-03-11 10:45:45,788 [main:66] - Generated call from random type = (MyCollection3()).iterator().next()!!
2021-03-11 10:45:45,789 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:45:45,795 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:45:45,795 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:45:45,795 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:45:45,904 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:45,906 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().minus(-4)
2021-03-11 10:45:45,906 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:45:45,906 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:45:45,906 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:45:46,034 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:46,155 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:46,157 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)
2021-03-11 10:45:46,157 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:45:46,157 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09]
2021-03-11 10:45:46,281 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:45:46,281 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:45:46,390 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:45:46,391 [main:105] - GENERATED CALL = (MyCollection1().iterator()).equals("mvfka").compareTo(false)
2021-03-11 10:45:46,391 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:45:46,392 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:45:46,392 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:45:46,519 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:46,520 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().or(547040054)
2021-03-11 10:45:46,520 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:45:46,520 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:45:46,520 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:45:46,635 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:46,636 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().compareTo(100)
2021-03-11 10:45:46,636 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:45:46,636 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:45:46,636 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:45:46,636 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().inv()
2021-03-11 10:45:46,636 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:45:46,636 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:45:46,636 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:45:46,637 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().countTrailingZeroBits()
2021-03-11 10:45:46,637 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:45:46,637 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:45:46,637 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:45:46,761 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:46,763 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().rotateRight(2077410349)
2021-03-11 10:45:46,763 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:45:46,763 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:45:46,763 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:45:46,884 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:46,885 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().and(-575996466)
2021-03-11 10:45:46,885 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:45:46,886 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:45:46,886 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:45:47,026 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:47,028 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().rotateLeft(-1359701559)
2021-03-11 10:45:47,028 [main:63] - replacement of 15 of type Int is (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)
2021-03-11 10:45:47,167 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:45:47,168 [main:66] - Compilation checking started
2021-03-11 10:45:47,847 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if(sum != 15) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (el ?: 0)
    }
    if(sum != 15) return "c5 failed"

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != 15) return "c1 failed"

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != 15) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if(sum != 15) return "c3 failed"

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + el!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = arrayOfNulls<Int>(5) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:45:47,852 [main:56] - replacing ((MyCollection3().iterator()).k.rotateLeft(-576349735) + el!!, Int)
2021-03-11 10:45:47,853 [main:38] - replacing (MyCollection3().iterator()).k.rotateLeft(-576349735) + el!! Int
2021-03-11 10:45:47,853 [main:42] - Getting value of type Int
2021-03-11 10:45:48,003 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:48,005 [main:46] - GENERATED VALUE OF TYPE Int = 1261978079
2021-03-11 10:45:48,005 [main:49] - GENERATED IS CALL =false
2021-03-11 10:45:48,010 [main:55] - randomType = Int?
2021-03-11 10:45:48,171 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:48,251 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]
2021-03-11 10:45:48,398 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:45:48,399 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:45:48,570 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:45:48,572 [main:66] - Generated call from random type = (247497958)?.equals("pwwuh").compareTo(false)
2021-03-11 10:45:48,573 [main:94] - GETTING Int from MyIterator
2021-03-11 10:45:48,589 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf]]
2021-03-11 10:45:48,589 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k
2021-03-11 10:45:48,590 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:45:48,590 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:45:48,590 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:45:48,811 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:48,813 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.div(-105)
2021-03-11 10:45:48,813 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:45:48,813 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:45:48,814 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:45:48,814 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.toInt()
2021-03-11 10:45:48,814 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:45:48,814 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:45:48,943 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:48,944 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.compareTo(-82)
2021-03-11 10:45:48,945 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:45:48,945 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:45:49,081 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:49,083 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.rem(10)
2021-03-11 10:45:49,083 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:45:49,083 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:45:49,084 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:45:49,084 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.unaryMinus()
2021-03-11 10:45:49,084 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:45:49,084 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:45:49,084 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.takeHighestOneBit()
2021-03-11 10:45:49,084 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:45:49,084 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:45:49,085 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.unaryPlus()
2021-03-11 10:45:49,085 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:45:49,085 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:45:49,085 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:45:49,231 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:49,233 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.shl(155789357)
2021-03-11 10:45:49,233 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:45:49,233 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:45:49,233 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.takeLowestOneBit()
2021-03-11 10:45:49,233 [main:63] - replacement of (MyCollection3().iterator()).k.rotateLeft(-576349735) + el!! of type Int is (MyCollection3().iterator()).next()?.div(-105)
2021-03-11 10:45:49,395 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 10:45:49,396 [main:66] - Compilation checking started
2021-03-11 10:45:49,755 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if(sum != 15) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (el ?: 0)
    }
    if(sum != 15) return "c5 failed"

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != 15) return "c1 failed"

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != 15) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if(sum != 15) return "c3 failed"

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).next()?.div(-105)
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = arrayOfNulls<Int>(5) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:45:49,760 [main:56] - replacing (el ?: 0, Int)
2021-03-11 10:45:49,761 [main:38] - replacing el ?: 0 Int
2021-03-11 10:45:49,761 [main:42] - Getting value of type Int
2021-03-11 10:45:49,879 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:49,880 [main:46] - GENERATED VALUE OF TYPE Int = -1559502909
2021-03-11 10:45:49,880 [main:49] - GENERATED IS CALL =false
2021-03-11 10:45:49,884 [main:55] - randomType = MyCollection3
2021-03-11 10:45:50,000 [main:302] - generating value of type = MyCollection3 false depth = 0
2021-03-11 10:45:50,001 [main:112] - generating klass MyCollection3 text = class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}
2021-03-11 10:45:50,131 [main:194] - Type params = []
2021-03-11 10:45:50,252 [main:137] - GENERATING call of type public final operator fun iterator(): MyCollection3.MyIterator defined in MyCollection3[SimpleFunctionDescriptorImpl@57e15433]
2021-03-11 10:45:50,252 [main:66] - Generated call from random type = (MyCollection3()).iterator().k
2021-03-11 10:45:50,252 [main:94] - GETTING Int from Int
2021-03-11 10:45:50,295 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:45:50,295 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:45:50,416 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:50,417 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:45:50,417 [main:105] - GENERATED CALL = (i).compareTo(928129245).takeHighestOneBit()
2021-03-11 10:45:50,417 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:45:50,417 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:45:50,417 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:45:50,538 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:50,539 [main:105] - GENERATED CALL = (i).toInt().plus(-1)
2021-03-11 10:45:50,540 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:45:50,540 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:45:50,654 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:50,655 [main:105] - GENERATED CALL = (i).rotateLeft(1043200455)
2021-03-11 10:45:50,655 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:45:50,655 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:45:50,767 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:50,768 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:45:50,768 [main:105] - GENERATED CALL = (i).compareTo(948893424).dec()
2021-03-11 10:45:50,768 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:45:50,768 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:45:50,768 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:45:50,768 [main:105] - GENERATED CALL = (i).toInt().countLeadingZeroBits()
2021-03-11 10:45:50,768 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1180d1b3]]
2021-03-11 10:45:50,768 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:45:50,769 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1180d1b3]
2021-03-11 10:45:50,889 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:50,891 [main:105] - GENERATED CALL = (i).toShort().rem(-87)
2021-03-11 10:45:50,891 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:45:50,891 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:45:50,891 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:45:50,998 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:50,999 [main:105] - GENERATED CALL = (i).toInt().shl(1383162687)
2021-03-11 10:45:51,000 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:45:51,000 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:45:51,128 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:51,129 [main:105] - GENERATED CALL = (i).compareTo(73)
2021-03-11 10:45:51,129 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:45:51,129 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:45:51,129 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:45:51,277 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:51,278 [main:105] - GENERATED CALL = (i).toInt().minus(-103)
2021-03-11 10:45:51,278 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:45:51,279 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:45:51,279 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:45:51,279 [main:105] - GENERATED CALL = (i).toInt().takeLowestOneBit()
2021-03-11 10:45:51,279 [main:63] - replacement of el ?: 0 of type Int is (i).compareTo(73)
2021-03-11 10:45:51,396 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:45:51,397 [main:66] - Compilation checking started
2021-03-11 10:45:51,890 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if(sum != 15) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return "c5 failed"

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != 15) return "c1 failed"

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != 15) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if(sum != 15) return "c3 failed"

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + el!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = arrayOfNulls<Int>(5) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:45:51,898 [main:56] - replacing (arrayOfNulls<Int>(5), Array<Int?>)
2021-03-11 10:45:51,899 [main:38] - replacing arrayOfNulls<Int>(5) Array<Int?>
2021-03-11 10:45:51,899 [main:42] - Getting value of type Array<Int?>
2021-03-11 10:45:52,051 [main:302] - generating value of type = Array<Int?> false depth = 0
2021-03-11 10:45:52,172 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<Int?> = TODO()
2021-03-11 10:45:52,176 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<Int?> = TODO()
2021-03-11 10:45:52,444 [main:302] - generating value of type = Int true depth = 3
2021-03-11 10:45:52,445 [main:95] - GENERATED = arrayOfNulls<Int?>(1259016930)
2021-03-11 10:45:52,445 [main:46] - GENERATED VALUE OF TYPE Array<Int?> = arrayOfNulls<Int?>(1259016930)
2021-03-11 10:45:52,445 [main:49] - GENERATED IS CALL =true
2021-03-11 10:45:52,450 [main:55] - randomType = MyCollection3
2021-03-11 10:45:52,609 [main:302] - generating value of type = MyCollection3 false depth = 0
2021-03-11 10:45:52,610 [main:112] - generating klass MyCollection3 text = class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}
2021-03-11 10:45:52,718 [main:194] - Type params = []
2021-03-11 10:45:52,831 [main:94] - GETTING Array<Int?> from Array<Int?>
2021-03-11 10:45:52,847 [main:101] - Case = [public fun <T> kotlin.Array<T>.sliceArray(indices: kotlin.collections.Collection<kotlin.Int>): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7940abfb]]
2021-03-11 10:45:52,847 [main:137] - GENERATING call of type public fun <T> kotlin.Array<T>.sliceArray(indices: kotlin.collections.Collection<kotlin.Int>): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7940abfb]
2021-03-11 10:45:52,953 [main:302] - generating value of type = Collection<Int> false depth = 0
2021-03-11 10:45:53,077 [main:43] - GENERATING CALL OF fun <T> emptyList(): Collection<Int> = TODO()
2021-03-11 10:45:53,079 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyList(): Collection<Int> = TODO()
2021-03-11 10:45:53,213 [main:95] - GENERATED = emptyList<Int>()
2021-03-11 10:45:53,213 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>())
2021-03-11 10:45:53,213 [main:101] - Case = [public fun <T : kotlin.Comparable<T>> kotlin.Array<T>.sortedArray(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@62c4b0c7]]
2021-03-11 10:45:53,213 [main:137] - GENERATING call of type public fun <T : kotlin.Comparable<T>> kotlin.Array<T>.sortedArray(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@62c4b0c7]
2021-03-11 10:45:53,213 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).sortedArray()
2021-03-11 10:45:53,213 [main:101] - Case = [public fun <T : kotlin.Any> kotlin.Array<T?>.requireNoNulls(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3358e940]]
2021-03-11 10:45:53,214 [main:137] - GENERATING call of type public fun <T : kotlin.Any> kotlin.Array<T?>.requireNoNulls(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3358e940]
2021-03-11 10:45:53,214 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).requireNoNulls()
2021-03-11 10:45:53,214 [main:101] - Case = [public fun <T> kotlin.Array<T>.reversedArray(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1f7c53ea]]
2021-03-11 10:45:53,214 [main:137] - GENERATING call of type public fun <T> kotlin.Array<T>.reversedArray(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1f7c53ea]
2021-03-11 10:45:53,214 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).reversedArray()
2021-03-11 10:45:53,214 [main:101] - Case = [public fun <T : kotlin.Comparable<T>> kotlin.Array<T>.sortedArrayDescending(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@508fd8b1]]
2021-03-11 10:45:53,214 [main:137] - GENERATING call of type public fun <T : kotlin.Comparable<T>> kotlin.Array<T>.sortedArrayDescending(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@508fd8b1]
2021-03-11 10:45:53,215 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).sortedArrayDescending()
2021-03-11 10:45:53,215 [main:63] - replacement of arrayOfNulls<Int>(5) of type Array<Int?> is (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>())
2021-03-11 10:45:53,328 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:45:53,329 [main:66] - Compilation checking started
2021-03-11 10:45:53,885 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if(sum != 15) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return "c5 failed"

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != 15) return "c1 failed"

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != 15) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if(sum != 15) return "c3 failed"

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + el!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:45:53,892 [main:56] - replacing (el, Int)
2021-03-11 10:45:53,893 [main:38] - replacing el Int
2021-03-11 10:45:53,893 [main:42] - Getting value of type Int
2021-03-11 10:45:54,078 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:54,079 [main:46] - GENERATED VALUE OF TYPE Int = 690788765
2021-03-11 10:45:54,080 [main:49] - GENERATED IS CALL =false
2021-03-11 10:45:54,530 [main:55] - randomType = Triple<Boolean, Array<Short>, MyCollection1>
2021-03-11 10:45:54,659 [main:302] - generating value of type = Triple<Boolean, Array<Short>, MyCollection1> false depth = 0
2021-03-11 10:45:54,794 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Boolean, second: Array<Short>, third: MyCollection1): Triple<Boolean, Array<Short>, MyCollection1> = TODO()
2021-03-11 10:45:54,798 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Boolean, second: Array<Short>, third: MyCollection1): Triple<Boolean, Array<Short>, MyCollection1> = TODO()
2021-03-11 10:45:54,925 [main:302] - generating value of type = Boolean true depth = 3
2021-03-11 10:45:54,926 [main:302] - generating value of type = Array<Short> false depth = 3
2021-03-11 10:45:55,048 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: Short): Array<Short> = TODO()
2021-03-11 10:45:55,050 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: Short): Array<Short> = TODO()
2021-03-11 10:45:55,176 [main:302] - generating value of type = Short true depth = 6
2021-03-11 10:45:55,177 [main:95] - GENERATED = arrayOf<Short>(-31100)
2021-03-11 10:45:55,177 [main:302] - generating value of type = MyCollection1 false depth = 3
2021-03-11 10:45:55,178 [main:112] - generating klass MyCollection1 text = class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}
2021-03-11 10:45:55,324 [main:194] - Type params = []
2021-03-11 10:45:55,474 [main:95] - GENERATED = Triple<Boolean, Array<Short>, MyCollection1>(false, arrayOf<Short>(-31100), MyCollection1())
2021-03-11 10:45:55,502 [main:66] - Generated call from random type = (Triple<Boolean, Array<Short>, MyCollection1>(false, arrayOf<Short>(-31100), MyCollection1())).second.lastIndex
2021-03-11 10:45:55,503 [main:94] - GETTING Int from MyIterator
2021-03-11 10:45:55,515 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:45:55,515 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:45:55,515 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:45:55,622 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:55,623 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.compareTo(-122)
2021-03-11 10:45:55,623 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:45:55,623 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:45:55,623 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.unaryPlus()
2021-03-11 10:45:55,623 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:45:55,623 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:45:55,623 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:45:55,735 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:55,736 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.or(-1760580535)
2021-03-11 10:45:55,736 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:45:55,736 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:45:55,843 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:55,844 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.coerceAtLeast(-746984543)
2021-03-11 10:45:55,844 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:45:55,844 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.sign
2021-03-11 10:45:55,844 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:45:55,844 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:45:55,844 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:45:55,951 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:55,952 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.shr(887911616)
2021-03-11 10:45:55,952 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:45:55,952 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:45:55,953 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.countOneBits()
2021-03-11 10:45:55,953 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:45:55,953 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:45:55,953 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:45:56,062 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:56,063 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.shl(-1916628360)
2021-03-11 10:45:56,063 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]]
2021-03-11 10:45:56,064 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:45:56,064 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()
2021-03-11 10:45:56,064 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:45:56,064 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:45:56,165 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:45:56,166 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.rem(14)
2021-03-11 10:45:56,166 [main:63] - replacement of el of type Int is (MyCollection3().iterator()).k.sign
2021-03-11 10:45:56,299 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:45:56,300 [main:66] - Compilation checking started
2021-03-11 10:45:56,674 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if(sum != 15) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return "c5 failed"

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != 15) return "c1 failed"

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != 15) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if(sum != 15) return "c3 failed"

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.sign!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:45:56,680 [main:56] - replacing ("c3 failed", String)
2021-03-11 10:45:56,681 [main:38] - replacing "c3 failed" String
2021-03-11 10:45:56,681 [main:42] - Getting value of type String
2021-03-11 10:45:56,823 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:45:56,825 [main:46] - GENERATED VALUE OF TYPE String = "iaovu"
2021-03-11 10:45:56,825 [main:49] - GENERATED IS CALL =false
2021-03-11 10:45:56,949 [main:55] - randomType = MyCollection4?
2021-03-11 10:45:57,068 [main:302] - generating value of type = MyCollection4 false depth = 0
2021-03-11 10:45:57,069 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:45:57,185 [main:194] - Type params = []
2021-03-11 10:45:57,304 [main:94] - GETTING String from Int
2021-03-11 10:45:57,347 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40ec46fe]]
2021-03-11 10:45:57,347 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:45:57,347 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40ec46fe]
2021-03-11 10:45:57,348 [main:105] - GENERATED CALL = (i).toChar().titlecase()
2021-03-11 10:45:57,348 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]]
2021-03-11 10:45:57,348 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:45:57,471 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:57,472 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]
2021-03-11 10:45:57,575 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:57,576 [main:105] - GENERATED CALL = (i).compareTo(-1721190108).toString(1713485183)
2021-03-11 10:45:57,576 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]]
2021-03-11 10:45:57,576 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]
2021-03-11 10:45:57,681 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:57,682 [main:105] - GENERATED CALL = (i).toString(801151916)
2021-03-11 10:45:57,683 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]]
2021-03-11 10:45:57,683 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:45:57,683 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]
2021-03-11 10:45:57,787 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:57,788 [main:105] - GENERATED CALL = (i).toInt().toString(1965625916)
2021-03-11 10:45:57,788 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e0e5d90]]
2021-03-11 10:45:57,788 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97]
2021-03-11 10:45:57,788 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e0e5d90]
2021-03-11 10:45:57,888 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:57,890 [main:105] - GENERATED CALL = (i).toLong().toString(-712458850)
2021-03-11 10:45:57,890 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15f2210a]]
2021-03-11 10:45:57,890 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:45:57,890 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15f2210a]
2021-03-11 10:45:57,997 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:57,998 [main:105] - GENERATED CALL = (i).toByte().toString(22991638)
2021-03-11 10:45:57,998 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1879a786]]
2021-03-11 10:45:57,998 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:45:57,998 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1879a786]
2021-03-11 10:45:58,104 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:58,106 [main:105] - GENERATED CALL = (i).toShort().toString(-172147798)
2021-03-11 10:45:58,106 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e0e5d90]]
2021-03-11 10:45:58,106 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f]
2021-03-11 10:45:58,211 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:45:58,212 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e0e5d90]
2021-03-11 10:45:58,316 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:58,318 [main:105] - GENERATED CALL = (i).div(-3141269435585461316).toString(1621094575)
2021-03-11 10:45:58,318 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d72be4]]
2021-03-11 10:45:58,318 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:45:58,318 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d72be4]
2021-03-11 10:45:58,318 [main:105] - GENERATED CALL = (i).toChar().lowercase()
2021-03-11 10:45:58,319 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59e5df5f]]
2021-03-11 10:45:58,319 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:45:58,319 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59e5df5f]
2021-03-11 10:45:58,451 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:45:58,452 [main:105] - GENERATED CALL = (i).toChar().plus("piwaj")
2021-03-11 10:45:58,452 [main:63] - replacement of "c3 failed" of type String is (i).toChar().lowercase()
2021-03-11 10:45:58,570 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:45:58,570 [main:66] - Compilation checking started
2021-03-11 10:45:59,063 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if(sum != 15) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return "c5 failed"

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != 15) return "c1 failed"

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != 15) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if(sum != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + el!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:45:59,068 [main:56] - replacing (sum, Int)
2021-03-11 10:45:59,068 [main:38] - replacing sum Int
2021-03-11 10:45:59,069 [main:42] - Getting value of type Int
2021-03-11 10:45:59,181 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:45:59,182 [main:46] - GENERATED VALUE OF TYPE Int = -500536123
2021-03-11 10:45:59,182 [main:49] - GENERATED IS CALL =false
2021-03-11 10:45:59,299 [main:55] - randomType = MyCollection1?
2021-03-11 10:45:59,402 [main:302] - generating value of type = MyCollection1 false depth = 0
2021-03-11 10:45:59,403 [main:112] - generating klass MyCollection1 text = class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}
2021-03-11 10:45:59,504 [main:194] - Type params = []
2021-03-11 10:45:59,619 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun <T> kotlin.collections.Iterable<T>.maxWithOrNull(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@122a96f9]
2021-03-11 10:45:59,739 [main:302] - generating value of type = Comparator<in T> false depth = 0
2021-03-11 10:45:59,849 [main:43] - GENERATING CALL OF fun <T> nullsFirst(comparator: kotlin.Comparator<T>): Comparator<T> = TODO()
2021-03-11 10:45:59,851 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsFirst(comparator: kotlin.Comparator<T>): Comparator<T> = TODO()
2021-03-11 10:46:00,082 [main:385] - Cant generate call of fun <T> nullsFirst(comparator: kotlin.Comparator<T>): Comparator<T> = TODO()
2021-03-11 10:46:00,083 [main:144] - CANT GENERATE PARAMS FOR @kotlin.SinceKotlin public fun <T> kotlin.collections.Iterable<T>.maxWithOrNull(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@122a96f9]
2021-03-11 10:46:00,083 [main:66] - Generated call from random type = (MyCollection1())?.null!!
2021-03-11 10:46:00,084 [main:94] - GETTING Int from Array<Int?>
2021-03-11 10:46:00,096 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:46:00,096 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.sign
2021-03-11 10:46:00,096 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:46:00,096 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:46:00,202 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:00,203 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:46:00,203 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-1589774842)?.unaryMinus()
2021-03-11 10:46:00,203 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:46:00,203 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:46:00,307 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:00,309 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.div(9)
2021-03-11 10:46:00,309 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:46:00,309 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:46:00,414 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:00,415 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.rem(-72)
2021-03-11 10:46:00,415 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:46:00,415 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:46:00,516 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:00,517 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:46:00,517 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(495929329)?.unaryPlus()
2021-03-11 10:46:00,518 [main:101] - Case = [public val <T> kotlin.Array<out T>.lastIndex: kotlin.Int defined in kotlin.collections[DeserializedPropertyDescriptor@6eaa0de4]]
2021-03-11 10:46:00,518 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).lastIndex
2021-03-11 10:46:00,518 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:46:00,518 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:46:00,646 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:00,647 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:46:00,648 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-1498875710)?.inc()
2021-03-11 10:46:00,648 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:46:00,648 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:46:00,765 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:00,767 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:46:00,767 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(1703382745)?.inv()
2021-03-11 10:46:00,767 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:46:00,767 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:46:00,878 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:00,880 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:46:00,987 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:00,988 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(772328025)?.rem(-34)
2021-03-11 10:46:00,988 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:46:00,988 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:46:01,104 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:01,106 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:46:01,212 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:01,213 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-2046156358)?.times(-113)
2021-03-11 10:46:01,213 [main:63] - replacement of sum of type Int is (arrayOfNulls<Int>(5)).get(772328025)?.rem(-34)
2021-03-11 10:46:01,315 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 10:46:01,315 [main:66] - Compilation checking started
2021-03-11 10:46:01,617 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if(sum != 15) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return "c5 failed"

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != 15) return "c1 failed"

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != 15) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if(sum != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    (arrayOfNulls<Int>(5)).get(772328025)?.rem(-34) = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + el!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:46:01,622 [main:56] - replacing (sum, Int)
2021-03-11 10:46:01,622 [main:38] - replacing sum Int
2021-03-11 10:46:01,622 [main:42] - Getting value of type Int
2021-03-11 10:46:01,755 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:01,756 [main:46] - GENERATED VALUE OF TYPE Int = 616955493
2021-03-11 10:46:01,756 [main:49] - GENERATED IS CALL =false
2021-03-11 10:46:01,871 [main:55] - randomType = ArrayList<Boolean>
2021-03-11 10:46:01,977 [main:302] - generating value of type = ArrayList<Boolean> false depth = 0
2021-03-11 10:46:02,084 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Boolean> = TODO()
2021-03-11 10:46:02,086 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Boolean> = TODO()
2021-03-11 10:46:02,197 [main:95] - GENERATED = arrayListOf<Boolean>()
2021-03-11 10:46:02,448 [main:137] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.indexOfFirst(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@31a82a32]
2021-03-11 10:46:02,556 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 10:46:02,557 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:46:02,558 [main:66] - Generated call from random type = (arrayListOf<Boolean>()).indexOfFirst({a: T -> true})
2021-03-11 10:46:02,559 [main:63] - replacement of sum of type Int is (arrayListOf<Boolean>()).indexOfFirst({a: T -> true})
2021-03-11 10:46:02,669 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:46:02,670 [main:66] - Compilation checking started
2021-03-11 10:46:03,040 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if(sum != 15) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return "c5 failed"

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != 15) return "c1 failed"

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != 15) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = (arrayListOf<Boolean>()).indexOfFirst({a: T -> true}) + el!!
    }
    if(sum != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + el!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:46:03,044 [main:56] - replacing (15, Int)
2021-03-11 10:46:03,045 [main:38] - replacing 15 Int
2021-03-11 10:46:03,045 [main:42] - Getting value of type Int
2021-03-11 10:46:03,186 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:03,187 [main:46] - GENERATED VALUE OF TYPE Int = 1491455498
2021-03-11 10:46:03,187 [main:49] - GENERATED IS CALL =false
2021-03-11 10:46:03,418 [main:55] - randomType = UShort?
2021-03-11 10:46:03,523 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 10:46:03,567 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@481ad8b8]
2021-03-11 10:46:03,567 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@6ec53a5]
2021-03-11 10:46:03,567 [main:66] - Generated call from random type = (25760.toUShort())?.toLong().toInt()
2021-03-11 10:46:03,568 [main:94] - GETTING Int from Int
2021-03-11 10:46:03,603 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:46:03,603 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:46:03,707 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:03,708 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:46:03,814 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:03,815 [main:105] - GENERATED CALL = (sum).compareTo(-150283951).rotateLeft(-471845369)
2021-03-11 10:46:03,815 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6abd8a99]]
2021-03-11 10:46:03,815 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:46:03,815 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6abd8a99]
2021-03-11 10:46:03,918 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:03,919 [main:105] - GENERATED CALL = (sum).toShort().plus(23)
2021-03-11 10:46:03,920 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@719372c6]]
2021-03-11 10:46:03,920 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:46:03,920 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@719372c6]
2021-03-11 10:46:03,920 [main:105] - GENERATED CALL = (sum).toShort().unaryPlus()
2021-03-11 10:46:03,920 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:46:03,920 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:46:03,920 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:46:04,025 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:04,027 [main:105] - GENERATED CALL = (sum).toInt().plus(-108)
2021-03-11 10:46:04,027 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@4af8e595]]
2021-03-11 10:46:04,027 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:46:04,147 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:04,149 [main:105] - GENERATED CALL = (sum).rangeTo(78).endInclusive
2021-03-11 10:46:04,149 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97], public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@6ec53a5]]
2021-03-11 10:46:04,149 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97]
2021-03-11 10:46:04,149 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@6ec53a5]
2021-03-11 10:46:04,150 [main:105] - GENERATED CALL = (sum).toLong().toInt()
2021-03-11 10:46:04,150 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@26e773b5]]
2021-03-11 10:46:04,150 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:46:04,150 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@26e773b5]
2021-03-11 10:46:04,259 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:04,260 [main:105] - GENERATED CALL = (sum).toShort().minus(102)
2021-03-11 10:46:04,260 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:46:04,260 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:46:04,260 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:46:04,417 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:04,418 [main:105] - GENERATED CALL = (sum).toInt().coerceAtLeast(695929839)
2021-03-11 10:46:04,419 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:46:04,419 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:46:04,548 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:04,549 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:46:04,658 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:04,764 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:04,765 [main:105] - GENERATED CALL = (sum).compareTo(140211461).coerceIn(-736358247, 633578226)
2021-03-11 10:46:04,765 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@78e981e4]]
2021-03-11 10:46:04,765 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:46:04,765 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@78e981e4]
2021-03-11 10:46:04,873 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:04,874 [main:105] - GENERATED CALL = (sum).toShort().times(111)
2021-03-11 10:46:04,874 [main:63] - replacement of 15 of type Int is sum
2021-03-11 10:46:04,984 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-11 10:46:04,984 [main:66] - Compilation checking started
2021-03-11 10:46:05,487 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if(sum != 15) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return "c5 failed"

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != sum) return "c1 failed"

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != 15) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if(sum != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + el!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:46:05,494 [main:56] - replacing ("c4 failed", String)
2021-03-11 10:46:05,495 [main:38] - replacing "c4 failed" String
2021-03-11 10:46:05,495 [main:42] - Getting value of type String
2021-03-11 10:46:05,647 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:46:05,648 [main:46] - GENERATED VALUE OF TYPE String = "afeah"
2021-03-11 10:46:05,648 [main:49] - GENERATED IS CALL =false
2021-03-11 10:46:05,808 [main:55] - randomType = UShort
2021-03-11 10:46:05,917 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 10:46:05,956 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@6758fe57]
2021-03-11 10:46:05,956 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e0e5d90]
2021-03-11 10:46:06,058 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:06,060 [main:66] - Generated call from random type = (9629.toUShort()).toLong().toString(-336456616)
2021-03-11 10:46:06,061 [main:94] - GETTING String from Int
2021-03-11 10:46:06,100 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]]
2021-03-11 10:46:06,100 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:46:06,201 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:06,202 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]
2021-03-11 10:46:06,305 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:06,306 [main:105] - GENERATED CALL = (el ?: 0).compareTo(-1622358231).toString(2067344320)
2021-03-11 10:46:06,306 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59e5df5f]]
2021-03-11 10:46:06,306 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:46:06,306 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59e5df5f]
2021-03-11 10:46:06,412 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:46:06,413 [main:105] - GENERATED CALL = (el ?: 0).toChar().plus("ixwvh")
2021-03-11 10:46:06,413 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]]
2021-03-11 10:46:06,413 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:46:06,413 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]
2021-03-11 10:46:06,515 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:06,517 [main:105] - GENERATED CALL = (el ?: 0).toInt().toString(819037302)
2021-03-11 10:46:06,517 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1879a786]]
2021-03-11 10:46:06,517 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:46:06,517 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1879a786]
2021-03-11 10:46:06,623 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:06,625 [main:105] - GENERATED CALL = (el ?: 0).toShort().toString(-1665541723)
2021-03-11 10:46:06,625 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]]
2021-03-11 10:46:06,625 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]
2021-03-11 10:46:06,739 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:06,740 [main:105] - GENERATED CALL = (el ?: 0).toString(-397564815)
2021-03-11 10:46:06,740 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67ad6a3c]]
2021-03-11 10:46:06,740 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:46:06,741 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67ad6a3c]
2021-03-11 10:46:06,741 [main:105] - GENERATED CALL = (el ?: 0).toChar().uppercase()
2021-03-11 10:46:06,741 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15f2210a]]
2021-03-11 10:46:06,742 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:46:06,742 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15f2210a]
2021-03-11 10:46:06,911 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:06,913 [main:105] - GENERATED CALL = (el ?: 0).toByte().toString(257035977)
2021-03-11 10:46:06,913 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e0e5d90]]
2021-03-11 10:46:06,913 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f]
2021-03-11 10:46:07,065 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:46:07,067 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e0e5d90]
2021-03-11 10:46:07,174 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:07,176 [main:105] - GENERATED CALL = (el ?: 0).div(8801910189053761300).toString(-1708620901)
2021-03-11 10:46:07,176 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40ec46fe]]
2021-03-11 10:46:07,176 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:46:07,176 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40ec46fe]
2021-03-11 10:46:07,176 [main:105] - GENERATED CALL = (el ?: 0).toChar().titlecase()
2021-03-11 10:46:07,176 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d72be4]]
2021-03-11 10:46:07,177 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:46:07,177 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d72be4]
2021-03-11 10:46:07,177 [main:105] - GENERATED CALL = (el ?: 0).toChar().lowercase()
2021-03-11 10:46:07,177 [main:63] - replacement of "c4 failed" of type String is (el ?: 0).div(8801910189053761300).toString(-1708620901)
2021-03-11 10:46:07,286 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:46:07,287 [main:66] - Compilation checking started
2021-03-11 10:46:07,577 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if(sum != 15) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return "c5 failed"

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != sum) return "c1 failed"

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != 15) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if(sum != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + el!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return (el ?: 0).div(8801910189053761300).toString(-1708620901)

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:46:07,581 [main:56] - replacing (sum, Int)
2021-03-11 10:46:07,582 [main:38] - replacing sum Int
2021-03-11 10:46:07,582 [main:42] - Getting value of type Int
2021-03-11 10:46:07,683 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:07,684 [main:46] - GENERATED VALUE OF TYPE Int = 429551684
2021-03-11 10:46:07,684 [main:49] - GENERATED IS CALL =false
2021-03-11 10:46:07,687 [main:55] - randomType = MyCollection1
2021-03-11 10:46:07,790 [main:302] - generating value of type = MyCollection1 false depth = 0
2021-03-11 10:46:07,791 [main:112] - generating klass MyCollection1 text = class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}
2021-03-11 10:46:07,894 [main:194] - Type params = []
2021-03-11 10:46:08,017 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.lastOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1f129187]
2021-03-11 10:46:08,017 [main:66] - Generated call from random type = (MyCollection1()).lastOrNull()!!
2021-03-11 10:46:08,018 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:46:08,027 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:46:08,027 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:08,027 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:46:08,027 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().countTrailingZeroBits()
2021-03-11 10:46:08,027 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:46:08,027 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:08,028 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:46:08,151 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:08,152 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().shl(-1557462732)
2021-03-11 10:46:08,152 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:46:08,152 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:08,152 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:46:08,256 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:08,258 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().rotateRight(1675228661)
2021-03-11 10:46:08,258 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:46:08,258 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:08,258 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:46:08,365 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:08,366 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().coerceAtLeast(1685320047)
2021-03-11 10:46:08,366 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:46:08,366 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:08,366 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:46:08,472 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:08,473 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().coerceAtMost(-808566164)
2021-03-11 10:46:08,473 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:46:08,473 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:08,473 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:46:08,595 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:08,597 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().rotateLeft(144432137)
2021-03-11 10:46:08,597 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:46:08,597 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:08,597 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:46:08,703 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:08,813 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:08,814 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().coerceIn(1755796556, 968649775)
2021-03-11 10:46:08,814 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:46:08,814 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:08,814 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:46:08,814 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().toInt()
2021-03-11 10:46:08,814 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:46:08,814 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:08,814 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().absoluteValue
2021-03-11 10:46:08,815 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:46:08,815 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:08,815 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:46:08,920 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:08,921 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().or(1338427979)
2021-03-11 10:46:08,921 [main:63] - replacement of sum of type Int is (MyCollection1().iterator()).next().rotateLeft(144432137)
2021-03-11 10:46:09,027 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:46:09,028 [main:66] - Compilation checking started
2021-03-11 10:46:09,510 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if(sum != 15) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return "c5 failed"

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != sum) return "c1 failed"

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != 15) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + el!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:46:09,514 [main:56] - replacing (sum, Int)
2021-03-11 10:46:09,515 [main:38] - replacing sum Int
2021-03-11 10:46:09,515 [main:42] - Getting value of type Int
2021-03-11 10:46:09,663 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:09,664 [main:46] - GENERATED VALUE OF TYPE Int = 742129596
2021-03-11 10:46:09,664 [main:49] - GENERATED IS CALL =false
2021-03-11 10:46:09,777 [main:55] - randomType = Short
2021-03-11 10:46:09,879 [main:302] - generating value of type = Short true depth = 0
2021-03-11 10:46:09,916 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12f06cb]
2021-03-11 10:46:09,916 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@5959e353]
2021-03-11 10:46:09,917 [main:66] - Generated call from random type = (28955).toDouble().roundToInt()
2021-03-11 10:46:09,917 [main:94] - GETTING Int from Int
2021-03-11 10:46:09,958 [main:101] - Case = [public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:46:09,958 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:46:09,958 [main:105] - GENERATED CALL = (el ?: 0).toInt()
2021-03-11 10:46:09,958 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@63c4310c]]
2021-03-11 10:46:09,958 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:46:09,958 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@63c4310c]
2021-03-11 10:46:10,061 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:10,062 [main:105] - GENERATED CALL = (el ?: 0).toShort().compareTo(127)
2021-03-11 10:46:10,063 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:46:10,063 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:46:10,163 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:10,164 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:46:10,274 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:10,275 [main:105] - GENERATED CALL = (el ?: 0).compareTo(-614193477).xor(1596084347)
2021-03-11 10:46:10,276 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:46:10,276 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:46:10,276 [main:105] - GENERATED CALL = (el ?: 0).takeLowestOneBit()
2021-03-11 10:46:10,276 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:46:10,276 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:46:10,376 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:10,377 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:46:10,378 [main:105] - GENERATED CALL = (el ?: 0).compareTo(-525210812).countOneBits()
2021-03-11 10:46:10,378 [main:101] - Case = [@kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:46:10,378 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:46:10,482 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:10,483 [main:105] - GENERATED CALL = (el ?: 0).rem(74)
2021-03-11 10:46:10,483 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@13c687d3]]
2021-03-11 10:46:10,483 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:46:10,484 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@13c687d3]
2021-03-11 10:46:10,588 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:10,589 [main:105] - GENERATED CALL = (el ?: 0).toFloat().compareTo(26)
2021-03-11 10:46:10,589 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:46:10,589 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:46:10,589 [main:105] - GENERATED CALL = (el ?: 0).takeHighestOneBit()
2021-03-11 10:46:10,589 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4d6e37cb]]
2021-03-11 10:46:10,589 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431]
2021-03-11 10:46:10,722 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:46:10,724 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4d6e37cb]
2021-03-11 10:46:10,867 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:10,868 [main:105] - GENERATED CALL = (el ?: 0).div(0.24311823320678538).compareTo(127)
2021-03-11 10:46:10,869 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@674346bc]]
2021-03-11 10:46:10,869 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f]
2021-03-11 10:46:10,970 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:46:10,971 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@674346bc]
2021-03-11 10:46:10,971 [main:105] - GENERATED CALL = (el ?: 0).div(3208408231293736654).countTrailingZeroBits()
2021-03-11 10:46:10,971 [main:63] - replacement of sum of type Int is 742129596
2021-03-11 10:46:11,075 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 10:46:11,076 [main:66] - Compilation checking started
2021-03-11 10:46:11,359 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        742129596 = sum + el
    }
    if(sum != 15) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return "c5 failed"

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != sum) return "c1 failed"

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != 15) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + el!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:46:11,365 [main:56] - replacing ("c1 failed", String)
2021-03-11 10:46:11,366 [main:38] - replacing "c1 failed" String
2021-03-11 10:46:11,366 [main:42] - Getting value of type String
2021-03-11 10:46:11,471 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:46:11,472 [main:46] - GENERATED VALUE OF TYPE String = "vrhih"
2021-03-11 10:46:11,472 [main:49] - GENERATED IS CALL =false
2021-03-11 10:46:11,474 [main:55] - randomType = Boolean
2021-03-11 10:46:11,583 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:46:11,596 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:46:11,701 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:46:11,702 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]
2021-03-11 10:46:11,806 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:11,808 [main:66] - Generated call from random type = (true).compareTo(true).toString(120330395)
2021-03-11 10:46:11,809 [main:94] - GETTING String from Array<Int?>
2021-03-11 10:46:11,825 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]]
2021-03-11 10:46:11,825 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]
2021-03-11 10:46:11,950 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:11,951 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.toString(1623811697)
2021-03-11 10:46:11,951 [main:101] - Case = [public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6544fd76]]
2021-03-11 10:46:11,951 [main:137] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6544fd76]
2021-03-11 10:46:12,063 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 10:46:12,179 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 10:46:12,181 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 10:46:12,409 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 10:46:12,414 [main:95] - GENERATED = StringBuilder(StringBuilder())
2021-03-11 10:46:12,522 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 10:46:12,649 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 10:46:12,651 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 10:46:12,874 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 10:46:12,879 [main:95] - GENERATED = StringBuilder("pocrq")
2021-03-11 10:46:12,983 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 10:46:13,138 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:13,265 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 10:46:13,385 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 10:46:13,386 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 10:46:13,390 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).joinToString(StringBuilder(StringBuilder()), StringBuilder("pocrq"), StringBuilder(), -1964419830, StringBuilder(), {a: T -> StringBuilder()})
2021-03-11 10:46:13,391 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@406aa363]]
2021-03-11 10:46:13,391 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@406aa363]
2021-03-11 10:46:13,391 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).contentDeepToString()
2021-03-11 10:46:13,391 [main:101] - Case = [@kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@75e91fc8]]
2021-03-11 10:46:13,391 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@75e91fc8]
2021-03-11 10:46:13,391 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).contentToString()
2021-03-11 10:46:13,391 [main:63] - replacement of "c1 failed" of type String is (arrayOfNulls<Int>(5)).contentDeepToString()
2021-03-11 10:46:13,496 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:46:13,496 [main:66] - Compilation checking started
2021-03-11 10:46:13,950 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if(sum != 15) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return "c5 failed"

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != 15) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + el!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:46:13,954 [main:56] - replacing (5, Int)
2021-03-11 10:46:13,954 [main:38] - replacing 5 Int
2021-03-11 10:46:13,954 [main:42] - Getting value of type Int
2021-03-11 10:46:14,070 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:14,071 [main:46] - GENERATED VALUE OF TYPE Int = -1111545488
2021-03-11 10:46:14,072 [main:49] - GENERATED IS CALL =false
2021-03-11 10:46:14,298 [main:55] - randomType = Double?
2021-03-11 10:46:14,407 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:46:14,446 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4d6e37cb]
2021-03-11 10:46:14,570 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:14,571 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:46:14,674 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:14,675 [main:66] - Generated call from random type = (0.3003248344777878)?.compareTo(-5).and(1673370474)
2021-03-11 10:46:14,676 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:46:14,681 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:46:14,681 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:46:14,681 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:46:14,682 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().toInt()
2021-03-11 10:46:14,682 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:46:14,682 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:46:14,682 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:46:14,682 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().unaryMinus()
2021-03-11 10:46:14,682 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]]
2021-03-11 10:46:14,682 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:46:14,682 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next()
2021-03-11 10:46:14,682 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:46:14,682 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:46:14,682 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:46:14,790 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:14,791 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().or(-81067494)
2021-03-11 10:46:14,791 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:46:14,791 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:46:14,791 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:46:14,894 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:14,895 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().ushr(1299244811)
2021-03-11 10:46:14,895 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:46:14,895 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:46:14,895 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:46:14,998 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:14,999 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().plus(62)
2021-03-11 10:46:14,999 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:46:14,999 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:46:14,999 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:46:14,999 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().countTrailingZeroBits()
2021-03-11 10:46:14,999 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:46:15,000 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:46:15,000 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:46:15,104 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:15,105 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().shr(-1557786985)
2021-03-11 10:46:15,105 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:46:15,105 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:46:15,105 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:46:15,206 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:15,312 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:15,313 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().coerceIn(-33032166, 2125634585)
2021-03-11 10:46:15,313 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:46:15,313 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:46:15,313 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:46:15,415 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:15,416 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().rotateRight(-495292391)
2021-03-11 10:46:15,416 [main:63] - replacement of 5 of type Int is (MyCollection2().iterator()).next().rotateRight(-495292391)
2021-03-11 10:46:15,523 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:46:15,524 [main:66] - Compilation checking started
2021-03-11 10:46:15,968 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if(sum != 15) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return "c5 failed"

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != 15) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + el!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:46:15,973 [main:56] - replacing (k, Int)
2021-03-11 10:46:15,973 [main:38] - replacing k Int
2021-03-11 10:46:15,973 [main:42] - Getting value of type Int
2021-03-11 10:46:16,089 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:16,090 [main:46] - GENERATED VALUE OF TYPE Int = -1706130315
2021-03-11 10:46:16,090 [main:49] - GENERATED IS CALL =false
2021-03-11 10:46:16,216 [main:55] - randomType = Function2<String, MyCollection2, MyCollection1>
2021-03-11 10:46:16,217 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:46:16,226 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:46:16,226 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:16,226 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:46:16,353 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:16,462 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:16,463 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().coerceIn(408038439, 172123200)
2021-03-11 10:46:16,463 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:46:16,463 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09]
2021-03-11 10:46:16,568 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:46:16,568 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:46:16,677 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:46:16,678 [main:105] - GENERATED CALL = (MyCollection1().iterator()).equals("ceyoe").compareTo(true)
2021-03-11 10:46:16,678 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:46:16,678 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:16,678 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().absoluteValue
2021-03-11 10:46:16,678 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:46:16,678 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:16,678 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:46:16,783 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:16,784 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().ushr(-2063175362)
2021-03-11 10:46:16,784 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:46:16,784 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:16,784 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:46:16,888 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:16,889 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().xor(744324781)
2021-03-11 10:46:16,889 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:46:16,889 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:16,889 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:46:16,889 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().inv()
2021-03-11 10:46:16,889 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:46:16,889 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:16,889 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:46:16,995 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:16,997 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().rem(-11)
2021-03-11 10:46:16,997 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:46:16,997 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:16,997 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().sign
2021-03-11 10:46:16,997 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:46:16,997 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:16,997 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:46:16,997 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().unaryPlus()
2021-03-11 10:46:16,997 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:46:16,997 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:16,997 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:46:17,101 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:17,102 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().rotateRight(-971285693)
2021-03-11 10:46:17,102 [main:63] - replacement of k of type Int is (MyCollection1().iterator()).next().unaryPlus()
2021-03-11 10:46:17,239 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:46:17,240 [main:66] - Compilation checking started
2021-03-11 10:46:17,573 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if(sum != 15) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return "c5 failed"

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != 15) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + el!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection1().iterator()).next().unaryPlus()--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:46:17,577 [main:56] - replacing (15, Int)
2021-03-11 10:46:17,578 [main:38] - replacing 15 Int
2021-03-11 10:46:17,578 [main:42] - Getting value of type Int
2021-03-11 10:46:17,688 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:17,689 [main:46] - GENERATED VALUE OF TYPE Int = 1222014691
2021-03-11 10:46:17,689 [main:49] - GENERATED IS CALL =false
2021-03-11 10:46:17,808 [main:55] - randomType = UByte
2021-03-11 10:46:17,919 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:46:17,965 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@57754177]
2021-03-11 10:46:18,070 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:46:18,071 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:46:18,177 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:18,178 [main:66] - Generated call from random type = (98.toUByte()).compareTo(119.toUByte()).plus(-3)
2021-03-11 10:46:18,179 [main:94] - GETTING Int from MyIterator
2021-03-11 10:46:18,189 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:46:18,189 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:46:18,189 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:46:18,294 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:18,296 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.xor(-1415804557)
2021-03-11 10:46:18,296 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:46:18,296 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:46:18,296 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:46:18,428 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:46:18,429 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext().compareTo(true)
2021-03-11 10:46:18,429 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:46:18,429 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:46:18,429 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:46:18,429 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.dec()
2021-03-11 10:46:18,429 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:46:18,429 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:46:18,534 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:18,535 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.or(-1275423091)
2021-03-11 10:46:18,535 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]]
2021-03-11 10:46:18,535 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:46:18,535 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()
2021-03-11 10:46:18,535 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:46:18,535 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:46:18,642 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:18,643 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.times(122)
2021-03-11 10:46:18,643 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:46:18,644 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:46:18,644 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:46:18,644 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.inv()
2021-03-11 10:46:18,644 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:46:18,644 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:46:18,644 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:46:18,765 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:18,766 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.div(-95)
2021-03-11 10:46:18,766 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:46:18,766 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.sign
2021-03-11 10:46:18,766 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:46:18,766 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:46:18,766 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:46:18,871 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:18,872 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.plus(-98)
2021-03-11 10:46:18,872 [main:63] - replacement of 15 of type Int is (MyCollection3().iterator()).hasNext().compareTo(true)
2021-03-11 10:46:18,976 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:46:18,977 [main:66] - Compilation checking started
2021-03-11 10:46:19,400 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if(sum != 15) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return "c5 failed"

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + el!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:46:19,407 [main:56] - replacing (MyCollection4(), MyCollection4)
2021-03-11 10:46:19,408 [main:38] - replacing MyCollection4() MyCollection4
2021-03-11 10:46:19,408 [main:42] - Getting value of type MyCollection4
2021-03-11 10:46:19,533 [main:302] - generating value of type = MyCollection4 false depth = 0
2021-03-11 10:46:19,534 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:46:19,649 [main:194] - Type params = []
2021-03-11 10:46:19,785 [main:46] - GENERATED VALUE OF TYPE MyCollection4 = MyCollection4()
2021-03-11 10:46:19,785 [main:49] - GENERATED IS CALL =true
2021-03-11 10:46:20,275 [main:55] - randomType = Pair<Short, HashMap<MyCollection3, Byte>>
2021-03-11 10:46:20,393 [main:302] - generating value of type = Pair<Short, HashMap<MyCollection3, Byte>> false depth = 0
2021-03-11 10:46:20,510 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Short, second: HashMap<MyCollection3, Byte>): Pair<Short, HashMap<MyCollection3, Byte>> = TODO()
2021-03-11 10:46:20,513 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Short, second: HashMap<MyCollection3, Byte>): Pair<Short, HashMap<MyCollection3, Byte>> = TODO()
2021-03-11 10:46:20,630 [main:302] - generating value of type = Short true depth = 3
2021-03-11 10:46:20,631 [main:302] - generating value of type = HashMap<MyCollection3, Byte> false depth = 3
2021-03-11 10:46:20,749 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): HashMap<MyCollection3, Byte> = TODO()
2021-03-11 10:46:20,751 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): HashMap<MyCollection3, Byte> = TODO()
2021-03-11 10:46:20,861 [main:95] - GENERATED = hashMapOf<MyCollection3, Byte>()
2021-03-11 10:46:20,861 [main:95] - GENERATED = Pair<Short, HashMap<MyCollection3, Byte>>(-16811, hashMapOf<MyCollection3, Byte>())
2021-03-11 10:46:20,887 [main:94] - GETTING MyCollection4 from MyIterator
2021-03-11 10:46:20,895 [main:94] - GETTING MyCollection4 from Array<Int?>
2021-03-11 10:46:20,913 [main:94] - GETTING MyCollection4 from Iterator<Int>
2021-03-11 10:46:20,923 [main:94] - GETTING MyCollection4 from Int
2021-03-11 10:46:20,981 [main:94] - GETTING MyCollection4 from MyIterator
2021-03-11 10:46:20,982 [main:94] - GETTING MyCollection4 from Int
2021-03-11 10:46:20,983 [main:94] - GETTING MyCollection4 from Iterator<Int>
2021-03-11 10:46:20,984 [main:94] - GETTING MyCollection4 from Int
2021-03-11 10:46:20,984 [main:63] - replacement of MyCollection4() of type MyCollection4 is MyCollection4()
2021-03-11 10:46:21,117 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 10:46:21,122 [main:56] - replacing (sum != 15, Boolean)
2021-03-11 10:46:21,123 [main:38] - replacing sum != 15 Boolean
2021-03-11 10:46:21,123 [main:42] - Getting value of type Boolean
2021-03-11 10:46:21,246 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:46:21,247 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:46:21,247 [main:49] - GENERATED IS CALL =false
2021-03-11 10:46:21,365 [main:55] - randomType = Long
2021-03-11 10:46:21,469 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:46:21,504 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@7afa26ab]
2021-03-11 10:46:21,606 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:46:21,606 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@11eceb90]
2021-03-11 10:46:21,710 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:46:21,711 [main:66] - Generated call from random type = (-988202056126474155).equals("ghwxu").or(true)
2021-03-11 10:46:21,712 [main:94] - GETTING Boolean from Array<Int?>
2021-03-11 10:46:21,730 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public infix fun <T> kotlin.Array<out T>.contentDeepEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7c7d0ee1]]
2021-03-11 10:46:21,730 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public infix fun <T> kotlin.Array<out T>.contentDeepEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7c7d0ee1]
2021-03-11 10:46:21,834 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 10:46:21,943 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<T> = TODO()
2021-03-11 10:46:21,945 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<T> = TODO()
2021-03-11 10:46:22,180 [main:302] - generating value of type = Int true depth = 3
2021-03-11 10:46:22,181 [main:95] - GENERATED = arrayOfNulls<T>(1919544933)
2021-03-11 10:46:22,181 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).contentDeepEquals(arrayOfNulls<T>(1919544933))
2021-03-11 10:46:22,181 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2760da68]]
2021-03-11 10:46:22,182 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2760da68]
2021-03-11 10:46:22,314 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:46:22,315 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).equals("vbexc")
2021-03-11 10:46:22,315 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2760da68], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fb50dd8]]
2021-03-11 10:46:22,315 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2760da68]
2021-03-11 10:46:22,437 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:46:22,438 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fb50dd8]
2021-03-11 10:46:22,547 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:46:22,549 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).equals("bvmca").xor(false)
2021-03-11 10:46:22,549 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]]
2021-03-11 10:46:22,549 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]
2021-03-11 10:46:22,656 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:46:22,657 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.equals("rstjg")
2021-03-11 10:46:22,657 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Array<*>?.isNullOrEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7e053fc4]]
2021-03-11 10:46:22,657 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Array<*>?.isNullOrEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7e053fc4]
2021-03-11 10:46:22,658 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).isNullOrEmpty()
2021-03-11 10:46:22,658 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.isEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1ec63575]]
2021-03-11 10:46:22,658 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.isEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1ec63575]
2021-03-11 10:46:22,658 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).isEmpty()
2021-03-11 10:46:22,658 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2760da68], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@35500bca]]
2021-03-11 10:46:22,658 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2760da68]
2021-03-11 10:46:22,769 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:46:22,769 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@35500bca]
2021-03-11 10:46:22,874 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:46:22,874 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).equals("jflxn").equals("fwjwb")
2021-03-11 10:46:22,874 [main:101] - Case = [public fun <T> kotlin.Array<out T>.any(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6412f19]]
2021-03-11 10:46:22,875 [main:137] - GENERATING call of type public fun <T> kotlin.Array<out T>.any(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6412f19]
2021-03-11 10:46:22,875 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).any()
2021-03-11 10:46:22,875 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]]
2021-03-11 10:46:22,875 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:46:22,980 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:22,981 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]
2021-03-11 10:46:23,085 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:46:23,086 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-566673414)?.equals("fdalp")
2021-03-11 10:46:23,086 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1d7cf2b]]
2021-03-11 10:46:23,086 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1d7cf2b]
2021-03-11 10:46:23,086 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).isNotEmpty()
2021-03-11 10:46:23,086 [main:63] - replacement of sum != 15 of type Boolean is (arrayOfNulls<Int>(5)).isEmpty()
2021-03-11 10:46:23,192 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:46:23,193 [main:66] - Compilation checking started
2021-03-11 10:46:23,703 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return "c5 failed"

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + el!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:46:23,711 [main:56] - replacing ("c5 failed", String)
2021-03-11 10:46:23,712 [main:38] - replacing "c5 failed" String
2021-03-11 10:46:23,712 [main:42] - Getting value of type String
2021-03-11 10:46:23,837 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:46:23,838 [main:46] - GENERATED VALUE OF TYPE String = "kzobz"
2021-03-11 10:46:23,838 [main:49] - GENERATED IS CALL =false
2021-03-11 10:46:23,958 [main:55] - randomType = Byte
2021-03-11 10:46:24,064 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:24,118 [main:137] - GENERATING call of type public abstract fun toByte(): kotlin.Byte defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@50cd40dd]
2021-03-11 10:46:24,119 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15f2210a]
2021-03-11 10:46:24,221 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:24,222 [main:66] - Generated call from random type = (-64).toByte().toString(343823569)
2021-03-11 10:46:24,223 [main:94] - GETTING String from Int
2021-03-11 10:46:24,283 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]]
2021-03-11 10:46:24,283 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:46:24,389 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:24,391 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]
2021-03-11 10:46:24,496 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:24,498 [main:105] - GENERATED CALL = (el ?: 0).compareTo(1113456763).toString(-52587363)
2021-03-11 10:46:24,498 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40ec46fe]]
2021-03-11 10:46:24,498 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:46:24,498 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40ec46fe]
2021-03-11 10:46:24,498 [main:105] - GENERATED CALL = (el ?: 0).toChar().titlecase()
2021-03-11 10:46:24,498 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59e5df5f]]
2021-03-11 10:46:24,498 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:46:24,498 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59e5df5f]
2021-03-11 10:46:24,608 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:46:24,609 [main:105] - GENERATED CALL = (el ?: 0).toChar().plus("ctfkv")
2021-03-11 10:46:24,609 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1879a786]]
2021-03-11 10:46:24,609 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:46:24,609 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1879a786]
2021-03-11 10:46:24,718 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:24,720 [main:105] - GENERATED CALL = (el ?: 0).toShort().toString(1723402042)
2021-03-11 10:46:24,720 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15f2210a]]
2021-03-11 10:46:24,720 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:46:24,720 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15f2210a]
2021-03-11 10:46:24,825 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:24,826 [main:105] - GENERATED CALL = (el ?: 0).toByte().toString(-1489174682)
2021-03-11 10:46:24,826 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67ad6a3c]]
2021-03-11 10:46:24,826 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:46:24,827 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67ad6a3c]
2021-03-11 10:46:24,827 [main:105] - GENERATED CALL = (el ?: 0).toChar().uppercase()
2021-03-11 10:46:24,827 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d72be4]]
2021-03-11 10:46:24,827 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:46:24,827 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d72be4]
2021-03-11 10:46:24,827 [main:105] - GENERATED CALL = (el ?: 0).toChar().lowercase()
2021-03-11 10:46:24,827 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]]
2021-03-11 10:46:24,827 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:46:24,827 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]
2021-03-11 10:46:24,934 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:24,935 [main:105] - GENERATED CALL = (el ?: 0).toInt().toString(1876858495)
2021-03-11 10:46:24,935 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e0e5d90]]
2021-03-11 10:46:24,935 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f]
2021-03-11 10:46:25,072 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:46:25,073 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e0e5d90]
2021-03-11 10:46:25,235 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:25,236 [main:105] - GENERATED CALL = (el ?: 0).div(-8922156676865170292).toString(1083962749)
2021-03-11 10:46:25,237 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e0e5d90]]
2021-03-11 10:46:25,237 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97]
2021-03-11 10:46:25,237 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e0e5d90]
2021-03-11 10:46:25,356 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:25,357 [main:105] - GENERATED CALL = (el ?: 0).toLong().toString(-360037669)
2021-03-11 10:46:25,357 [main:63] - replacement of "c5 failed" of type String is (-64).toByte().toString(343823569)
2021-03-11 10:46:25,465 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:46:25,466 [main:66] - Compilation checking started
2021-03-11 10:46:25,929 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + el!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:46:25,933 [main:56] - replacing (el, Int)
2021-03-11 10:46:25,934 [main:38] - replacing el Int
2021-03-11 10:46:25,934 [main:42] - Getting value of type Int
2021-03-11 10:46:26,042 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:26,043 [main:46] - GENERATED VALUE OF TYPE Int = 1315814540
2021-03-11 10:46:26,043 [main:49] - GENERATED IS CALL =false
2021-03-11 10:46:26,160 [main:55] - randomType = Double
2021-03-11 10:46:26,268 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:46:26,319 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:46:26,319 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:46:26,425 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:26,427 [main:66] - Generated call from random type = (0.11855113898543901).toInt().compareTo(-89)
2021-03-11 10:46:26,428 [main:94] - GETTING Int from MyIterator
2021-03-11 10:46:26,437 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:46:26,438 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:46:26,438 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:46:26,544 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:26,545 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.compareTo(-50)
2021-03-11 10:46:26,545 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:46:26,545 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:46:26,545 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:46:26,674 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:26,675 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.xor(609365243)
2021-03-11 10:46:26,675 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:46:26,676 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:46:26,784 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:26,785 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.div(101)
2021-03-11 10:46:26,785 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:46:26,786 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:46:26,786 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.countLeadingZeroBits()
2021-03-11 10:46:26,786 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf]]
2021-03-11 10:46:26,786 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k
2021-03-11 10:46:26,786 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:46:26,786 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:46:26,786 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:46:26,891 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:26,892 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.rem(58)
2021-03-11 10:46:26,893 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:46:26,893 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:46:26,893 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.inv()
2021-03-11 10:46:26,893 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:46:26,893 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:46:26,893 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:46:27,003 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:27,005 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.times(-85)
2021-03-11 10:46:27,005 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:46:27,005 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:46:27,005 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.takeHighestOneBit()
2021-03-11 10:46:27,005 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:46:27,005 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:46:27,110 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:27,112 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.times(-28)
2021-03-11 10:46:27,112 [main:63] - replacement of el of type Int is (MyCollection3().iterator()).k.countLeadingZeroBits()
2021-03-11 10:46:27,216 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:46:27,216 [main:66] - Compilation checking started
2021-03-11 10:46:27,675 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:46:27,679 [main:56] - replacing (MyIterator(), MyIterator)
2021-03-11 10:46:27,680 [main:38] - replacing MyIterator() MyIterator
2021-03-11 10:46:27,680 [main:42] - Getting value of type MyIterator
2021-03-11 10:46:27,788 [main:302] - generating value of type = MyIterator false depth = 0
2021-03-11 10:46:27,789 [main:112] - generating klass MyIterator text = class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
2021-03-11 10:46:27,789 [main:46] - GENERATED VALUE OF TYPE MyIterator = 
2021-03-11 10:46:28,026 [main:55] - randomType = Map<MyCollection3, String?>
2021-03-11 10:46:28,027 [main:94] - GETTING MyIterator from Int
2021-03-11 10:46:28,067 [main:94] - GETTING MyIterator from MyIterator
2021-03-11 10:46:28,072 [main:63] - replacement of MyIterator() of type MyIterator is MyCollection3().iterator()
2021-03-11 10:46:28,198 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:46:28,198 [main:66] - Compilation checking started
2021-03-11 10:46:28,544 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:46:28,550 [main:56] - replacing (k, Int)
2021-03-11 10:46:28,550 [main:38] - replacing k Int
2021-03-11 10:46:28,550 [main:42] - Getting value of type Int
2021-03-11 10:46:28,668 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:28,669 [main:46] - GENERATED VALUE OF TYPE Int = -2072935374
2021-03-11 10:46:28,669 [main:49] - GENERATED IS CALL =false
2021-03-11 10:46:28,674 [main:55] - randomType = MyCollection3
2021-03-11 10:46:28,783 [main:302] - generating value of type = MyCollection3 false depth = 0
2021-03-11 10:46:28,784 [main:112] - generating klass MyCollection3 text = class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}
2021-03-11 10:46:28,895 [main:194] - Type params = []
2021-03-11 10:46:29,014 [main:137] - GENERATING call of type public final operator fun iterator(): MyCollection3.MyIterator defined in MyCollection3[SimpleFunctionDescriptorImpl@6c4e3899]
2021-03-11 10:46:29,014 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@efb56d9]
2021-03-11 10:46:29,014 [main:66] - Generated call from random type = (MyCollection3()).iterator().next()!!
2021-03-11 10:46:29,015 [main:94] - GETTING Int from Array<Int?>
2021-03-11 10:46:29,033 [main:101] - Case = [@kotlin.jvm.JvmName public fun kotlin.Array<out kotlin.Byte>.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3842ee34]]
2021-03-11 10:46:29,033 [main:137] - GENERATING call of type @kotlin.jvm.JvmName public fun kotlin.Array<out kotlin.Byte>.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3842ee34]
2021-03-11 10:46:29,033 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).sum()
2021-03-11 10:46:29,033 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:46:29,033 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:46:29,146 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:29,147 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:46:29,258 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:29,259 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(1148716042)?.compareTo(102)
2021-03-11 10:46:29,259 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:46:29,259 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:46:29,376 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:29,377 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.rotateRight(9476684)
2021-03-11 10:46:29,377 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:46:29,378 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:46:29,488 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:29,489 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:46:29,490 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-1137157310)?.dec()
2021-03-11 10:46:29,490 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepHashCode(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@46619276]]
2021-03-11 10:46:29,490 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepHashCode(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@46619276]
2021-03-11 10:46:29,490 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).contentDeepHashCode()
2021-03-11 10:46:29,490 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:46:29,490 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:46:29,490 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.countLeadingZeroBits()
2021-03-11 10:46:29,491 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:46:29,491 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:46:29,491 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.countTrailingZeroBits()
2021-03-11 10:46:29,491 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:46:29,491 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:46:29,597 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:29,598 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.and(-1377651051)
2021-03-11 10:46:29,598 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:46:29,598 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:46:29,732 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:29,733 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:46:29,842 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:29,843 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(1477189657)?.ushr(1368135733)
2021-03-11 10:46:29,843 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:46:29,843 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:46:29,843 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.unaryMinus()
2021-03-11 10:46:29,843 [main:63] - replacement of k of type Int is (arrayOfNulls<Int>(5)).size.rotateRight(9476684)
2021-03-11 10:46:29,948 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:46:29,948 [main:66] - Compilation checking started
2021-03-11 10:46:30,250 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[i] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (arrayOfNulls<Int>(5)).size.rotateRight(9476684)--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:46:30,254 [main:56] - replacing (i, Int)
2021-03-11 10:46:30,255 [main:38] - replacing i Int
2021-03-11 10:46:30,255 [main:42] - Getting value of type Int
2021-03-11 10:46:30,371 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:30,372 [main:46] - GENERATED VALUE OF TYPE Int = 1175736283
2021-03-11 10:46:30,372 [main:49] - GENERATED IS CALL =false
2021-03-11 10:46:30,493 [main:55] - randomType = String?
2021-03-11 10:46:30,605 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:46:30,646 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1ecdaf03]
2021-03-11 10:46:30,754 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:46:30,755 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:46:30,872 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:30,873 [main:66] - Generated call from random type = ("adpgp")?.compareTo("kyfwo").plus(104)
2021-03-11 10:46:30,874 [main:94] - GETTING Int from MyIterator
2021-03-11 10:46:30,884 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:46:30,884 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:46:30,884 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:46:30,988 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:30,990 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.shr(-1220754919)
2021-03-11 10:46:30,990 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:46:30,990 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:46:31,098 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:31,099 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.shr(-572417789)
2021-03-11 10:46:31,099 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:46:31,099 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:46:31,226 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:31,228 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.rem(1)
2021-03-11 10:46:31,228 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:46:31,228 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:46:31,228 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.countTrailingZeroBits()
2021-03-11 10:46:31,228 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:46:31,228 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:46:31,337 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:31,338 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.shl(-1622397451)
2021-03-11 10:46:31,338 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:46:31,338 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:46:31,450 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:31,451 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.or(-831443286)
2021-03-11 10:46:31,451 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:46:31,451 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:46:31,451 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.unaryPlus()
2021-03-11 10:46:31,451 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:46:31,451 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:46:31,451 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:46:31,563 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:31,564 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.and(1091096903)
2021-03-11 10:46:31,564 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:46:31,564 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:46:31,564 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:46:31,669 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:31,670 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.minus(-59)
2021-03-11 10:46:31,671 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:46:31,671 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:46:31,671 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:46:31,671 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.inv()
2021-03-11 10:46:31,671 [main:63] - replacement of i of type Int is 1175736283
2021-03-11 10:46:31,777 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 10:46:31,778 [main:66] - Compilation checking started
2021-03-11 10:46:32,240 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:46:32,247 [main:56] - replacing (sum, Int)
2021-03-11 10:46:32,247 [main:38] - replacing sum Int
2021-03-11 10:46:32,247 [main:42] - Getting value of type Int
2021-03-11 10:46:32,358 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:32,359 [main:46] - GENERATED VALUE OF TYPE Int = 1090355628
2021-03-11 10:46:32,359 [main:49] - GENERATED IS CALL =false
2021-03-11 10:46:32,478 [main:55] - randomType = MyCollection1?
2021-03-11 10:46:32,587 [main:302] - generating value of type = MyCollection1 false depth = 0
2021-03-11 10:46:32,588 [main:112] - generating klass MyCollection1 text = class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}
2021-03-11 10:46:32,694 [main:194] - Type params = []
2021-03-11 10:46:32,819 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.single(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3d279d1c]
2021-03-11 10:46:32,820 [main:66] - Generated call from random type = (MyCollection1())?.single()!!
2021-03-11 10:46:32,821 [main:94] - GETTING Int from MyIterator
2021-03-11 10:46:32,831 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:46:32,831 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:46:32,965 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:32,967 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.or(1423523851)
2021-03-11 10:46:32,967 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:46:32,967 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:46:33,076 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:33,077 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.coerceAtLeast(-144007229)
2021-03-11 10:46:33,077 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:46:33,077 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:46:33,077 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:46:33,185 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:33,186 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.plus(72)
2021-03-11 10:46:33,187 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:46:33,187 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:46:33,187 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:46:33,295 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:33,296 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.ushr(1892293295)
2021-03-11 10:46:33,296 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:46:33,296 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:46:33,404 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:33,405 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.minus(42)
2021-03-11 10:46:33,405 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:46:33,405 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.absoluteValue
2021-03-11 10:46:33,405 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:46:33,405 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:46:33,405 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.takeLowestOneBit()
2021-03-11 10:46:33,405 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:46:33,406 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:46:33,406 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:46:33,406 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.dec()
2021-03-11 10:46:33,406 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf]]
2021-03-11 10:46:33,406 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k
2021-03-11 10:46:33,406 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:46:33,406 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:46:33,513 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:33,514 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.and(-1888159572)
2021-03-11 10:46:33,514 [main:63] - replacement of sum of type Int is (MyCollection1())?.single()!!
2021-03-11 10:46:33,619 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-11 10:46:33,620 [main:66] - Compilation checking started
2021-03-11 10:46:33,932 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in c3) {
        (MyCollection1())?.single()!! = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:46:33,937 [main:56] - replacing (c3, Iterable<Int>)
2021-03-11 10:46:33,937 [main:38] - replacing c3 Iterable<Int>
2021-03-11 10:46:33,937 [main:42] - Getting value of type Iterable<Int>
2021-03-11 10:46:34,045 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 10:46:34,174 [main:43] - GENERATING CALL OF fun <E> buildList(capacity: kotlin.Int, builderAction: kotlin.collections.MutableList<Int>.()->kotlin.Unit): Iterable<Int> = TODO()
2021-03-11 10:46:34,176 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildList(capacity: kotlin.Int, builderAction: kotlin.collections.MutableList<Int>.()->kotlin.Unit): Iterable<Int> = TODO()
2021-03-11 10:46:34,549 [main:302] - generating value of type = Int true depth = 3
2021-03-11 10:46:34,550 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableList<Int>, Unit> false depth = 3
2021-03-11 10:46:34,551 [main:302] - generating value of type = Unit false depth = 4
2021-03-11 10:46:34,669 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 10:46:34,671 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 10:46:35,039 [main:302] - generating value of type = Int true depth = 7
2021-03-11 10:46:35,041 [main:302] - generating value of type = Function1<Int, Unit> false depth = 7
2021-03-11 10:46:35,042 [main:302] - generating value of type = Unit false depth = 8
2021-03-11 10:46:35,170 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 10:46:35,172 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 10:46:35,540 [main:302] - generating value of type = Int true depth = 11
2021-03-11 10:46:35,541 [main:302] - generating value of type = Function1<Int, Unit> false depth = 11
2021-03-11 10:46:35,542 [main:302] - generating value of type = Unit false depth = 12
2021-03-11 10:46:35,690 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 10:46:35,692 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 10:46:36,075 [main:302] - generating value of type = Boolean true depth = 15
2021-03-11 10:46:36,076 [main:302] - generating value of type = Function0<Any> false depth = 15
2021-03-11 10:46:36,077 [main:302] - generating value of type = Any false depth = 16
2021-03-11 10:46:36,077 [main:95] - GENERATED = check(true, { })
2021-03-11 10:46:36,078 [main:95] - GENERATED = repeat(1762795233, {a: Int -> check(true, { })})
2021-03-11 10:46:36,078 [main:95] - GENERATED = repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})
2021-03-11 10:46:36,078 [main:95] - GENERATED = buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})
2021-03-11 10:46:36,078 [main:46] - GENERATED VALUE OF TYPE Iterable<Int> = buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})
2021-03-11 10:46:36,078 [main:49] - GENERATED IS CALL =true
2021-03-11 10:46:36,222 [main:55] - randomType = UByte
2021-03-11 10:46:36,336 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:46:36,446 [main:94] - GETTING Iterable<Int> from Int
2021-03-11 10:46:36,528 [main:94] - GETTING Iterable<Int> from Array<Int?>
2021-03-11 10:46:36,556 [main:94] - GETTING Iterable<Int> from Int
2021-03-11 10:46:36,562 [main:94] - GETTING Iterable<Int> from MyIterator
2021-03-11 10:46:36,582 [main:94] - GETTING Iterable<Int> from Iterator<Int>
2021-03-11 10:46:36,597 [main:94] - GETTING Iterable<Int> from MyIterator
2021-03-11 10:46:36,601 [main:94] - GETTING Iterable<Int> from Iterator<Int>
2021-03-11 10:46:36,605 [main:94] - GETTING Iterable<Int> from Int
2021-03-11 10:46:36,605 [main:63] - replacement of c3 of type Iterable<Int> is buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})
2021-03-11 10:46:36,708 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 10:46:36,709 [main:66] - Compilation checking started
2021-03-11 10:46:37,491 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != 10) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:46:37,504 [main:56] - replacing (10, Int)
2021-03-11 10:46:37,506 [main:38] - replacing 10 Int
2021-03-11 10:46:37,507 [main:42] - Getting value of type Int
2021-03-11 10:46:37,665 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:37,667 [main:46] - GENERATED VALUE OF TYPE Int = 459956574
2021-03-11 10:46:37,667 [main:49] - GENERATED IS CALL =false
2021-03-11 10:46:37,677 [main:55] - randomType = MyCollection3
2021-03-11 10:46:37,794 [main:302] - generating value of type = MyCollection3 false depth = 0
2021-03-11 10:46:37,796 [main:112] - generating klass MyCollection3 text = class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}
2021-03-11 10:46:37,926 [main:194] - Type params = []
2021-03-11 10:46:38,055 [main:137] - GENERATING call of type public final operator fun iterator(): MyCollection3.MyIterator defined in MyCollection3[SimpleFunctionDescriptorImpl@2345e73a]
2021-03-11 10:46:38,055 [main:66] - Generated call from random type = (MyCollection3()).iterator().k
2021-03-11 10:46:38,055 [main:63] - replacement of 10 of type Int is (MyCollection3()).iterator().k
2021-03-11 10:46:38,213 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:46:38,214 [main:66] - Compilation checking started
2021-03-11 10:46:38,883 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       b[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:46:38,891 [main:56] - replacing (el ?: 0, Int)
2021-03-11 10:46:38,891 [main:38] - replacing el ?: 0 Int
2021-03-11 10:46:38,891 [main:42] - Getting value of type Int
2021-03-11 10:46:39,033 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:39,036 [main:46] - GENERATED VALUE OF TYPE Int = -606049233
2021-03-11 10:46:39,036 [main:49] - GENERATED IS CALL =false
2021-03-11 10:46:39,371 [main:55] - randomType = LinkedHashMap<MyCollection2, UByte>
2021-03-11 10:46:39,495 [main:302] - generating value of type = LinkedHashMap<MyCollection2, UByte> false depth = 0
2021-03-11 10:46:39,631 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<MyCollection2, UByte>): LkedHashMap<MyCollection2, UByte> = TODO()
2021-03-11 10:46:39,634 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<MyCollection2, UByte>): LkedHashMap<MyCollection2, UByte> = TODO()
2021-03-11 10:46:39,763 [main:302] - generating value of type = Pair<MyCollection2, UByte> false depth = 3
2021-03-11 10:46:39,902 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: MyCollection2, second: UByte): Pair<MyCollection2, UByte> = TODO()
2021-03-11 10:46:39,905 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: MyCollection2, second: UByte): Pair<MyCollection2, UByte> = TODO()
2021-03-11 10:46:40,054 [main:302] - generating value of type = MyCollection2 false depth = 6
2021-03-11 10:46:40,058 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}
2021-03-11 10:46:40,171 [main:194] - Type params = []
2021-03-11 10:46:40,286 [main:302] - generating value of type = UByte true depth = 6
2021-03-11 10:46:40,288 [main:95] - GENERATED = Pair<MyCollection2, UByte>(MyCollection2(), 76.toUByte())
2021-03-11 10:46:40,288 [main:95] - GENERATED = linkedMapOf<MyCollection2, UByte>(Pair<MyCollection2, UByte>(MyCollection2(), 76.toUByte()))
2021-03-11 10:46:40,494 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:46:40,665 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:40,669 [main:66] - Generated call from random type = (linkedMapOf<MyCollection2, UByte>(Pair<MyCollection2, UByte>(MyCollection2(), 76.toUByte()))).size.coerceAtLeast(-614911029)
2021-03-11 10:46:40,672 [main:94] - GETTING Int from MyIterator
2021-03-11 10:46:40,687 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:46:40,687 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.sign
2021-03-11 10:46:40,688 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:46:40,688 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:46:40,688 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:46:40,846 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:40,849 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.ushr(1606148136)
2021-03-11 10:46:40,849 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:46:40,849 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:46:40,850 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:46:40,850 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.unaryPlus()
2021-03-11 10:46:40,850 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:46:40,850 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:46:40,850 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.countOneBits()
2021-03-11 10:46:40,850 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:46:40,850 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:46:40,850 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:46:41,053 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:41,057 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.plus(-35)
2021-03-11 10:46:41,058 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:46:41,058 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:46:41,058 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:46:41,194 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:41,197 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.rem(-107)
2021-03-11 10:46:41,197 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:46:41,197 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:46:41,320 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:41,323 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.ushr(586711259)
2021-03-11 10:46:41,323 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:46:41,324 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:46:41,324 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:46:41,440 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:46:41,442 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext().compareTo(false)
2021-03-11 10:46:41,443 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:46:41,443 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:46:41,562 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:41,565 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.xor(1348027716)
2021-03-11 10:46:41,565 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:46:41,565 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:46:41,723 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:41,726 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.and(-511174644)
2021-03-11 10:46:41,726 [main:63] - replacement of el ?: 0 of type Int is -606049233
2021-03-11 10:46:41,852 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 10:46:41,860 [main:56] - replacing (b, Array<Int?>)
2021-03-11 10:46:41,861 [main:38] - replacing b Array<Int?>
2021-03-11 10:46:41,862 [main:42] - Getting value of type Array<Int?>
2021-03-11 10:46:41,987 [main:302] - generating value of type = Array<Int?> false depth = 0
2021-03-11 10:46:42,116 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Int?): Array<Int?> = TODO()
2021-03-11 10:46:42,119 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Int?): Array<Int?> = TODO()
2021-03-11 10:46:42,572 [main:302] - generating value of type = Int true depth = 3
2021-03-11 10:46:42,575 [main:302] - generating value of type = Function1<Int, Int?> false depth = 3
2021-03-11 10:46:42,578 [main:302] - generating value of type = Int true depth = 4
2021-03-11 10:46:42,580 [main:95] - GENERATED = Array<Int?>(109240950, {a: Int -> -934680983})
2021-03-11 10:46:42,580 [main:46] - GENERATED VALUE OF TYPE Array<Int?> = Array<Int?>(109240950, {a: Int -> -934680983})
2021-03-11 10:46:42,580 [main:49] - GENERATED IS CALL =true
2021-03-11 10:46:42,587 [main:55] - randomType = MyCollection2
2021-03-11 10:46:42,712 [main:302] - generating value of type = MyCollection2 false depth = 0
2021-03-11 10:46:42,714 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}
2021-03-11 10:46:42,837 [main:194] - Type params = []
2021-03-11 10:46:42,993 [main:94] - GETTING Array<Int?> from MyIterator
2021-03-11 10:46:43,004 [main:94] - GETTING Array<Int?> from Int
2021-03-11 10:46:43,069 [main:94] - GETTING Array<Int?> from Array<Int?>
2021-03-11 10:46:43,087 [main:101] - Case = [public fun <T : kotlin.Any> kotlin.Array<T?>.requireNoNulls(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3358e940]]
2021-03-11 10:46:43,087 [main:137] - GENERATING call of type public fun <T : kotlin.Any> kotlin.Array<T?>.requireNoNulls(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3358e940]
2021-03-11 10:46:43,087 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).requireNoNulls()
2021-03-11 10:46:43,087 [main:101] - Case = [public fun <T> kotlin.Array<T>.reversedArray(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1f7c53ea]]
2021-03-11 10:46:43,087 [main:137] - GENERATING call of type public fun <T> kotlin.Array<T>.reversedArray(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1f7c53ea]
2021-03-11 10:46:43,087 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).reversedArray()
2021-03-11 10:46:43,088 [main:101] - Case = [public fun <T> kotlin.Array<T>.sliceArray(indices: kotlin.collections.Collection<kotlin.Int>): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7940abfb]]
2021-03-11 10:46:43,088 [main:137] - GENERATING call of type public fun <T> kotlin.Array<T>.sliceArray(indices: kotlin.collections.Collection<kotlin.Int>): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7940abfb]
2021-03-11 10:46:43,200 [main:302] - generating value of type = Collection<Int> false depth = 0
2021-03-11 10:46:43,324 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): Collection<Int> = TODO()
2021-03-11 10:46:43,327 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): Collection<Int> = TODO()
2021-03-11 10:46:43,445 [main:95] - GENERATED = linkedSetOf<Int>()
2021-03-11 10:46:43,445 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).sliceArray(linkedSetOf<Int>())
2021-03-11 10:46:43,445 [main:101] - Case = [public fun <T : kotlin.Comparable<T>> kotlin.Array<T>.sortedArrayDescending(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@508fd8b1]]
2021-03-11 10:46:43,445 [main:137] - GENERATING call of type public fun <T : kotlin.Comparable<T>> kotlin.Array<T>.sortedArrayDescending(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@508fd8b1]
2021-03-11 10:46:43,445 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).sortedArrayDescending()
2021-03-11 10:46:43,445 [main:101] - Case = [public fun <T : kotlin.Comparable<T>> kotlin.Array<T>.sortedArray(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@62c4b0c7]]
2021-03-11 10:46:43,446 [main:137] - GENERATING call of type public fun <T : kotlin.Comparable<T>> kotlin.Array<T>.sortedArray(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@62c4b0c7]
2021-03-11 10:46:43,446 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).sortedArray()
2021-03-11 10:46:43,446 [main:63] - replacement of b of type Array<Int?> is arrayOfNulls<Int>(5)
2021-03-11 10:46:43,560 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 10:46:43,561 [main:66] - Compilation checking started
2021-03-11 10:46:44,087 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > 0
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:46:44,097 [main:56] - replacing (0, Int)
2021-03-11 10:46:44,097 [main:38] - replacing 0 Int
2021-03-11 10:46:44,097 [main:42] - Getting value of type Int
2021-03-11 10:46:44,219 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:44,221 [main:46] - GENERATED VALUE OF TYPE Int = -531739389
2021-03-11 10:46:44,221 [main:49] - GENERATED IS CALL =false
2021-03-11 10:46:45,032 [main:55] - randomType = Function2<Collection<Array<Float>>?, MyCollection3, UInt>
2021-03-11 10:46:45,033 [main:94] - GETTING Int from MyIterator
2021-03-11 10:46:45,040 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:46:45,040 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:46:45,041 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.unaryPlus()
2021-03-11 10:46:45,041 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:46:45,041 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:46:45,041 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.countTrailingZeroBits()
2021-03-11 10:46:45,041 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:46:45,041 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:46:45,216 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:45,330 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:45,332 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.coerceIn(-1965512121, 503113066)
2021-03-11 10:46:45,332 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:46:45,332 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:46:45,332 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.countLeadingZeroBits()
2021-03-11 10:46:45,332 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:46:45,332 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:46:45,443 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:45,445 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.shr(-1903431023)
2021-03-11 10:46:45,445 [main:101] - Case = [public final operator fun next(): kotlin.Int defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@8257a56]]
2021-03-11 10:46:45,445 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@8257a56]
2021-03-11 10:46:45,445 [main:105] - GENERATED CALL = (MyCollection4().iterator()).next()
2021-03-11 10:46:45,445 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:46:45,446 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:46:45,562 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:45,564 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.ushr(1661081614)
2021-03-11 10:46:45,564 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:46:45,564 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:46:45,674 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:45,676 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.shl(-540700539)
2021-03-11 10:46:45,676 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:46:45,676 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:46:45,785 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:45,787 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.minus(-110)
2021-03-11 10:46:45,787 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@149259da], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:46:45,787 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@149259da]
2021-03-11 10:46:45,787 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:46:45,909 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:46:45,912 [main:105] - GENERATED CALL = (MyCollection4().iterator()).hasNext().compareTo(true)
2021-03-11 10:46:45,912 [main:63] - replacement of 0 of type Int is (MyCollection4().iterator()).k.ushr(1661081614)
2021-03-11 10:46:46,032 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:46:46,032 [main:66] - Compilation checking started
2021-03-11 10:46:46,573 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = k--
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:46:46,579 [main:56] - replacing (k--, Int)
2021-03-11 10:46:46,579 [main:38] - replacing k-- Int
2021-03-11 10:46:46,579 [main:42] - Getting value of type Int
2021-03-11 10:46:46,691 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:46,693 [main:46] - GENERATED VALUE OF TYPE Int = -895755037
2021-03-11 10:46:46,693 [main:49] - GENERATED IS CALL =false
2021-03-11 10:46:46,701 [main:55] - randomType = Int?
2021-03-11 10:46:46,810 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:46,858 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:46:46,970 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:46,972 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:46:47,087 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:47,089 [main:66] - Generated call from random type = (-136501231)?.and(5526492).div(-36)
2021-03-11 10:46:47,091 [main:94] - GETTING Int from MyIterator
2021-03-11 10:46:47,098 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:46:47,099 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:46:47,099 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.countLeadingZeroBits()
2021-03-11 10:46:47,099 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:46:47,099 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.absoluteValue
2021-03-11 10:46:47,099 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:46:47,099 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:46:47,212 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:47,214 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.shr(1344844085)
2021-03-11 10:46:47,215 [main:101] - Case = [public final operator fun next(): kotlin.Int defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@8257a56]]
2021-03-11 10:46:47,215 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@8257a56]
2021-03-11 10:46:47,215 [main:105] - GENERATED CALL = (MyCollection4().iterator()).next()
2021-03-11 10:46:47,215 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:46:47,215 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:46:47,362 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:47,364 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
2021-03-11 10:46:47,365 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:46:47,365 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:46:47,475 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:47,477 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.and(-55628320)
2021-03-11 10:46:47,478 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:46:47,478 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:46:47,587 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:47,589 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.or(1397249590)
2021-03-11 10:46:47,589 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:46:47,589 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:46:47,700 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:47,702 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.rotateRight(-557745144)
2021-03-11 10:46:47,702 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:46:47,702 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:46:47,813 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:47,815 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.rotateLeft(1074747937)
2021-03-11 10:46:47,815 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:46:47,815 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:46:47,928 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:47,931 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.plus(-98)
2021-03-11 10:46:47,931 [main:63] - replacement of k-- of type Int is (MyCollection4().iterator()).k.coerceAtMost(1579195166)
2021-03-11 10:46:48,044 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:46:48,045 [main:66] - Compilation checking started
2021-03-11 10:46:48,582 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:46:48,588 [main:56] - replacing (i, Int)
2021-03-11 10:46:48,591 [main:38] - replacing i Int
2021-03-11 10:46:48,591 [main:42] - Getting value of type Int
2021-03-11 10:46:48,713 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:48,715 [main:46] - GENERATED VALUE OF TYPE Int = -743325670
2021-03-11 10:46:48,715 [main:49] - GENERATED IS CALL =false
2021-03-11 10:46:48,974 [main:55] - randomType = UByte?
2021-03-11 10:46:49,088 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:46:49,132 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@19fa0f89]
2021-03-11 10:46:49,132 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6abd8a99]
2021-03-11 10:46:49,255 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:49,257 [main:66] - Generated call from random type = (73.toUByte())?.toShort().plus(-119)
2021-03-11 10:46:49,258 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:46:49,264 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:46:49,264 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:49,264 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:46:49,264 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().toInt()
2021-03-11 10:46:49,264 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]]
2021-03-11 10:46:49,264 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:49,264 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next()
2021-03-11 10:46:49,264 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:46:49,264 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:49,264 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:46:49,381 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:49,383 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().coerceAtMost(-351930325)
2021-03-11 10:46:49,383 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:46:49,383 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:49,383 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:46:49,384 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().unaryMinus()
2021-03-11 10:46:49,384 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:46:49,384 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:49,384 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:46:49,384 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().takeHighestOneBit()
2021-03-11 10:46:49,384 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:46:49,384 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:49,384 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:46:49,384 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().unaryPlus()
2021-03-11 10:46:49,384 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:46:49,384 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:49,384 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:46:49,384 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().countLeadingZeroBits()
2021-03-11 10:46:49,384 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:46:49,384 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:49,384 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:46:49,498 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:49,501 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().rotateLeft(-1310847071)
2021-03-11 10:46:49,501 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:46:49,501 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:49,501 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:46:49,653 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:49,655 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().plus(10)
2021-03-11 10:46:49,655 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:46:49,655 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:49,656 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:46:49,769 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:49,771 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().rem(-63)
2021-03-11 10:46:49,771 [main:63] - replacement of i of type Int is -743325670
2021-03-11 10:46:49,884 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 10:46:49,884 [main:66] - Compilation checking started
2021-03-11 10:46:50,223 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[1175736283] = -743325670++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:46:50,229 [main:56] - replacing (sum, Int)
2021-03-11 10:46:50,231 [main:38] - replacing sum Int
2021-03-11 10:46:50,231 [main:42] - Getting value of type Int
2021-03-11 10:46:50,344 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:50,346 [main:46] - GENERATED VALUE OF TYPE Int = 698049355
2021-03-11 10:46:50,347 [main:49] - GENERATED IS CALL =false
2021-03-11 10:46:50,753 [main:55] - randomType = Set<UShort?>
2021-03-11 10:46:50,753 [main:94] - GETTING Int from Int
2021-03-11 10:46:50,789 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:46:50,790 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:46:50,790 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:46:50,900 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:50,903 [main:105] - GENERATED CALL = (el ?: 0).toInt().minus(-24)
2021-03-11 10:46:50,903 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:46:50,903 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:46:50,903 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:46:51,015 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:51,018 [main:105] - GENERATED CALL = (el ?: 0).toInt().ushr(672837629)
2021-03-11 10:46:51,018 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3f4ea447]]
2021-03-11 10:46:51,018 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:46:51,140 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:51,142 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3f4ea447]
2021-03-11 10:46:51,142 [main:105] - GENERATED CALL = (el ?: 0).rangeTo(-71).random()
2021-03-11 10:46:51,142 [main:101] - Case = [public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:46:51,142 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:46:51,256 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:51,258 [main:105] - GENERATED CALL = (el ?: 0).ushr(1297873914)
2021-03-11 10:46:51,258 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@68c62048]]
2021-03-11 10:46:51,258 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f]
2021-03-11 10:46:51,373 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:46:51,375 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@68c62048]
2021-03-11 10:46:51,376 [main:105] - GENERATED CALL = (el ?: 0).div(6363771149090293519).countLeadingZeroBits()
2021-03-11 10:46:51,376 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1679473f]]
2021-03-11 10:46:51,376 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:46:51,376 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1679473f]
2021-03-11 10:46:51,376 [main:105] - GENERATED CALL = (el ?: 0).toShort().countTrailingZeroBits()
2021-03-11 10:46:51,376 [main:101] - Case = [public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:46:51,376 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:46:51,485 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:51,487 [main:105] - GENERATED CALL = (el ?: 0).xor(-779398494)
2021-03-11 10:46:51,487 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12f06cb], public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@74f66b42]]
2021-03-11 10:46:51,487 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12f06cb]
2021-03-11 10:46:51,487 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@74f66b42]
2021-03-11 10:46:51,487 [main:105] - GENERATED CALL = (el ?: 0).toDouble().toInt()
2021-03-11 10:46:51,487 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5775f993]]
2021-03-11 10:46:51,487 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:46:51,487 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5775f993]
2021-03-11 10:46:51,600 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:46:51,603 [main:105] - GENERATED CALL = (el ?: 0).toChar().compareTo('෈')
2021-03-11 10:46:51,603 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3c2cc2a6]]
2021-03-11 10:46:51,603 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:46:51,603 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3c2cc2a6]
2021-03-11 10:46:51,603 [main:105] - GENERATED CALL = (el ?: 0).toShort().countLeadingZeroBits()
2021-03-11 10:46:51,603 [main:63] - replacement of sum of type Int is (el ?: 0).toInt().minus(-24)
2021-03-11 10:46:51,749 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:46:51,749 [main:66] - Compilation checking started
2021-03-11 10:46:52,069 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if((el ?: 0).toInt().minus(-24) != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:46:52,076 [main:56] - replacing ("a failed", String)
2021-03-11 10:46:52,078 [main:38] - replacing "a failed" String
2021-03-11 10:46:52,078 [main:42] - Getting value of type String
2021-03-11 10:46:52,189 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:46:52,191 [main:46] - GENERATED VALUE OF TYPE String = "mzoug"
2021-03-11 10:46:52,192 [main:49] - GENERATED IS CALL =false
2021-03-11 10:46:52,199 [main:55] - randomType = MyCollection2
2021-03-11 10:46:52,311 [main:302] - generating value of type = MyCollection2 false depth = 0
2021-03-11 10:46:52,313 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}
2021-03-11 10:46:52,431 [main:194] - Type params = []
2021-03-11 10:46:52,560 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@f1162ed]
2021-03-11 10:46:52,669 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 10:46:52,787 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 10:46:52,790 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 10:46:53,034 [main:302] - generating value of type = String true depth = 3
2021-03-11 10:46:53,037 [main:95] - GENERATED = StringBuilder("vhrdl")
2021-03-11 10:46:53,150 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 10:46:53,264 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 10:46:53,267 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 10:46:53,517 [main:302] - generating value of type = Int true depth = 3
2021-03-11 10:46:53,519 [main:95] - GENERATED = StringBuilder(-1426391872)
2021-03-11 10:46:53,632 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 10:46:53,750 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:53,899 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 10:46:54,020 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 10:46:54,023 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 10:46:54,028 [main:66] - Generated call from random type = (MyCollection2()).joinToString(StringBuilder("vhrdl"), StringBuilder(-1426391872), "upbmk", 2001989475, "shiju", {a: T -> "budsq"})
2021-03-11 10:46:54,029 [main:94] - GETTING String from Iterator<Int>
2021-03-11 10:46:54,038 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]]
2021-03-11 10:46:54,039 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:54,039 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]
2021-03-11 10:46:54,155 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:54,157 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().toString(522347518)
2021-03-11 10:46:54,157 [main:63] - replacement of "a failed" of type String is (MyCollection2()).joinToString(StringBuilder("vhrdl"), StringBuilder(-1426391872), "upbmk", 2001989475, "shiju", {a: T -> "budsq"})
2021-03-11 10:46:54,274 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:46:54,275 [main:66] - Compilation checking started
2021-03-11 10:46:54,649 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return (MyCollection2()).joinToString(StringBuilder("vhrdl"), StringBuilder(-1426391872), "upbmk", 2001989475, "shiju", {a: T -> "budsq"})

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[i] = i++
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:46:54,656 [main:56] - replacing (i++, Int)
2021-03-11 10:46:54,657 [main:38] - replacing i++ Int
2021-03-11 10:46:54,657 [main:42] - Getting value of type Int
2021-03-11 10:46:54,780 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:54,782 [main:46] - GENERATED VALUE OF TYPE Int = -1889816938
2021-03-11 10:46:54,782 [main:49] - GENERATED IS CALL =false
2021-03-11 10:46:54,790 [main:55] - randomType = MyCollection2
2021-03-11 10:46:54,906 [main:302] - generating value of type = MyCollection2 false depth = 0
2021-03-11 10:46:54,908 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}
2021-03-11 10:46:55,022 [main:194] - Type params = []
2021-03-11 10:46:55,154 [main:137] - GENERATING call of type public open fun iterator(): kotlin.collections.Iterator<kotlin.Int> defined in MyCollection2[SimpleFunctionDescriptorImpl@7118c684]
2021-03-11 10:46:55,154 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@300ea7d1]
2021-03-11 10:46:55,154 [main:66] - Generated call from random type = (MyCollection2()).iterator().next()
2021-03-11 10:46:55,155 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:46:55,163 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:46:55,163 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:55,163 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:46:55,164 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().inc()
2021-03-11 10:46:55,164 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:46:55,164 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:55,164 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:46:55,164 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().toInt()
2021-03-11 10:46:55,164 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:46:55,164 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:55,164 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().sign
2021-03-11 10:46:55,164 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]]
2021-03-11 10:46:55,164 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:55,164 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next()
2021-03-11 10:46:55,164 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:46:55,164 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:55,164 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:46:55,275 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:55,277 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().ushr(1083257933)
2021-03-11 10:46:55,277 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:46:55,278 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:55,278 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:46:55,278 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().takeLowestOneBit()
2021-03-11 10:46:55,278 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:46:55,278 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:55,278 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:46:55,278 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().inv()
2021-03-11 10:46:55,278 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:46:55,278 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:55,278 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:46:55,278 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().dec()
2021-03-11 10:46:55,278 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:46:55,278 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:55,278 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:46:55,393 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:55,395 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().shl(283661372)
2021-03-11 10:46:55,395 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:46:55,395 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:55,395 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:46:55,395 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().countOneBits()
2021-03-11 10:46:55,395 [main:63] - replacement of i++ of type Int is (MyCollection1().iterator()).next().shl(283661372)
2021-03-11 10:46:55,508 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:46:55,508 [main:66] - Compilation checking started
2021-03-11 10:46:56,026 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[i] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:46:56,036 [main:56] - replacing (sum + el, Int)
2021-03-11 10:46:56,039 [main:38] - replacing sum + el Int
2021-03-11 10:46:56,039 [main:42] - Getting value of type Int
2021-03-11 10:46:56,174 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:56,176 [main:46] - GENERATED VALUE OF TYPE Int = -231159287
2021-03-11 10:46:56,177 [main:49] - GENERATED IS CALL =false
2021-03-11 10:46:56,184 [main:55] - randomType = MyCollection4
2021-03-11 10:46:56,301 [main:302] - generating value of type = MyCollection4 false depth = 0
2021-03-11 10:46:56,303 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:46:56,444 [main:194] - Type params = []
2021-03-11 10:46:56,562 [main:137] - GENERATING call of type public final operator fun iterator(): MyCollection4.MyIterator defined in MyCollection4[SimpleFunctionDescriptorImpl@2329c9b5]
2021-03-11 10:46:56,563 [main:66] - Generated call from random type = (MyCollection4()).iterator().k
2021-03-11 10:46:56,564 [main:94] - GETTING Int from Array<Int?>
2021-03-11 10:46:56,578 [main:101] - Case = [public final operator fun iterator(): kotlin.collections.Iterator<kotlin.Int?> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@688b308a], public abstract operator fun next(): kotlin.Int? defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@4b06cee5]]
2021-03-11 10:46:56,579 [main:137] - GENERATING call of type public final operator fun iterator(): kotlin.collections.Iterator<kotlin.Int?> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@688b308a]
2021-03-11 10:46:56,579 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int? defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@4b06cee5]
2021-03-11 10:46:56,579 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).iterator().next()
2021-03-11 10:46:56,579 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:46:56,579 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:46:56,689 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:56,691 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:46:56,803 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:56,806 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(1644256019)?.rem(-80)
2021-03-11 10:46:56,806 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:46:56,806 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:46:56,921 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:56,924 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.times(70)
2021-03-11 10:46:56,924 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:46:56,924 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:46:56,925 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.countOneBits()
2021-03-11 10:46:56,925 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:46:56,925 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:46:57,040 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:57,043 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.ushr(-1724456512)
2021-03-11 10:46:57,044 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:46:57,044 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:46:57,153 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:57,155 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:46:57,266 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:57,269 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-32101432)?.shr(1325498660)
2021-03-11 10:46:57,270 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:46:57,270 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:46:57,381 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:46:57,383 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.compareTo(110)
2021-03-11 10:46:57,384 [main:101] - Case = [@kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentHashCode(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6cbd4f7b]]
2021-03-11 10:46:57,384 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentHashCode(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6cbd4f7b]
2021-03-11 10:46:57,384 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).contentHashCode()
2021-03-11 10:46:57,384 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:46:57,384 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:46:57,497 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:57,499 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:46:57,499 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(1517292417)?.inc()
2021-03-11 10:46:57,499 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:46:57,499 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:46:57,609 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:57,612 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:46:57,722 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:57,725 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(1669433863)?.shl(1737065559)
2021-03-11 10:46:57,725 [main:63] - replacement of sum + el of type Int is (arrayOfNulls<Int>(5)).get(-32101432)?.shr(1325498660)
2021-03-11 10:46:57,835 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 10:46:57,836 [main:66] - Compilation checking started
2021-03-11 10:46:58,158 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (arrayOfNulls<Int>(5)).get(-32101432)?.shr(1325498660)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[i] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:46:58,165 [main:56] - replacing (i, Int)
2021-03-11 10:46:58,166 [main:38] - replacing i Int
2021-03-11 10:46:58,166 [main:42] - Getting value of type Int
2021-03-11 10:46:58,282 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:46:58,284 [main:46] - GENERATED VALUE OF TYPE Int = 1930599349
2021-03-11 10:46:58,284 [main:49] - GENERATED IS CALL =false
2021-03-11 10:46:58,957 [main:55] - randomType = HashMap<Short, ArrayList<Short>>
2021-03-11 10:46:59,077 [main:302] - generating value of type = HashMap<Short, ArrayList<Short>> false depth = 0
2021-03-11 10:46:59,195 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Short, ArrayList<Short>>): HashMap<Short, ArrayList<Short>> = TODO()
2021-03-11 10:46:59,198 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Short, ArrayList<Short>>): HashMap<Short, ArrayList<Short>> = TODO()
2021-03-11 10:46:59,312 [main:302] - generating value of type = Pair<Short, ArrayList<Short>> false depth = 3
2021-03-11 10:46:59,427 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Short, second: ArrayList<Short>): Pair<Short, ArrayList<Short>> = TODO()
2021-03-11 10:46:59,430 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Short, second: ArrayList<Short>): Pair<Short, ArrayList<Short>> = TODO()
2021-03-11 10:46:59,547 [main:302] - generating value of type = Short true depth = 6
2021-03-11 10:46:59,549 [main:302] - generating value of type = ArrayList<Short> false depth = 6
2021-03-11 10:46:59,664 [main:43] - GENERATING CALL OF fun <E> ArrayList(): ArrayList<Short> = TODO()
2021-03-11 10:46:59,667 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(): ArrayList<Short> = TODO()
2021-03-11 10:46:59,782 [main:95] - GENERATED = ArrayList<Short>()
2021-03-11 10:46:59,782 [main:95] - GENERATED = Pair<Short, ArrayList<Short>>(-8918, ArrayList<Short>())
2021-03-11 10:46:59,782 [main:95] - GENERATED = linkedMapOf<Short, ArrayList<Short>>(Pair<Short, ArrayList<Short>>(-8918, ArrayList<Short>()))
2021-03-11 10:46:59,917 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@32865239]
2021-03-11 10:46:59,917 [main:66] - Generated call from random type = (linkedMapOf<Short, ArrayList<Short>>(Pair<Short, ArrayList<Short>>(-8918, ArrayList<Short>()))).values.count()
2021-03-11 10:46:59,918 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:46:59,925 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:46:59,925 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:59,926 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().absoluteValue
2021-03-11 10:46:59,926 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:46:59,926 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:59,926 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:46:59,926 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().countLeadingZeroBits()
2021-03-11 10:46:59,926 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:46:59,926 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:59,926 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().sign
2021-03-11 10:46:59,926 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:46:59,927 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:46:59,927 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:47:00,039 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:00,041 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().rotateLeft(2139804026)
2021-03-11 10:47:00,041 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:47:00,042 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:00,042 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:47:00,153 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:00,155 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().and(-879570130)
2021-03-11 10:47:00,156 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:47:00,156 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:00,156 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:47:00,156 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().takeHighestOneBit()
2021-03-11 10:47:00,156 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:47:00,156 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:00,156 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:47:00,267 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:00,269 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().coerceAtMost(-11793730)
2021-03-11 10:47:00,269 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:47:00,270 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:00,270 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:47:00,270 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().countTrailingZeroBits()
2021-03-11 10:47:00,270 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:47:00,270 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:00,270 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:47:00,270 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().countOneBits()
2021-03-11 10:47:00,270 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:47:00,270 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:00,270 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:47:00,270 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().toInt()
2021-03-11 10:47:00,270 [main:63] - replacement of i of type Int is (MyCollection1().iterator()).next().countTrailingZeroBits()
2021-03-11 10:47:00,380 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:47:00,380 [main:66] - Compilation checking started
2021-03-11 10:47:00,857 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = 0
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:00,863 [main:56] - replacing (0, Int)
2021-03-11 10:47:00,865 [main:38] - replacing 0 Int
2021-03-11 10:47:00,865 [main:42] - Getting value of type Int
2021-03-11 10:47:01,011 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:01,014 [main:46] - GENERATED VALUE OF TYPE Int = 173085981
2021-03-11 10:47:01,014 [main:49] - GENERATED IS CALL =false
2021-03-11 10:47:01,022 [main:55] - randomType = MyCollection4
2021-03-11 10:47:01,135 [main:302] - generating value of type = MyCollection4 false depth = 0
2021-03-11 10:47:01,137 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:01,248 [main:194] - Type params = []
2021-03-11 10:47:01,372 [main:137] - GENERATING call of type public final operator fun iterator(): MyCollection4.MyIterator defined in MyCollection4[SimpleFunctionDescriptorImpl@161f00e6]
2021-03-11 10:47:01,372 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@3a09a492]
2021-03-11 10:47:01,372 [main:66] - Generated call from random type = (MyCollection4()).iterator().next()
2021-03-11 10:47:01,373 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:47:01,380 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:47:01,380 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:01,380 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:47:01,492 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:01,495 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().plus(98)
2021-03-11 10:47:01,495 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:47:01,495 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:01,495 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:47:01,613 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:01,725 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:01,727 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().coerceIn(1230981667, -1805019719)
2021-03-11 10:47:01,727 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]]
2021-03-11 10:47:01,727 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:01,727 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next()
2021-03-11 10:47:01,727 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:47:01,727 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:01,727 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:47:01,838 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:01,841 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().times(-12)
2021-03-11 10:47:01,841 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:47:01,841 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:01,841 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:47:01,953 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:01,955 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().and(1346995815)
2021-03-11 10:47:01,955 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:47:01,955 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:01,955 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:47:02,069 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:02,072 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().rotateLeft(1003101840)
2021-03-11 10:47:02,072 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:47:02,072 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:02,072 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:47:02,072 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().inv()
2021-03-11 10:47:02,072 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:47:02,072 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:02,073 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().sign
2021-03-11 10:47:02,073 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:47:02,073 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:02,073 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().absoluteValue
2021-03-11 10:47:02,073 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:47:02,073 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:02,073 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:47:02,073 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().countOneBits()
2021-03-11 10:47:02,073 [main:63] - replacement of 0 of type Int is (MyCollection1().iterator()).next().countOneBits()
2021-03-11 10:47:02,184 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:47:02,184 [main:66] - Compilation checking started
2021-03-11 10:47:02,687 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + el
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:02,696 [main:56] - replacing (el, Int)
2021-03-11 10:47:02,698 [main:38] - replacing el Int
2021-03-11 10:47:02,698 [main:42] - Getting value of type Int
2021-03-11 10:47:02,807 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:02,809 [main:46] - GENERATED VALUE OF TYPE Int = -1440847307
2021-03-11 10:47:02,809 [main:49] - GENERATED IS CALL =false
2021-03-11 10:47:03,093 [main:55] - randomType = MutableMap<Boolean?, MyCollection1>
2021-03-11 10:47:03,093 [main:94] - GETTING Int from Int
2021-03-11 10:47:03,130 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3f4ea447]]
2021-03-11 10:47:03,130 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:47:03,240 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:03,243 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3f4ea447]
2021-03-11 10:47:03,243 [main:105] - GENERATED CALL = (sum).rangeTo(-124).random()
2021-03-11 10:47:03,243 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@32620f7e]]
2021-03-11 10:47:03,243 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:47:03,243 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@32620f7e]
2021-03-11 10:47:03,356 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:03,358 [main:105] - GENERATED CALL = (sum).toByte().rem(-123)
2021-03-11 10:47:03,359 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2b7987d7]]
2021-03-11 10:47:03,359 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:47:03,359 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2b7987d7]
2021-03-11 10:47:03,359 [main:105] - GENERATED CALL = (sum).toByte().countTrailingZeroBits()
2021-03-11 10:47:03,359 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a8376bf]]
2021-03-11 10:47:03,359 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f]
2021-03-11 10:47:03,502 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:47:03,504 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a8376bf]
2021-03-11 10:47:03,505 [main:105] - GENERATED CALL = (sum).div(-53270881846052527).countOneBits()
2021-03-11 10:47:03,505 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:47:03,505 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:47:03,622 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:03,624 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:47:03,625 [main:105] - GENERATED CALL = (sum).compareTo(773917789).inc()
2021-03-11 10:47:03,625 [main:101] - Case = [public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:47:03,625 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:47:03,737 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:03,739 [main:105] - GENERATED CALL = (sum).shr(1829986869)
2021-03-11 10:47:03,739 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:47:03,740 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:47:03,740 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:47:03,852 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:03,854 [main:105] - GENERATED CALL = (sum).toInt().shl(-1620620831)
2021-03-11 10:47:03,854 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a8376bf]]
2021-03-11 10:47:03,854 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97]
2021-03-11 10:47:03,854 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a8376bf]
2021-03-11 10:47:03,854 [main:105] - GENERATED CALL = (sum).toLong().countOneBits()
2021-03-11 10:47:03,854 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@62aaa4bd]]
2021-03-11 10:47:03,854 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:47:03,854 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@62aaa4bd]
2021-03-11 10:47:03,854 [main:105] - GENERATED CALL = (sum).toFloat().roundToInt()
2021-03-11 10:47:03,855 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@140b0a8d]]
2021-03-11 10:47:03,855 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97]
2021-03-11 10:47:03,855 [main:105] - GENERATED CALL = (sum).toLong().sign
2021-03-11 10:47:03,855 [main:63] - replacement of el of type Int is (sum).toByte().countTrailingZeroBits()
2021-03-11 10:47:03,966 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:47:03,966 [main:66] - Compilation checking started
2021-03-11 10:47:04,466 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + (sum).toByte().countTrailingZeroBits()
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "a failed"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:04,474 [main:56] - replacing ("a failed", String)
2021-03-11 10:47:04,475 [main:38] - replacing "a failed" String
2021-03-11 10:47:04,475 [main:42] - Getting value of type String
2021-03-11 10:47:04,602 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:47:04,604 [main:46] - GENERATED VALUE OF TYPE String = "tmipc"
2021-03-11 10:47:04,604 [main:49] - GENERATED IS CALL =false
2021-03-11 10:47:04,614 [main:55] - randomType = MyCollection4
2021-03-11 10:47:04,734 [main:302] - generating value of type = MyCollection4 false depth = 0
2021-03-11 10:47:04,736 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:04,855 [main:194] - Type params = []
2021-03-11 10:47:04,972 [main:94] - GETTING String from Iterator<Int>
2021-03-11 10:47:04,978 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]]
2021-03-11 10:47:04,978 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:47:04,978 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]
2021-03-11 10:47:05,091 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:05,093 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().toString(-2136755761)
2021-03-11 10:47:05,093 [main:63] - replacement of "a failed" of type String is "tmipc"
2021-03-11 10:47:05,203 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 10:47:05,203 [main:66] - Compilation checking started
2021-03-11 10:47:05,662 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + (sum).toByte().countTrailingZeroBits()
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in c1) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:05,669 [main:56] - replacing (c1, Iterable<Int>)
2021-03-11 10:47:05,671 [main:38] - replacing c1 Iterable<Int>
2021-03-11 10:47:05,671 [main:42] - Getting value of type Iterable<Int>
2021-03-11 10:47:05,799 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 10:47:05,920 [main:43] - GENERATING CALL OF fun <T> List(size: kotlin.Int, init: (index: kotlin.Int)->Int): Iterable<Int> = TODO()
2021-03-11 10:47:05,925 [main:61] - WITHOUT TYPE PARAMS = fun <T> List(size: kotlin.Int, init: (index: kotlin.Int)->Int): Iterable<Int> = TODO()
2021-03-11 10:47:06,337 [main:302] - generating value of type = Int true depth = 3
2021-03-11 10:47:06,339 [main:302] - generating value of type = Function1<[@kotlin.ParameterName] Int, Int> false depth = 3
2021-03-11 10:47:06,342 [main:302] - generating value of type = Int true depth = 4
2021-03-11 10:47:06,344 [main:95] - GENERATED = List<Int>(-1073909037, {a: Int -> -1805396255})
2021-03-11 10:47:06,344 [main:46] - GENERATED VALUE OF TYPE Iterable<Int> = List<Int>(-1073909037, {a: Int -> -1805396255})
2021-03-11 10:47:06,344 [main:49] - GENERATED IS CALL =true
2021-03-11 10:47:06,348 [main:55] - randomType = Char
2021-03-11 10:47:06,460 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:47:06,496 [main:94] - GETTING Iterable<Int> from MyIterator
2021-03-11 10:47:06,504 [main:94] - GETTING Iterable<Int> from Int
2021-03-11 10:47:06,560 [main:94] - GETTING Iterable<Int> from MyIterator
2021-03-11 10:47:06,564 [main:94] - GETTING Iterable<Int> from Int
2021-03-11 10:47:06,567 [main:94] - GETTING Iterable<Int> from Iterator<Int>
2021-03-11 10:47:06,577 [main:94] - GETTING Iterable<Int> from Array<Int?>
2021-03-11 10:47:06,594 [main:94] - GETTING Iterable<Int> from Iterator<Int>
2021-03-11 10:47:06,597 [main:94] - GETTING Iterable<Int> from Int
2021-03-11 10:47:06,597 [main:63] - replacement of c1 of type Iterable<Int> is List<Int>(-1073909037, {a: Int -> -1805396255})
2021-03-11 10:47:06,712 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 10:47:06,713 [main:66] - Compilation checking started
2021-03-11 10:47:07,208 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + (sum).toByte().countTrailingZeroBits()
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>
    for(el in 0..4) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:07,219 [main:56] - replacing ((arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int>, Array<Int>)
2021-03-11 10:47:07,221 [main:38] - replacing (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int> Array<Int>
2021-03-11 10:47:07,221 [main:42] - Getting value of type Array<Int>
2021-03-11 10:47:07,358 [main:302] - generating value of type = Array<Int> false depth = 0
2021-03-11 10:47:07,483 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Int> = TODO()
2021-03-11 10:47:07,486 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Int> = TODO()
2021-03-11 10:47:07,614 [main:95] - GENERATED = emptyArray<Int>()
2021-03-11 10:47:07,615 [main:46] - GENERATED VALUE OF TYPE Array<Int> = emptyArray<Int>()
2021-03-11 10:47:07,615 [main:49] - GENERATED IS CALL =true
2021-03-11 10:47:07,747 [main:55] - randomType = UShort
2021-03-11 10:47:07,868 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 10:47:07,914 [main:94] - GETTING Array<Int> from Iterator<Int>
2021-03-11 10:47:07,922 [main:94] - GETTING Array<Int> from Int
2021-03-11 10:47:07,966 [main:94] - GETTING Array<Int> from Int
2021-03-11 10:47:07,967 [main:94] - GETTING Array<Int> from Array<Int?>
2021-03-11 10:47:07,977 [main:63] - replacement of (arrayOfNulls<Int>(5)).sliceArray(emptyList<Int>()) as Array<Int> of type Array<Int> is emptyArray<Int>()
2021-03-11 10:47:08,090 [main:33] - Trying to replace Element(BINARY_WITH_TYPE) on Element(CALL_EXPRESSION)
2021-03-11 10:47:08,090 [main:66] - Compilation checking started
2021-03-11 10:47:08,644 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + (sum).toByte().countTrailingZeroBits()
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..4) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 0
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:08,652 [main:56] - replacing (0, Int)
2021-03-11 10:47:08,656 [main:38] - replacing 0 Int
2021-03-11 10:47:08,656 [main:42] - Getting value of type Int
2021-03-11 10:47:08,827 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:08,831 [main:46] - GENERATED VALUE OF TYPE Int = 1790450647
2021-03-11 10:47:08,831 [main:49] - GENERATED IS CALL =false
2021-03-11 10:47:09,036 [main:55] - randomType = UByte
2021-03-11 10:47:09,229 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:47:09,267 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UByte): kotlin.ranges.UIntRange defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5e63c3a4]
2021-03-11 10:47:09,391 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:47:09,393 [main:66] - Generated call from random type = (24.toUByte()).rangeTo(56.toUByte()).step
2021-03-11 10:47:09,394 [main:94] - GETTING Int from Array<Int?>
2021-03-11 10:47:09,413 [main:101] - Case = [public inline fun <T> kotlin.Array<out T>.indexOfFirst(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@79423ae4]]
2021-03-11 10:47:09,413 [main:137] - GENERATING call of type public inline fun <T> kotlin.Array<out T>.indexOfFirst(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@79423ae4]
2021-03-11 10:47:09,534 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 10:47:09,536 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:47:09,538 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).indexOfFirst({a: T -> false})
2021-03-11 10:47:09,539 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:47:09,539 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:47:09,539 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.toInt()
2021-03-11 10:47:09,539 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:47:09,539 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:47:09,716 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:09,719 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:47:09,880 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:09,883 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-1600302217)?.plus(-117)
2021-03-11 10:47:09,883 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:47:09,883 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:47:09,883 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.inc()
2021-03-11 10:47:09,883 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:47:09,883 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:47:10,007 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:10,010 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:47:10,144 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:10,148 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(2104780567)?.shl(1963001319)
2021-03-11 10:47:10,148 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:47:10,148 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:47:10,283 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:10,287 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:47:10,288 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-17903191)?.dec()
2021-03-11 10:47:10,288 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:47:10,288 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:47:10,450 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:10,453 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:47:10,454 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-569605182)?.inv()
2021-03-11 10:47:10,454 [main:101] - Case = [@kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentHashCode(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6cbd4f7b]]
2021-03-11 10:47:10,454 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentHashCode(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6cbd4f7b]
2021-03-11 10:47:10,454 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).contentHashCode()
2021-03-11 10:47:10,454 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:47:10,454 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:47:10,616 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:10,619 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:47:10,755 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:10,758 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(46909552)?.shr(-670682469)
2021-03-11 10:47:10,759 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:47:10,759 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:47:10,876 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:10,878 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.rotateLeft(2063466835)
2021-03-11 10:47:10,878 [main:63] - replacement of 0 of type Int is 1790450647
2021-03-11 10:47:10,994 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 10:47:10,995 [main:66] - Compilation checking started
2021-03-11 10:47:11,519 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + (sum).toByte().countTrailingZeroBits()
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..4) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = 5

        override fun next() : Int = k--
        override fun hasNext() = k > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:11,526 [main:56] - replacing (5, Int)
2021-03-11 10:47:11,526 [main:38] - replacing 5 Int
2021-03-11 10:47:11,526 [main:42] - Getting value of type Int
2021-03-11 10:47:11,648 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:11,650 [main:46] - GENERATED VALUE OF TYPE Int = 87806260
2021-03-11 10:47:11,650 [main:49] - GENERATED IS CALL =false
2021-03-11 10:47:11,822 [main:55] - randomType = MyCollection2?
2021-03-11 10:47:11,933 [main:302] - generating value of type = MyCollection2 false depth = 0
2021-03-11 10:47:11,935 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}
2021-03-11 10:47:12,052 [main:194] - Type params = []
2021-03-11 10:47:12,194 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyCollection2[DeserializedSimpleFunctionDescriptor@6c67f848]
2021-03-11 10:47:12,311 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:47:12,311 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:47:12,421 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:47:12,424 [main:66] - Generated call from random type = (MyCollection2())?.equals("hygfj").compareTo(false)
2021-03-11 10:47:12,425 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:47:12,432 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:47:12,432 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:47:12,432 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:47:12,541 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:12,544 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().compareTo(-58)
2021-03-11 10:47:12,544 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:47:12,544 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:47:12,544 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:47:12,653 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:12,656 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().shr(-1810980145)
2021-03-11 10:47:12,656 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:47:12,656 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09]
2021-03-11 10:47:12,767 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:47:12,767 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:47:12,880 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:47:12,882 [main:105] - GENERATED CALL = (MyCollection2().iterator()).equals("ycwfa").compareTo(true)
2021-03-11 10:47:12,882 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:47:12,882 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:47:12,883 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:47:12,883 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().countLeadingZeroBits()
2021-03-11 10:47:12,883 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:47:12,883 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:47:12,883 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:47:13,000 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:13,002 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().plus(-113)
2021-03-11 10:47:13,003 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:47:13,003 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:47:13,003 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:47:13,117 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:13,119 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().rotateRight(1173431609)
2021-03-11 10:47:13,119 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:47:13,119 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:47:13,119 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:47:13,230 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:13,346 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:13,348 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)
2021-03-11 10:47:13,348 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:47:13,348 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:47:13,348 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:47:13,459 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:13,461 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().rotateLeft(1631721050)
2021-03-11 10:47:13,461 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:47:13,461 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:47:13,461 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:47:13,573 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:13,575 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().coerceAtMost(1570847831)
2021-03-11 10:47:13,575 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:47:13,575 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:47:13,575 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:47:13,575 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().takeLowestOneBit()
2021-03-11 10:47:13,575 [main:63] - replacement of 5 of type Int is (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)
2021-03-11 10:47:13,690 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:47:13,690 [main:66] - Compilation checking started
2021-03-11 10:47:14,158 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + (sum).toByte().countTrailingZeroBits()
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + el!!
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..4) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = k > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:14,166 [main:56] - replacing (el!!, Int)
2021-03-11 10:47:14,168 [main:38] - replacing el!! Int
2021-03-11 10:47:14,168 [main:42] - Getting value of type Int
2021-03-11 10:47:14,282 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:14,284 [main:46] - GENERATED VALUE OF TYPE Int = 250777849
2021-03-11 10:47:14,284 [main:49] - GENERATED IS CALL =false
2021-03-11 10:47:14,580 [main:55] - randomType = Collection<Double>
2021-03-11 10:47:14,581 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:47:14,587 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:47:14,587 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:14,587 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:47:14,697 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:14,700 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().ushr(1404183019)
2021-03-11 10:47:14,700 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:47:14,700 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:14,700 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:47:14,810 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:14,813 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().div(1)
2021-03-11 10:47:14,813 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:47:14,813 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:14,813 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:47:14,923 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:14,925 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().shr(1177124033)
2021-03-11 10:47:14,925 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:47:14,925 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:14,925 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:47:14,925 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().dec()
2021-03-11 10:47:14,925 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:47:14,925 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:14,926 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:47:15,040 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:15,042 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().rotateRight(1581478189)
2021-03-11 10:47:15,042 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:47:15,042 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:15,042 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().sign
2021-03-11 10:47:15,042 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:47:15,042 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:15,042 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:47:15,042 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().unaryPlus()
2021-03-11 10:47:15,042 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:47:15,042 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:15,042 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:47:15,043 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().unaryMinus()
2021-03-11 10:47:15,043 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:47:15,043 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:15,043 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:47:15,043 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().countOneBits()
2021-03-11 10:47:15,043 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:47:15,043 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:15,043 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().absoluteValue
2021-03-11 10:47:15,043 [main:63] - replacement of el!! of type Int is (MyCollection1().iterator()).next().countOneBits()
2021-03-11 10:47:15,154 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:47:15,155 [main:66] - Compilation checking started
2021-03-11 10:47:15,615 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + (sum).toByte().countTrailingZeroBits()
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..4) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = k > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:15,622 [main:56] - replacing (0, Int)
2021-03-11 10:47:15,623 [main:38] - replacing 0 Int
2021-03-11 10:47:15,623 [main:42] - Getting value of type Int
2021-03-11 10:47:15,742 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:15,744 [main:46] - GENERATED VALUE OF TYPE Int = 1681420815
2021-03-11 10:47:15,744 [main:49] - GENERATED IS CALL =false
2021-03-11 10:47:16,038 [main:55] - randomType = MutableMap<MyCollection3, String>
2021-03-11 10:47:16,039 [main:94] - GETTING Int from Array<Int?>
2021-03-11 10:47:16,053 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:47:16,053 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:47:16,169 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:16,171 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:47:16,172 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-1273662826)?.unaryMinus()
2021-03-11 10:47:16,172 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:47:16,172 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:47:16,289 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:16,292 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:47:16,406 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:16,408 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-116333575)?.ushr(-1290098401)
2021-03-11 10:47:16,408 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:47:16,408 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:47:16,521 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:16,523 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.shl(-1693464364)
2021-03-11 10:47:16,523 [main:101] - Case = [public inline fun <T> kotlin.Array<out T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e45404d]]
2021-03-11 10:47:16,523 [main:137] - GENERATING call of type public inline fun <T> kotlin.Array<out T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e45404d]
2021-03-11 10:47:16,636 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 10:47:16,638 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:47:16,641 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).indexOfLast({a: T -> false})
2021-03-11 10:47:16,641 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:47:16,641 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:47:16,757 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:16,760 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:47:16,895 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:16,897 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-1997963625)?.div(-43)
2021-03-11 10:47:16,897 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:47:16,898 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:47:17,103 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:17,106 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.times(-73)
2021-03-11 10:47:17,106 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:47:17,106 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:47:17,257 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:17,259 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:47:17,382 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:17,384 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(1476356102)?.shl(537420435)
2021-03-11 10:47:17,384 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:47:17,384 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:47:17,506 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:17,508 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:47:17,508 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(967419010)?.dec()
2021-03-11 10:47:17,508 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:47:17,508 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:47:17,629 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:17,632 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.ushr(-1314924341)
2021-03-11 10:47:17,632 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:47:17,632 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:47:17,754 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:17,757 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.rem(103)
2021-03-11 10:47:17,757 [main:63] - replacement of 0 of type Int is (arrayOfNulls<Int>(5)).get(-1273662826)?.unaryMinus()
2021-03-11 10:47:17,867 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 10:47:17,868 [main:66] - Compilation checking started
2021-03-11 10:47:18,207 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = (arrayOfNulls<Int>(5)).get(-1273662826)?.unaryMinus()

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + (sum).toByte().countTrailingZeroBits()
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..4) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = k > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:18,218 [main:56] - replacing (sum, Int)
2021-03-11 10:47:18,221 [main:38] - replacing sum Int
2021-03-11 10:47:18,221 [main:42] - Getting value of type Int
2021-03-11 10:47:18,362 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:18,365 [main:46] - GENERATED VALUE OF TYPE Int = 921217308
2021-03-11 10:47:18,365 [main:49] - GENERATED IS CALL =false
2021-03-11 10:47:19,349 [main:55] - randomType = Triple<HashMap<Char, UByte>, Byte?, UByte>?
2021-03-11 10:47:19,465 [main:302] - generating value of type = Triple<HashMap<Char, UByte>, Byte?, UByte> false depth = 0
2021-03-11 10:47:19,585 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: HashMap<Char, UByte>, second: Byte?, third: UByte): Triple<HashMap<Char, UByte>, Byte?, UByte> = TODO()
2021-03-11 10:47:19,589 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: HashMap<Char, UByte>, second: Byte?, third: UByte): Triple<HashMap<Char, UByte>, Byte?, UByte> = TODO()
2021-03-11 10:47:19,714 [main:302] - generating value of type = HashMap<Char, UByte> false depth = 3
2021-03-11 10:47:19,874 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): HashMap<Char, UByte> = TODO()
2021-03-11 10:47:19,877 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): HashMap<Char, UByte> = TODO()
2021-03-11 10:47:20,024 [main:95] - GENERATED = hashMapOf<Char, UByte>()
2021-03-11 10:47:20,025 [main:302] - generating value of type = UByte true depth = 3
2021-03-11 10:47:20,029 [main:95] - GENERATED = Triple<HashMap<Char, UByte>, Byte?, UByte>(hashMapOf<Char, UByte>(), null, 6.toUByte())
2021-03-11 10:47:20,064 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Triple[DeserializedSimpleFunctionDescriptor@70303c03]
2021-03-11 10:47:20,189 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:47:20,189 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:47:20,323 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:47:20,325 [main:66] - Generated call from random type = (Triple<HashMap<Char, UByte>, Byte?, UByte>(hashMapOf<Char, UByte>(), null, 6.toUByte()))?.equals("ijjrs").compareTo(true)
2021-03-11 10:47:20,326 [main:94] - GETTING Int from MyIterator
2021-03-11 10:47:20,336 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:47:20,336 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:47:20,337 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:47:20,454 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:20,456 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.and(-1902370393)
2021-03-11 10:47:20,456 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:47:20,456 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:47:20,457 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.unaryMinus()
2021-03-11 10:47:20,457 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:47:20,457 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:47:20,457 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:47:20,568 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:20,570 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.shl(1574104485)
2021-03-11 10:47:20,571 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:47:20,571 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:47:20,571 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:47:20,684 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:47:20,686 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext().compareTo(true)
2021-03-11 10:47:20,686 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:47:20,686 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:47:20,800 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:20,802 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.times(-11)
2021-03-11 10:47:20,802 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:47:20,802 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.absoluteValue
2021-03-11 10:47:20,802 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:47:20,802 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:47:20,803 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.toInt()
2021-03-11 10:47:20,803 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:47:20,803 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:47:20,803 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.countTrailingZeroBits()
2021-03-11 10:47:20,803 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:47:20,803 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:47:20,918 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:20,920 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.shl(103010829)
2021-03-11 10:47:20,921 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:47:20,921 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:47:20,921 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:47:20,921 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.inc()
2021-03-11 10:47:20,921 [main:63] - replacement of sum of type Int is (MyCollection3().iterator()).next()?.shl(1574104485)
2021-03-11 10:47:21,043 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 10:47:21,043 [main:66] - Compilation checking started
2021-03-11 10:47:21,365 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + (sum).toByte().countTrailingZeroBits()
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (MyCollection3().iterator()).next()?.shl(1574104485) + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..4) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = k > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:21,376 [main:56] - replacing (4, Int)
2021-03-11 10:47:21,379 [main:38] - replacing 4 Int
2021-03-11 10:47:21,379 [main:42] - Getting value of type Int
2021-03-11 10:47:21,504 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:21,506 [main:46] - GENERATED VALUE OF TYPE Int = -1570764490
2021-03-11 10:47:21,506 [main:49] - GENERATED IS CALL =false
2021-03-11 10:47:21,755 [main:55] - randomType = Double?
2021-03-11 10:47:21,873 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:47:21,918 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Double defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@79de7116]
2021-03-11 10:47:21,918 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4d6e37cb]
2021-03-11 10:47:22,031 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:22,033 [main:66] - Generated call from random type = (0.05265256756512615)?.dec().compareTo(18)
2021-03-11 10:47:22,034 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:47:22,042 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:47:22,043 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:47:22,043 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:47:22,156 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:22,269 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:22,272 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().coerceIn(-1392854591, 494208076)
2021-03-11 10:47:22,272 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:47:22,272 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:47:22,272 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:47:22,386 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:22,388 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().xor(-1799263236)
2021-03-11 10:47:22,388 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:47:22,388 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:47:22,388 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:47:22,388 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().countLeadingZeroBits()
2021-03-11 10:47:22,388 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]]
2021-03-11 10:47:22,388 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:47:22,389 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next()
2021-03-11 10:47:22,389 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:47:22,389 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:47:22,389 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:47:22,505 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:22,507 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().shr(1641312984)
2021-03-11 10:47:22,507 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:47:22,507 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:47:22,508 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:47:22,654 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:22,657 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().compareTo(26)
2021-03-11 10:47:22,657 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:47:22,657 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:47:22,657 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:47:22,770 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:22,773 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().plus(13)
2021-03-11 10:47:22,773 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:47:22,773 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:47:22,773 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:47:22,773 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().takeHighestOneBit()
2021-03-11 10:47:22,773 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:47:22,773 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:47:22,773 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:47:22,890 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:22,892 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().rem(-102)
2021-03-11 10:47:22,893 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:47:22,893 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09]
2021-03-11 10:47:23,005 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:47:23,005 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:47:23,121 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:47:23,123 [main:105] - GENERATED CALL = (MyCollection2().iterator()).equals("ijowj").compareTo(false)
2021-03-11 10:47:23,123 [main:63] - replacement of 4 of type Int is -1570764490
2021-03-11 10:47:23,237 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-11 10:47:23,238 [main:66] - Compilation checking started
2021-03-11 10:47:23,696 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + (sum).toByte().countTrailingZeroBits()
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return "c4 failed"

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = k > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:23,703 [main:56] - replacing ("c4 failed", String)
2021-03-11 10:47:23,704 [main:38] - replacing "c4 failed" String
2021-03-11 10:47:23,704 [main:42] - Getting value of type String
2021-03-11 10:47:23,817 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:47:23,819 [main:46] - GENERATED VALUE OF TYPE String = "lhtco"
2021-03-11 10:47:23,819 [main:49] - GENERATED IS CALL =false
2021-03-11 10:47:23,830 [main:55] - randomType = MyCollection4
2021-03-11 10:47:23,946 [main:302] - generating value of type = MyCollection4 false depth = 0
2021-03-11 10:47:23,948 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:24,065 [main:194] - Type params = []
2021-03-11 10:47:24,186 [main:94] - GETTING String from MyIterator
2021-03-11 10:47:24,190 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]]
2021-03-11 10:47:24,190 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]
2021-03-11 10:47:24,314 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:24,316 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.toString(-518875094)
2021-03-11 10:47:24,316 [main:63] - replacement of "c4 failed" of type String is (MyCollection4().iterator()).k.toString(-518875094)
2021-03-11 10:47:24,432 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:47:24,432 [main:66] - Compilation checking started
2021-03-11 10:47:24,887 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + (sum).toByte().countTrailingZeroBits()
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = k > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:24,896 [main:56] - replacing (k--, Int)
2021-03-11 10:47:24,897 [main:38] - replacing k-- Int
2021-03-11 10:47:24,897 [main:42] - Getting value of type Int
2021-03-11 10:47:25,031 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:25,033 [main:46] - GENERATED VALUE OF TYPE Int = -925659697
2021-03-11 10:47:25,033 [main:49] - GENERATED IS CALL =false
2021-03-11 10:47:25,427 [main:55] - randomType = Sequence<Double>
2021-03-11 10:47:25,428 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:47:25,433 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:47:25,433 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:25,434 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:47:25,583 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:25,585 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().shr(512462781)
2021-03-11 10:47:25,585 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:47:25,585 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:25,585 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:47:25,700 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:25,702 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().coerceAtMost(-2147380856)
2021-03-11 10:47:25,702 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:47:25,702 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:25,703 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:47:25,826 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:25,829 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().xor(-645059935)
2021-03-11 10:47:25,829 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:47:25,829 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:25,829 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:47:25,829 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().unaryMinus()
2021-03-11 10:47:25,829 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:47:25,829 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:25,829 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().absoluteValue
2021-03-11 10:47:25,829 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:47:25,829 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:25,829 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:47:25,830 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().countLeadingZeroBits()
2021-03-11 10:47:25,830 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:47:25,830 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:25,830 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:47:25,830 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().inv()
2021-03-11 10:47:25,830 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:47:25,830 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:25,830 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:47:25,957 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:25,959 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().shl(1999717562)
2021-03-11 10:47:25,959 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:47:25,959 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:25,959 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:47:26,074 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:26,076 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().compareTo(75)
2021-03-11 10:47:26,076 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:47:26,076 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:26,076 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:47:26,188 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:26,190 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().rotateLeft(2048748474)
2021-03-11 10:47:26,190 [main:63] - replacement of k-- of type Int is (MyCollection1().iterator()).next().absoluteValue
2021-03-11 10:47:26,307 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:47:26,308 [main:66] - Compilation checking started
2021-03-11 10:47:26,638 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + (sum).toByte().countTrailingZeroBits()
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = k > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = (MyCollection1().iterator()).next().absoluteValue
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:26,650 [main:56] - replacing (MyIterator(), MyIterator)
2021-03-11 10:47:26,650 [main:38] - replacing MyIterator() MyIterator
2021-03-11 10:47:26,650 [main:42] - Getting value of type MyIterator
2021-03-11 10:47:26,778 [main:302] - generating value of type = MyIterator false depth = 0
2021-03-11 10:47:26,780 [main:112] - generating klass MyIterator text = class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = k > (MyCollection4().iterator()).k.ushr(1661081614)
    }
2021-03-11 10:47:26,780 [main:46] - GENERATED VALUE OF TYPE MyIterator = 
2021-03-11 10:47:26,928 [main:55] - randomType = MutableMap<Byte, MyCollection2>
2021-03-11 10:47:26,929 [main:94] - GETTING MyIterator from Int
2021-03-11 10:47:26,972 [main:94] - GETTING MyIterator from MyIterator
2021-03-11 10:47:26,979 [main:63] - replacement of MyIterator() of type MyIterator is MyCollection4().iterator()
2021-03-11 10:47:27,097 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:47:27,097 [main:66] - Compilation checking started
2021-03-11 10:47:27,417 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = sum + (sum).toByte().countTrailingZeroBits()
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = k > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyCollection4().iterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:27,424 [main:56] - replacing (sum + (sum).toByte().countTrailingZeroBits(), Int)
2021-03-11 10:47:27,425 [main:38] - replacing sum + (sum).toByte().countTrailingZeroBits() Int
2021-03-11 10:47:27,425 [main:42] - Getting value of type Int
2021-03-11 10:47:27,540 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:27,542 [main:46] - GENERATED VALUE OF TYPE Int = 1894937776
2021-03-11 10:47:27,542 [main:49] - GENERATED IS CALL =false
2021-03-11 10:47:27,547 [main:55] - randomType = Byte
2021-03-11 10:47:27,662 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:27,701 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6b8bfcfc]
2021-03-11 10:47:27,814 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:27,816 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:47:27,933 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:27,937 [main:66] - Generated call from random type = (5).compareTo(42).shl(1990854500)
2021-03-11 10:47:27,937 [main:94] - GETTING Int from Int
2021-03-11 10:47:27,978 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:47:27,978 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:47:27,978 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:47:28,090 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:28,093 [main:105] - GENERATED CALL = (sum).toInt().compareTo(-43)
2021-03-11 10:47:28,093 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4d6e37cb]]
2021-03-11 10:47:28,093 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431]
2021-03-11 10:47:28,205 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:47:28,207 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4d6e37cb]
2021-03-11 10:47:28,321 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:28,323 [main:105] - GENERATED CALL = (sum).div(0.8910131188855883).compareTo(112)
2021-03-11 10:47:28,324 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:47:28,324 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:47:28,461 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:28,463 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:47:28,463 [main:105] - GENERATED CALL = (sum).compareTo(603218209).inc()
2021-03-11 10:47:28,463 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:47:28,463 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:47:28,463 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:47:28,463 [main:105] - GENERATED CALL = (sum).toInt().countLeadingZeroBits()
2021-03-11 10:47:28,463 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1547992c]]
2021-03-11 10:47:28,463 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:47:28,464 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1547992c]
2021-03-11 10:47:28,574 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:47:28,577 [main:105] - GENERATED CALL = (sum).toChar().minus('꾑')
2021-03-11 10:47:28,577 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:47:28,577 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:47:28,577 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:47:28,691 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:28,694 [main:105] - GENERATED CALL = (sum).toInt().coerceAtMost(669460020)
2021-03-11 10:47:28,694 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:47:28,694 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:47:28,810 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:28,812 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:47:28,926 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:28,928 [main:105] - GENERATED CALL = (sum).compareTo(700171908).and(676702783)
2021-03-11 10:47:28,928 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:47:28,928 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:47:29,041 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:29,043 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:47:29,044 [main:105] - GENERATED CALL = (sum).compareTo(1220541802).countTrailingZeroBits()
2021-03-11 10:47:29,044 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:47:29,044 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:47:29,044 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:47:29,044 [main:105] - GENERATED CALL = (sum).toInt().toInt()
2021-03-11 10:47:29,044 [main:101] - Case = [@kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:47:29,044 [main:105] - GENERATED CALL = (sum).sign
2021-03-11 10:47:29,044 [main:63] - replacement of sum + (sum).toByte().countTrailingZeroBits() of type Int is (sum).toInt().coerceAtMost(669460020)
2021-03-11 10:47:29,159 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:47:29,160 [main:66] - Compilation checking started
2021-03-11 10:47:29,599 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = k > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:29,607 [main:56] - replacing (k, Int)
2021-03-11 10:47:29,607 [main:38] - replacing k Int
2021-03-11 10:47:29,607 [main:42] - Getting value of type Int
2021-03-11 10:47:29,727 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:29,729 [main:46] - GENERATED VALUE OF TYPE Int = 657077439
2021-03-11 10:47:29,729 [main:49] - GENERATED IS CALL =false
2021-03-11 10:47:29,992 [main:55] - randomType = HashSet<String?>
2021-03-11 10:47:30,107 [main:302] - generating value of type = HashSet<String?> false depth = 0
2021-03-11 10:47:30,226 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: String?): HashSet<Strg?> = TODO()
2021-03-11 10:47:30,229 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: String?): HashSet<Strg?> = TODO()
2021-03-11 10:47:30,349 [main:302] - generating value of type = String true depth = 3
2021-03-11 10:47:30,351 [main:95] - GENERATED = linkedSetOf<String?>("okmtn")
2021-03-11 10:47:30,467 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@32865239]
2021-03-11 10:47:30,468 [main:66] - Generated call from random type = (linkedSetOf<String?>("okmtn")).count()
2021-03-11 10:47:30,469 [main:94] - GETTING Int from MyIterator
2021-03-11 10:47:30,474 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:47:30,474 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:47:30,475 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.inc()
2021-03-11 10:47:30,475 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:47:30,475 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:47:30,475 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.unaryMinus()
2021-03-11 10:47:30,475 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:47:30,475 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:47:30,589 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:30,591 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.or(834913545)
2021-03-11 10:47:30,591 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:47:30,591 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:47:30,591 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.countTrailingZeroBits()
2021-03-11 10:47:30,591 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:47:30,592 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:47:30,707 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:30,709 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.minus(-9)
2021-03-11 10:47:30,709 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:47:30,709 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:47:30,822 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:30,825 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.rotateRight(1867422532)
2021-03-11 10:47:30,825 [main:101] - Case = [public final operator fun next(): kotlin.Int defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@8257a56]]
2021-03-11 10:47:30,825 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@8257a56]
2021-03-11 10:47:30,825 [main:105] - GENERATED CALL = (MyCollection4().iterator()).next()
2021-03-11 10:47:30,825 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:47:30,825 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.absoluteValue
2021-03-11 10:47:30,825 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:47:30,825 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:47:30,825 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.countLeadingZeroBits()
2021-03-11 10:47:30,825 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:47:30,826 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:47:30,826 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.countOneBits()
2021-03-11 10:47:30,826 [main:63] - replacement of k of type Int is (MyCollection4().iterator()).k.or(834913545)
2021-03-11 10:47:30,937 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:47:30,938 [main:66] - Compilation checking started
2021-03-11 10:47:31,422 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:31,430 [main:56] - replacing (sum, Int)
2021-03-11 10:47:31,431 [main:38] - replacing sum Int
2021-03-11 10:47:31,431 [main:42] - Getting value of type Int
2021-03-11 10:47:31,544 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:31,547 [main:46] - GENERATED VALUE OF TYPE Int = 1758548630
2021-03-11 10:47:31,547 [main:49] - GENERATED IS CALL =false
2021-03-11 10:47:31,949 [main:55] - randomType = HashMap<MyCollection4, UByte?>
2021-03-11 10:47:32,069 [main:302] - generating value of type = HashMap<MyCollection4, UByte?> false depth = 0
2021-03-11 10:47:32,189 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<MyCollection4, UByte?> = TODO()
2021-03-11 10:47:32,192 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<MyCollection4, UByte?> = TODO()
2021-03-11 10:47:32,312 [main:95] - GENERATED = linkedMapOf<MyCollection4, UByte?>()
2021-03-11 10:47:32,419 [main:66] - Generated call from random type = (linkedMapOf<MyCollection4, UByte?>()).size.absoluteValue
2021-03-11 10:47:32,420 [main:94] - GETTING Int from Array<Int?>
2021-03-11 10:47:32,435 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:47:32,435 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:47:32,552 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:32,554 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:47:32,667 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:32,669 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-1394491457)?.xor(-412655086)
2021-03-11 10:47:32,669 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.sumOf(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@43a4f469]]
2021-03-11 10:47:32,669 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.sumOf(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@43a4f469]
2021-03-11 10:47:32,787 [main:302] - generating value of type = Function1<T, Int> false depth = 0
2021-03-11 10:47:32,789 [main:302] - generating value of type = Int true depth = 1
2021-03-11 10:47:32,791 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).sumOf({a: T -> 2037700125})
2021-03-11 10:47:32,791 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:47:32,791 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:47:32,905 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:32,907 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.or(1642253550)
2021-03-11 10:47:32,907 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:47:32,907 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:47:33,020 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:33,023 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.div(95)
2021-03-11 10:47:33,023 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:47:33,023 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:47:33,135 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:33,137 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.coerceAtMost(-1203867917)
2021-03-11 10:47:33,137 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:47:33,138 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:47:33,251 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:33,253 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:47:33,254 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(516618285)?.toInt()
2021-03-11 10:47:33,254 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@17f8ae0]]
2021-03-11 10:47:33,254 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@17f8ae0]
2021-03-11 10:47:33,254 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).count()
2021-03-11 10:47:33,254 [main:101] - Case = [public inline fun <T> kotlin.Array<out T>.indexOfFirst(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@79423ae4]]
2021-03-11 10:47:33,254 [main:137] - GENERATING call of type public inline fun <T> kotlin.Array<out T>.indexOfFirst(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@79423ae4]
2021-03-11 10:47:33,367 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 10:47:33,369 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:47:33,371 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).indexOfFirst({a: T -> true})
2021-03-11 10:47:33,372 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:47:33,372 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:47:33,486 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:33,488 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:47:33,602 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:33,604 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(1960301758)?.div(57)
2021-03-11 10:47:33,605 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:47:33,605 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:47:33,716 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:33,718 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:47:33,719 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-2080503131)?.unaryMinus()
2021-03-11 10:47:33,719 [main:63] - replacement of sum of type Int is (arrayOfNulls<Int>(5)).indexOfFirst({a: T -> true})
2021-03-11 10:47:33,835 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:47:33,835 [main:66] - Compilation checking started
2021-03-11 10:47:34,230 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if(sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587)) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println((arrayOfNulls<Int>(5)).indexOfFirst({a: T -> true}))
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:34,237 [main:56] - replacing (sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587), Boolean)
2021-03-11 10:47:34,239 [main:38] - replacing sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587) Boolean
2021-03-11 10:47:34,239 [main:42] - Getting value of type Boolean
2021-03-11 10:47:34,355 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:47:34,357 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:47:34,357 [main:49] - GENERATED IS CALL =false
2021-03-11 10:47:34,366 [main:55] - randomType = MyCollection4
2021-03-11 10:47:34,480 [main:302] - generating value of type = MyCollection4 false depth = 0
2021-03-11 10:47:34,482 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:34,596 [main:194] - Type params = []
2021-03-11 10:47:34,716 [main:137] - GENERATING call of type public final operator fun iterator(): MyCollection4.MyIterator defined in MyCollection4[SimpleFunctionDescriptorImpl@2061bbb6]
2021-03-11 10:47:34,716 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@6a84f5b1]
2021-03-11 10:47:34,716 [main:66] - Generated call from random type = (MyCollection4()).iterator().hasNext()
2021-03-11 10:47:34,717 [main:94] - GETTING Boolean from MyIterator
2021-03-11 10:47:34,723 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6d9d9a5]]
2021-03-11 10:47:34,723 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:47:34,723 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6d9d9a5]
2021-03-11 10:47:34,835 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:47:34,837 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext().and(true)
2021-03-11 10:47:34,837 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]]
2021-03-11 10:47:34,838 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:47:34,838 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext()
2021-03-11 10:47:34,838 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]]
2021-03-11 10:47:34,838 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]
2021-03-11 10:47:34,951 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:47:34,951 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.equals("rchjc")
2021-03-11 10:47:34,952 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@35500bca]]
2021-03-11 10:47:34,952 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:47:34,952 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@35500bca]
2021-03-11 10:47:35,066 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:47:35,066 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext().equals("lvkha")
2021-03-11 10:47:35,066 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fb50dd8]]
2021-03-11 10:47:35,066 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:47:35,066 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fb50dd8]
2021-03-11 10:47:35,179 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:47:35,182 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext().xor(false)
2021-03-11 10:47:35,182 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]]
2021-03-11 10:47:35,182 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:47:35,182 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]
2021-03-11 10:47:35,295 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:47:35,295 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.equals("fkvoe")
2021-03-11 10:47:35,295 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyCollection3.MyIterator[DeserializedSimpleFunctionDescriptor@3d80332c]]
2021-03-11 10:47:35,295 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyCollection3.MyIterator[DeserializedSimpleFunctionDescriptor@3d80332c]
2021-03-11 10:47:35,411 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:47:35,411 [main:105] - GENERATED CALL = (MyCollection3().iterator()).equals("cdyhm")
2021-03-11 10:47:35,411 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@cf10153]]
2021-03-11 10:47:35,412 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:47:35,412 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@cf10153]
2021-03-11 10:47:35,412 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext().not()
2021-03-11 10:47:35,412 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@11eceb90]]
2021-03-11 10:47:35,412 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:47:35,412 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@11eceb90]
2021-03-11 10:47:35,526 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:47:35,528 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext().or(true)
2021-03-11 10:47:35,529 [main:63] - replacement of sum != (MyCollection1().iterator()).next().coerceIn(67201120, 1641224587) of type Boolean is (MyCollection3().iterator()).k.equals("rchjc")
2021-03-11 10:47:35,645 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:47:35,646 [main:66] - Compilation checking started
2021-03-11 10:47:36,112 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:36,119 [main:56] - replacing (i, Int)
2021-03-11 10:47:36,121 [main:38] - replacing i Int
2021-03-11 10:47:36,121 [main:42] - Getting value of type Int
2021-03-11 10:47:36,239 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:36,241 [main:46] - GENERATED VALUE OF TYPE Int = 1746972408
2021-03-11 10:47:36,242 [main:49] - GENERATED IS CALL =false
2021-03-11 10:47:36,797 [main:55] - randomType = MutableMap<Map<MyCollection2, String>, Sequence<MyCollection3?>>
2021-03-11 10:47:36,797 [main:94] - GETTING Int from Int
2021-03-11 10:47:36,848 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1632fabd]]
2021-03-11 10:47:36,848 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:47:36,848 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1632fabd]
2021-03-11 10:47:36,849 [main:105] - GENERATED CALL = (i).toShort().countOneBits()
2021-03-11 10:47:36,849 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5775f993]]
2021-03-11 10:47:36,849 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:47:36,849 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5775f993]
2021-03-11 10:47:36,994 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:47:36,996 [main:105] - GENERATED CALL = (i).toChar().compareTo('ԏ')
2021-03-11 10:47:36,997 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@140b0a8d]]
2021-03-11 10:47:36,997 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97]
2021-03-11 10:47:36,997 [main:105] - GENERATED CALL = (i).toLong().sign
2021-03-11 10:47:36,997 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12f06cb], @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@5959e353]]
2021-03-11 10:47:36,997 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12f06cb]
2021-03-11 10:47:36,997 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@5959e353]
2021-03-11 10:47:36,997 [main:105] - GENERATED CALL = (i).toDouble().roundToInt()
2021-03-11 10:47:36,997 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6abd8a99]]
2021-03-11 10:47:36,997 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:47:36,997 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6abd8a99]
2021-03-11 10:47:37,113 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:37,115 [main:105] - GENERATED CALL = (i).toShort().plus(-121)
2021-03-11 10:47:37,115 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@11d995f6]]
2021-03-11 10:47:37,115 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:47:37,115 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@11d995f6]
2021-03-11 10:47:37,116 [main:105] - GENERATED CALL = (i).toFloat().toBits()
2021-03-11 10:47:37,116 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:47:37,116 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:47:37,116 [main:105] - GENERATED CALL = (i).countOneBits()
2021-03-11 10:47:37,116 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:47:37,116 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:47:37,116 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:47:37,230 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:37,232 [main:105] - GENERATED CALL = (i).toInt().rotateLeft(-964745600)
2021-03-11 10:47:37,232 [main:101] - Case = [public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:47:37,232 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:47:37,351 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:37,354 [main:105] - GENERATED CALL = (i).times(-53)
2021-03-11 10:47:37,354 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:47:37,354 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:47:37,471 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:37,474 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:47:37,590 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:37,593 [main:105] - GENERATED CALL = (i).compareTo(-293421343).or(1593244166)
2021-03-11 10:47:37,593 [main:63] - replacement of i of type Int is (i).toInt().rotateLeft(-964745600)
2021-03-11 10:47:37,705 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:47:37,705 [main:66] - Compilation checking started
2021-03-11 10:47:38,016 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = (i).toInt().rotateLeft(-964745600)++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:38,024 [main:56] - replacing (sum, Int)
2021-03-11 10:47:38,025 [main:38] - replacing sum Int
2021-03-11 10:47:38,025 [main:42] - Getting value of type Int
2021-03-11 10:47:38,140 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:38,142 [main:46] - GENERATED VALUE OF TYPE Int = -893344150
2021-03-11 10:47:38,142 [main:49] - GENERATED IS CALL =false
2021-03-11 10:47:38,276 [main:55] - randomType = String?
2021-03-11 10:47:38,386 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:47:38,410 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1ecdaf03]
2021-03-11 10:47:38,522 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:47:38,524 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:47:38,524 [main:66] - Generated call from random type = ("euzwv")?.compareTo("ugutb").takeHighestOneBit()
2021-03-11 10:47:38,525 [main:94] - GETTING Int from MyIterator
2021-03-11 10:47:38,534 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:47:38,534 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:47:38,534 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:47:38,535 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.inv()
2021-03-11 10:47:38,535 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]]
2021-03-11 10:47:38,535 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:47:38,535 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()
2021-03-11 10:47:38,535 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:47:38,535 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:47:38,535 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:47:38,647 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:38,649 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.or(-871556717)
2021-03-11 10:47:38,649 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:47:38,650 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:47:38,650 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:47:38,765 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:38,767 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.compareTo(72)
2021-03-11 10:47:38,767 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf]]
2021-03-11 10:47:38,767 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k
2021-03-11 10:47:38,768 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:47:38,768 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:47:38,883 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:39,000 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:39,002 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.coerceIn(1248065251, 1642097861)
2021-03-11 10:47:39,002 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:47:39,002 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:47:39,002 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:47:39,120 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:39,123 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.minus(-69)
2021-03-11 10:47:39,123 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:47:39,123 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:47:39,238 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:39,241 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.or(-1000977070)
2021-03-11 10:47:39,241 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:47:39,241 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:47:39,241 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:47:39,241 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.toInt()
2021-03-11 10:47:39,241 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:47:39,241 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:47:39,241 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:47:39,355 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:39,358 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.plus(-36)
2021-03-11 10:47:39,358 [main:63] - replacement of sum of type Int is (MyCollection3().iterator()).next()?.minus(-69)
2021-03-11 10:47:39,474 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 10:47:39,474 [main:66] - Compilation checking started
2021-03-11 10:47:39,819 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = (MyCollection3().iterator()).next()?.minus(-69) + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:39,828 [main:56] - replacing (0, Int)
2021-03-11 10:47:39,830 [main:38] - replacing 0 Int
2021-03-11 10:47:39,830 [main:42] - Getting value of type Int
2021-03-11 10:47:39,939 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:39,941 [main:46] - GENERATED VALUE OF TYPE Int = 311163828
2021-03-11 10:47:39,942 [main:49] - GENERATED IS CALL =false
2021-03-11 10:47:40,344 [main:55] - randomType = Collection<Sequence<MyCollection2>>?
2021-03-11 10:47:40,345 [main:94] - GETTING Int from MyIterator
2021-03-11 10:47:40,351 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:47:40,351 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:47:40,352 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:47:40,464 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:40,466 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.xor(-139384201)
2021-03-11 10:47:40,466 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:47:40,466 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:47:40,466 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:47:40,579 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:40,582 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.minus(-44)
2021-03-11 10:47:40,582 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]]
2021-03-11 10:47:40,582 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:47:40,582 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()
2021-03-11 10:47:40,582 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:47:40,582 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.absoluteValue
2021-03-11 10:47:40,582 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:47:40,582 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:47:40,582 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.dec()
2021-03-11 10:47:40,582 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:47:40,582 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:47:40,582 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.countTrailingZeroBits()
2021-03-11 10:47:40,582 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:47:40,582 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:47:40,695 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:40,697 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.coerceAtMost(11143518)
2021-03-11 10:47:40,697 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:47:40,697 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:47:40,698 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.toInt()
2021-03-11 10:47:40,698 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:47:40,698 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:47:40,698 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:47:40,809 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:40,811 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.div(58)
2021-03-11 10:47:40,811 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:47:40,811 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:47:40,811 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:47:40,811 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.unaryMinus()
2021-03-11 10:47:40,812 [main:63] - replacement of 0 of type Int is (MyCollection3().iterator()).next()
2021-03-11 10:47:40,923 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:47:40,923 [main:66] - Compilation checking started
2021-03-11 10:47:41,223 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection3().iterator()).next()
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:41,231 [main:56] - replacing (5, Int)
2021-03-11 10:47:41,232 [main:38] - replacing 5 Int
2021-03-11 10:47:41,232 [main:42] - Getting value of type Int
2021-03-11 10:47:41,348 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:41,350 [main:46] - GENERATED VALUE OF TYPE Int = -95342175
2021-03-11 10:47:41,350 [main:49] - GENERATED IS CALL =false
2021-03-11 10:47:41,482 [main:55] - randomType = Set<Char>
2021-03-11 10:47:41,482 [main:94] - GETTING Int from Int
2021-03-11 10:47:41,521 [main:101] - Case = [public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:47:41,521 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:47:41,638 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:41,641 [main:105] - GENERATED CALL = (el ?: 0).or(275355422)
2021-03-11 10:47:41,641 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12f06cb], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4d6e37cb]]
2021-03-11 10:47:41,641 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12f06cb]
2021-03-11 10:47:41,641 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4d6e37cb]
2021-03-11 10:47:41,754 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:41,757 [main:105] - GENERATED CALL = (el ?: 0).toDouble().compareTo(69)
2021-03-11 10:47:41,757 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@140b0a8d]]
2021-03-11 10:47:41,757 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f]
2021-03-11 10:47:41,868 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:47:41,871 [main:105] - GENERATED CALL = (el ?: 0).div(3990614059838712398).sign
2021-03-11 10:47:41,871 [main:101] - Case = [public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:47:41,871 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:47:41,982 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:41,984 [main:105] - GENERATED CALL = (el ?: 0).ushr(-1563610825)
2021-03-11 10:47:41,984 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3af86106]]
2021-03-11 10:47:41,984 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:47:41,984 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3af86106]
2021-03-11 10:47:42,100 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:42,103 [main:105] - GENERATED CALL = (el ?: 0).toByte().minus(-1)
2021-03-11 10:47:42,103 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@13c687d3]]
2021-03-11 10:47:42,103 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:47:42,103 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@13c687d3]
2021-03-11 10:47:42,217 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:42,219 [main:105] - GENERATED CALL = (el ?: 0).toFloat().compareTo(-26)
2021-03-11 10:47:42,219 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:47:42,219 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:47:42,332 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:42,334 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:47:42,444 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:42,446 [main:105] - GENERATED CALL = (el ?: 0).compareTo(-2079806019).plus(-51)
2021-03-11 10:47:42,446 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1547992c]]
2021-03-11 10:47:42,446 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:47:42,446 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1547992c]
2021-03-11 10:47:42,601 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:47:42,603 [main:105] - GENERATED CALL = (el ?: 0).toChar().minus('')
2021-03-11 10:47:42,604 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6cf21a44]]
2021-03-11 10:47:42,604 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:47:42,604 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6cf21a44]
2021-03-11 10:47:42,725 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:42,728 [main:105] - GENERATED CALL = (el ?: 0).toByte().plus(99)
2021-03-11 10:47:42,728 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:47:42,728 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:47:42,728 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:47:42,845 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:42,848 [main:105] - GENERATED CALL = (el ?: 0).toInt().plus(-87)
2021-03-11 10:47:42,848 [main:63] - replacement of 5 of type Int is (el ?: 0).toByte().minus(-1)
2021-03-11 10:47:42,962 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:47:42,962 [main:66] - Compilation checking started
2021-03-11 10:47:43,307 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = sum + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (el ?: 0).toByte().minus(-1)) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:43,314 [main:56] - replacing (sum, Int)
2021-03-11 10:47:43,316 [main:38] - replacing sum Int
2021-03-11 10:47:43,316 [main:42] - Getting value of type Int
2021-03-11 10:47:43,431 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:43,433 [main:46] - GENERATED VALUE OF TYPE Int = -515999542
2021-03-11 10:47:43,433 [main:49] - GENERATED IS CALL =false
2021-03-11 10:47:43,563 [main:55] - randomType = Double
2021-03-11 10:47:43,683 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:47:43,719 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:47:43,719 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:47:43,832 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:43,834 [main:66] - Generated call from random type = (0.49405395570277866).toInt().plus(83)
2021-03-11 10:47:43,834 [main:63] - replacement of sum of type Int is (0.49405395570277866).toInt().plus(83)
2021-03-11 10:47:43,951 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:47:43,952 [main:66] - Compilation checking started
2021-03-11 10:47:44,407 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if(sum != 15) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:44,414 [main:56] - replacing (sum != 15, Boolean)
2021-03-11 10:47:44,416 [main:38] - replacing sum != 15 Boolean
2021-03-11 10:47:44,416 [main:42] - Getting value of type Boolean
2021-03-11 10:47:44,530 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:47:44,533 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:47:44,533 [main:49] - GENERATED IS CALL =false
2021-03-11 10:47:44,802 [main:55] - randomType = ArrayDeque<Byte?>
2021-03-11 10:47:44,916 [main:302] - generating value of type = ArrayDeque<Byte?> false depth = 0
2021-03-11 10:47:45,040 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Byte?>): ArrayDeque<Byte?> = TODO()
2021-03-11 10:47:45,043 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Byte?>): ArrayDeque<Byte?> = TODO()
2021-03-11 10:47:45,299 [main:302] - generating value of type = Collection<Byte?> false depth = 3
2021-03-11 10:47:45,417 [main:43] - GENERATING CALL OF fun <T> emptyList(): Collection<Byte?> = TODO()
2021-03-11 10:47:45,421 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyList(): Collection<Byte?> = TODO()
2021-03-11 10:47:45,539 [main:95] - GENERATED = emptyList<Byte?>()
2021-03-11 10:47:45,540 [main:95] - GENERATED = ArrayDeque<Byte?>(emptyList<Byte?>())
2021-03-11 10:47:45,744 [main:137] - GENERATING call of type public open fun remove(element: kotlin.Byte?): kotlin.Boolean defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@5b80c3c6]
2021-03-11 10:47:45,860 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:45,863 [main:66] - Generated call from random type = (ArrayDeque<Byte?>(emptyList<Byte?>())).remove(-16)
2021-03-11 10:47:45,864 [main:94] - GETTING Boolean from Array<Int?>
2021-03-11 10:47:45,881 [main:101] - Case = [public final operator fun set(index: kotlin.Int, value: kotlin.Int?): kotlin.Unit defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@6a086111], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@9c9dc88]]
2021-03-11 10:47:45,881 [main:137] - GENERATING call of type public final operator fun set(index: kotlin.Int, value: kotlin.Int?): kotlin.Unit defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@6a086111]
2021-03-11 10:47:45,995 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:46,115 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:46,117 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@9c9dc88]
2021-03-11 10:47:46,234 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:47:46,234 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).set(136386442, -50240250).equals("mhlao")
2021-03-11 10:47:46,235 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2760da68], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@35500bca]]
2021-03-11 10:47:46,235 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2760da68]
2021-03-11 10:47:46,348 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:47:46,348 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@35500bca]
2021-03-11 10:47:46,462 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:47:46,463 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).equals("kdvgr").equals("wiaem")
2021-03-11 10:47:46,463 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2760da68], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@cf10153]]
2021-03-11 10:47:46,463 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2760da68]
2021-03-11 10:47:46,576 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:47:46,576 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@cf10153]
2021-03-11 10:47:46,576 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).equals("lzzva").not()
2021-03-11 10:47:46,576 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]]
2021-03-11 10:47:46,576 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:47:46,692 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:46,694 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]
2021-03-11 10:47:46,807 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:47:46,807 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-611822114)?.equals("bncar")
2021-03-11 10:47:46,807 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Array<*>?.isNullOrEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7e053fc4]]
2021-03-11 10:47:46,807 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Array<*>?.isNullOrEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7e053fc4]
2021-03-11 10:47:46,808 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).isNullOrEmpty()
2021-03-11 10:47:46,808 [main:101] - Case = [public inline fun <T> kotlin.Array<out T>.all(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1e83bf2c]]
2021-03-11 10:47:46,808 [main:137] - GENERATING call of type public inline fun <T> kotlin.Array<out T>.all(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1e83bf2c]
2021-03-11 10:47:46,925 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 10:47:46,927 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:47:46,929 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).all({a: T -> true})
2021-03-11 10:47:46,929 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2760da68], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@11eceb90]]
2021-03-11 10:47:46,929 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2760da68]
2021-03-11 10:47:47,056 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:47:47,056 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@11eceb90]
2021-03-11 10:47:47,175 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:47:47,177 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).equals("smepj").or(false)
2021-03-11 10:47:47,178 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2760da68]]
2021-03-11 10:47:47,178 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2760da68]
2021-03-11 10:47:47,298 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:47:47,298 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).equals("pqpqp")
2021-03-11 10:47:47,298 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.isEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1ec63575]]
2021-03-11 10:47:47,299 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.isEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1ec63575]
2021-03-11 10:47:47,299 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).isEmpty()
2021-03-11 10:47:47,299 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public infix fun <T> kotlin.Array<out T>.contentDeepEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7c7d0ee1]]
2021-03-11 10:47:47,299 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public infix fun <T> kotlin.Array<out T>.contentDeepEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7c7d0ee1]
2021-03-11 10:47:47,414 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 10:47:47,535 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 10:47:47,539 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 10:47:47,664 [main:95] - GENERATED = emptyArray<T>()
2021-03-11 10:47:47,664 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).contentDeepEquals(emptyArray<T>())
2021-03-11 10:47:47,664 [main:63] - replacement of sum != 15 of type Boolean is (arrayOfNulls<Int>(5)).equals("lzzva").not()
2021-03-11 10:47:47,783 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:47:47,784 [main:66] - Compilation checking started
2021-03-11 10:47:48,250 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:48,258 [main:56] - replacing (b, Array<Int?>)
2021-03-11 10:47:48,259 [main:38] - replacing b Array<Int?>
2021-03-11 10:47:48,259 [main:42] - Getting value of type Array<Int?>
2021-03-11 10:47:48,392 [main:302] - generating value of type = Array<Int?> false depth = 0
2021-03-11 10:47:48,512 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Int?> = TODO()
2021-03-11 10:47:48,515 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Int?> = TODO()
2021-03-11 10:47:48,634 [main:95] - GENERATED = emptyArray<Int?>()
2021-03-11 10:47:48,634 [main:46] - GENERATED VALUE OF TYPE Array<Int?> = emptyArray<Int?>()
2021-03-11 10:47:48,634 [main:49] - GENERATED IS CALL =true
2021-03-11 10:47:48,643 [main:55] - randomType = MyCollection2
2021-03-11 10:47:48,793 [main:302] - generating value of type = MyCollection2 false depth = 0
2021-03-11 10:47:48,795 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}
2021-03-11 10:47:48,909 [main:194] - Type params = []
2021-03-11 10:47:49,038 [main:94] - GETTING Array<Int?> from MyIterator
2021-03-11 10:47:49,045 [main:94] - GETTING Array<Int?> from Int
2021-03-11 10:47:49,100 [main:94] - GETTING Array<Int?> from Iterator<Int>
2021-03-11 10:47:49,106 [main:94] - GETTING Array<Int?> from Iterator<Int>
2021-03-11 10:47:49,107 [main:94] - GETTING Array<Int?> from MyIterator
2021-03-11 10:47:49,108 [main:94] - GETTING Array<Int?> from Int
2021-03-11 10:47:49,108 [main:94] - GETTING Array<Int?> from Array<Int?>
2021-03-11 10:47:49,121 [main:101] - Case = [public fun <T> kotlin.Array<T>.sliceArray(indices: kotlin.collections.Collection<kotlin.Int>): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7940abfb]]
2021-03-11 10:47:49,121 [main:137] - GENERATING call of type public fun <T> kotlin.Array<T>.sliceArray(indices: kotlin.collections.Collection<kotlin.Int>): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7940abfb]
2021-03-11 10:47:49,234 [main:302] - generating value of type = Collection<Int> false depth = 0
2021-03-11 10:47:49,357 [main:43] - GENERATING CALL OF fun UIntArray(size: kotlin.Int): Collection<Int> = TODO()
2021-03-11 10:47:49,361 [main:61] - WITHOUT TYPE PARAMS = fun UIntArray(size: kotlin.Int): Collection<Int> = TODO()
2021-03-11 10:47:49,616 [main:302] - generating value of type = Int true depth = 3
2021-03-11 10:47:49,618 [main:95] - GENERATED = UIntArray(790160761)
2021-03-11 10:47:49,618 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).sliceArray(UIntArray(790160761))
2021-03-11 10:47:49,618 [main:101] - Case = [public fun <T : kotlin.Comparable<T>> kotlin.Array<T>.sortedArrayDescending(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@508fd8b1]]
2021-03-11 10:47:49,619 [main:137] - GENERATING call of type public fun <T : kotlin.Comparable<T>> kotlin.Array<T>.sortedArrayDescending(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@508fd8b1]
2021-03-11 10:47:49,619 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).sortedArrayDescending()
2021-03-11 10:47:49,619 [main:101] - Case = [public fun <T : kotlin.Comparable<T>> kotlin.Array<T>.sortedArray(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@62c4b0c7]]
2021-03-11 10:47:49,619 [main:137] - GENERATING call of type public fun <T : kotlin.Comparable<T>> kotlin.Array<T>.sortedArray(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@62c4b0c7]
2021-03-11 10:47:49,619 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).sortedArray()
2021-03-11 10:47:49,619 [main:101] - Case = [public fun <T : kotlin.Any> kotlin.Array<T?>.requireNoNulls(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3358e940]]
2021-03-11 10:47:49,619 [main:137] - GENERATING call of type public fun <T : kotlin.Any> kotlin.Array<T?>.requireNoNulls(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3358e940]
2021-03-11 10:47:49,619 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).requireNoNulls()
2021-03-11 10:47:49,619 [main:101] - Case = [public fun <T> kotlin.Array<T>.reversedArray(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1f7c53ea]]
2021-03-11 10:47:49,619 [main:137] - GENERATING call of type public fun <T> kotlin.Array<T>.reversedArray(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1f7c53ea]
2021-03-11 10:47:49,620 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).reversedArray()
2021-03-11 10:47:49,620 [main:63] - replacement of b of type Array<Int?> is (arrayOfNulls<Int>(5)).sliceArray(UIntArray(790160761))
2021-03-11 10:47:49,739 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:47:49,739 [main:66] - Compilation checking started
2021-03-11 10:47:50,073 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(UIntArray(790160761))) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:50,080 [main:56] - replacing (5, Int)
2021-03-11 10:47:50,080 [main:38] - replacing 5 Int
2021-03-11 10:47:50,080 [main:42] - Getting value of type Int
2021-03-11 10:47:50,199 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:50,201 [main:46] - GENERATED VALUE OF TYPE Int = -27459892
2021-03-11 10:47:50,202 [main:49] - GENERATED IS CALL =false
2021-03-11 10:47:50,206 [main:55] - randomType = Char
2021-03-11 10:47:50,324 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:47:50,348 [main:137] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3ed71a9a]
2021-03-11 10:47:50,349 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2b7987d7]
2021-03-11 10:47:50,349 [main:66] - Generated call from random type = ('몑').toByte().countTrailingZeroBits()
2021-03-11 10:47:50,349 [main:94] - GETTING Int from Int
2021-03-11 10:47:50,385 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@62aaa4bd]]
2021-03-11 10:47:50,385 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:47:50,385 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@62aaa4bd]
2021-03-11 10:47:50,385 [main:105] - GENERATED CALL = (i).toFloat().roundToInt()
2021-03-11 10:47:50,385 [main:101] - Case = [public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:47:50,386 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:47:50,386 [main:105] - GENERATED CALL = (i).inv()
2021-03-11 10:47:50,386 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431], public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@74f66b42]]
2021-03-11 10:47:50,386 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431]
2021-03-11 10:47:50,500 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:47:50,502 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@74f66b42]
2021-03-11 10:47:50,502 [main:105] - GENERATED CALL = (i).div(0.011672573682968812).toInt()
2021-03-11 10:47:50,502 [main:101] - Case = [@kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:47:50,502 [main:105] - GENERATED CALL = (i).sign
2021-03-11 10:47:50,502 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:47:50,502 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:47:50,614 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:50,616 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:47:50,728 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:50,730 [main:105] - GENERATED CALL = (i).compareTo(893620383).ushr(-2041303520)
2021-03-11 10:47:50,730 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:47:50,730 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:47:50,731 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:47:50,847 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:50,849 [main:105] - GENERATED CALL = (i).toInt().compareTo(13)
2021-03-11 10:47:50,849 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:47:50,849 [main:105] - GENERATED CALL = (i).absoluteValue
2021-03-11 10:47:50,849 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:47:50,850 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:47:50,969 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:50,971 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:47:50,971 [main:105] - GENERATED CALL = (i).compareTo(224077074).countTrailingZeroBits()
2021-03-11 10:47:50,972 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@c73734c]]
2021-03-11 10:47:50,972 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:47:50,972 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@c73734c]
2021-03-11 10:47:51,086 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:51,089 [main:105] - GENERATED CALL = (i).toByte().times(89)
2021-03-11 10:47:51,089 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:47:51,089 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:47:51,203 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:51,205 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:47:51,323 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:51,325 [main:105] - GENERATED CALL = (i).compareTo(-53957557).rem(-122)
2021-03-11 10:47:51,325 [main:63] - replacement of 5 of type Int is -27459892
2021-03-11 10:47:51,438 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-11 10:47:51,445 [main:56] - replacing (sum, Int)
2021-03-11 10:47:51,446 [main:38] - replacing sum Int
2021-03-11 10:47:51,446 [main:42] - Getting value of type Int
2021-03-11 10:47:51,566 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:51,569 [main:46] - GENERATED VALUE OF TYPE Int = 315899252
2021-03-11 10:47:51,569 [main:49] - GENERATED IS CALL =false
2021-03-11 10:47:51,578 [main:55] - randomType = MyCollection1
2021-03-11 10:47:51,695 [main:302] - generating value of type = MyCollection1 false depth = 0
2021-03-11 10:47:51,698 [main:112] - generating klass MyCollection1 text = class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}
2021-03-11 10:47:51,849 [main:194] - Type params = []
2021-03-11 10:47:51,979 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.first(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@454da158]
2021-03-11 10:47:51,979 [main:66] - Generated call from random type = (MyCollection1()).first()!!
2021-03-11 10:47:51,979 [main:63] - replacement of sum of type Int is (MyCollection1()).first()!!
2021-03-11 10:47:52,093 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-11 10:47:52,093 [main:66] - Compilation checking started
2021-03-11 10:47:52,435 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    (MyCollection1()).first()!! = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:52,442 [main:56] - replacing (sum != (MyCollection3()).iterator().k, Boolean)
2021-03-11 10:47:52,444 [main:38] - replacing sum != (MyCollection3()).iterator().k Boolean
2021-03-11 10:47:52,444 [main:42] - Getting value of type Boolean
2021-03-11 10:47:52,563 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:47:52,565 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:47:52,565 [main:49] - GENERATED IS CALL =false
2021-03-11 10:47:52,570 [main:55] - randomType = Double
2021-03-11 10:47:52,696 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:47:52,728 [main:137] - GENERATING call of type public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@437c04f9]
2021-03-11 10:47:52,728 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@408a855b]
2021-03-11 10:47:52,846 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:47:52,846 [main:66] - Generated call from random type = (0.08701505441400892).toFloat().equals("fmdfy")
2021-03-11 10:47:52,847 [main:94] - GETTING Boolean from Int
2021-03-11 10:47:52,894 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12f06cb], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6523a69a]]
2021-03-11 10:47:52,894 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12f06cb]
2021-03-11 10:47:52,894 [main:137] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6523a69a]
2021-03-11 10:47:52,894 [main:105] - GENERATED CALL = (el ?: 0).toDouble().isFinite()
2021-03-11 10:47:52,894 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]]
2021-03-11 10:47:52,894 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]
2021-03-11 10:47:53,010 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:47:53,010 [main:105] - GENERATED CALL = (el ?: 0).equals("gwljh")
2021-03-11 10:47:53,010 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@408a855b]]
2021-03-11 10:47:53,010 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:47:53,010 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@408a855b]
2021-03-11 10:47:53,124 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:47:53,125 [main:105] - GENERATED CALL = (el ?: 0).toFloat().equals("osqfw")
2021-03-11 10:47:53,125 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70da58b8]]
2021-03-11 10:47:53,125 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:47:53,125 [main:137] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70da58b8]
2021-03-11 10:47:53,125 [main:105] - GENERATED CALL = (el ?: 0).toChar().isDigit()
2021-03-11 10:47:53,125 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e3ce7a5]]
2021-03-11 10:47:53,125 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:47:53,125 [main:137] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e3ce7a5]
2021-03-11 10:47:53,125 [main:105] - GENERATED CALL = (el ?: 0).toChar().isWhitespace()
2021-03-11 10:47:53,125 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fb50dd8]]
2021-03-11 10:47:53,125 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]
2021-03-11 10:47:53,239 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:47:53,239 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fb50dd8]
2021-03-11 10:47:53,351 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:47:53,353 [main:105] - GENERATED CALL = (el ?: 0).equals("emyjv").xor(true)
2021-03-11 10:47:53,354 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@aa7ca4c]]
2021-03-11 10:47:53,354 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:47:53,354 [main:137] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@aa7ca4c]
2021-03-11 10:47:53,354 [main:105] - GENERATED CALL = (el ?: 0).toFloat().isNaN()
2021-03-11 10:47:53,354 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12f06cb], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@51247d00]]
2021-03-11 10:47:53,354 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12f06cb]
2021-03-11 10:47:53,354 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@51247d00]
2021-03-11 10:47:53,466 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:47:53,467 [main:105] - GENERATED CALL = (el ?: 0).toDouble().equals("mfqff")
2021-03-11 10:47:53,467 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5df9c36e]]
2021-03-11 10:47:53,467 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:47:53,467 [main:137] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5df9c36e]
2021-03-11 10:47:53,467 [main:105] - GENERATED CALL = (el ?: 0).toChar().isTitleCase()
2021-03-11 10:47:53,467 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e06ac34]]
2021-03-11 10:47:53,467 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:47:53,467 [main:137] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e06ac34]
2021-03-11 10:47:53,467 [main:105] - GENERATED CALL = (el ?: 0).toChar().isISOControl()
2021-03-11 10:47:53,467 [main:63] - replacement of sum != (MyCollection3()).iterator().k of type Boolean is (el ?: 0).toDouble().isFinite()
2021-03-11 10:47:53,584 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:47:53,584 [main:66] - Compilation checking started
2021-03-11 10:47:53,924 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if((el ?: 0).toDouble().isFinite()) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:53,931 [main:56] - replacing (sum, Int)
2021-03-11 10:47:53,933 [main:38] - replacing sum Int
2021-03-11 10:47:53,933 [main:42] - Getting value of type Int
2021-03-11 10:47:54,049 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:54,051 [main:46] - GENERATED VALUE OF TYPE Int = -1761509588
2021-03-11 10:47:54,051 [main:49] - GENERATED IS CALL =false
2021-03-11 10:47:54,060 [main:55] - randomType = MyCollection1
2021-03-11 10:47:54,174 [main:302] - generating value of type = MyCollection1 false depth = 0
2021-03-11 10:47:54,176 [main:112] - generating klass MyCollection1 text = class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}
2021-03-11 10:47:54,289 [main:194] - Type params = []
2021-03-11 10:47:54,416 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@d5c0bf9]
2021-03-11 10:47:54,417 [main:66] - Generated call from random type = (MyCollection1()).count()
2021-03-11 10:47:54,417 [main:94] - GETTING Int from Int
2021-03-11 10:47:54,458 [main:101] - Case = [public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:47:54,458 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:47:54,459 [main:105] - GENERATED CALL = (el ?: 0).dec()
2021-03-11 10:47:54,459 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@21bef933]]
2021-03-11 10:47:54,459 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:47:54,459 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@21bef933]
2021-03-11 10:47:54,617 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:54,621 [main:105] - GENERATED CALL = (el ?: 0).toByte().div(-8)
2021-03-11 10:47:54,621 [main:101] - Case = [public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:47:54,621 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:47:54,807 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:54,811 [main:105] - GENERATED CALL = (el ?: 0).coerceAtMost(-709977075)
2021-03-11 10:47:54,811 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@f49fa44]]
2021-03-11 10:47:54,811 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:47:54,812 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@f49fa44]
2021-03-11 10:47:54,812 [main:105] - GENERATED CALL = (el ?: 0).toByte().unaryPlus()
2021-03-11 10:47:54,812 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12f06cb], @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@5959e353]]
2021-03-11 10:47:54,812 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12f06cb]
2021-03-11 10:47:54,812 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@5959e353]
2021-03-11 10:47:54,812 [main:105] - GENERATED CALL = (el ?: 0).toDouble().roundToInt()
2021-03-11 10:47:54,812 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], public open val start: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@4e51b8]]
2021-03-11 10:47:54,812 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:47:54,944 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:54,946 [main:105] - GENERATED CALL = (el ?: 0).rangeTo(-6).start
2021-03-11 10:47:54,946 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:47:54,946 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:47:55,102 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:55,105 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:47:55,222 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:55,225 [main:105] - GENERATED CALL = (el ?: 0).compareTo(-1081777497).shr(814690563)
2021-03-11 10:47:55,225 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:47:55,225 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:47:55,342 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:55,345 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:47:55,459 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:55,462 [main:105] - GENERATED CALL = (el ?: 0).compareTo(1592906638).times(-21)
2021-03-11 10:47:55,462 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:47:55,462 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:47:55,578 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:55,581 [main:105] - GENERATED CALL = (el ?: 0).compareTo(-127)
2021-03-11 10:47:55,581 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@674346bc]]
2021-03-11 10:47:55,581 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f]
2021-03-11 10:47:55,700 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:47:55,702 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@674346bc]
2021-03-11 10:47:55,702 [main:105] - GENERATED CALL = (el ?: 0).div(-3647621133850472461).countTrailingZeroBits()
2021-03-11 10:47:55,703 [main:63] - replacement of sum of type Int is (el ?: 0).toDouble().roundToInt()
2021-03-11 10:47:55,818 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:47:55,819 [main:66] - Compilation checking started
2021-03-11 10:47:56,122 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = sum + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = (el ?: 0).toDouble().roundToInt() + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:56,129 [main:56] - replacing (sum, Int)
2021-03-11 10:47:56,130 [main:38] - replacing sum Int
2021-03-11 10:47:56,130 [main:42] - Getting value of type Int
2021-03-11 10:47:56,247 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:56,249 [main:46] - GENERATED VALUE OF TYPE Int = 1404691422
2021-03-11 10:47:56,249 [main:49] - GENERATED IS CALL =false
2021-03-11 10:47:56,254 [main:55] - randomType = Char
2021-03-11 10:47:56,366 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:47:56,389 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5775f993]
2021-03-11 10:47:56,505 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:47:56,507 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:47:56,508 [main:66] - Generated call from random type = ('볪').compareTo('⭊').inc()
2021-03-11 10:47:56,508 [main:63] - replacement of sum of type Int is ('볪').compareTo('⭊').inc()
2021-03-11 10:47:56,621 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:47:56,622 [main:66] - Compilation checking started
2021-03-11 10:47:57,117 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return "c6 failed"

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = ('볪').compareTo('⭊').inc() + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:57,126 [main:56] - replacing ("c6 failed", String)
2021-03-11 10:47:57,127 [main:38] - replacing "c6 failed" String
2021-03-11 10:47:57,127 [main:42] - Getting value of type String
2021-03-11 10:47:57,245 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:47:57,247 [main:46] - GENERATED VALUE OF TYPE String = "vvccf"
2021-03-11 10:47:57,247 [main:49] - GENERATED IS CALL =false
2021-03-11 10:47:57,421 [main:55] - randomType = UInt
2021-03-11 10:47:57,540 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 10:47:57,595 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59e9a4f7]
2021-03-11 10:47:57,744 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:57,748 [main:66] - Generated call from random type = (1854990690.toUInt()).toString(1777971562)
2021-03-11 10:47:57,748 [main:63] - replacement of "c6 failed" of type String is (1854990690.toUInt()).toString(1777971562)
2021-03-11 10:47:57,906 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:47:57,907 [main:66] - Compilation checking started
2021-03-11 10:47:58,453 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = ('볪').compareTo('⭊').inc() + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:47:58,461 [main:56] - replacing (sum, Int)
2021-03-11 10:47:58,462 [main:38] - replacing sum Int
2021-03-11 10:47:58,462 [main:42] - Getting value of type Int
2021-03-11 10:47:58,617 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:58,619 [main:46] - GENERATED VALUE OF TYPE Int = -1139474692
2021-03-11 10:47:58,619 [main:49] - GENERATED IS CALL =false
2021-03-11 10:47:58,921 [main:55] - randomType = UShort?
2021-03-11 10:47:59,040 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 10:47:59,080 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@3a75fa5a]
2021-03-11 10:47:59,080 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@719372c6]
2021-03-11 10:47:59,081 [main:66] - Generated call from random type = (8272.toUShort())?.toShort().unaryPlus()
2021-03-11 10:47:59,081 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:47:59,089 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:47:59,089 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:59,089 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:47:59,089 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().countLeadingZeroBits()
2021-03-11 10:47:59,089 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:47:59,089 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:59,089 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:47:59,207 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:59,210 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().ushr(-1230123824)
2021-03-11 10:47:59,210 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:47:59,210 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:59,210 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:47:59,210 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().takeLowestOneBit()
2021-03-11 10:47:59,210 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:47:59,210 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:59,210 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:47:59,337 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:59,339 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().xor(-1082448096)
2021-03-11 10:47:59,339 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:47:59,339 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:59,340 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:47:59,470 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:59,473 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().rotateLeft(-2076932642)
2021-03-11 10:47:59,473 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:47:59,473 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:59,473 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:47:59,592 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:59,594 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().rotateRight(-1454915541)
2021-03-11 10:47:59,595 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:47:59,595 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:59,595 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:47:59,716 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:47:59,718 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().shr(826245103)
2021-03-11 10:47:59,718 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:47:59,718 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:59,719 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:47:59,834 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:47:59,837 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().compareTo(69)
2021-03-11 10:47:59,837 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:47:59,837 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:47:59,837 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:47:59,954 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:00,074 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:00,077 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().coerceIn(-16915217, 1113255305)
2021-03-11 10:48:00,077 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:48:00,077 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:48:00,078 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:48:00,078 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().countTrailingZeroBits()
2021-03-11 10:48:00,078 [main:63] - replacement of sum of type Int is (MyCollection1().iterator()).next().takeLowestOneBit()
2021-03-11 10:48:00,194 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:48:00,195 [main:66] - Compilation checking started
2021-03-11 10:48:00,513 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = ('볪').compareTo('⭊').inc() + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        (MyCollection1().iterator()).next().takeLowestOneBit() = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:48:00,521 [main:56] - replacing (MyIterator(), MyIterator)
2021-03-11 10:48:00,521 [main:38] - replacing MyIterator() MyIterator
2021-03-11 10:48:00,521 [main:42] - Getting value of type MyIterator
2021-03-11 10:48:00,638 [main:302] - generating value of type = MyIterator false depth = 0
2021-03-11 10:48:00,640 [main:112] - generating klass MyIterator text = class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
2021-03-11 10:48:00,640 [main:46] - GENERATED VALUE OF TYPE MyIterator = 
2021-03-11 10:48:00,645 [main:55] - randomType = Boolean
2021-03-11 10:48:00,761 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:48:00,775 [main:94] - GETTING MyIterator from Array<Int?>
2021-03-11 10:48:00,787 [main:94] - GETTING MyIterator from MyIterator
2021-03-11 10:48:00,796 [main:63] - replacement of MyIterator() of type MyIterator is MyCollection3().iterator()
2021-03-11 10:48:00,913 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:48:00,913 [main:66] - Compilation checking started
2021-03-11 10:48:01,237 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + ((i).compareTo(73))
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = ('볪').compareTo('⭊').inc() + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyCollection3().iterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:48:01,244 [main:56] - replacing (((i).compareTo(73)), Int)
2021-03-11 10:48:01,246 [main:38] - replacing ((i).compareTo(73)) Int
2021-03-11 10:48:01,246 [main:42] - Getting value of type Int
2021-03-11 10:48:01,362 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:01,364 [main:46] - GENERATED VALUE OF TYPE Int = -435739565
2021-03-11 10:48:01,364 [main:49] - GENERATED IS CALL =false
2021-03-11 10:48:01,497 [main:55] - randomType = UInt
2021-03-11 10:48:01,612 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 10:48:01,648 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2fce0498]
2021-03-11 10:48:01,796 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:48:01,798 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:48:01,929 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:01,932 [main:66] - Generated call from random type = (1697207515.toUInt()).compareTo(94.toUByte()).rotateRight(-1743525078)
2021-03-11 10:48:01,934 [main:94] - GETTING Int from MyIterator
2021-03-11 10:48:01,944 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:48:01,944 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:48:01,944 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:48:02,063 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:02,065 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.minus(52)
2021-03-11 10:48:02,065 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:48:02,065 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:48:02,179 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:02,182 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.rem(-4)
2021-03-11 10:48:02,182 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:48:02,182 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:48:02,304 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:02,306 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.rotateRight(-552021981)
2021-03-11 10:48:02,306 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:48:02,306 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:48:02,421 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:02,423 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.coerceAtMost(521063677)
2021-03-11 10:48:02,424 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:48:02,424 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:48:02,540 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:02,543 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.or(-2024762733)
2021-03-11 10:48:02,543 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:48:02,543 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:48:02,543 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:48:02,543 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.inv()
2021-03-11 10:48:02,543 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:48:02,543 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:48:02,543 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:48:02,543 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.inc()
2021-03-11 10:48:02,543 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:48:02,543 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:48:02,543 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.takeHighestOneBit()
2021-03-11 10:48:02,543 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:48:02,543 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:48:02,661 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:02,664 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.times(-112)
2021-03-11 10:48:02,664 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:48:02,664 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:48:02,779 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:02,781 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.compareTo(-85)
2021-03-11 10:48:02,781 [main:63] - replacement of ((i).compareTo(73)) of type Int is (MyCollection3().iterator()).k.coerceAtMost(521063677)
2021-03-11 10:48:02,896 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:48:02,896 [main:66] - Compilation checking started
2021-03-11 10:48:03,345 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = ('볪').compareTo('⭊').inc() + el!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:48:03,353 [main:56] - replacing (el, Int)
2021-03-11 10:48:03,355 [main:38] - replacing el Int
2021-03-11 10:48:03,355 [main:42] - Getting value of type Int
2021-03-11 10:48:03,476 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:03,478 [main:46] - GENERATED VALUE OF TYPE Int = -535266165
2021-03-11 10:48:03,478 [main:49] - GENERATED IS CALL =false
2021-03-11 10:48:03,483 [main:55] - randomType = Char
2021-03-11 10:48:03,604 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:48:03,637 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5775f993]
2021-03-11 10:48:03,754 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:48:03,757 [main:66] - Generated call from random type = ('甃').compareTo('˪').sign
2021-03-11 10:48:03,758 [main:94] - GETTING Int from MyIterator
2021-03-11 10:48:03,765 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:48:03,765 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:48:03,765 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:48:03,886 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:03,888 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.rem(-41)
2021-03-11 10:48:03,888 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:48:03,889 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:48:04,004 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:04,006 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.plus(6)
2021-03-11 10:48:04,006 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:48:04,007 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:48:04,007 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:48:04,007 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.inc()
2021-03-11 10:48:04,007 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:48:04,007 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.absoluteValue
2021-03-11 10:48:04,007 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:48:04,007 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:48:04,007 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.countOneBits()
2021-03-11 10:48:04,007 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]]
2021-03-11 10:48:04,007 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:48:04,007 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()
2021-03-11 10:48:04,007 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:48:04,007 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:48:04,008 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:48:04,121 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:04,123 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.div(-36)
2021-03-11 10:48:04,123 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:48:04,123 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:48:04,239 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:04,242 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.shr(-2026176668)
2021-03-11 10:48:04,242 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:48:04,242 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:48:04,242 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:48:04,358 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:04,360 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.and(-1534501869)
2021-03-11 10:48:04,360 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:48:04,360 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:48:04,360 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:48:04,361 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.unaryMinus()
2021-03-11 10:48:04,361 [main:63] - replacement of el of type Int is (MyCollection3().iterator()).k.countOneBits()
2021-03-11 10:48:04,474 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:48:04,475 [main:66] - Compilation checking started
2021-03-11 10:48:04,938 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = ('볪').compareTo('⭊').inc() + (MyCollection3().iterator()).k.countOneBits()!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:48:04,946 [main:56] - replacing (sum, Int)
2021-03-11 10:48:04,947 [main:38] - replacing sum Int
2021-03-11 10:48:04,947 [main:42] - Getting value of type Int
2021-03-11 10:48:05,096 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:05,098 [main:46] - GENERATED VALUE OF TYPE Int = -1327629176
2021-03-11 10:48:05,099 [main:49] - GENERATED IS CALL =false
2021-03-11 10:48:05,253 [main:55] - randomType = LinkedHashMap<MyCollection4, Double>
2021-03-11 10:48:05,370 [main:302] - generating value of type = LinkedHashMap<MyCollection4, Double> false depth = 0
2021-03-11 10:48:05,491 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<MyCollection4, Double>): LkedHashMap<MyCollection4, Double> = TODO()
2021-03-11 10:48:05,495 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<MyCollection4, Double>): LkedHashMap<MyCollection4, Double> = TODO()
2021-03-11 10:48:05,618 [main:302] - generating value of type = Pair<MyCollection4, Double> false depth = 3
2021-03-11 10:48:05,741 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: MyCollection4, second: Double): Pair<MyCollection4, Double> = TODO()
2021-03-11 10:48:05,744 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: MyCollection4, second: Double): Pair<MyCollection4, Double> = TODO()
2021-03-11 10:48:05,866 [main:302] - generating value of type = MyCollection4 false depth = 6
2021-03-11 10:48:05,868 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:48:05,983 [main:194] - Type params = []
2021-03-11 10:48:06,099 [main:302] - generating value of type = Double true depth = 6
2021-03-11 10:48:06,102 [main:95] - GENERATED = Pair<MyCollection4, Double>(MyCollection4(), 0.29877849287006086)
2021-03-11 10:48:06,102 [main:95] - GENERATED = linkedMapOf<MyCollection4, Double>(Pair<MyCollection4, Double>(MyCollection4(), 0.29877849287006086))
2021-03-11 10:48:06,238 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@32865239]
2021-03-11 10:48:06,239 [main:66] - Generated call from random type = (linkedMapOf<MyCollection4, Double>(Pair<MyCollection4, Double>(MyCollection4(), 0.29877849287006086))).values.count()
2021-03-11 10:48:06,239 [main:94] - GETTING Int from Int
2021-03-11 10:48:06,271 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@32620f7e]]
2021-03-11 10:48:06,271 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:48:06,271 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@32620f7e]
2021-03-11 10:48:06,388 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:06,390 [main:105] - GENERATED CALL = (sum).toByte().rem(-69)
2021-03-11 10:48:06,390 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@674346bc]]
2021-03-11 10:48:06,390 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f]
2021-03-11 10:48:06,507 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:48:06,510 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@674346bc]
2021-03-11 10:48:06,510 [main:105] - GENERATED CALL = (sum).div(-9107044956020295813).countTrailingZeroBits()
2021-03-11 10:48:06,510 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1180d1b3]]
2021-03-11 10:48:06,510 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:48:06,510 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1180d1b3]
2021-03-11 10:48:06,627 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:06,630 [main:105] - GENERATED CALL = (sum).toShort().rem(-82)
2021-03-11 10:48:06,630 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:48:06,630 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:48:06,630 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:48:06,630 [main:105] - GENERATED CALL = (sum).toInt().toInt()
2021-03-11 10:48:06,630 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:48:06,630 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:48:06,630 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:48:06,746 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:06,749 [main:105] - GENERATED CALL = (sum).toInt().rotateRight(499670476)
2021-03-11 10:48:06,749 [main:101] - Case = [public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:48:06,749 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:48:06,866 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:06,869 [main:105] - GENERATED CALL = (sum).and(-1725210354)
2021-03-11 10:48:06,869 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6b8bfcfc]]
2021-03-11 10:48:06,869 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:48:06,869 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6b8bfcfc]
2021-03-11 10:48:06,987 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:06,990 [main:105] - GENERATED CALL = (sum).toByte().compareTo(-29)
2021-03-11 10:48:06,990 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@3fd91132]]
2021-03-11 10:48:06,990 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:48:06,990 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@3fd91132]
2021-03-11 10:48:06,990 [main:105] - GENERATED CALL = (sum).toFloat().toInt()
2021-03-11 10:48:06,990 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:48:06,990 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:48:06,991 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:48:06,991 [main:105] - GENERATED CALL = (sum).toInt().takeLowestOneBit()
2021-03-11 10:48:06,991 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1632fabd]]
2021-03-11 10:48:06,991 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:48:06,991 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1632fabd]
2021-03-11 10:48:06,991 [main:105] - GENERATED CALL = (sum).toShort().countOneBits()
2021-03-11 10:48:06,991 [main:63] - replacement of sum of type Int is (sum).toShort().countOneBits()
2021-03-11 10:48:07,108 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:48:07,108 [main:66] - Compilation checking started
2021-03-11 10:48:07,416 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    (sum).toShort().countOneBits() = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = ('볪').compareTo('⭊').inc() + (MyCollection3().iterator()).k.countOneBits()!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:48:07,424 [main:56] - replacing (a, Array<Int>)
2021-03-11 10:48:07,425 [main:38] - replacing a Array<Int>
2021-03-11 10:48:07,425 [main:42] - Getting value of type Array<Int>
2021-03-11 10:48:07,541 [main:302] - generating value of type = Array<Int> false depth = 0
2021-03-11 10:48:07,664 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<Int> = TODO()
2021-03-11 10:48:07,667 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<Int> = TODO()
2021-03-11 10:48:07,792 [main:95] - GENERATED = enumValues<Int>()
2021-03-11 10:48:07,792 [main:46] - GENERATED VALUE OF TYPE Array<Int> = enumValues<Int>()
2021-03-11 10:48:07,792 [main:49] - GENERATED IS CALL =true
2021-03-11 10:48:07,927 [main:55] - randomType = String?
2021-03-11 10:48:08,043 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:48:08,072 [main:94] - GETTING Array<Int> from Array<Int?>
2021-03-11 10:48:08,084 [main:63] - replacement of a of type Array<Int> is enumValues<Int>()
2021-03-11 10:48:08,230 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 10:48:08,231 [main:66] - Compilation checking started
2021-03-11 10:48:08,542 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = ('볪').compareTo('⭊').inc() + (MyCollection3().iterator()).k.countOneBits()!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.countLeadingZeroBits()!!
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in enumValues<Int>()) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:48:08,549 [main:56] - replacing ((MyCollection3().iterator()).k.countLeadingZeroBits()!!, Int)
2021-03-11 10:48:08,551 [main:38] - replacing (MyCollection3().iterator()).k.countLeadingZeroBits()!! Int
2021-03-11 10:48:08,551 [main:42] - Getting value of type Int
2021-03-11 10:48:08,674 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:08,677 [main:46] - GENERATED VALUE OF TYPE Int = 1939550018
2021-03-11 10:48:08,677 [main:49] - GENERATED IS CALL =false
2021-03-11 10:48:08,686 [main:55] - randomType = MyCollection2
2021-03-11 10:48:08,803 [main:302] - generating value of type = MyCollection2 false depth = 0
2021-03-11 10:48:08,805 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}
2021-03-11 10:48:08,924 [main:194] - Type params = []
2021-03-11 10:48:09,055 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.firstOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@39717093]
2021-03-11 10:48:09,055 [main:66] - Generated call from random type = (MyCollection2()).firstOrNull()!!
2021-03-11 10:48:09,056 [main:94] - GETTING Int from MyIterator
2021-03-11 10:48:09,065 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:48:09,065 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:48:09,181 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:09,183 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.ushr(2120295837)
2021-03-11 10:48:09,183 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:48:09,183 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:48:09,298 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:09,301 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.shr(390415390)
2021-03-11 10:48:09,301 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:48:09,301 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:48:09,301 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.takeHighestOneBit()
2021-03-11 10:48:09,301 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:48:09,301 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:48:09,302 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.takeLowestOneBit()
2021-03-11 10:48:09,302 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:48:09,302 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:48:09,302 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:48:09,302 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.unaryMinus()
2021-03-11 10:48:09,302 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:48:09,302 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:48:09,302 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:48:09,424 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:09,427 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.plus(98)
2021-03-11 10:48:09,427 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:48:09,427 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:48:09,548 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:09,550 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.div(49)
2021-03-11 10:48:09,551 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:48:09,551 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:48:09,669 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:09,672 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.coerceAtLeast(873026952)
2021-03-11 10:48:09,672 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:48:09,672 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:48:09,673 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.unaryPlus()
2021-03-11 10:48:09,673 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:48:09,673 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.sign
2021-03-11 10:48:09,673 [main:63] - replacement of (MyCollection3().iterator()).k.countLeadingZeroBits()!! of type Int is (MyCollection3().iterator()).k.div(49)
2021-03-11 10:48:09,793 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:48:09,794 [main:66] - Compilation checking started
2021-03-11 10:48:10,317 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = ('볪').compareTo('⭊').inc() + (MyCollection3().iterator()).k.countOneBits()!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:48:10,325 [main:56] - replacing ((MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614), Boolean)
2021-03-11 10:48:10,325 [main:38] - replacing (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614) Boolean
2021-03-11 10:48:10,325 [main:42] - Getting value of type Boolean
2021-03-11 10:48:10,449 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:48:10,451 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:48:10,451 [main:49] - GENERATED IS CALL =false
2021-03-11 10:48:10,735 [main:55] - randomType = MutableMap<MyCollection4?, Double>
2021-03-11 10:48:10,736 [main:94] - GETTING Boolean from Int
2021-03-11 10:48:10,774 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@2d87d802]]
2021-03-11 10:48:10,774 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:48:10,775 [main:137] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@2d87d802]
2021-03-11 10:48:10,775 [main:105] - GENERATED CALL = (i).toFloat().isFinite()
2021-03-11 10:48:10,775 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]]
2021-03-11 10:48:10,775 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]
2021-03-11 10:48:10,889 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:48:10,889 [main:105] - GENERATED CALL = (i).equals("rjoop")
2021-03-11 10:48:10,889 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@aa7ca4c]]
2021-03-11 10:48:10,889 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:48:10,889 [main:137] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@aa7ca4c]
2021-03-11 10:48:10,889 [main:105] - GENERATED CALL = (i).toFloat().isNaN()
2021-03-11 10:48:10,890 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@35500bca]]
2021-03-11 10:48:10,890 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]
2021-03-11 10:48:11,006 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:48:11,007 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@35500bca]
2021-03-11 10:48:11,123 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:48:11,123 [main:105] - GENERATED CALL = (i).equals("yyxtt").equals("vvgbu")
2021-03-11 10:48:11,123 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@619c3b77]]
2021-03-11 10:48:11,123 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:48:11,123 [main:137] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@619c3b77]
2021-03-11 10:48:11,124 [main:105] - GENERATED CALL = (i).toFloat().isInfinite()
2021-03-11 10:48:11,124 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e06ac34]]
2021-03-11 10:48:11,124 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:48:11,124 [main:137] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e06ac34]
2021-03-11 10:48:11,124 [main:105] - GENERATED CALL = (i).toChar().isISOControl()
2021-03-11 10:48:11,124 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2b624a24]]
2021-03-11 10:48:11,124 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:48:11,124 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2b624a24]
2021-03-11 10:48:11,240 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:48:11,241 [main:105] - GENERATED CALL = (i).toByte().equals("wwuny")
2021-03-11 10:48:11,241 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6523a69a]]
2021-03-11 10:48:11,241 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431]
2021-03-11 10:48:11,356 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:48:11,359 [main:137] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6523a69a]
2021-03-11 10:48:11,359 [main:105] - GENERATED CALL = (i).div(0.6511221728390882).isFinite()
2021-03-11 10:48:11,359 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70da58b8]]
2021-03-11 10:48:11,359 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:48:11,359 [main:137] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70da58b8]
2021-03-11 10:48:11,359 [main:105] - GENERATED CALL = (i).toChar().isDigit()
2021-03-11 10:48:11,359 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]]
2021-03-11 10:48:11,359 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:48:11,360 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]
2021-03-11 10:48:11,518 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:48:11,518 [main:105] - GENERATED CALL = (i).toInt().equals("bpvbg")
2021-03-11 10:48:11,519 [main:63] - replacement of (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614) of type Boolean is (i).toChar().isISOControl()
2021-03-11 10:48:11,634 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:48:11,634 [main:66] - Compilation checking started
2021-03-11 10:48:11,964 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = ('볪').compareTo('⭊').inc() + (MyCollection3().iterator()).k.countOneBits()!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (i).toChar().isISOControl()
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:48:11,972 [main:56] - replacing (sum, Int)
2021-03-11 10:48:11,974 [main:38] - replacing sum Int
2021-03-11 10:48:11,974 [main:42] - Getting value of type Int
2021-03-11 10:48:12,093 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:12,095 [main:46] - GENERATED VALUE OF TYPE Int = 1109864260
2021-03-11 10:48:12,095 [main:49] - GENERATED IS CALL =false
2021-03-11 10:48:12,100 [main:55] - randomType = String
2021-03-11 10:48:12,215 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:48:12,239 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5f060d1e]
2021-03-11 10:48:12,354 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:12,472 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:12,475 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28150e86]
2021-03-11 10:48:12,587 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 10:48:12,590 [main:302] - generating value of type = Int true depth = 1
2021-03-11 10:48:12,592 [main:66] - Generated call from random type = ("tvluv").subSequence(-1817849780, -1807838567).sumOf({a: Char -> -1630435465})
2021-03-11 10:48:12,593 [main:63] - replacement of sum of type Int is ("tvluv").subSequence(-1817849780, -1807838567).sumOf({a: Char -> -1630435465})
2021-03-11 10:48:12,707 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:48:12,707 [main:66] - Compilation checking started
2021-03-11 10:48:13,162 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = ("tvluv").subSequence(-1817849780, -1807838567).sumOf({a: Char -> -1630435465}) + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = ('볪').compareTo('⭊').inc() + (MyCollection3().iterator()).k.countOneBits()!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:48:13,175 [main:56] - replacing (MyIterator(), MyIterator)
2021-03-11 10:48:13,175 [main:38] - replacing MyIterator() MyIterator
2021-03-11 10:48:13,175 [main:42] - Getting value of type MyIterator
2021-03-11 10:48:13,312 [main:302] - generating value of type = MyIterator false depth = 0
2021-03-11 10:48:13,314 [main:112] - generating klass MyIterator text = class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
2021-03-11 10:48:13,314 [main:46] - GENERATED VALUE OF TYPE MyIterator = 
2021-03-11 10:48:13,455 [main:55] - randomType = MyCollection2?
2021-03-11 10:48:13,577 [main:302] - generating value of type = MyCollection2 false depth = 0
2021-03-11 10:48:13,580 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}
2021-03-11 10:48:13,705 [main:194] - Type params = []
2021-03-11 10:48:13,841 [main:94] - GETTING MyIterator from Iterator<Int>
2021-03-11 10:48:13,847 [main:94] - GETTING MyIterator from Iterator<Int>
2021-03-11 10:48:13,847 [main:94] - GETTING MyIterator from Array<Int?>
2021-03-11 10:48:13,860 [main:94] - GETTING MyIterator from MyIterator
2021-03-11 10:48:13,864 [main:63] - replacement of MyIterator() of type MyIterator is MyCollection4().iterator()
2021-03-11 10:48:13,979 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:48:13,979 [main:66] - Compilation checking started
2021-03-11 10:48:14,335 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if(sum != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = ('볪').compareTo('⭊').inc() + (MyCollection3().iterator()).k.countOneBits()!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection4().iterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:48:14,347 [main:56] - replacing (sum, Int)
2021-03-11 10:48:14,349 [main:38] - replacing sum Int
2021-03-11 10:48:14,350 [main:42] - Getting value of type Int
2021-03-11 10:48:14,493 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:14,495 [main:46] - GENERATED VALUE OF TYPE Int = 1488076899
2021-03-11 10:48:14,496 [main:49] - GENERATED IS CALL =false
2021-03-11 10:48:14,634 [main:55] - randomType = MyCollection3?
2021-03-11 10:48:14,752 [main:302] - generating value of type = MyCollection3 false depth = 0
2021-03-11 10:48:14,754 [main:112] - generating klass MyCollection3 text = class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}
2021-03-11 10:48:14,910 [main:194] - Type params = []
2021-03-11 10:48:15,032 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyCollection3[DeserializedSimpleFunctionDescriptor@169ea563]
2021-03-11 10:48:15,148 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:48:15,148 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:48:15,266 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:48:15,269 [main:66] - Generated call from random type = (MyCollection3())?.equals("picvc").compareTo(true)
2021-03-11 10:48:15,270 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:48:15,279 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:48:15,279 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:48:15,279 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:48:15,395 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:15,398 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().compareTo(101)
2021-03-11 10:48:15,398 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:48:15,398 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:48:15,398 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:48:15,519 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:15,522 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().plus(-61)
2021-03-11 10:48:15,522 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:48:15,522 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:48:15,522 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:48:15,522 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().dec()
2021-03-11 10:48:15,522 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:48:15,522 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:48:15,522 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().sign
2021-03-11 10:48:15,522 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:48:15,522 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:48:15,523 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:48:15,523 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().inv()
2021-03-11 10:48:15,523 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:48:15,523 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:48:15,523 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:48:15,523 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().takeLowestOneBit()
2021-03-11 10:48:15,523 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:48:15,523 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:48:15,523 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:48:15,639 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:15,641 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().or(1293734849)
2021-03-11 10:48:15,642 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:48:15,642 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:48:15,642 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:48:15,642 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().inc()
2021-03-11 10:48:15,642 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:48:15,642 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:48:15,642 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:48:15,757 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:15,759 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().rotateRight(157545566)
2021-03-11 10:48:15,760 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:48:15,760 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:48:15,760 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:48:15,760 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().countOneBits()
2021-03-11 10:48:15,760 [main:63] - replacement of sum of type Int is (MyCollection1().iterator()).next().plus(-61)
2021-03-11 10:48:15,876 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:48:15,876 [main:66] - Compilation checking started
2021-03-11 10:48:16,364 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = ('볪').compareTo('⭊').inc() + (MyCollection3().iterator()).k.countOneBits()!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:48:16,373 [main:56] - replacing (sum, Int)
2021-03-11 10:48:16,374 [main:38] - replacing sum Int
2021-03-11 10:48:16,374 [main:42] - Getting value of type Int
2021-03-11 10:48:16,491 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:16,493 [main:46] - GENERATED VALUE OF TYPE Int = -1808813556
2021-03-11 10:48:16,493 [main:49] - GENERATED IS CALL =false
2021-03-11 10:48:16,625 [main:55] - randomType = ULong
2021-03-11 10:48:16,755 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 10:48:16,790 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@5d29d5bf]
2021-03-11 10:48:16,790 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@55d433d4]
2021-03-11 10:48:16,909 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:16,912 [main:66] - Generated call from random type = (4788859508826471441.toULong()).toShort().div(95)
2021-03-11 10:48:16,913 [main:94] - GETTING Int from MyIterator
2021-03-11 10:48:16,918 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:48:16,918 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:48:16,919 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.takeLowestOneBit()
2021-03-11 10:48:16,919 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:48:16,919 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:48:17,049 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:17,051 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.coerceAtMost(1796458372)
2021-03-11 10:48:17,051 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:48:17,051 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:48:17,051 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.dec()
2021-03-11 10:48:17,051 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:48:17,051 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:48:17,165 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:17,168 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.coerceAtLeast(-1426004161)
2021-03-11 10:48:17,168 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:48:17,168 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:48:17,285 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:17,287 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.times(-116)
2021-03-11 10:48:17,287 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:48:17,287 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:48:17,406 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:17,408 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.shl(-979752160)
2021-03-11 10:48:17,408 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:48:17,409 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:48:17,527 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:17,530 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.rotateLeft(1364681026)
2021-03-11 10:48:17,530 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:48:17,530 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:48:17,530 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.countLeadingZeroBits()
2021-03-11 10:48:17,530 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:48:17,530 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:48:17,530 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.inv()
2021-03-11 10:48:17,530 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:48:17,530 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:48:17,530 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.countTrailingZeroBits()
2021-03-11 10:48:17,530 [main:63] - replacement of sum of type Int is (MyCollection4().iterator()).k.rotateLeft(1364681026)
2021-03-11 10:48:17,650 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:48:17,651 [main:66] - Compilation checking started
2021-03-11 10:48:17,964 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = sum + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = ('볪').compareTo('⭊').inc() + (MyCollection3().iterator()).k.countOneBits()!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        (MyCollection4().iterator()).k.rotateLeft(1364681026) = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:48:17,973 [main:56] - replacing (sum, Int)
2021-03-11 10:48:17,974 [main:38] - replacing sum Int
2021-03-11 10:48:17,974 [main:42] - Getting value of type Int
2021-03-11 10:48:18,120 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:18,122 [main:46] - GENERATED VALUE OF TYPE Int = -469270354
2021-03-11 10:48:18,122 [main:49] - GENERATED IS CALL =false
2021-03-11 10:48:18,832 [main:55] - randomType = Triple<Triple<Double?, ArrayDeque<Char>, Int>, Char, String>
2021-03-11 10:48:18,948 [main:302] - generating value of type = Triple<Triple<Double?, ArrayDeque<Char>, Int>, Char, String> false depth = 0
2021-03-11 10:48:19,076 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Triple<Double?, ArrayDeque<Char>, Int>, second: Char, third: String): Triple<Triple<Double?, ArrayDeque<Char>, Int>, Char, String> = TODO()
2021-03-11 10:48:19,079 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Triple<Double?, ArrayDeque<Char>, Int>, second: Char, third: String): Triple<Triple<Double?, ArrayDeque<Char>, Int>, Char, String> = TODO()
2021-03-11 10:48:19,201 [main:302] - generating value of type = Triple<Double?, ArrayDeque<Char>, Int> false depth = 3
2021-03-11 10:48:19,323 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Double?, second: ArrayDeque<Char>, third: Int): Triple<Double?, ArrayDeque<Char>, Int> = TODO()
2021-03-11 10:48:19,327 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Double?, second: ArrayDeque<Char>, third: Int): Triple<Double?, ArrayDeque<Char>, Int> = TODO()
2021-03-11 10:48:19,451 [main:302] - generating value of type = Double true depth = 6
2021-03-11 10:48:19,453 [main:302] - generating value of type = ArrayDeque<Char> false depth = 6
2021-03-11 10:48:19,581 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Char> = TODO()
2021-03-11 10:48:19,584 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Char> = TODO()
2021-03-11 10:48:19,845 [main:302] - generating value of type = Int true depth = 9
2021-03-11 10:48:19,848 [main:95] - GENERATED = ArrayDeque<Char>(-925561115)
2021-03-11 10:48:19,848 [main:302] - generating value of type = Int true depth = 6
2021-03-11 10:48:19,850 [main:95] - GENERATED = Triple<Double?, ArrayDeque<Char>, Int>(0.7977966730184833, ArrayDeque<Char>(-925561115), -359315887)
2021-03-11 10:48:19,850 [main:302] - generating value of type = Char true depth = 3
2021-03-11 10:48:19,852 [main:302] - generating value of type = String true depth = 3
2021-03-11 10:48:19,855 [main:95] - GENERATED = Triple<Triple<Double?, ArrayDeque<Char>, Int>, Char, String>(Triple<Double?, ArrayDeque<Char>, Int>(0.7977966730184833, ArrayDeque<Char>(-925561115), -359315887), '흊', "rtpvq")
2021-03-11 10:48:19,878 [main:66] - Generated call from random type = (Triple<Triple<Double?, ArrayDeque<Char>, Int>, Char, String>(Triple<Double?, ArrayDeque<Char>, Int>(0.7977966730184833, ArrayDeque<Char>(-925561115), -359315887), '흊', "rtpvq")).third.length
2021-03-11 10:48:19,878 [main:63] - replacement of sum of type Int is (Triple<Triple<Double?, ArrayDeque<Char>, Int>, Char, String>(Triple<Double?, ArrayDeque<Char>, Int>(0.7977966730184833, ArrayDeque<Char>(-925561115), -359315887), '흊', "rtpvq")).third.length
2021-03-11 10:48:19,993 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:48:19,994 [main:66] - Compilation checking started
2021-03-11 10:48:20,572 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (Triple<Triple<Double?, ArrayDeque<Char>, Int>, Char, String>(Triple<Double?, ArrayDeque<Char>, Int>(0.7977966730184833, ArrayDeque<Char>(-925561115), -359315887), '흊', "rtpvq")).third.length + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = ('볪').compareTo('⭊').inc() + (MyCollection3().iterator()).k.countOneBits()!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:48:20,580 [main:56] - replacing (MyIterator(), MyIterator)
2021-03-11 10:48:20,580 [main:38] - replacing MyIterator() MyIterator
2021-03-11 10:48:20,580 [main:42] - Getting value of type MyIterator
2021-03-11 10:48:20,728 [main:302] - generating value of type = MyIterator false depth = 0
2021-03-11 10:48:20,732 [main:112] - generating klass MyIterator text = class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
2021-03-11 10:48:20,732 [main:46] - GENERATED VALUE OF TYPE MyIterator = 
2021-03-11 10:48:20,747 [main:55] - randomType = MyCollection1
2021-03-11 10:48:20,877 [main:302] - generating value of type = MyCollection1 false depth = 0
2021-03-11 10:48:20,880 [main:112] - generating klass MyCollection1 text = class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}
2021-03-11 10:48:21,013 [main:194] - Type params = []
2021-03-11 10:48:21,147 [main:94] - GETTING MyIterator from Array<Int?>
2021-03-11 10:48:21,162 [main:94] - GETTING MyIterator from Int
2021-03-11 10:48:21,199 [main:94] - GETTING MyIterator from MyIterator
2021-03-11 10:48:21,203 [main:63] - replacement of MyIterator() of type MyIterator is MyCollection4().iterator()
2021-03-11 10:48:21,323 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:48:21,323 [main:66] - Compilation checking started
2021-03-11 10:48:21,701 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (Triple<Triple<Double?, ArrayDeque<Char>, Int>, Char, String>(Triple<Double?, ArrayDeque<Char>, Int>(0.7977966730184833, ArrayDeque<Char>(-925561115), -359315887), '흊', "rtpvq")).third.length + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = ('볪').compareTo('⭊').inc() + (MyCollection3().iterator()).k.countOneBits()!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "OK"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyCollection4().iterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:48:21,709 [main:56] - replacing ("OK", String)
2021-03-11 10:48:21,711 [main:38] - replacing "OK" String
2021-03-11 10:48:21,711 [main:42] - Getting value of type String
2021-03-11 10:48:21,829 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:48:21,831 [main:46] - GENERATED VALUE OF TYPE String = "cytwx"
2021-03-11 10:48:21,831 [main:49] - GENERATED IS CALL =false
2021-03-11 10:48:21,841 [main:55] - randomType = MyCollection4
2021-03-11 10:48:21,958 [main:302] - generating value of type = MyCollection4 false depth = 0
2021-03-11 10:48:21,961 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:48:22,079 [main:194] - Type params = []
2021-03-11 10:48:22,206 [main:94] - GETTING String from MyIterator
2021-03-11 10:48:22,213 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]]
2021-03-11 10:48:22,213 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]
2021-03-11 10:48:22,331 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:22,334 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.toString(1711084568)
2021-03-11 10:48:22,334 [main:63] - replacement of "OK" of type String is "cytwx"
2021-03-11 10:48:22,455 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 10:48:22,456 [main:66] - Compilation checking started
2021-03-11 10:48:23,052 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (Triple<Triple<Double?, ArrayDeque<Char>, Int>, Char, String>(Triple<Double?, ArrayDeque<Char>, Int>(0.7977966730184833, ArrayDeque<Char>(-925561115), -359315887), '흊', "rtpvq")).third.length + el!!
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = ('볪').compareTo('⭊').inc() + (MyCollection3().iterator()).k.countOneBits()!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:48:23,063 [main:56] - replacing ((Triple<Triple<Double?, ArrayDeque<Char>, Int>, Char, String>(Triple<Double?, ArrayDeque<Char>, Int>(0.7977966730184833, ArrayDeque<Char>(-925561115), -359315887), '흊', "rtpvq")).third.length + el!!, Int)
2021-03-11 10:48:23,064 [main:38] - replacing (Triple<Triple<Double?, ArrayDeque<Char>, Int>, Char, String>(Triple<Double?, ArrayDeque<Char>, Int>(0.7977966730184833, ArrayDeque<Char>(-925561115), -359315887), '흊', "rtpvq")).third.length + el!! Int
2021-03-11 10:48:23,064 [main:42] - Getting value of type Int
2021-03-11 10:48:23,198 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:23,201 [main:46] - GENERATED VALUE OF TYPE Int = 1309651352
2021-03-11 10:48:23,201 [main:49] - GENERATED IS CALL =false
2021-03-11 10:48:23,210 [main:55] - randomType = MyCollection1
2021-03-11 10:48:23,333 [main:302] - generating value of type = MyCollection1 false depth = 0
2021-03-11 10:48:23,335 [main:112] - generating klass MyCollection1 text = class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}
2021-03-11 10:48:23,459 [main:194] - Type params = []
2021-03-11 10:48:23,598 [main:137] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@947e3ba]
2021-03-11 10:48:23,724 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 10:48:23,727 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:48:23,729 [main:66] - Generated call from random type = (MyCollection1()).indexOfLast({a: T -> true})
2021-03-11 10:48:23,729 [main:94] - GETTING Int from Int
2021-03-11 10:48:23,774 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], public final val first: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@46455b22]]
2021-03-11 10:48:23,775 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:48:23,898 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:23,900 [main:105] - GENERATED CALL = (sum).rangeTo(73).first
2021-03-11 10:48:23,900 [main:101] - Case = [public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:48:23,900 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:48:23,901 [main:105] - GENERATED CALL = (sum).unaryPlus()
2021-03-11 10:48:23,901 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:48:23,901 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:48:23,901 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:48:24,027 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:24,030 [main:105] - GENERATED CALL = (sum).toInt().xor(-452031695)
2021-03-11 10:48:24,030 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@4af8e595]]
2021-03-11 10:48:24,030 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:48:24,156 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:24,159 [main:105] - GENERATED CALL = (sum).rangeTo(22).endInclusive
2021-03-11 10:48:24,159 [main:101] - Case = [@kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:48:24,160 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:48:24,279 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:24,281 [main:105] - GENERATED CALL = (sum).rem(-102)
2021-03-11 10:48:24,282 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:48:24,282 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:48:24,403 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:24,406 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:48:24,527 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:24,529 [main:105] - GENERATED CALL = (sum).compareTo(195823943).shl(-602997148)
2021-03-11 10:48:24,530 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:48:24,530 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:48:24,654 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:24,656 [main:105] - GENERATED CALL = (sum).compareTo(-1117545789).absoluteValue
2021-03-11 10:48:24,656 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], public final val step: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@d97c869]]
2021-03-11 10:48:24,657 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:48:24,776 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:24,778 [main:105] - GENERATED CALL = (sum).rangeTo(51).step
2021-03-11 10:48:24,779 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3af86106]]
2021-03-11 10:48:24,779 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:48:24,779 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3af86106]
2021-03-11 10:48:24,900 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:24,903 [main:105] - GENERATED CALL = (sum).toByte().minus(18)
2021-03-11 10:48:24,903 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a8376bf]]
2021-03-11 10:48:24,903 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97]
2021-03-11 10:48:24,903 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a8376bf]
2021-03-11 10:48:24,903 [main:105] - GENERATED CALL = (sum).toLong().countOneBits()
2021-03-11 10:48:24,903 [main:63] - replacement of (Triple<Triple<Double?, ArrayDeque<Char>, Int>, Char, String>(Triple<Double?, ArrayDeque<Char>, Int>(0.7977966730184833, ArrayDeque<Char>(-925561115), -359315887), '흊', "rtpvq")).third.length + el!! of type Int is (sum).rangeTo(51).step
2021-03-11 10:48:25,056 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:48:25,057 [main:66] - Compilation checking started
2021-03-11 10:48:25,543 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = ('볪').compareTo('⭊').inc() + (MyCollection3().iterator()).k.countOneBits()!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != 15) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:48:25,556 [main:56] - replacing (15, Int)
2021-03-11 10:48:25,558 [main:38] - replacing 15 Int
2021-03-11 10:48:25,558 [main:42] - Getting value of type Int
2021-03-11 10:48:25,708 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:25,710 [main:46] - GENERATED VALUE OF TYPE Int = -1782291254
2021-03-11 10:48:25,710 [main:49] - GENERATED IS CALL =false
2021-03-11 10:48:25,720 [main:55] - randomType = MyCollection2
2021-03-11 10:48:25,845 [main:302] - generating value of type = MyCollection2 false depth = 0
2021-03-11 10:48:25,847 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}
2021-03-11 10:48:25,964 [main:194] - Type params = []
2021-03-11 10:48:26,099 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.elementAt(index: kotlin.Int): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@78c84e0b]
2021-03-11 10:48:26,218 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:26,221 [main:66] - Generated call from random type = (MyCollection2()).elementAt(867688876)!!
2021-03-11 10:48:26,222 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:48:26,228 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:48:26,228 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:48:26,228 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:48:26,228 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().inv()
2021-03-11 10:48:26,228 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:48:26,228 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:48:26,228 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:48:26,344 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:26,346 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().and(644375886)
2021-03-11 10:48:26,347 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:48:26,347 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:48:26,347 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:48:26,465 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:26,467 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().rotateLeft(-186331298)
2021-03-11 10:48:26,467 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:48:26,467 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:48:26,467 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:48:26,583 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:26,586 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().compareTo(-37)
2021-03-11 10:48:26,586 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:48:26,586 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:48:26,586 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:48:26,587 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().toInt()
2021-03-11 10:48:26,587 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:48:26,587 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09]
2021-03-11 10:48:26,706 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:48:26,706 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:48:26,833 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:48:26,836 [main:105] - GENERATED CALL = (MyCollection2().iterator()).equals("tfmdg").compareTo(true)
2021-03-11 10:48:26,836 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]]
2021-03-11 10:48:26,836 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:48:26,836 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next()
2021-03-11 10:48:26,836 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:48:26,836 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:48:26,837 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:48:26,958 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:26,962 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().ushr(1108932400)
2021-03-11 10:48:26,962 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:48:26,962 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:48:26,962 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:48:26,963 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().inc()
2021-03-11 10:48:26,963 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:48:26,963 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:48:26,963 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:48:26,963 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().unaryPlus()
2021-03-11 10:48:26,963 [main:63] - replacement of 15 of type Int is (MyCollection2().iterator()).equals("tfmdg").compareTo(true)
2021-03-11 10:48:27,086 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:48:27,087 [main:66] - Compilation checking started
2021-03-11 10:48:27,576 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = ('볪').compareTo('⭊').inc() + (MyCollection3().iterator()).k.countOneBits()!!
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:48:27,584 [main:56] - replacing (el, Int?)
2021-03-11 10:48:27,584 [main:38] - replacing el Int?
2021-03-11 10:48:27,584 [main:42] - Getting value of type Int?
2021-03-11 10:48:27,704 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:27,706 [main:46] - GENERATED VALUE OF TYPE Int? = -146288425
2021-03-11 10:48:27,707 [main:49] - GENERATED IS CALL =false
2021-03-11 10:48:27,991 [main:55] - randomType = Map<MyCollection4, MyCollection4>
2021-03-11 10:48:27,992 [main:94] - GETTING Int? from Array<Int?>
2021-03-11 10:48:28,003 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:48:28,003 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:48:28,119 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:28,122 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5))?.size.and(1382945230)
2021-03-11 10:48:28,122 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:48:28,122 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:48:28,238 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:28,241 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:48:28,241 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5))?.get(-1904805930)?.dec()
2021-03-11 10:48:28,241 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:48:28,241 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:48:28,241 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5))?.size.countTrailingZeroBits()
2021-03-11 10:48:28,241 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61]]
2021-03-11 10:48:28,241 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5))?.size
2021-03-11 10:48:28,242 [main:101] - Case = [public inline fun <T> kotlin.Array<out T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e45404d]]
2021-03-11 10:48:28,242 [main:137] - GENERATING call of type public inline fun <T> kotlin.Array<out T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e45404d]
2021-03-11 10:48:28,358 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 10:48:28,361 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:48:28,363 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5))?.indexOfLast({a: T -> false})
2021-03-11 10:48:28,363 [main:101] - Case = [public fun <@kotlin.internal.OnlyInputTypes T> kotlin.Array<out T>.lastIndexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7f0e5754]]
2021-03-11 10:48:28,363 [main:137] - GENERATING call of type public fun <@kotlin.internal.OnlyInputTypes T> kotlin.Array<out T>.lastIndexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7f0e5754]
2021-03-11 10:48:28,514 [main:302] - generating value of type = T false depth = 0
2021-03-11 10:48:29,480 [main:43] - GENERATING CALL OF fun <T> minOf(a: Triple<Triple<Float?, Long, String>?, MyCollection2, Int?>, b: Triple<Triple<Float?, Long, String>?, MyCollection2, Int?>, comparator: kotlin.Comparator<Triple<Triple<Float?, Long, String>?, MyCollection2, Int?>>): T = TODO()
2021-03-11 10:48:29,483 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: Triple<Triple<Float?, Long, String>?, MyCollection2, Int?>, b: Triple<Triple<Float?, Long, String>?, MyCollection2, Int?>, comparator: kotlin.Comparator<Triple<Triple<Float?, Long, String>?, MyCollection2, Int?>>): T = TODO()
2021-03-11 10:48:29,749 [main:302] - generating value of type = Triple<Triple<Float?, Long, String>?, MyCollection2, Int?> false depth = 3
2021-03-11 10:48:29,874 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Triple<Float?, Long, String>?, second: MyCollection2, third: Int?): Triple<Triple<Float?, Long, String>?, MyCollection2, Int?> = TODO()
2021-03-11 10:48:29,878 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Triple<Float?, Long, String>?, second: MyCollection2, third: Int?): Triple<Triple<Float?, Long, String>?, MyCollection2, Int?> = TODO()
2021-03-11 10:48:29,998 [main:302] - generating value of type = Triple<Float?, Long, String> false depth = 6
2021-03-11 10:48:30,121 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Float?, second: Long, third: String): Triple<Float?, Long, String> = TODO()
2021-03-11 10:48:30,124 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Float?, second: Long, third: String): Triple<Float?, Long, String> = TODO()
2021-03-11 10:48:30,247 [main:302] - generating value of type = Float true depth = 9
2021-03-11 10:48:30,250 [main:302] - generating value of type = Long true depth = 9
2021-03-11 10:48:30,253 [main:302] - generating value of type = String true depth = 9
2021-03-11 10:48:30,256 [main:95] - GENERATED = Triple<Float?, Long, String>(0.46903056f, 6021526131049261340, "icgyx")
2021-03-11 10:48:30,256 [main:302] - generating value of type = MyCollection2 false depth = 6
2021-03-11 10:48:30,258 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}
2021-03-11 10:48:30,378 [main:194] - Type params = []
2021-03-11 10:48:30,495 [main:302] - generating value of type = Int true depth = 6
2021-03-11 10:48:30,497 [main:95] - GENERATED = Triple<Triple<Float?, Long, String>?, MyCollection2, Int?>(Triple<Float?, Long, String>(0.46903056f, 6021526131049261340, "icgyx"), MyCollection2(), -228041531)
2021-03-11 10:48:30,497 [main:302] - generating value of type = Triple<Triple<Float?, Long, String>?, MyCollection2, Int?> false depth = 3
2021-03-11 10:48:30,622 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Triple<Float?, Long, String>?, second: MyCollection2, third: Int?): Triple<Triple<Float?, Long, String>?, MyCollection2, Int?> = TODO()
2021-03-11 10:48:30,626 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Triple<Float?, Long, String>?, second: MyCollection2, third: Int?): Triple<Triple<Float?, Long, String>?, MyCollection2, Int?> = TODO()
2021-03-11 10:48:30,746 [main:302] - generating value of type = Triple<Float?, Long, String> false depth = 6
2021-03-11 10:48:30,871 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Float?, second: Long, third: String): Triple<Float?, Long, String> = TODO()
2021-03-11 10:48:30,874 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Float?, second: Long, third: String): Triple<Float?, Long, String> = TODO()
2021-03-11 10:48:30,995 [main:302] - generating value of type = Float true depth = 9
2021-03-11 10:48:30,997 [main:302] - generating value of type = Long true depth = 9
2021-03-11 10:48:31,000 [main:302] - generating value of type = String true depth = 9
2021-03-11 10:48:31,002 [main:95] - GENERATED = Triple<Float?, Long, String>(0.18084478f, 2530193430604845805, "qaklp")
2021-03-11 10:48:31,002 [main:302] - generating value of type = MyCollection2 false depth = 6
2021-03-11 10:48:31,004 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}
2021-03-11 10:48:31,122 [main:194] - Type params = []
2021-03-11 10:48:31,238 [main:302] - generating value of type = Int true depth = 6
2021-03-11 10:48:31,241 [main:95] - GENERATED = Triple<Triple<Float?, Long, String>?, MyCollection2, Int?>(Triple<Float?, Long, String>(0.18084478f, 2530193430604845805, "qaklp"), MyCollection2(), 26131986)
2021-03-11 10:48:31,241 [main:302] - generating value of type = Comparator<Triple<Triple<Float?, Long, String>?, MyCollection2, Int?>> false depth = 3
2021-03-11 10:48:31,370 [main:43] - GENERATING CALL OF fun <T> naturalOrder(): Comparator<Triple<Triple<Float?, Long, Strg>?, MyCollection2, Int?>> = TODO()
2021-03-11 10:48:31,373 [main:61] - WITHOUT TYPE PARAMS = fun <T> naturalOrder(): Comparator<Triple<Triple<Float?, Long, Strg>?, MyCollection2, Int?>> = TODO()
2021-03-11 10:48:31,543 [main:95] - GENERATED = naturalOrder<Triple<Triple<Float?, Long, String>?, MyCollection2, Int?>>()
2021-03-11 10:48:31,543 [main:95] - GENERATED = minOf<Triple<Triple<Float?, Long, String>?, MyCollection2, Int?>>(Triple<Triple<Float?, Long, String>?, MyCollection2, Int?>(Triple<Float?, Long, String>(0.46903056f, 6021526131049261340, "icgyx"), MyCollection2(), -228041531), Triple<Triple<Float?, Long, String>?, MyCollection2, Int?>(Triple<Float?, Long, String>(0.18084478f, 2530193430604845805, "qaklp"), MyCollection2(), 26131986), naturalOrder<Triple<Triple<Float?, Long, String>?, MyCollection2, Int?>>())
2021-03-11 10:48:31,544 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5))?.lastIndexOf(minOf<Triple<Triple<Float?, Long, String>?, MyCollection2, Int?>>(Triple<Triple<Float?, Long, String>?, MyCollection2, Int?>(Triple<Float?, Long, String>(0.46903056f, 6021526131049261340, "icgyx"), MyCollection2(), -228041531), Triple<Triple<Float?, Long, String>?, MyCollection2, Int?>(Triple<Float?, Long, String>(0.18084478f, 2530193430604845805, "qaklp"), MyCollection2(), 26131986), naturalOrder<Triple<Triple<Float?, Long, String>?, MyCollection2, Int?>>()))
2021-03-11 10:48:31,544 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:48:31,544 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:48:31,660 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:31,777 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:31,779 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5))?.size.coerceIn(-2034048365, -130776242)
2021-03-11 10:48:31,780 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:48:31,780 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:48:31,896 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:31,899 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5))?.size.rotateLeft(1864580998)
2021-03-11 10:48:31,899 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:48:31,899 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:48:32,014 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:32,017 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:48:32,132 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:32,135 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5))?.get(1713397499)?.rem(-55)
2021-03-11 10:48:32,135 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:48:32,135 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:48:32,250 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:32,254 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5))?.size.coerceAtMost(-476777360)
2021-03-11 10:48:32,254 [main:63] - replacement of el of type Int? is (arrayOfNulls<Int>(5))?.get(1713397499)?.rem(-55)
2021-03-11 10:48:32,369 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 10:48:32,376 [main:56] - replacing (('볪').compareTo('⭊').inc() + (MyCollection3().iterator()).k.countOneBits()!!, Int)
2021-03-11 10:48:32,378 [main:38] - replacing ('볪').compareTo('⭊').inc() + (MyCollection3().iterator()).k.countOneBits()!! Int
2021-03-11 10:48:32,378 [main:42] - Getting value of type Int
2021-03-11 10:48:32,495 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:32,498 [main:46] - GENERATED VALUE OF TYPE Int = 783716605
2021-03-11 10:48:32,498 [main:49] - GENERATED IS CALL =false
2021-03-11 10:48:32,629 [main:55] - randomType = Long
2021-03-11 10:48:32,744 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:48:32,793 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@7b6dee80]
2021-03-11 10:48:32,910 [main:302] - generating value of type = Float true depth = 0
2021-03-11 10:48:32,912 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@11d995f6]
2021-03-11 10:48:32,912 [main:66] - Generated call from random type = (-823968379311769247).div(0.40827715f).toBits()
2021-03-11 10:48:32,913 [main:94] - GETTING Int from MyIterator
2021-03-11 10:48:32,918 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:48:32,918 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:48:32,918 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.unaryPlus()
2021-03-11 10:48:32,918 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:48:32,918 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:48:33,037 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:33,039 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.and(-83411450)
2021-03-11 10:48:33,040 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:48:33,040 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:48:33,156 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:33,159 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.compareTo(-126)
2021-03-11 10:48:33,159 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:48:33,159 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:48:33,159 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.countLeadingZeroBits()
2021-03-11 10:48:33,159 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508]]
2021-03-11 10:48:33,159 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k
2021-03-11 10:48:33,160 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:48:33,160 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:48:33,278 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:33,281 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.minus(-53)
2021-03-11 10:48:33,281 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:48:33,281 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:48:33,406 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:33,408 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.times(79)
2021-03-11 10:48:33,408 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:48:33,408 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:48:33,524 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:33,640 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:33,643 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.coerceIn(-1679861394, 891958446)
2021-03-11 10:48:33,643 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:48:33,643 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:48:33,759 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:33,762 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.div(5)
2021-03-11 10:48:33,762 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:48:33,762 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:48:33,762 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.countOneBits()
2021-03-11 10:48:33,762 [main:63] - replacement of ('볪').compareTo('⭊').inc() + (MyCollection3().iterator()).k.countOneBits()!! of type Int is (-823968379311769247).div(0.40827715f).toBits()
2021-03-11 10:48:33,878 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:48:33,879 [main:66] - Compilation checking started
2021-03-11 10:48:34,359 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:48:34,367 [main:56] - replacing (0, Int)
2021-03-11 10:48:34,369 [main:38] - replacing 0 Int
2021-03-11 10:48:34,369 [main:42] - Getting value of type Int
2021-03-11 10:48:34,497 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:34,500 [main:46] - GENERATED VALUE OF TYPE Int = -2145217033
2021-03-11 10:48:34,500 [main:49] - GENERATED IS CALL =false
2021-03-11 10:48:34,648 [main:55] - randomType = ArrayList<Boolean>
2021-03-11 10:48:34,769 [main:302] - generating value of type = ArrayList<Boolean> false depth = 0
2021-03-11 10:48:34,938 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Boolean> = TODO()
2021-03-11 10:48:34,941 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Boolean> = TODO()
2021-03-11 10:48:35,063 [main:95] - GENERATED = arrayListOf<Boolean>()
2021-03-11 10:48:35,202 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:48:35,331 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:35,334 [main:66] - Generated call from random type = (arrayListOf<Boolean>()).modCount.div(89)
2021-03-11 10:48:35,334 [main:63] - replacement of 0 of type Int is (arrayListOf<Boolean>()).modCount.div(89)
2021-03-11 10:48:35,456 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:48:35,457 [main:66] - Compilation checking started
2021-03-11 10:48:35,820 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in 0..-1570764490) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = (arrayListOf<Boolean>()).modCount.div(89)
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:48:35,830 [main:56] - replacing (0..-1570764490, IntRange)
2021-03-11 10:48:35,831 [main:38] - replacing 0..-1570764490 IntRange
2021-03-11 10:48:35,832 [main:42] - Getting value of type IntRange
2021-03-11 10:48:35,952 [main:302] - generating value of type = IntRange false depth = 0
2021-03-11 10:48:36,079 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-11 10:48:36,082 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-11 10:48:36,467 [main:302] - generating value of type = Int true depth = 3
2021-03-11 10:48:36,469 [main:302] - generating value of type = Int true depth = 3
2021-03-11 10:48:36,472 [main:95] - GENERATED = IntRange(-1812542763, -1205003804)
2021-03-11 10:48:36,472 [main:46] - GENERATED VALUE OF TYPE IntRange = IntRange(-1812542763, -1205003804)
2021-03-11 10:48:36,472 [main:49] - GENERATED IS CALL =true
2021-03-11 10:48:36,482 [main:55] - randomType = MyCollection3
2021-03-11 10:48:36,596 [main:302] - generating value of type = MyCollection3 false depth = 0
2021-03-11 10:48:36,598 [main:112] - generating klass MyCollection3 text = class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}
2021-03-11 10:48:36,713 [main:194] - Type params = []
2021-03-11 10:48:36,832 [main:94] - GETTING IntRange from MyIterator
2021-03-11 10:48:36,839 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2e6b38c3]]
2021-03-11 10:48:36,839 [main:137] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2e6b38c3]
2021-03-11 10:48:36,956 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:36,959 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.until(30)
2021-03-11 10:48:36,959 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]]
2021-03-11 10:48:36,959 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:48:37,077 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:37,080 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.rangeTo(44)
2021-03-11 10:48:37,080 [main:63] - replacement of 0..-1570764490 of type IntRange is (MyCollection4().iterator()).k.rangeTo(44)
2021-03-11 10:48:37,194 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:48:37,195 [main:66] - Compilation checking started
2021-03-11 10:48:37,698 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in c4) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:48:37,710 [main:56] - replacing (c4, MyCollection2)
2021-03-11 10:48:37,713 [main:38] - replacing c4 MyCollection2
2021-03-11 10:48:37,713 [main:42] - Getting value of type MyCollection2
2021-03-11 10:48:37,849 [main:302] - generating value of type = MyCollection2 false depth = 0
2021-03-11 10:48:37,852 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}
2021-03-11 10:48:37,971 [main:194] - Type params = []
2021-03-11 10:48:38,091 [main:46] - GENERATED VALUE OF TYPE MyCollection2 = MyCollection2()
2021-03-11 10:48:38,091 [main:49] - GENERATED IS CALL =true
2021-03-11 10:48:38,231 [main:55] - randomType = Array<Long>
2021-03-11 10:48:38,348 [main:302] - generating value of type = Array<Long> false depth = 0
2021-03-11 10:48:38,505 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Long> = TODO()
2021-03-11 10:48:38,509 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Long> = TODO()
2021-03-11 10:48:38,630 [main:95] - GENERATED = emptyArray<Long>()
2021-03-11 10:48:38,648 [main:94] - GETTING MyCollection2 from Int
2021-03-11 10:48:38,689 [main:94] - GETTING MyCollection2 from Array<Int?>
2021-03-11 10:48:38,703 [main:94] - GETTING MyCollection2 from Iterator<Int>
2021-03-11 10:48:38,710 [main:94] - GETTING MyCollection2 from MyIterator
2021-03-11 10:48:38,715 [main:94] - GETTING MyCollection2 from Int
2021-03-11 10:48:38,716 [main:94] - GETTING MyCollection2 from Int
2021-03-11 10:48:38,717 [main:94] - GETTING MyCollection2 from Iterator<Int>
2021-03-11 10:48:38,717 [main:94] - GETTING MyCollection2 from MyIterator
2021-03-11 10:48:38,717 [main:63] - replacement of c4 of type MyCollection2 is MyCollection2()
2021-03-11 10:48:38,831 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 10:48:38,832 [main:66] - Compilation checking started
2021-03-11 10:48:39,317 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:48:39,326 [main:56] - replacing (15, Int)
2021-03-11 10:48:39,326 [main:38] - replacing 15 Int
2021-03-11 10:48:39,326 [main:42] - Getting value of type Int
2021-03-11 10:48:39,441 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:39,444 [main:46] - GENERATED VALUE OF TYPE Int = -1596295628
2021-03-11 10:48:39,444 [main:49] - GENERATED IS CALL =false
2021-03-11 10:48:39,454 [main:55] - randomType = MyCollection3
2021-03-11 10:48:39,572 [main:302] - generating value of type = MyCollection3 false depth = 0
2021-03-11 10:48:39,574 [main:112] - generating klass MyCollection3 text = class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}
2021-03-11 10:48:39,694 [main:194] - Type params = []
2021-03-11 10:48:39,818 [main:137] - GENERATING call of type public final operator fun iterator(): MyCollection3.MyIterator defined in MyCollection3[SimpleFunctionDescriptorImpl@2af70719]
2021-03-11 10:48:39,818 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@71439cc3]
2021-03-11 10:48:39,819 [main:66] - Generated call from random type = (MyCollection3()).iterator().next()!!
2021-03-11 10:48:39,819 [main:94] - GETTING Int from Int
2021-03-11 10:48:39,867 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:48:39,867 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:48:39,990 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:39,994 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:48:40,120 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:40,123 [main:105] - GENERATED CALL = (i).compareTo(746379004).rem(-10)
2021-03-11 10:48:40,123 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:48:40,123 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:48:40,243 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:40,245 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:48:40,245 [main:105] - GENERATED CALL = (i).compareTo(-1499851551).inc()
2021-03-11 10:48:40,245 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@140b0a8d]]
2021-03-11 10:48:40,245 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f]
2021-03-11 10:48:40,362 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:48:40,365 [main:105] - GENERATED CALL = (i).div(4398850461236989655).sign
2021-03-11 10:48:40,365 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431], @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@5959e353]]
2021-03-11 10:48:40,365 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431]
2021-03-11 10:48:40,484 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:48:40,486 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@5959e353]
2021-03-11 10:48:40,487 [main:105] - GENERATED CALL = (i).div(0.25883005958009164).roundToInt()
2021-03-11 10:48:40,487 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:48:40,487 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:48:40,605 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:40,608 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:48:40,608 [main:105] - GENERATED CALL = (i).compareTo(-1395825031).countTrailingZeroBits()
2021-03-11 10:48:40,608 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6cf21a44]]
2021-03-11 10:48:40,608 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:48:40,608 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6cf21a44]
2021-03-11 10:48:40,727 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:40,729 [main:105] - GENERATED CALL = (i).toByte().plus(11)
2021-03-11 10:48:40,729 [main:101] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@b2d8722], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@11d995f6]]
2021-03-11 10:48:40,729 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@b2d8722]
2021-03-11 10:48:40,847 [main:302] - generating value of type = Float true depth = 0
2021-03-11 10:48:40,850 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@11d995f6]
2021-03-11 10:48:40,850 [main:105] - GENERATED CALL = (i).div(0.22935581f).toBits()
2021-03-11 10:48:40,850 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6b8bfcfc]]
2021-03-11 10:48:40,850 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:48:40,850 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6b8bfcfc]
2021-03-11 10:48:40,969 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:40,973 [main:105] - GENERATED CALL = (i).toByte().compareTo(5)
2021-03-11 10:48:40,973 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1632fabd]]
2021-03-11 10:48:40,974 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:48:40,974 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1632fabd]
2021-03-11 10:48:40,974 [main:105] - GENERATED CALL = (i).toShort().countOneBits()
2021-03-11 10:48:40,974 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:48:40,974 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:48:41,115 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:41,117 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:48:41,117 [main:105] - GENERATED CALL = (i).compareTo(642175012).inv()
2021-03-11 10:48:41,117 [main:63] - replacement of 15 of type Int is (i).div(4398850461236989655).sign
2021-03-11 10:48:41,231 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:48:41,239 [main:56] - replacing (0, Int)
2021-03-11 10:48:41,240 [main:38] - replacing 0 Int
2021-03-11 10:48:41,241 [main:42] - Getting value of type Int
2021-03-11 10:48:41,358 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:41,360 [main:46] - GENERATED VALUE OF TYPE Int = -200750548
2021-03-11 10:48:41,360 [main:49] - GENERATED IS CALL =false
2021-03-11 10:48:41,503 [main:55] - randomType = Sequence<MyCollection2>
2021-03-11 10:48:41,503 [main:94] - GETTING Int from Int
2021-03-11 10:48:41,539 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3c2cc2a6]]
2021-03-11 10:48:41,539 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:48:41,539 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3c2cc2a6]
2021-03-11 10:48:41,539 [main:105] - GENERATED CALL = (sum).toShort().countLeadingZeroBits()
2021-03-11 10:48:41,539 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:48:41,539 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]
2021-03-11 10:48:41,655 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:48:41,771 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:48:41,774 [main:105] - GENERATED CALL = (sum).equals(null).compareTo(true)
2021-03-11 10:48:41,774 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:48:41,774 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:48:41,774 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:48:41,774 [main:105] - GENERATED CALL = (sum).toInt().countLeadingZeroBits()
2021-03-11 10:48:41,774 [main:101] - Case = [@kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:48:41,774 [main:105] - GENERATED CALL = (sum).sign
2021-03-11 10:48:41,774 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3f4ea447]]
2021-03-11 10:48:41,774 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:48:41,889 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:41,892 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3f4ea447]
2021-03-11 10:48:41,892 [main:105] - GENERATED CALL = (sum).rangeTo(-20).random()
2021-03-11 10:48:41,892 [main:101] - Case = [public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:48:41,892 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:48:41,892 [main:105] - GENERATED CALL = (sum).inc()
2021-03-11 10:48:41,892 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62c19a2]]
2021-03-11 10:48:41,892 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:48:41,892 [main:137] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62c19a2]
2021-03-11 10:48:41,892 [main:105] - GENERATED CALL = (sum).toChar().digitToInt()
2021-03-11 10:48:41,892 [main:101] - Case = [public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:48:41,892 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:48:41,893 [main:105] - GENERATED CALL = (sum).dec()
2021-03-11 10:48:41,893 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:48:41,893 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:48:41,893 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:48:41,893 [main:105] - GENERATED CALL = (sum).toInt().inv()
2021-03-11 10:48:41,893 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:48:41,893 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:48:41,893 [main:105] - GENERATED CALL = (sum).toInt().sign
2021-03-11 10:48:41,893 [main:63] - replacement of 0 of type Int is (sum).toInt().sign
2021-03-11 10:48:42,048 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:48:42,049 [main:66] - Compilation checking started
2021-03-11 10:48:42,363 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = (sum).toInt().sign
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection1().iterator()).next().unaryMinus() > 0
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:48:42,372 [main:56] - replacing ((MyCollection1().iterator()).next().unaryMinus() > 0, Boolean)
2021-03-11 10:48:42,372 [main:38] - replacing (MyCollection1().iterator()).next().unaryMinus() > 0 Boolean
2021-03-11 10:48:42,372 [main:42] - Getting value of type Boolean
2021-03-11 10:48:42,492 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:48:42,494 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:48:42,494 [main:49] - GENERATED IS CALL =false
2021-03-11 10:48:43,021 [main:55] - randomType = Sequence<UShort?>?
2021-03-11 10:48:43,022 [main:94] - GETTING Boolean from MyIterator
2021-03-11 10:48:43,027 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyCollection4.MyIterator[DeserializedSimpleFunctionDescriptor@31dc1f9e]]
2021-03-11 10:48:43,027 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyCollection4.MyIterator[DeserializedSimpleFunctionDescriptor@31dc1f9e]
2021-03-11 10:48:43,145 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:48:43,145 [main:105] - GENERATED CALL = (MyCollection4().iterator()).equals("kpgja")
2021-03-11 10:48:43,145 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@149259da], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@35500bca]]
2021-03-11 10:48:43,145 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@149259da]
2021-03-11 10:48:43,145 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@35500bca]
2021-03-11 10:48:43,261 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:48:43,261 [main:105] - GENERATED CALL = (MyCollection4().iterator()).hasNext().equals("ifzqa")
2021-03-11 10:48:43,261 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@149259da], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@cf10153]]
2021-03-11 10:48:43,261 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@149259da]
2021-03-11 10:48:43,261 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@cf10153]
2021-03-11 10:48:43,261 [main:105] - GENERATED CALL = (MyCollection4().iterator()).hasNext().not()
2021-03-11 10:48:43,261 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@149259da], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fb50dd8]]
2021-03-11 10:48:43,261 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@149259da]
2021-03-11 10:48:43,261 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fb50dd8]
2021-03-11 10:48:43,376 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:48:43,379 [main:105] - GENERATED CALL = (MyCollection4().iterator()).hasNext().xor(true)
2021-03-11 10:48:43,379 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@149259da], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6d9d9a5]]
2021-03-11 10:48:43,379 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@149259da]
2021-03-11 10:48:43,379 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6d9d9a5]
2021-03-11 10:48:43,498 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:48:43,501 [main:105] - GENERATED CALL = (MyCollection4().iterator()).hasNext().and(false)
2021-03-11 10:48:43,501 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@149259da], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@11eceb90]]
2021-03-11 10:48:43,501 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@149259da]
2021-03-11 10:48:43,501 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@11eceb90]
2021-03-11 10:48:43,619 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:48:43,622 [main:105] - GENERATED CALL = (MyCollection4().iterator()).hasNext().or(false)
2021-03-11 10:48:43,622 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]]
2021-03-11 10:48:43,622 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]
2021-03-11 10:48:43,738 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:48:43,738 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.equals("ajzic")
2021-03-11 10:48:43,738 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@149259da]]
2021-03-11 10:48:43,738 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@149259da]
2021-03-11 10:48:43,739 [main:105] - GENERATED CALL = (MyCollection4().iterator()).hasNext()
2021-03-11 10:48:43,739 [main:63] - replacement of (MyCollection1().iterator()).next().unaryMinus() > 0 of type Boolean is (MyCollection4().iterator()).hasNext().and(false)
2021-03-11 10:48:43,854 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:48:43,854 [main:66] - Compilation checking started
2021-03-11 10:48:44,336 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = sum + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:48:44,343 [main:56] - replacing (sum, Int)
2021-03-11 10:48:44,345 [main:38] - replacing sum Int
2021-03-11 10:48:44,345 [main:42] - Getting value of type Int
2021-03-11 10:48:44,464 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:44,466 [main:46] - GENERATED VALUE OF TYPE Int = -1727298821
2021-03-11 10:48:44,467 [main:49] - GENERATED IS CALL =false
2021-03-11 10:48:44,477 [main:55] - randomType = MyCollection2
2021-03-11 10:48:44,596 [main:302] - generating value of type = MyCollection2 false depth = 0
2021-03-11 10:48:44,598 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}
2021-03-11 10:48:44,713 [main:194] - Type params = []
2021-03-11 10:48:44,843 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.lastOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1f129187]
2021-03-11 10:48:44,843 [main:66] - Generated call from random type = (MyCollection2()).lastOrNull()!!
2021-03-11 10:48:44,844 [main:94] - GETTING Int from Int
2021-03-11 10:48:44,879 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a8376bf]]
2021-03-11 10:48:44,879 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97]
2021-03-11 10:48:44,879 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a8376bf]
2021-03-11 10:48:44,880 [main:105] - GENERATED CALL = (i).toLong().countOneBits()
2021-03-11 10:48:44,880 [main:101] - Case = [public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:48:44,880 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:48:44,997 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:45,000 [main:105] - GENERATED CALL = (i).ushr(1567670508)
2021-03-11 10:48:45,000 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:48:45,000 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:48:45,000 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:48:45,116 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:45,118 [main:105] - GENERATED CALL = (i).toInt().shr(-522025915)
2021-03-11 10:48:45,118 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:48:45,118 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:48:45,119 [main:105] - GENERATED CALL = (i).toInt().absoluteValue
2021-03-11 10:48:45,119 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a8376bf]]
2021-03-11 10:48:45,119 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f]
2021-03-11 10:48:45,232 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:48:45,235 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a8376bf]
2021-03-11 10:48:45,235 [main:105] - GENERATED CALL = (i).div(-5711007884814129963).countOneBits()
2021-03-11 10:48:45,235 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@22a1cf7f]]
2021-03-11 10:48:45,235 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:48:45,235 [main:137] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@22a1cf7f]
2021-03-11 10:48:45,235 [main:105] - GENERATED CALL = (i).toChar().toInt()
2021-03-11 10:48:45,235 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5775f993]]
2021-03-11 10:48:45,235 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:48:45,236 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5775f993]
2021-03-11 10:48:45,364 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:48:45,367 [main:105] - GENERATED CALL = (i).toChar().compareTo('ᙞ')
2021-03-11 10:48:45,367 [main:101] - Case = [public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:48:45,367 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:48:45,485 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:45,488 [main:105] - GENERATED CALL = (i).shr(-777624980)
2021-03-11 10:48:45,488 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1632fabd]]
2021-03-11 10:48:45,488 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:48:45,488 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1632fabd]
2021-03-11 10:48:45,488 [main:105] - GENERATED CALL = (i).toShort().countOneBits()
2021-03-11 10:48:45,488 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:48:45,488 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:48:45,488 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:48:45,635 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:45,638 [main:105] - GENERATED CALL = (i).toInt().minus(93)
2021-03-11 10:48:45,638 [main:63] - replacement of sum of type Int is (i).shr(-777624980)
2021-03-11 10:48:45,753 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:48:45,753 [main:66] - Compilation checking started
2021-03-11 10:48:46,282 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if(sum != (MyCollection3()).iterator().k) return "b failed"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:48:46,293 [main:56] - replacing (sum != (MyCollection3()).iterator().k, Boolean)
2021-03-11 10:48:46,296 [main:38] - replacing sum != (MyCollection3()).iterator().k Boolean
2021-03-11 10:48:46,296 [main:42] - Getting value of type Boolean
2021-03-11 10:48:46,429 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:48:46,431 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:48:46,431 [main:49] - GENERATED IS CALL =false
2021-03-11 10:48:46,575 [main:55] - randomType = UShort
2021-03-11 10:48:46,697 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 10:48:46,737 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@2fe7b781]
2021-03-11 10:48:46,737 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@15369ceb]
2021-03-11 10:48:46,860 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:48:46,860 [main:66] - Generated call from random type = (10296.toUShort()).toShort().equals("foyiq")
2021-03-11 10:48:46,861 [main:94] - GETTING Boolean from Iterator<Int>
2021-03-11 10:48:46,870 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@11eceb90]]
2021-03-11 10:48:46,870 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09]
2021-03-11 10:48:46,998 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:48:46,998 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@11eceb90]
2021-03-11 10:48:47,125 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:48:47,128 [main:105] - GENERATED CALL = (MyCollection2().iterator()).equals("iergg").or(true)
2021-03-11 10:48:47,129 [main:101] - Case = [public abstract operator fun hasNext(): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@470d26e0]]
2021-03-11 10:48:47,129 [main:137] - GENERATING call of type public abstract operator fun hasNext(): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@470d26e0]
2021-03-11 10:48:47,129 [main:105] - GENERATED CALL = (MyCollection2().iterator()).hasNext()
2021-03-11 10:48:47,129 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]]
2021-03-11 10:48:47,129 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:48:47,129 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]
2021-03-11 10:48:47,254 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().equals(null)
2021-03-11 10:48:47,254 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09]]
2021-03-11 10:48:47,254 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09]
2021-03-11 10:48:47,378 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:48:47,378 [main:105] - GENERATED CALL = (MyCollection2().iterator()).equals("wpnnz")
2021-03-11 10:48:47,378 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6d9d9a5]]
2021-03-11 10:48:47,378 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09]
2021-03-11 10:48:47,510 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:48:47,510 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6d9d9a5]
2021-03-11 10:48:47,646 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:48:47,650 [main:105] - GENERATED CALL = (MyCollection2().iterator()).equals("hfldw").and(true)
2021-03-11 10:48:47,650 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@cf10153]]
2021-03-11 10:48:47,650 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09]
2021-03-11 10:48:47,818 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:48:47,818 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@cf10153]
2021-03-11 10:48:47,818 [main:105] - GENERATED CALL = (MyCollection2().iterator()).equals("xkmkb").not()
2021-03-11 10:48:47,819 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@35500bca]]
2021-03-11 10:48:47,819 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09]
2021-03-11 10:48:47,966 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:48:47,967 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@35500bca]
2021-03-11 10:48:48,115 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:48:48,115 [main:105] - GENERATED CALL = (MyCollection2().iterator()).equals("ckqim").equals("sshra")
2021-03-11 10:48:48,115 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fb50dd8]]
2021-03-11 10:48:48,115 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09]
2021-03-11 10:48:48,241 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:48:48,241 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fb50dd8]
2021-03-11 10:48:48,378 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:48:48,381 [main:105] - GENERATED CALL = (MyCollection2().iterator()).equals("utqpl").xor(false)
2021-03-11 10:48:48,381 [main:63] - replacement of sum != (MyCollection3()).iterator().k of type Boolean is (MyCollection2().iterator()).next().equals(null)
2021-03-11 10:48:48,542 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:48:48,543 [main:66] - Compilation checking started
2021-03-11 10:48:49,088 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "b failed"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:48:49,097 [main:56] - replacing (sum, Int)
2021-03-11 10:48:49,099 [main:38] - replacing sum Int
2021-03-11 10:48:49,099 [main:42] - Getting value of type Int
2021-03-11 10:48:49,233 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:49,236 [main:46] - GENERATED VALUE OF TYPE Int = 1748432789
2021-03-11 10:48:49,236 [main:49] - GENERATED IS CALL =false
2021-03-11 10:48:49,695 [main:55] - randomType = LinkedHashMap<MyCollection1, ULong?>
2021-03-11 10:48:49,816 [main:302] - generating value of type = LinkedHashMap<MyCollection1, ULong?> false depth = 0
2021-03-11 10:48:49,935 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<MyCollection1, ULong?>): LkedHashMap<MyCollection1, ULong?> = TODO()
2021-03-11 10:48:49,939 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<MyCollection1, ULong?>): LkedHashMap<MyCollection1, ULong?> = TODO()
2021-03-11 10:48:50,064 [main:302] - generating value of type = Pair<MyCollection1, ULong?> false depth = 3
2021-03-11 10:48:50,190 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: MyCollection1, second: ULong?): Pair<MyCollection1, ULong?> = TODO()
2021-03-11 10:48:50,193 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: MyCollection1, second: ULong?): Pair<MyCollection1, ULong?> = TODO()
2021-03-11 10:48:50,322 [main:302] - generating value of type = MyCollection1 false depth = 6
2021-03-11 10:48:50,324 [main:112] - generating klass MyCollection1 text = class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}
2021-03-11 10:48:50,450 [main:194] - Type params = []
2021-03-11 10:48:50,567 [main:302] - generating value of type = ULong true depth = 6
2021-03-11 10:48:50,570 [main:95] - GENERATED = Pair<MyCollection1, ULong?>(MyCollection1(), 1732343775369793205.toULong())
2021-03-11 10:48:50,570 [main:95] - GENERATED = linkedMapOf<MyCollection1, ULong?>(Pair<MyCollection1, ULong?>(MyCollection1(), 1732343775369793205.toULong()))
2021-03-11 10:48:50,690 [main:66] - Generated call from random type = (linkedMapOf<MyCollection1, ULong?>(Pair<MyCollection1, ULong?>(MyCollection1(), 1732343775369793205.toULong()))).size.sign
2021-03-11 10:48:50,691 [main:94] - GETTING Int from Array<Int?>
2021-03-11 10:48:50,701 [main:101] - Case = [public inline fun <T> kotlin.Array<out T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e45404d]]
2021-03-11 10:48:50,702 [main:137] - GENERATING call of type public inline fun <T> kotlin.Array<out T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e45404d]
2021-03-11 10:48:50,820 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 10:48:50,823 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:48:50,825 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).indexOfLast({a: T -> false})
2021-03-11 10:48:50,825 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:48:50,825 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:48:50,937 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:50,940 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:48:50,940 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-1153714645)?.dec()
2021-03-11 10:48:50,940 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:48:50,940 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:48:51,067 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:51,071 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:48:51,071 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(1037981013)?.inv()
2021-03-11 10:48:51,072 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:48:51,072 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:48:51,072 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.countTrailingZeroBits()
2021-03-11 10:48:51,072 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:48:51,072 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:48:51,185 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:51,187 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:48:51,310 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:51,312 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-1426230796)?.or(-523469033)
2021-03-11 10:48:51,312 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:48:51,312 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:48:51,432 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:51,434 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:48:51,553 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:51,555 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(881353683)?.div(-20)
2021-03-11 10:48:51,555 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61]]
2021-03-11 10:48:51,555 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size
2021-03-11 10:48:51,556 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:48:51,556 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:48:51,667 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:51,670 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:48:51,785 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:51,788 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(1482348095)?.and(890292211)
2021-03-11 10:48:51,788 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:48:51,788 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:48:51,902 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:51,905 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:48:52,028 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:52,030 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(1723151796)?.compareTo(-30)
2021-03-11 10:48:52,030 [main:101] - Case = [public fun <@kotlin.internal.OnlyInputTypes T> kotlin.Array<out T>.lastIndexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7f0e5754]]
2021-03-11 10:48:52,030 [main:137] - GENERATING call of type public fun <@kotlin.internal.OnlyInputTypes T> kotlin.Array<out T>.lastIndexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7f0e5754]
2021-03-11 10:48:52,144 [main:302] - generating value of type = T false depth = 0
2021-03-11 10:48:52,401 [main:43] - GENERATING CALL OF fun <T> minOf(a: UShort, b: UShort, comparator: kotlin.Comparator<UShort>): T = TODO()
2021-03-11 10:48:52,405 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: UShort, b: UShort, comparator: kotlin.Comparator<UShort>): T = TODO()
2021-03-11 10:48:52,663 [main:302] - generating value of type = UShort true depth = 3
2021-03-11 10:48:52,665 [main:302] - generating value of type = UShort true depth = 3
2021-03-11 10:48:52,668 [main:302] - generating value of type = Comparator<UShort> false depth = 3
2021-03-11 10:48:52,794 [main:43] - GENERATING CALL OF fun <T> compareBy(selectors: Function1<UShort, Comparable<*>?>): Comparator<UShort> = TODO()
2021-03-11 10:48:52,798 [main:61] - WITHOUT TYPE PARAMS = fun <T> compareBy(selectors: Function1<UShort, Comparable<*>?>): Comparator<UShort> = TODO()
2021-03-11 10:48:52,923 [main:302] - generating value of type = Function1<UShort, Comparable<*>?> false depth = 6
2021-03-11 10:48:52,926 [main:302] - generating value of type = Comparable<*> false depth = 7
2021-03-11 10:48:52,933 [main:95] - GENERATED = compareBy<UShort>({a: UShort -> 2.toUByte()})
2021-03-11 10:48:52,934 [main:95] - GENERATED = minOf<UShort>(18478.toUShort(), 22176.toUShort(), compareBy<UShort>({a: UShort -> 2.toUByte()}))
2021-03-11 10:48:52,934 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).lastIndexOf(minOf<UShort>(18478.toUShort(), 22176.toUShort(), compareBy<UShort>({a: UShort -> 2.toUByte()})))
2021-03-11 10:48:52,934 [main:63] - replacement of sum of type Int is (arrayOfNulls<Int>(5)).size.countTrailingZeroBits()
2021-03-11 10:48:53,121 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:48:53,121 [main:66] - Compilation checking started
2021-03-11 10:48:53,449 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        (arrayOfNulls<Int>(5)).size.countTrailingZeroBits() = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "b failed"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:48:53,458 [main:56] - replacing (MyIterator(), MyIterator)
2021-03-11 10:48:53,458 [main:38] - replacing MyIterator() MyIterator
2021-03-11 10:48:53,458 [main:42] - Getting value of type MyIterator
2021-03-11 10:48:53,596 [main:302] - generating value of type = MyIterator false depth = 0
2021-03-11 10:48:53,599 [main:112] - generating klass MyIterator text = class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
2021-03-11 10:48:53,599 [main:46] - GENERATED VALUE OF TYPE MyIterator = 
2021-03-11 10:48:53,744 [main:55] - randomType = Byte?
2021-03-11 10:48:53,875 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:48:53,922 [main:94] - GETTING MyIterator from Iterator<Int>
2021-03-11 10:48:53,930 [main:94] - GETTING MyIterator from Int
2021-03-11 10:48:53,984 [main:94] - GETTING MyIterator from Iterator<Int>
2021-03-11 10:48:53,986 [main:94] - GETTING MyIterator from Int
2021-03-11 10:48:53,986 [main:94] - GETTING MyIterator from MyIterator
2021-03-11 10:48:53,993 [main:63] - replacement of MyIterator() of type MyIterator is MyCollection3().iterator()
2021-03-11 10:48:54,121 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:48:54,121 [main:66] - Compilation checking started
2021-03-11 10:48:54,466 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       a[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "b failed"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyCollection3().iterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:48:54,475 [main:56] - replacing (a, Array<Int>)
2021-03-11 10:48:54,477 [main:38] - replacing a Array<Int>
2021-03-11 10:48:54,477 [main:42] - Getting value of type Array<Int>
2021-03-11 10:48:54,597 [main:302] - generating value of type = Array<Int> false depth = 0
2021-03-11 10:48:54,728 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Int): Array<Int> = TODO()
2021-03-11 10:48:54,733 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Int): Array<Int> = TODO()
2021-03-11 10:48:55,182 [main:302] - generating value of type = Int true depth = 3
2021-03-11 10:48:55,185 [main:302] - generating value of type = Function1<Int, Int> false depth = 3
2021-03-11 10:48:55,188 [main:302] - generating value of type = Int true depth = 4
2021-03-11 10:48:55,190 [main:95] - GENERATED = Array<Int>(-1704647750, {a: Int -> 2082301238})
2021-03-11 10:48:55,191 [main:46] - GENERATED VALUE OF TYPE Array<Int> = Array<Int>(-1704647750, {a: Int -> 2082301238})
2021-03-11 10:48:55,191 [main:49] - GENERATED IS CALL =true
2021-03-11 10:48:55,332 [main:55] - randomType = Collection<UInt>
2021-03-11 10:48:55,334 [main:94] - GETTING Array<Int> from Int
2021-03-11 10:48:55,374 [main:94] - GETTING Array<Int> from MyIterator
2021-03-11 10:48:55,379 [main:94] - GETTING Array<Int> from Int
2021-03-11 10:48:55,380 [main:94] - GETTING Array<Int> from Array<Int?>
2021-03-11 10:48:55,394 [main:63] - replacement of a of type Array<Int> is arrayOfNulls<Int>(-27459892)
2021-03-11 10:48:55,511 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 10:48:55,511 [main:66] - Compilation checking started
2021-03-11 10:48:55,973 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "b failed"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:48:55,982 [main:56] - replacing ((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true), Boolean)
2021-03-11 10:48:55,985 [main:38] - replacing (MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true) Boolean
2021-03-11 10:48:55,985 [main:42] - Getting value of type Boolean
2021-03-11 10:48:56,105 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:48:56,107 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:48:56,107 [main:49] - GENERATED IS CALL =false
2021-03-11 10:48:56,241 [main:55] - randomType = UByte
2021-03-11 10:48:56,363 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:48:56,400 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UByte): kotlin.ranges.UIntRange defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@20a5e061]
2021-03-11 10:48:56,514 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:48:56,517 [main:137] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@25adf649]
2021-03-11 10:48:56,517 [main:66] - Generated call from random type = (74.toUByte()).rangeTo(37.toUByte()).isEmpty()
2021-03-11 10:48:56,518 [main:94] - GETTING Boolean from Int
2021-03-11 10:48:56,560 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e3ce7a5]]
2021-03-11 10:48:56,561 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:48:56,561 [main:137] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e3ce7a5]
2021-03-11 10:48:56,561 [main:105] - GENERATED CALL = (el ?: 0).toChar().isWhitespace()
2021-03-11 10:48:56,561 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@2d87d802]]
2021-03-11 10:48:56,561 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:48:56,561 [main:137] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@2d87d802]
2021-03-11 10:48:56,561 [main:105] - GENERATED CALL = (el ?: 0).toFloat().isFinite()
2021-03-11 10:48:56,561 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2b624a24]]
2021-03-11 10:48:56,561 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:48:56,561 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2b624a24]
2021-03-11 10:48:56,678 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:48:56,678 [main:105] - GENERATED CALL = (el ?: 0).toByte().equals("kkuyg")
2021-03-11 10:48:56,678 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cb2732a]]
2021-03-11 10:48:56,679 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:48:56,679 [main:137] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cb2732a]
2021-03-11 10:48:56,679 [main:105] - GENERATED CALL = (el ?: 0).toChar().isLetterOrDigit()
2021-03-11 10:48:56,679 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6fdca6c8]]
2021-03-11 10:48:56,679 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431]
2021-03-11 10:48:56,796 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:48:56,798 [main:137] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6fdca6c8]
2021-03-11 10:48:56,799 [main:105] - GENERATED CALL = (el ?: 0).div(0.9864803522105481).isInfinite()
2021-03-11 10:48:56,799 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d56d59b]]
2021-03-11 10:48:56,799 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:48:56,799 [main:137] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d56d59b]
2021-03-11 10:48:56,952 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:48:57,073 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:48:57,075 [main:105] - GENERATED CALL = (el ?: 0).toChar().equals('r', false)
2021-03-11 10:48:57,076 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12f06cb], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@197346a8]]
2021-03-11 10:48:57,076 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12f06cb]
2021-03-11 10:48:57,076 [main:137] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@197346a8]
2021-03-11 10:48:57,076 [main:105] - GENERATED CALL = (el ?: 0).toDouble().isNaN()
2021-03-11 10:48:57,076 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6d9d9a5]]
2021-03-11 10:48:57,076 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]
2021-03-11 10:48:57,192 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:48:57,192 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6d9d9a5]
2021-03-11 10:48:57,308 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:48:57,311 [main:105] - GENERATED CALL = (el ?: 0).equals("aupza").and(false)
2021-03-11 10:48:57,311 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fb50dd8]]
2021-03-11 10:48:57,311 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]
2021-03-11 10:48:57,428 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:48:57,428 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fb50dd8]
2021-03-11 10:48:57,542 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:48:57,544 [main:105] - GENERATED CALL = (el ?: 0).equals("xszyt").xor(true)
2021-03-11 10:48:57,544 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@408a855b]]
2021-03-11 10:48:57,544 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:48:57,544 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@408a855b]
2021-03-11 10:48:57,660 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:48:57,661 [main:105] - GENERATED CALL = (el ?: 0).toFloat().equals("gazmk")
2021-03-11 10:48:57,661 [main:63] - replacement of (MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true) of type Boolean is (el ?: 0).toChar().equals('r', false)
2021-03-11 10:48:57,776 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:48:57,777 [main:66] - Compilation checking started
2021-03-11 10:48:58,100 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((el ?: 0).toChar().equals('r', false)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "b failed"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:48:58,107 [main:56] - replacing ("b failed", String)
2021-03-11 10:48:58,109 [main:38] - replacing "b failed" String
2021-03-11 10:48:58,109 [main:42] - Getting value of type String
2021-03-11 10:48:58,225 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:48:58,227 [main:46] - GENERATED VALUE OF TYPE String = "ngeaj"
2021-03-11 10:48:58,227 [main:49] - GENERATED IS CALL =false
2021-03-11 10:48:58,236 [main:55] - randomType = MyCollection3
2021-03-11 10:48:58,357 [main:302] - generating value of type = MyCollection3 false depth = 0
2021-03-11 10:48:58,359 [main:112] - generating klass MyCollection3 text = class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}
2021-03-11 10:48:58,475 [main:194] - Type params = []
2021-03-11 10:48:58,601 [main:94] - GETTING String from MyIterator
2021-03-11 10:48:58,610 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]]
2021-03-11 10:48:58,610 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]
2021-03-11 10:48:58,726 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:58,729 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.toString(-778232994)
2021-03-11 10:48:58,729 [main:63] - replacement of "b failed" of type String is "ngeaj"
2021-03-11 10:48:58,845 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 10:48:58,845 [main:66] - Compilation checking started
2021-03-11 10:48:59,304 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:48:59,315 [main:56] - replacing (sum, Int)
2021-03-11 10:48:59,316 [main:38] - replacing sum Int
2021-03-11 10:48:59,316 [main:42] - Getting value of type Int
2021-03-11 10:48:59,437 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:48:59,439 [main:46] - GENERATED VALUE OF TYPE Int = -468577581
2021-03-11 10:48:59,439 [main:49] - GENERATED IS CALL =false
2021-03-11 10:48:59,705 [main:55] - randomType = UShort?
2021-03-11 10:48:59,820 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 10:48:59,855 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@19ce537]
2021-03-11 10:48:59,856 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UByte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@71d93d18]
2021-03-11 10:48:59,856 [main:66] - Generated call from random type = (282.toUShort())?.toUByte().countTrailingZeroBits()
2021-03-11 10:48:59,856 [main:63] - replacement of sum of type Int is (282.toUShort())?.toUByte().countTrailingZeroBits()
2021-03-11 10:48:59,973 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:48:59,974 [main:66] - Compilation checking started
2021-03-11 10:49:00,294 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        (282.toUShort())?.toUByte().countTrailingZeroBits() = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:00,302 [main:56] - replacing (sum, Int)
2021-03-11 10:49:00,303 [main:38] - replacing sum Int
2021-03-11 10:49:00,303 [main:42] - Getting value of type Int
2021-03-11 10:49:00,422 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:00,424 [main:46] - GENERATED VALUE OF TYPE Int = 1262569998
2021-03-11 10:49:00,424 [main:49] - GENERATED IS CALL =false
2021-03-11 10:49:01,019 [main:55] - randomType = List<Function2<Boolean, Float?, MyCollection3?>>
2021-03-11 10:49:01,020 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:49:01,026 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:49:01,026 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:01,026 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:49:01,026 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().inv()
2021-03-11 10:49:01,026 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:49:01,026 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:01,026 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:49:01,142 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:01,145 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().div(-35)
2021-03-11 10:49:01,145 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:49:01,145 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09]
2021-03-11 10:49:01,260 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:49:01,260 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:49:01,377 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:49:01,380 [main:105] - GENERATED CALL = (MyCollection1().iterator()).equals("vxhgj").compareTo(true)
2021-03-11 10:49:01,380 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:49:01,380 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:01,380 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:49:01,497 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:01,500 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().xor(1584250490)
2021-03-11 10:49:01,500 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:49:01,500 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:01,500 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:49:01,500 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().inc()
2021-03-11 10:49:01,500 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:49:01,500 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:01,500 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:49:01,617 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:01,620 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().rotateRight(1967335779)
2021-03-11 10:49:01,620 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:49:01,620 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:01,620 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:49:01,739 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:01,858 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:01,861 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().coerceIn(-275264860, -17902613)
2021-03-11 10:49:01,861 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:49:01,861 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:01,861 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:49:01,979 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:01,981 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().rem(-53)
2021-03-11 10:49:01,982 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:49:01,982 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:01,982 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:49:02,100 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:02,102 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().ushr(-773526900)
2021-03-11 10:49:02,103 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:49:02,103 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:02,103 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().sign
2021-03-11 10:49:02,103 [main:63] - replacement of sum of type Int is (MyCollection1().iterator()).next().sign
2021-03-11 10:49:02,220 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:49:02,221 [main:66] - Compilation checking started
2021-03-11 10:49:02,541 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in c2) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (MyCollection1().iterator()).next().sign + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:02,549 [main:56] - replacing (c2, MyCollection1)
2021-03-11 10:49:02,551 [main:38] - replacing c2 MyCollection1
2021-03-11 10:49:02,551 [main:42] - Getting value of type MyCollection1
2021-03-11 10:49:02,677 [main:302] - generating value of type = MyCollection1 false depth = 0
2021-03-11 10:49:02,680 [main:112] - generating klass MyCollection1 text = class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}
2021-03-11 10:49:02,794 [main:194] - Type params = []
2021-03-11 10:49:02,910 [main:46] - GENERATED VALUE OF TYPE MyCollection1 = MyCollection1()
2021-03-11 10:49:02,910 [main:49] - GENERATED IS CALL =true
2021-03-11 10:49:03,049 [main:55] - randomType = Long?
2021-03-11 10:49:03,180 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:49:03,224 [main:94] - GETTING MyCollection1 from Int
2021-03-11 10:49:03,263 [main:94] - GETTING MyCollection1 from Iterator<Int>
2021-03-11 10:49:03,269 [main:94] - GETTING MyCollection1 from Int
2021-03-11 10:49:03,269 [main:94] - GETTING MyCollection1 from MyIterator
2021-03-11 10:49:03,280 [main:94] - GETTING MyCollection1 from Array<Int?>
2021-03-11 10:49:03,296 [main:94] - GETTING MyCollection1 from Iterator<Int>
2021-03-11 10:49:03,297 [main:94] - GETTING MyCollection1 from Int
2021-03-11 10:49:03,297 [main:94] - GETTING MyCollection1 from MyIterator
2021-03-11 10:49:03,297 [main:63] - replacement of c2 of type MyCollection1 is MyCollection1()
2021-03-11 10:49:03,414 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 10:49:03,414 [main:66] - Compilation checking started
2021-03-11 10:49:03,875 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:03,887 [main:56] - replacing (sum, Int)
2021-03-11 10:49:03,890 [main:38] - replacing sum Int
2021-03-11 10:49:03,890 [main:42] - Getting value of type Int
2021-03-11 10:49:04,010 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:04,012 [main:46] - GENERATED VALUE OF TYPE Int = 1306899697
2021-03-11 10:49:04,012 [main:49] - GENERATED IS CALL =false
2021-03-11 10:49:04,587 [main:55] - randomType = Function2<UInt, UByte, LinkedHashSet<UShort>>
2021-03-11 10:49:04,588 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:49:04,594 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:49:04,594 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:49:04,594 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:49:04,594 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().countTrailingZeroBits()
2021-03-11 10:49:04,594 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:49:04,595 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:49:04,595 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:49:04,595 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().inc()
2021-03-11 10:49:04,595 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:49:04,595 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:49:04,595 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:49:04,709 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:04,712 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().or(-628522893)
2021-03-11 10:49:04,712 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]]
2021-03-11 10:49:04,712 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:49:04,712 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next()
2021-03-11 10:49:04,712 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:49:04,712 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:49:04,712 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:49:04,833 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:04,837 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().ushr(-1450793170)
2021-03-11 10:49:04,837 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:49:04,837 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:49:04,837 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:49:04,962 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:04,964 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().shr(2120014615)
2021-03-11 10:49:04,964 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:49:04,965 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:49:04,965 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:49:05,087 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:05,209 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:05,212 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().coerceIn(-1613759474, -207760904)
2021-03-11 10:49:05,212 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:49:05,212 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:49:05,212 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:49:05,212 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().unaryMinus()
2021-03-11 10:49:05,212 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:49:05,212 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:49:05,212 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:49:05,327 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:05,330 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().minus(-26)
2021-03-11 10:49:05,330 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:49:05,330 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:49:05,330 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:49:05,330 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().takeHighestOneBit()
2021-03-11 10:49:05,330 [main:63] - replacement of sum of type Int is (MyCollection2().iterator()).next().countTrailingZeroBits()
2021-03-11 10:49:05,448 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:49:05,448 [main:66] - Compilation checking started
2021-03-11 10:49:05,766 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    (MyCollection2().iterator()).next().countTrailingZeroBits() = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in a) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:05,775 [main:56] - replacing (a, Array<Int>)
2021-03-11 10:49:05,777 [main:38] - replacing a Array<Int>
2021-03-11 10:49:05,777 [main:42] - Getting value of type Array<Int>
2021-03-11 10:49:05,899 [main:302] - generating value of type = Array<Int> false depth = 0
2021-03-11 10:49:06,023 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Int): Array<Int> = TODO()
2021-03-11 10:49:06,026 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Int): Array<Int> = TODO()
2021-03-11 10:49:06,422 [main:302] - generating value of type = Int true depth = 3
2021-03-11 10:49:06,424 [main:302] - generating value of type = Function1<Int, Int> false depth = 3
2021-03-11 10:49:06,427 [main:302] - generating value of type = Int true depth = 4
2021-03-11 10:49:06,429 [main:95] - GENERATED = Array<Int>(1069181161, {a: Int -> 494887268})
2021-03-11 10:49:06,429 [main:46] - GENERATED VALUE OF TYPE Array<Int> = Array<Int>(1069181161, {a: Int -> 494887268})
2021-03-11 10:49:06,430 [main:49] - GENERATED IS CALL =true
2021-03-11 10:49:06,581 [main:55] - randomType = Map<Double, MyCollection2>
2021-03-11 10:49:06,582 [main:94] - GETTING Array<Int> from MyIterator
2021-03-11 10:49:06,589 [main:94] - GETTING Array<Int> from Iterator<Int>
2021-03-11 10:49:06,596 [main:94] - GETTING Array<Int> from MyIterator
2021-03-11 10:49:06,597 [main:94] - GETTING Array<Int> from Array<Int?>
2021-03-11 10:49:06,612 [main:63] - replacement of a of type Array<Int> is Array<Int>(1069181161, {a: Int -> 494887268})
2021-03-11 10:49:06,726 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 10:49:06,727 [main:66] - Compilation checking started
2021-03-11 10:49:07,213 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:07,221 [main:56] - replacing (k, Int)
2021-03-11 10:49:07,221 [main:38] - replacing k Int
2021-03-11 10:49:07,221 [main:42] - Getting value of type Int
2021-03-11 10:49:07,343 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:07,346 [main:46] - GENERATED VALUE OF TYPE Int = 1585103838
2021-03-11 10:49:07,346 [main:49] - GENERATED IS CALL =false
2021-03-11 10:49:07,484 [main:55] - randomType = UShort
2021-03-11 10:49:07,603 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 10:49:07,635 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@212cab4a]
2021-03-11 10:49:07,635 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1632fabd]
2021-03-11 10:49:07,635 [main:66] - Generated call from random type = (30909.toUShort()).toShort().countOneBits()
2021-03-11 10:49:07,636 [main:94] - GETTING Int from Array<Int?>
2021-03-11 10:49:07,647 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:49:07,647 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.sign
2021-03-11 10:49:07,647 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:49:07,647 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:49:07,647 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.toInt()
2021-03-11 10:49:07,647 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:49:07,647 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:49:07,762 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:07,764 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.times(12)
2021-03-11 10:49:07,764 [main:101] - Case = [public final operator fun iterator(): kotlin.collections.Iterator<kotlin.Int?> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@688b308a], public abstract operator fun next(): kotlin.Int? defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@4b06cee5]]
2021-03-11 10:49:07,764 [main:137] - GENERATING call of type public final operator fun iterator(): kotlin.collections.Iterator<kotlin.Int?> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@688b308a]
2021-03-11 10:49:07,764 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int? defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@4b06cee5]
2021-03-11 10:49:07,764 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).iterator().next()
2021-03-11 10:49:07,765 [main:101] - Case = [public inline fun <T> kotlin.Array<out T>.indexOfFirst(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@79423ae4]]
2021-03-11 10:49:07,765 [main:137] - GENERATING call of type public inline fun <T> kotlin.Array<out T>.indexOfFirst(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@79423ae4]
2021-03-11 10:49:07,929 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 10:49:07,931 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:49:07,934 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).indexOfFirst({a: T -> false})
2021-03-11 10:49:07,934 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@17f8ae0]]
2021-03-11 10:49:07,934 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@17f8ae0]
2021-03-11 10:49:07,934 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).count()
2021-03-11 10:49:07,934 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:49:07,934 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:49:08,051 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:08,054 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.or(1034377375)
2021-03-11 10:49:08,054 [main:101] - Case = [public val <T> kotlin.Array<out T>.lastIndex: kotlin.Int defined in kotlin.collections[DeserializedPropertyDescriptor@6eaa0de4]]
2021-03-11 10:49:08,055 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).lastIndex
2021-03-11 10:49:08,055 [main:101] - Case = [public inline fun <T> kotlin.Array<out T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e45404d]]
2021-03-11 10:49:08,055 [main:137] - GENERATING call of type public inline fun <T> kotlin.Array<out T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e45404d]
2021-03-11 10:49:08,172 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 10:49:08,174 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:49:08,177 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).indexOfLast({a: T -> true})
2021-03-11 10:49:08,177 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:49:08,177 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:49:08,294 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:08,297 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.div(100)
2021-03-11 10:49:08,297 [main:63] - replacement of k of type Int is (arrayOfNulls<Int>(5)).lastIndex
2021-03-11 10:49:08,413 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:49:08,413 [main:66] - Compilation checking started
2021-03-11 10:49:08,759 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = (arrayOfNulls<Int>(5)).lastIndex--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:08,767 [main:56] - replacing (i, Int)
2021-03-11 10:49:08,769 [main:38] - replacing i Int
2021-03-11 10:49:08,769 [main:42] - Getting value of type Int
2021-03-11 10:49:08,891 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:08,893 [main:46] - GENERATED VALUE OF TYPE Int = -1543096788
2021-03-11 10:49:08,894 [main:49] - GENERATED IS CALL =false
2021-03-11 10:49:08,903 [main:55] - randomType = Int?
2021-03-11 10:49:09,023 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:09,067 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:49:09,068 [main:66] - Generated call from random type = (1089241794)?.toInt().absoluteValue
2021-03-11 10:49:09,068 [main:94] - GETTING Int from Int
2021-03-11 10:49:09,107 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:49:09,107 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:49:09,107 [main:105] - GENERATED CALL = (el ?: 0).takeLowestOneBit()
2021-03-11 10:49:09,107 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12f06cb], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4d6e37cb]]
2021-03-11 10:49:09,107 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12f06cb]
2021-03-11 10:49:09,107 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4d6e37cb]
2021-03-11 10:49:09,225 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:09,228 [main:105] - GENERATED CALL = (el ?: 0).toDouble().compareTo(45)
2021-03-11 10:49:09,228 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:49:09,228 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:49:09,346 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:09,348 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:49:09,349 [main:105] - GENERATED CALL = (el ?: 0).compareTo(802461372).toInt()
2021-03-11 10:49:09,349 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:49:09,349 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:49:09,349 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:49:09,468 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:09,470 [main:105] - GENERATED CALL = (el ?: 0).toInt().rotateRight(-1441942587)
2021-03-11 10:49:09,470 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:49:09,470 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:49:09,586 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:09,589 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:49:09,589 [main:105] - GENERATED CALL = (el ?: 0).compareTo(-1384561963).dec()
2021-03-11 10:49:09,589 [main:101] - Case = [@kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:49:09,589 [main:105] - GENERATED CALL = (el ?: 0).sign
2021-03-11 10:49:09,589 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:49:09,589 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:49:09,712 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:09,714 [main:105] - GENERATED CALL = (el ?: 0).compareTo(-12)
2021-03-11 10:49:09,715 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:49:09,715 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:49:09,715 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:49:09,834 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:09,836 [main:105] - GENERATED CALL = (el ?: 0).toInt().coerceAtLeast(-1580788288)
2021-03-11 10:49:09,837 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1547992c]]
2021-03-11 10:49:09,837 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:49:09,837 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1547992c]
2021-03-11 10:49:09,959 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:49:09,962 [main:105] - GENERATED CALL = (el ?: 0).toChar().minus('빇')
2021-03-11 10:49:09,962 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:49:09,962 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:49:09,962 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:49:09,962 [main:105] - GENERATED CALL = (el ?: 0).toInt().takeHighestOneBit()
2021-03-11 10:49:09,962 [main:63] - replacement of i of type Int is (el ?: 0).toDouble().compareTo(45)
2021-03-11 10:49:10,085 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:49:10,085 [main:66] - Compilation checking started
2021-03-11 10:49:10,416 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return "c2 failed"

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    (el ?: 0).toDouble().compareTo(45) = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:10,424 [main:56] - replacing ("c2 failed", String)
2021-03-11 10:49:10,425 [main:38] - replacing "c2 failed" String
2021-03-11 10:49:10,425 [main:42] - Getting value of type String
2021-03-11 10:49:10,543 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:49:10,545 [main:46] - GENERATED VALUE OF TYPE String = "llymg"
2021-03-11 10:49:10,545 [main:49] - GENERATED IS CALL =false
2021-03-11 10:49:10,555 [main:55] - randomType = MyCollection4
2021-03-11 10:49:10,670 [main:302] - generating value of type = MyCollection4 false depth = 0
2021-03-11 10:49:10,673 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:10,791 [main:194] - Type params = []
2021-03-11 10:49:10,914 [main:94] - GETTING String from Int
2021-03-11 10:49:10,953 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]]
2021-03-11 10:49:10,953 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]
2021-03-11 10:49:11,074 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:11,077 [main:105] - GENERATED CALL = (sum).toString(977265761)
2021-03-11 10:49:11,077 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]]
2021-03-11 10:49:11,077 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:49:11,193 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:11,195 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]
2021-03-11 10:49:11,311 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:11,314 [main:105] - GENERATED CALL = (sum).compareTo(218278613).toString(-819253098)
2021-03-11 10:49:11,314 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67ad6a3c]]
2021-03-11 10:49:11,314 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:49:11,314 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67ad6a3c]
2021-03-11 10:49:11,314 [main:105] - GENERATED CALL = (sum).toChar().uppercase()
2021-03-11 10:49:11,314 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15f2210a]]
2021-03-11 10:49:11,314 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:49:11,314 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15f2210a]
2021-03-11 10:49:11,435 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:11,437 [main:105] - GENERATED CALL = (sum).toByte().toString(-1544036151)
2021-03-11 10:49:11,438 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d72be4]]
2021-03-11 10:49:11,438 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:49:11,438 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d72be4]
2021-03-11 10:49:11,438 [main:105] - GENERATED CALL = (sum).toChar().lowercase()
2021-03-11 10:49:11,438 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59e5df5f]]
2021-03-11 10:49:11,438 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:49:11,438 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59e5df5f]
2021-03-11 10:49:11,598 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:49:11,601 [main:105] - GENERATED CALL = (sum).toChar().plus("zylmu")
2021-03-11 10:49:11,601 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e0e5d90]]
2021-03-11 10:49:11,601 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f]
2021-03-11 10:49:11,718 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:49:11,721 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e0e5d90]
2021-03-11 10:49:11,840 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:11,843 [main:105] - GENERATED CALL = (sum).div(4660318980676825475).toString(1758137639)
2021-03-11 10:49:11,843 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40ec46fe]]
2021-03-11 10:49:11,843 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:49:11,843 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40ec46fe]
2021-03-11 10:49:11,843 [main:105] - GENERATED CALL = (sum).toChar().titlecase()
2021-03-11 10:49:11,843 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]]
2021-03-11 10:49:11,843 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:49:11,843 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23942fa8]
2021-03-11 10:49:11,963 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:11,966 [main:105] - GENERATED CALL = (sum).toInt().toString(-291140248)
2021-03-11 10:49:11,966 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e0e5d90]]
2021-03-11 10:49:11,967 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97]
2021-03-11 10:49:11,967 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e0e5d90]
2021-03-11 10:49:12,084 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:12,087 [main:105] - GENERATED CALL = (sum).toLong().toString(841367191)
2021-03-11 10:49:12,087 [main:63] - replacement of "c2 failed" of type String is (sum).toString(977265761)
2021-03-11 10:49:12,204 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:49:12,205 [main:66] - Compilation checking started
2021-03-11 10:49:12,675 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:12,688 [main:56] - replacing (5, Int)
2021-03-11 10:49:12,688 [main:38] - replacing 5 Int
2021-03-11 10:49:12,688 [main:42] - Getting value of type Int
2021-03-11 10:49:12,824 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:12,827 [main:46] - GENERATED VALUE OF TYPE Int = 410181921
2021-03-11 10:49:12,827 [main:49] - GENERATED IS CALL =false
2021-03-11 10:49:12,981 [main:55] - randomType = MyCollection2?
2021-03-11 10:49:13,104 [main:302] - generating value of type = MyCollection2 false depth = 0
2021-03-11 10:49:13,106 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}
2021-03-11 10:49:13,228 [main:194] - Type params = []
2021-03-11 10:49:13,361 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.collections.Iterable<T>.maxWith(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5ae4a579]
2021-03-11 10:49:13,481 [main:302] - generating value of type = Comparator<in T> false depth = 0
2021-03-11 10:49:13,608 [main:43] - GENERATING CALL OF fun <T> naturalOrder(): Comparator<T> = TODO()
2021-03-11 10:49:13,611 [main:61] - WITHOUT TYPE PARAMS = fun <T> naturalOrder(): Comparator<T> = TODO()
2021-03-11 10:49:13,733 [main:95] - GENERATED = naturalOrder<T>()
2021-03-11 10:49:13,734 [main:66] - Generated call from random type = (MyCollection2())?.maxWith(naturalOrder<T>())!!
2021-03-11 10:49:13,734 [main:94] - GETTING Int from Int
2021-03-11 10:49:13,779 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:49:13,779 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:49:13,779 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:49:13,779 [main:105] - GENERATED CALL = (el ?: 0).toInt().dec()
2021-03-11 10:49:13,780 [main:101] - Case = [public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:49:13,780 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:49:13,780 [main:105] - GENERATED CALL = (el ?: 0).unaryMinus()
2021-03-11 10:49:13,780 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:49:13,780 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:49:13,899 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:13,902 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:49:14,020 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:14,022 [main:105] - GENERATED CALL = (el ?: 0).compareTo(-1923853165).plus(-102)
2021-03-11 10:49:14,022 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ea49e27]]
2021-03-11 10:49:14,022 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:49:14,022 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ea49e27]
2021-03-11 10:49:14,023 [main:105] - GENERATED CALL = (el ?: 0).toFloat().toRawBits()
2021-03-11 10:49:14,023 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6abd8a99]]
2021-03-11 10:49:14,023 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:49:14,023 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6abd8a99]
2021-03-11 10:49:14,140 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:14,143 [main:105] - GENERATED CALL = (el ?: 0).toShort().plus(-105)
2021-03-11 10:49:14,143 [main:101] - Case = [public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:49:14,143 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:49:14,259 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:14,262 [main:105] - GENERATED CALL = (el ?: 0).coerceAtLeast(1847334559)
2021-03-11 10:49:14,262 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@22a1cf7f]]
2021-03-11 10:49:14,262 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:49:14,262 [main:137] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@22a1cf7f]
2021-03-11 10:49:14,262 [main:105] - GENERATED CALL = (el ?: 0).toChar().toInt()
2021-03-11 10:49:14,262 [main:101] - Case = [public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:49:14,262 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:49:14,384 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:14,387 [main:105] - GENERATED CALL = (el ?: 0).and(-663546681)
2021-03-11 10:49:14,387 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:49:14,387 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:49:14,387 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:49:14,387 [main:105] - GENERATED CALL = (el ?: 0).toInt().unaryPlus()
2021-03-11 10:49:14,387 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:49:14,387 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:49:14,387 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:49:14,387 [main:105] - GENERATED CALL = (el ?: 0).toInt().countTrailingZeroBits()
2021-03-11 10:49:14,387 [main:63] - replacement of 5 of type Int is 410181921
2021-03-11 10:49:14,507 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 10:49:14,507 [main:66] - Compilation checking started
2021-03-11 10:49:14,977 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:14,987 [main:56] - replacing (0, Int)
2021-03-11 10:49:14,989 [main:38] - replacing 0 Int
2021-03-11 10:49:14,989 [main:42] - Getting value of type Int
2021-03-11 10:49:15,106 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:15,108 [main:46] - GENERATED VALUE OF TYPE Int = 696231587
2021-03-11 10:49:15,108 [main:49] - GENERATED IS CALL =false
2021-03-11 10:49:15,113 [main:55] - randomType = Int
2021-03-11 10:49:15,230 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:15,272 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97]
2021-03-11 10:49:15,272 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4751263b]
2021-03-11 10:49:15,423 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:15,426 [main:66] - Generated call from random type = (565473000).toLong().compareTo(-34)
2021-03-11 10:49:15,426 [main:94] - GETTING Int from Int
2021-03-11 10:49:15,465 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:49:15,465 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:49:15,589 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:15,591 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:49:15,592 [main:105] - GENERATED CALL = (sum).compareTo(-793627768).takeLowestOneBit()
2021-03-11 10:49:15,592 [main:101] - Case = [public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:49:15,592 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:49:15,592 [main:105] - GENERATED CALL = (sum).dec()
2021-03-11 10:49:15,592 [main:101] - Case = [public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:49:15,592 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:49:15,592 [main:105] - GENERATED CALL = (sum).toInt()
2021-03-11 10:49:15,592 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a8376bf]]
2021-03-11 10:49:15,592 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97]
2021-03-11 10:49:15,592 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a8376bf]
2021-03-11 10:49:15,592 [main:105] - GENERATED CALL = (sum).toLong().countOneBits()
2021-03-11 10:49:15,592 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:49:15,592 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:49:15,710 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:15,713 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:49:15,831 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:15,834 [main:105] - GENERATED CALL = (sum).compareTo(-866222201).shl(-218989788)
2021-03-11 10:49:15,834 [main:101] - Case = [public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:49:15,834 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:49:15,957 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:15,959 [main:105] - GENERATED CALL = (sum).shl(-1650349522)
2021-03-11 10:49:15,959 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@11d995f6]]
2021-03-11 10:49:15,959 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:49:15,960 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@11d995f6]
2021-03-11 10:49:15,960 [main:105] - GENERATED CALL = (sum).toFloat().toBits()
2021-03-11 10:49:15,960 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:49:15,960 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:49:16,080 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:16,083 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:49:16,201 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:16,203 [main:105] - GENERATED CALL = (sum).compareTo(1174822156).rotateLeft(-180097360)
2021-03-11 10:49:16,204 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@c73734c]]
2021-03-11 10:49:16,204 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:49:16,204 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@c73734c]
2021-03-11 10:49:16,322 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:16,325 [main:105] - GENERATED CALL = (sum).toByte().times(39)
2021-03-11 10:49:16,325 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:49:16,325 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:49:16,440 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:16,442 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:49:16,559 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:16,562 [main:105] - GENERATED CALL = (sum).compareTo(306837061).ushr(-1342630826)
2021-03-11 10:49:16,562 [main:63] - replacement of 0 of type Int is (sum).dec()
2021-03-11 10:49:16,679 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:49:16,679 [main:66] - Compilation checking started
2021-03-11 10:49:17,022 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (sum).dec()
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = sum + (MyCollection1().iterator()).next().unaryPlus()
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:17,030 [main:56] - replacing (sum + (MyCollection1().iterator()).next().unaryPlus(), Int)
2021-03-11 10:49:17,032 [main:38] - replacing sum + (MyCollection1().iterator()).next().unaryPlus() Int
2021-03-11 10:49:17,032 [main:42] - Getting value of type Int
2021-03-11 10:49:17,149 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:17,151 [main:46] - GENERATED VALUE OF TYPE Int = 1950129138
2021-03-11 10:49:17,152 [main:49] - GENERATED IS CALL =false
2021-03-11 10:49:17,161 [main:55] - randomType = MyCollection4
2021-03-11 10:49:17,278 [main:302] - generating value of type = MyCollection4 false depth = 0
2021-03-11 10:49:17,282 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:17,400 [main:194] - Type params = []
2021-03-11 10:49:17,523 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyCollection4[DeserializedSimpleFunctionDescriptor@54e5b642]
2021-03-11 10:49:17,682 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:49:17,682 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:49:17,806 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:49:17,809 [main:66] - Generated call from random type = (MyCollection4()).equals("vqqsp").compareTo(false)
2021-03-11 10:49:17,809 [main:94] - GETTING Int from Int
2021-03-11 10:49:17,849 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@55d433d4]]
2021-03-11 10:49:17,850 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:49:17,850 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@55d433d4]
2021-03-11 10:49:17,974 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:17,977 [main:105] - GENERATED CALL = (sum).toShort().div(-93)
2021-03-11 10:49:17,977 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@68c62048]]
2021-03-11 10:49:17,977 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f]
2021-03-11 10:49:18,095 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:49:18,098 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@68c62048]
2021-03-11 10:49:18,098 [main:105] - GENERATED CALL = (sum).div(-1774941224971980673).countLeadingZeroBits()
2021-03-11 10:49:18,098 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:49:18,098 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:49:18,225 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:18,227 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:49:18,378 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:18,380 [main:105] - GENERATED CALL = (sum).compareTo(2019234486).times(122)
2021-03-11 10:49:18,380 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@57d953ba]]
2021-03-11 10:49:18,380 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:49:18,380 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@57d953ba]
2021-03-11 10:49:18,381 [main:105] - GENERATED CALL = (sum).toByte().toInt()
2021-03-11 10:49:18,381 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@26e773b5]]
2021-03-11 10:49:18,381 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:49:18,381 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@26e773b5]
2021-03-11 10:49:18,499 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:18,502 [main:105] - GENERATED CALL = (sum).toShort().minus(51)
2021-03-11 10:49:18,502 [main:101] - Case = [public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:49:18,503 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:49:18,635 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:18,640 [main:105] - GENERATED CALL = (sum).shr(1787303726)
2021-03-11 10:49:18,640 [main:101] - Case = [public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:49:18,640 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:49:18,640 [main:105] - GENERATED CALL = (sum).toInt()
2021-03-11 10:49:18,640 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:49:18,640 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:49:18,770 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:18,773 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:49:18,904 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:19,026 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:19,029 [main:105] - GENERATED CALL = (sum).compareTo(-1780654606).coerceIn(2005819476, -1763625975)
2021-03-11 10:49:19,029 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4d6e37cb]]
2021-03-11 10:49:19,029 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431]
2021-03-11 10:49:19,234 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:49:19,236 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4d6e37cb]
2021-03-11 10:49:19,356 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:19,359 [main:105] - GENERATED CALL = (sum).div(0.9398365332054531).compareTo(-40)
2021-03-11 10:49:19,359 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@140b0a8d]]
2021-03-11 10:49:19,359 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97]
2021-03-11 10:49:19,359 [main:105] - GENERATED CALL = (sum).toLong().sign
2021-03-11 10:49:19,359 [main:63] - replacement of sum + (MyCollection1().iterator()).next().unaryPlus() of type Int is (sum).div(0.9398365332054531).compareTo(-40)
2021-03-11 10:49:19,479 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:49:19,479 [main:66] - Compilation checking started
2021-03-11 10:49:20,034 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != 10) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:20,042 [main:56] - replacing (10, Int)
2021-03-11 10:49:20,043 [main:38] - replacing 10 Int
2021-03-11 10:49:20,043 [main:42] - Getting value of type Int
2021-03-11 10:49:20,158 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:20,161 [main:46] - GENERATED VALUE OF TYPE Int = 397611661
2021-03-11 10:49:20,161 [main:49] - GENERATED IS CALL =false
2021-03-11 10:49:20,171 [main:55] - randomType = MyCollection4
2021-03-11 10:49:20,288 [main:302] - generating value of type = MyCollection4 false depth = 0
2021-03-11 10:49:20,291 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:20,409 [main:194] - Type params = []
2021-03-11 10:49:20,534 [main:137] - GENERATING call of type public final operator fun iterator(): MyCollection4.MyIterator defined in MyCollection4[SimpleFunctionDescriptorImpl@3bace584]
2021-03-11 10:49:20,534 [main:66] - Generated call from random type = (MyCollection4()).iterator().k
2021-03-11 10:49:20,534 [main:63] - replacement of 10 of type Int is (MyCollection4()).iterator().k
2021-03-11 10:49:20,652 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:49:20,653 [main:66] - Compilation checking started
2021-03-11 10:49:21,110 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = sum + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:21,119 [main:56] - replacing (sum, Int)
2021-03-11 10:49:21,120 [main:38] - replacing sum Int
2021-03-11 10:49:21,120 [main:42] - Getting value of type Int
2021-03-11 10:49:21,246 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:21,249 [main:46] - GENERATED VALUE OF TYPE Int = 718138757
2021-03-11 10:49:21,249 [main:49] - GENERATED IS CALL =false
2021-03-11 10:49:21,262 [main:55] - randomType = MyCollection2
2021-03-11 10:49:21,385 [main:302] - generating value of type = MyCollection2 false depth = 0
2021-03-11 10:49:21,388 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}
2021-03-11 10:49:21,515 [main:194] - Type params = []
2021-03-11 10:49:21,650 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.first(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@454da158]
2021-03-11 10:49:21,651 [main:66] - Generated call from random type = (MyCollection2()).first()!!
2021-03-11 10:49:21,651 [main:94] - GETTING Int from Int
2021-03-11 10:49:21,690 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:49:21,690 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:49:21,809 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:21,812 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:49:21,929 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:21,932 [main:105] - GENERATED CALL = (sum).compareTo(-1077631133).rotateLeft(-1472203327)
2021-03-11 10:49:21,932 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:49:21,932 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:49:22,048 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:22,051 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:49:22,176 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:22,178 [main:105] - GENERATED CALL = (sum).compareTo(112107428).or(-726701539)
2021-03-11 10:49:22,178 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:49:22,178 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:49:22,179 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:49:22,307 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:22,310 [main:105] - GENERATED CALL = (sum).toInt().times(-74)
2021-03-11 10:49:22,310 [main:101] - Case = [public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:49:22,310 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:49:22,310 [main:105] - GENERATED CALL = (sum).toInt()
2021-03-11 10:49:22,310 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:49:22,310 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:49:22,310 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:49:22,426 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:22,429 [main:105] - GENERATED CALL = (sum).toInt().compareTo(33)
2021-03-11 10:49:22,429 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@68c62048]]
2021-03-11 10:49:22,429 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f]
2021-03-11 10:49:22,546 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:49:22,548 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@68c62048]
2021-03-11 10:49:22,548 [main:105] - GENERATED CALL = (sum).div(-5982335177029638207).countLeadingZeroBits()
2021-03-11 10:49:22,548 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:49:22,548 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]
2021-03-11 10:49:22,665 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:49:22,666 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:49:22,788 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:49:22,791 [main:105] - GENERATED CALL = (sum).equals("rlgbp").compareTo(true)
2021-03-11 10:49:22,793 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:49:22,794 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:49:22,910 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:22,913 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:49:22,913 [main:105] - GENERATED CALL = (sum).compareTo(-1748464150).takeHighestOneBit()
2021-03-11 10:49:22,913 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1547992c]]
2021-03-11 10:49:22,913 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:49:22,913 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1547992c]
2021-03-11 10:49:23,040 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:49:23,043 [main:105] - GENERATED CALL = (sum).toChar().minus('챣')
2021-03-11 10:49:23,043 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6b8bfcfc]]
2021-03-11 10:49:23,043 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:49:23,044 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6b8bfcfc]
2021-03-11 10:49:23,211 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:23,213 [main:105] - GENERATED CALL = (sum).toByte().compareTo(35)
2021-03-11 10:49:23,213 [main:63] - replacement of sum of type Int is (sum).toByte().compareTo(35)
2021-03-11 10:49:23,332 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:49:23,333 [main:66] - Compilation checking started
2021-03-11 10:49:23,794 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < 5) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:23,803 [main:56] - replacing (5, Int)
2021-03-11 10:49:23,805 [main:38] - replacing 5 Int
2021-03-11 10:49:23,805 [main:42] - Getting value of type Int
2021-03-11 10:49:23,926 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:23,929 [main:46] - GENERATED VALUE OF TYPE Int = 578595317
2021-03-11 10:49:23,929 [main:49] - GENERATED IS CALL =false
2021-03-11 10:49:24,350 [main:55] - randomType = MutableMap<MyCollection4?, LinkedHashSet<Float>>
2021-03-11 10:49:24,351 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:49:24,358 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:49:24,358 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:24,358 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:49:24,358 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().inv()
2021-03-11 10:49:24,358 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:49:24,358 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:24,358 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:49:24,480 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:24,482 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().ushr(1844177848)
2021-03-11 10:49:24,483 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:49:24,483 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:24,483 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:49:24,602 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:24,605 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().plus(-125)
2021-03-11 10:49:24,605 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:49:24,605 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:24,605 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:49:24,724 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:24,726 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().xor(2003537457)
2021-03-11 10:49:24,726 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:49:24,726 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:24,726 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:49:24,726 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().dec()
2021-03-11 10:49:24,727 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:49:24,727 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:24,727 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:49:24,727 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().takeHighestOneBit()
2021-03-11 10:49:24,727 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:49:24,727 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:24,727 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:49:24,843 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:24,846 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().rotateLeft(1454855151)
2021-03-11 10:49:24,846 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:49:24,846 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:24,846 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:49:24,846 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().countLeadingZeroBits()
2021-03-11 10:49:24,846 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:49:24,846 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:24,846 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:49:24,964 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:24,967 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().rem(-111)
2021-03-11 10:49:24,967 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:49:24,967 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:24,968 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:49:25,088 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:25,091 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().shl(261199900)
2021-03-11 10:49:25,091 [main:63] - replacement of 5 of type Int is (MyCollection1().iterator()).next().inv()
2021-03-11 10:49:25,209 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:49:25,209 [main:66] - Compilation checking started
2021-03-11 10:49:25,657 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        sum = (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits()
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:25,665 [main:56] - replacing ((0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits(), Int)
2021-03-11 10:49:25,667 [main:38] - replacing (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits() Int
2021-03-11 10:49:25,668 [main:42] - Getting value of type Int
2021-03-11 10:49:25,790 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:25,792 [main:46] - GENERATED VALUE OF TYPE Int = 430113491
2021-03-11 10:49:25,792 [main:49] - GENERATED IS CALL =false
2021-03-11 10:49:26,228 [main:55] - randomType = Function2<String, MyCollection3?, Collection<UInt>>
2021-03-11 10:49:26,228 [main:94] - GETTING Int from Int
2021-03-11 10:49:26,272 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@57d953ba]]
2021-03-11 10:49:26,272 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:49:26,272 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@57d953ba]
2021-03-11 10:49:26,272 [main:105] - GENERATED CALL = (sum).toByte().toInt()
2021-03-11 10:49:26,272 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:49:26,272 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:49:26,390 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:26,392 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:49:26,511 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:26,514 [main:105] - GENERATED CALL = (sum).compareTo(506027150).and(1958798101)
2021-03-11 10:49:26,514 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], public open val start: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@4e51b8]]
2021-03-11 10:49:26,514 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:49:26,634 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:26,636 [main:105] - GENERATED CALL = (sum).rangeTo(-126).start
2021-03-11 10:49:26,636 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:49:26,636 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:49:26,757 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:26,760 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:49:26,760 [main:105] - GENERATED CALL = (sum).compareTo(1855510956).toInt()
2021-03-11 10:49:26,760 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@674346bc]]
2021-03-11 10:49:26,760 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97]
2021-03-11 10:49:26,760 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@674346bc]
2021-03-11 10:49:26,760 [main:105] - GENERATED CALL = (sum).toLong().countTrailingZeroBits()
2021-03-11 10:49:26,760 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@63c4310c]]
2021-03-11 10:49:26,760 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:49:26,760 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@63c4310c]
2021-03-11 10:49:26,878 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:26,880 [main:105] - GENERATED CALL = (sum).toShort().compareTo(12)
2021-03-11 10:49:26,880 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:49:26,880 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:49:27,036 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:27,039 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:49:27,163 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:27,166 [main:105] - GENERATED CALL = (sum).compareTo(377578575).rotateRight(1727116465)
2021-03-11 10:49:27,166 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1632fabd]]
2021-03-11 10:49:27,166 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:49:27,167 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1632fabd]
2021-03-11 10:49:27,167 [main:105] - GENERATED CALL = (sum).toShort().countOneBits()
2021-03-11 10:49:27,167 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:49:27,167 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:49:27,288 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:27,290 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:49:27,409 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:27,412 [main:105] - GENERATED CALL = (sum).compareTo(254817641).coerceAtLeast(-988657108)
2021-03-11 10:49:27,412 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:49:27,412 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:49:27,530 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:27,532 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:49:27,650 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:27,653 [main:105] - GENERATED CALL = (sum).compareTo(1254345903).or(598260703)
2021-03-11 10:49:27,653 [main:63] - replacement of (0.49405395570277866).toInt().plus(83) + (MyCollection1().iterator()).next().countOneBits() of type Int is (sum).compareTo(506027150).and(1958798101)
2021-03-11 10:49:27,772 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:49:27,773 [main:66] - Compilation checking started
2021-03-11 10:49:28,246 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        sum = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:28,258 [main:56] - replacing (i, Int)
2021-03-11 10:49:28,259 [main:38] - replacing i Int
2021-03-11 10:49:28,259 [main:42] - Getting value of type Int
2021-03-11 10:49:28,378 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:28,381 [main:46] - GENERATED VALUE OF TYPE Int = -304969129
2021-03-11 10:49:28,381 [main:49] - GENERATED IS CALL =false
2021-03-11 10:49:28,386 [main:55] - randomType = Int
2021-03-11 10:49:28,506 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:28,545 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:49:28,545 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1503d0ee]
2021-03-11 10:49:28,545 [main:66] - Generated call from random type = (-679836688).toByte().unaryMinus()
2021-03-11 10:49:28,546 [main:94] - GETTING Int from Array<Int?>
2021-03-11 10:49:28,558 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:49:28,558 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:49:28,675 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:28,677 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:49:28,678 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-1478383491)?.inc()
2021-03-11 10:49:28,678 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:49:28,678 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:49:28,796 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:28,798 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.shr(-1247491682)
2021-03-11 10:49:28,798 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:49:28,798 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:49:28,920 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:28,923 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:49:29,042 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:29,044 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(809755316)?.rem(-97)
2021-03-11 10:49:29,045 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:49:29,045 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:49:29,167 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:29,170 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:49:29,291 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:29,294 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-1727360021)?.times(116)
2021-03-11 10:49:29,294 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:49:29,294 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:49:29,414 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:29,416 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.rem(36)
2021-03-11 10:49:29,416 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]]
2021-03-11 10:49:29,416 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:49:29,540 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:29,542 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-1896282621)
2021-03-11 10:49:29,542 [main:101] - Case = [@kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentHashCode(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6cbd4f7b]]
2021-03-11 10:49:29,542 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentHashCode(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6cbd4f7b]
2021-03-11 10:49:29,542 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).contentHashCode()
2021-03-11 10:49:29,542 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:49:29,543 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:49:29,662 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:29,665 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.and(499672301)
2021-03-11 10:49:29,665 [main:101] - Case = [@kotlin.jvm.JvmName public fun kotlin.Array<out kotlin.Byte>.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3842ee34]]
2021-03-11 10:49:29,665 [main:137] - GENERATING call of type @kotlin.jvm.JvmName public fun kotlin.Array<out kotlin.Byte>.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3842ee34]
2021-03-11 10:49:29,666 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).sum()
2021-03-11 10:49:29,666 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:49:29,666 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:49:29,787 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:29,790 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.times(24)
2021-03-11 10:49:29,790 [main:63] - replacement of i of type Int is (arrayOfNulls<Int>(5)).size.rem(36)
2021-03-11 10:49:29,907 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:49:29,908 [main:66] - Compilation checking started
2021-03-11 10:49:30,219 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        sum = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (arrayOfNulls<Int>(5)).size.rem(36)++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:30,227 [main:56] - replacing (sum, Int)
2021-03-11 10:49:30,229 [main:38] - replacing sum Int
2021-03-11 10:49:30,229 [main:42] - Getting value of type Int
2021-03-11 10:49:30,349 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:30,352 [main:46] - GENERATED VALUE OF TYPE Int = -2106836200
2021-03-11 10:49:30,352 [main:49] - GENERATED IS CALL =false
2021-03-11 10:49:30,796 [main:55] - randomType = Sequence<Pair<Char, Boolean>>
2021-03-11 10:49:30,797 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:49:30,807 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:49:30,807 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:30,807 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:49:30,962 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:30,964 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().ushr(457644478)
2021-03-11 10:49:30,964 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:49:30,964 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:30,965 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:49:30,965 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().toInt()
2021-03-11 10:49:30,965 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]]
2021-03-11 10:49:30,965 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:30,965 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next()
2021-03-11 10:49:30,965 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:49:30,965 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:30,965 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:49:31,087 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:31,090 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().rotateLeft(1360048780)
2021-03-11 10:49:31,090 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:49:31,090 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:31,090 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:49:31,090 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().dec()
2021-03-11 10:49:31,090 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:49:31,090 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:31,090 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:49:31,210 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:31,212 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().plus(-77)
2021-03-11 10:49:31,212 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:49:31,212 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:31,213 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:49:31,336 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:31,461 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:31,464 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().coerceIn(1449811075, -638927307)
2021-03-11 10:49:31,464 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:49:31,464 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:31,464 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:49:31,464 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().countOneBits()
2021-03-11 10:49:31,464 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:49:31,465 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:31,465 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:49:31,584 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:31,587 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().xor(-1751877251)
2021-03-11 10:49:31,587 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:49:31,587 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:31,587 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:49:31,587 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().countLeadingZeroBits()
2021-03-11 10:49:31,587 [main:63] - replacement of sum of type Int is (MyCollection1().iterator()).next().toInt()
2021-03-11 10:49:31,707 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:49:31,707 [main:66] - Compilation checking started
2021-03-11 10:49:32,030 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        sum = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        (MyCollection1().iterator()).next().toInt() = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:32,038 [main:56] - replacing (sum, Int)
2021-03-11 10:49:32,040 [main:38] - replacing sum Int
2021-03-11 10:49:32,040 [main:42] - Getting value of type Int
2021-03-11 10:49:32,163 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:32,166 [main:46] - GENERATED VALUE OF TYPE Int = 1106010648
2021-03-11 10:49:32,166 [main:49] - GENERATED IS CALL =false
2021-03-11 10:49:32,302 [main:55] - randomType = UShort
2021-03-11 10:49:32,421 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 10:49:32,453 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@54f87ee3]
2021-03-11 10:49:32,454 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@87bef45]
2021-03-11 10:49:32,571 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:49:32,573 [main:66] - Generated call from random type = (22265.toUShort()).toUByte().compareTo(33.toUByte())
2021-03-11 10:49:32,574 [main:94] - GETTING Int from MyIterator
2021-03-11 10:49:32,579 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:49:32,579 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:49:32,700 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:32,703 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.shr(703845576)
2021-03-11 10:49:32,703 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:49:32,703 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:49:32,703 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.dec()
2021-03-11 10:49:32,703 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:49:32,703 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:49:32,704 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.inc()
2021-03-11 10:49:32,704 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:49:32,704 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:49:32,704 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.unaryMinus()
2021-03-11 10:49:32,704 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:49:32,704 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:49:32,824 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:32,827 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.shl(2116216745)
2021-03-11 10:49:32,827 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:49:32,827 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:49:32,945 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:32,948 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.rem(-65)
2021-03-11 10:49:32,948 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:49:32,948 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:49:33,070 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:33,072 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.coerceAtLeast(1030314006)
2021-03-11 10:49:33,073 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508]]
2021-03-11 10:49:33,073 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k
2021-03-11 10:49:33,073 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:49:33,073 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:49:33,192 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:33,195 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.xor(-714065656)
2021-03-11 10:49:33,195 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:49:33,195 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:49:33,316 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:33,319 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.div(-72)
2021-03-11 10:49:33,319 [main:63] - replacement of sum of type Int is (MyCollection4().iterator()).k
2021-03-11 10:49:33,436 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:49:33,437 [main:66] - Compilation checking started
2021-03-11 10:49:33,904 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:33,912 [main:56] - replacing (arrayOfNulls<Int> (5), Array<Int?>)
2021-03-11 10:49:33,914 [main:38] - replacing arrayOfNulls<Int> (5) Array<Int?>
2021-03-11 10:49:33,914 [main:42] - Getting value of type Array<Int?>
2021-03-11 10:49:34,036 [main:302] - generating value of type = Array<Int?> false depth = 0
2021-03-11 10:49:34,173 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<Int?> = TODO()
2021-03-11 10:49:34,178 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<Int?> = TODO()
2021-03-11 10:49:34,439 [main:302] - generating value of type = Int true depth = 3
2021-03-11 10:49:34,442 [main:95] - GENERATED = arrayOfNulls<Int?>(1334364761)
2021-03-11 10:49:34,442 [main:46] - GENERATED VALUE OF TYPE Array<Int?> = arrayOfNulls<Int?>(1334364761)
2021-03-11 10:49:34,442 [main:49] - GENERATED IS CALL =true
2021-03-11 10:49:34,579 [main:55] - randomType = UByte
2021-03-11 10:49:34,703 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:49:34,746 [main:94] - GETTING Array<Int?> from Iterator<Int>
2021-03-11 10:49:34,756 [main:94] - GETTING Array<Int?> from Array<Int?>
2021-03-11 10:49:34,773 [main:101] - Case = [public fun <T : kotlin.Comparable<T>> kotlin.Array<T>.sortedArray(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@62c4b0c7]]
2021-03-11 10:49:34,773 [main:137] - GENERATING call of type public fun <T : kotlin.Comparable<T>> kotlin.Array<T>.sortedArray(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@62c4b0c7]
2021-03-11 10:49:34,774 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).sortedArray()
2021-03-11 10:49:34,774 [main:101] - Case = [public fun <T> kotlin.Array<T>.sliceArray(indices: kotlin.collections.Collection<kotlin.Int>): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7940abfb]]
2021-03-11 10:49:34,774 [main:137] - GENERATING call of type public fun <T> kotlin.Array<T>.sliceArray(indices: kotlin.collections.Collection<kotlin.Int>): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7940abfb]
2021-03-11 10:49:34,938 [main:302] - generating value of type = Collection<Int> false depth = 0
2021-03-11 10:49:35,063 [main:43] - GENERATING CALL OF fun <T> listOfNotNull(elements: Int): Collection<Int> = TODO()
2021-03-11 10:49:35,067 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOfNotNull(elements: Int): Collection<Int> = TODO()
2021-03-11 10:49:35,196 [main:302] - generating value of type = Int true depth = 3
2021-03-11 10:49:35,199 [main:95] - GENERATED = listOfNotNull<Int>(65714499)
2021-03-11 10:49:35,200 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).sliceArray(listOfNotNull<Int>(65714499))
2021-03-11 10:49:35,200 [main:101] - Case = [public fun <T : kotlin.Any> kotlin.Array<T?>.requireNoNulls(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3358e940]]
2021-03-11 10:49:35,200 [main:137] - GENERATING call of type public fun <T : kotlin.Any> kotlin.Array<T?>.requireNoNulls(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3358e940]
2021-03-11 10:49:35,200 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).requireNoNulls()
2021-03-11 10:49:35,200 [main:101] - Case = [public fun <T : kotlin.Comparable<T>> kotlin.Array<T>.sortedArrayDescending(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@508fd8b1]]
2021-03-11 10:49:35,200 [main:137] - GENERATING call of type public fun <T : kotlin.Comparable<T>> kotlin.Array<T>.sortedArrayDescending(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@508fd8b1]
2021-03-11 10:49:35,200 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).sortedArrayDescending()
2021-03-11 10:49:35,200 [main:101] - Case = [public fun <T> kotlin.Array<T>.reversedArray(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1f7c53ea]]
2021-03-11 10:49:35,200 [main:137] - GENERATING call of type public fun <T> kotlin.Array<T>.reversedArray(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1f7c53ea]
2021-03-11 10:49:35,200 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).reversedArray()
2021-03-11 10:49:35,200 [main:63] - replacement of arrayOfNulls<Int> (5) of type Array<Int?> is (arrayOfNulls<Int>(5)).requireNoNulls()
2021-03-11 10:49:35,325 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:49:35,326 [main:66] - Compilation checking started
2021-03-11 10:49:35,638 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = (arrayOfNulls<Int>(5)).requireNoNulls()
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = k--
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:35,646 [main:56] - replacing (k--, Int)
2021-03-11 10:49:35,646 [main:38] - replacing k-- Int
2021-03-11 10:49:35,646 [main:42] - Getting value of type Int
2021-03-11 10:49:35,769 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:35,772 [main:46] - GENERATED VALUE OF TYPE Int = -778937375
2021-03-11 10:49:35,772 [main:49] - GENERATED IS CALL =false
2021-03-11 10:49:35,782 [main:55] - randomType = MyCollection3
2021-03-11 10:49:35,905 [main:302] - generating value of type = MyCollection3 false depth = 0
2021-03-11 10:49:35,907 [main:112] - generating klass MyCollection3 text = class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}
2021-03-11 10:49:36,026 [main:194] - Type params = []
2021-03-11 10:49:36,152 [main:137] - GENERATING call of type public final operator fun iterator(): MyCollection3.MyIterator defined in MyCollection3[SimpleFunctionDescriptorImpl@398befe4]
2021-03-11 10:49:36,152 [main:66] - Generated call from random type = (MyCollection3()).iterator().k
2021-03-11 10:49:36,153 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:49:36,158 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:49:36,158 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:49:36,158 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().absoluteValue
2021-03-11 10:49:36,158 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:49:36,158 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:49:36,158 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:49:36,280 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:36,283 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().xor(-1722704191)
2021-03-11 10:49:36,283 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:49:36,283 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:49:36,283 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:49:36,283 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().countLeadingZeroBits()
2021-03-11 10:49:36,283 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:49:36,283 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:49:36,284 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:49:36,403 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:36,406 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().rotateRight(186135974)
2021-03-11 10:49:36,406 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:49:36,406 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:49:36,406 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:49:36,524 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:36,642 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:36,644 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().coerceIn(-2055764751, 703059013)
2021-03-11 10:49:36,645 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:49:36,645 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:49:36,645 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:49:36,645 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().takeLowestOneBit()
2021-03-11 10:49:36,645 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:49:36,645 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:49:36,645 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:49:36,768 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:36,770 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().minus(42)
2021-03-11 10:49:36,771 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:49:36,771 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09]
2021-03-11 10:49:36,891 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:49:37,009 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:49:37,012 [main:105] - GENERATED CALL = (MyCollection2().iterator()).equals(null).compareTo(true)
2021-03-11 10:49:37,012 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:49:37,012 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:49:37,012 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().sign
2021-03-11 10:49:37,012 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:49:37,012 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:49:37,012 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:49:37,132 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:37,135 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().and(2117705375)
2021-03-11 10:49:37,135 [main:63] - replacement of k-- of type Int is (MyCollection2().iterator()).next().xor(-1722704191)
2021-03-11 10:49:37,252 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:49:37,253 [main:66] - Compilation checking started
2021-03-11 10:49:37,705 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49)
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:37,713 [main:56] - replacing ((MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49), Int)
2021-03-11 10:49:37,715 [main:38] - replacing (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49) Int
2021-03-11 10:49:37,715 [main:42] - Getting value of type Int
2021-03-11 10:49:37,837 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:37,839 [main:46] - GENERATED VALUE OF TYPE Int = 1917015891
2021-03-11 10:49:37,840 [main:49] - GENERATED IS CALL =false
2021-03-11 10:49:37,850 [main:55] - randomType = MyCollection4
2021-03-11 10:49:37,970 [main:302] - generating value of type = MyCollection4 false depth = 0
2021-03-11 10:49:37,973 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:38,094 [main:194] - Type params = []
2021-03-11 10:49:38,219 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyCollection4[DeserializedSimpleFunctionDescriptor@25ea67b1]
2021-03-11 10:49:38,347 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:49:38,347 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:49:38,470 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:49:38,473 [main:66] - Generated call from random type = (MyCollection4()).equals("vixjl").compareTo(true)
2021-03-11 10:49:38,473 [main:94] - GETTING Int from Int
2021-03-11 10:49:38,511 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:49:38,512 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:49:38,512 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:49:38,630 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:38,633 [main:105] - GENERATED CALL = (i).toInt().xor(1772776672)
2021-03-11 10:49:38,634 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@21bef933]]
2021-03-11 10:49:38,634 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:49:38,634 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@21bef933]
2021-03-11 10:49:38,752 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:38,754 [main:105] - GENERATED CALL = (i).toByte().div(-19)
2021-03-11 10:49:38,754 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:49:38,755 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:49:38,914 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:38,917 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:49:39,036 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:39,039 [main:105] - GENERATED CALL = (i).compareTo(-1615993319).coerceAtLeast(-465402171)
2021-03-11 10:49:39,039 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@34c43638]]
2021-03-11 10:49:39,039 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:49:39,039 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@34c43638]
2021-03-11 10:49:39,040 [main:105] - GENERATED CALL = (i).toByte().countLeadingZeroBits()
2021-03-11 10:49:39,040 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@32620f7e]]
2021-03-11 10:49:39,040 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:49:39,040 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@32620f7e]
2021-03-11 10:49:39,158 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:39,161 [main:105] - GENERATED CALL = (i).toByte().rem(44)
2021-03-11 10:49:39,161 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:49:39,161 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:49:39,161 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:49:39,278 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:39,281 [main:105] - GENERATED CALL = (i).toInt().ushr(-332830593)
2021-03-11 10:49:39,281 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2b7987d7]]
2021-03-11 10:49:39,281 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:49:39,281 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2b7987d7]
2021-03-11 10:49:39,281 [main:105] - GENERATED CALL = (i).toByte().countTrailingZeroBits()
2021-03-11 10:49:39,281 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:49:39,281 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:49:39,281 [main:105] - GENERATED CALL = (i).toInt().sign
2021-03-11 10:49:39,281 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:49:39,281 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:49:39,399 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:39,402 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:49:39,402 [main:105] - GENERATED CALL = (i).compareTo(-930426239).countTrailingZeroBits()
2021-03-11 10:49:39,402 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:49:39,402 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:49:39,402 [main:105] - GENERATED CALL = (i).takeLowestOneBit()
2021-03-11 10:49:39,402 [main:63] - replacement of (MyCollection3().iterator()).k.rotateLeft(-576349735) + (MyCollection3().iterator()).k.div(49) of type Int is i
2021-03-11 10:49:39,523 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 10:49:39,523 [main:66] - Compilation checking started
2021-03-11 10:49:40,000 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:40,008 [main:56] - replacing (k--, Int)
2021-03-11 10:49:40,008 [main:38] - replacing k-- Int
2021-03-11 10:49:40,008 [main:42] - Getting value of type Int
2021-03-11 10:49:40,126 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:40,128 [main:46] - GENERATED VALUE OF TYPE Int = 1082526819
2021-03-11 10:49:40,128 [main:49] - GENERATED IS CALL =false
2021-03-11 10:49:40,138 [main:55] - randomType = MyCollection3
2021-03-11 10:49:40,253 [main:302] - generating value of type = MyCollection3 false depth = 0
2021-03-11 10:49:40,256 [main:112] - generating klass MyCollection3 text = class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}
2021-03-11 10:49:40,371 [main:194] - Type params = []
2021-03-11 10:49:40,492 [main:137] - GENERATING call of type public final operator fun iterator(): MyCollection3.MyIterator defined in MyCollection3[SimpleFunctionDescriptorImpl@398befe4]
2021-03-11 10:49:40,493 [main:66] - Generated call from random type = (MyCollection3()).iterator().k
2021-03-11 10:49:40,493 [main:94] - GETTING Int from Int
2021-03-11 10:49:40,530 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:49:40,530 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:49:40,530 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:49:40,530 [main:105] - GENERATED CALL = (i).toInt().unaryMinus()
2021-03-11 10:49:40,530 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:49:40,530 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:49:40,647 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:40,651 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:49:40,769 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:40,772 [main:105] - GENERATED CALL = (i).compareTo(258521940).rem(-104)
2021-03-11 10:49:40,772 [main:101] - Case = [@kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:49:40,772 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:49:40,888 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:40,890 [main:105] - GENERATED CALL = (i).rem(30)
2021-03-11 10:49:40,890 [main:101] - Case = [public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:49:40,890 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:49:40,891 [main:105] - GENERATED CALL = (i).dec()
2021-03-11 10:49:40,891 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:49:40,891 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:49:41,007 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:41,010 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:49:41,127 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:41,130 [main:105] - GENERATED CALL = (i).compareTo(-554007793).div(106)
2021-03-11 10:49:41,130 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@140b0a8d]]
2021-03-11 10:49:41,130 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f]
2021-03-11 10:49:41,245 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:49:41,247 [main:105] - GENERATED CALL = (i).div(9041092108740167869).sign
2021-03-11 10:49:41,247 [main:101] - Case = [public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:49:41,247 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:49:41,248 [main:105] - GENERATED CALL = (i).inc()
2021-03-11 10:49:41,248 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@3fd91132]]
2021-03-11 10:49:41,248 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:49:41,248 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@3fd91132]
2021-03-11 10:49:41,248 [main:105] - GENERATED CALL = (i).toFloat().toInt()
2021-03-11 10:49:41,248 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3f4ea447]]
2021-03-11 10:49:41,248 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:49:41,364 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:41,367 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3f4ea447]
2021-03-11 10:49:41,367 [main:105] - GENERATED CALL = (i).rangeTo(-82).random()
2021-03-11 10:49:41,367 [main:101] - Case = [public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:49:41,367 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:49:41,484 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:41,487 [main:105] - GENERATED CALL = (i).ushr(-185198443)
2021-03-11 10:49:41,487 [main:63] - replacement of k-- of type Int is (i).rem(30)
2021-03-11 10:49:41,604 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:49:41,604 [main:66] - Compilation checking started
2021-03-11 10:49:41,924 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (i).rem(30)
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:41,932 [main:56] - replacing (sum, Int)
2021-03-11 10:49:41,934 [main:38] - replacing sum Int
2021-03-11 10:49:41,934 [main:42] - Getting value of type Int
2021-03-11 10:49:42,051 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:42,054 [main:46] - GENERATED VALUE OF TYPE Int = 904886890
2021-03-11 10:49:42,054 [main:49] - GENERATED IS CALL =false
2021-03-11 10:49:42,192 [main:55] - randomType = ArrayDeque<Double>
2021-03-11 10:49:42,309 [main:302] - generating value of type = ArrayDeque<Double> false depth = 0
2021-03-11 10:49:42,430 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Double>): ArrayDeque<Double> = TODO()
2021-03-11 10:49:42,433 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Double>): ArrayDeque<Double> = TODO()
2021-03-11 10:49:42,697 [main:302] - generating value of type = Collection<Double> false depth = 3
2021-03-11 10:49:42,872 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): Collection<Double> = TODO()
2021-03-11 10:49:42,876 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): Collection<Double> = TODO()
2021-03-11 10:49:42,996 [main:95] - GENERATED = linkedSetOf<Double>()
2021-03-11 10:49:42,996 [main:95] - GENERATED = ArrayDeque<Double>(linkedSetOf<Double>())
2021-03-11 10:49:43,136 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:49:43,252 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:43,255 [main:66] - Generated call from random type = (ArrayDeque<Double>(linkedSetOf<Double>())).size.plus(87)
2021-03-11 10:49:43,255 [main:94] - GETTING Int from Int
2021-03-11 10:49:43,294 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:49:43,294 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:49:43,409 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:43,412 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:49:43,528 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:43,531 [main:105] - GENERATED CALL = (sum).compareTo(92302935).minus(45)
2021-03-11 10:49:43,531 [main:101] - Case = [public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:49:43,531 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:49:43,647 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:43,770 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:43,773 [main:105] - GENERATED CALL = (sum).coerceIn(1761169655, -135960357)
2021-03-11 10:49:43,773 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:49:43,773 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:49:43,773 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:49:43,773 [main:105] - GENERATED CALL = (sum).toInt().countOneBits()
2021-03-11 10:49:43,774 [main:101] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@b2d8722], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ea49e27]]
2021-03-11 10:49:43,774 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@b2d8722]
2021-03-11 10:49:43,892 [main:302] - generating value of type = Float true depth = 0
2021-03-11 10:49:43,895 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ea49e27]
2021-03-11 10:49:43,895 [main:105] - GENERATED CALL = (sum).div(0.074352026f).toRawBits()
2021-03-11 10:49:43,895 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:49:43,895 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:49:43,895 [main:105] - GENERATED CALL = (sum).toInt().sign
2021-03-11 10:49:43,895 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a8376bf]]
2021-03-11 10:49:43,895 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97]
2021-03-11 10:49:43,895 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a8376bf]
2021-03-11 10:49:43,895 [main:105] - GENERATED CALL = (sum).toLong().countOneBits()
2021-03-11 10:49:43,895 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:49:43,895 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:49:43,896 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:49:43,896 [main:105] - GENERATED CALL = (sum).toInt().inv()
2021-03-11 10:49:43,896 [main:101] - Case = [public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:49:43,896 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:49:44,013 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:44,016 [main:105] - GENERATED CALL = (sum).times(-46)
2021-03-11 10:49:44,016 [main:101] - Case = [public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:49:44,016 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:49:44,016 [main:105] - GENERATED CALL = (sum).toInt()
2021-03-11 10:49:44,016 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@57d953ba]]
2021-03-11 10:49:44,016 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:49:44,016 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@57d953ba]
2021-03-11 10:49:44,016 [main:105] - GENERATED CALL = (sum).toByte().toInt()
2021-03-11 10:49:44,016 [main:63] - replacement of sum of type Int is (sum).toInt().sign
2021-03-11 10:49:44,133 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:49:44,134 [main:66] - Compilation checking started
2021-03-11 10:49:44,447 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        (sum).toInt().sign = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:44,455 [main:56] - replacing (k, Int)
2021-03-11 10:49:44,455 [main:38] - replacing k Int
2021-03-11 10:49:44,455 [main:42] - Getting value of type Int
2021-03-11 10:49:44,575 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:44,577 [main:46] - GENERATED VALUE OF TYPE Int = -1231996369
2021-03-11 10:49:44,577 [main:49] - GENERATED IS CALL =false
2021-03-11 10:49:44,847 [main:55] - randomType = ArrayList<ULong>
2021-03-11 10:49:44,966 [main:302] - generating value of type = ArrayList<ULong> false depth = 0
2021-03-11 10:49:45,099 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<ULong> = TODO()
2021-03-11 10:49:45,103 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<ULong> = TODO()
2021-03-11 10:49:45,230 [main:95] - GENERATED = arrayListOf<ULong>()
2021-03-11 10:49:45,383 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:49:45,500 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:45,503 [main:66] - Generated call from random type = (arrayListOf<ULong>()).modCount.times(-56)
2021-03-11 10:49:45,504 [main:94] - GETTING Int from MyIterator
2021-03-11 10:49:45,510 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:49:45,510 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:49:45,627 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:45,629 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.times(-44)
2021-03-11 10:49:45,630 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:49:45,630 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.absoluteValue
2021-03-11 10:49:45,630 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:49:45,630 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:49:45,630 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.inc()
2021-03-11 10:49:45,630 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:49:45,630 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:49:45,749 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:45,752 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.or(1477411679)
2021-03-11 10:49:45,752 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:49:45,752 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:49:45,752 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:49:45,870 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:45,873 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.times(108)
2021-03-11 10:49:45,873 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:49:45,873 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:49:45,873 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:49:45,873 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.inv()
2021-03-11 10:49:45,873 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:49:45,873 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:49:45,873 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:49:45,873 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.unaryMinus()
2021-03-11 10:49:45,873 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:49:45,873 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:49:45,873 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:49:45,990 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:45,993 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.ushr(-1624160489)
2021-03-11 10:49:45,993 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:49:45,993 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:49:45,993 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.countTrailingZeroBits()
2021-03-11 10:49:45,993 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:49:45,993 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:49:46,113 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:46,116 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.coerceAtMost(-352663231)
2021-03-11 10:49:46,116 [main:63] - replacement of k of type Int is (MyCollection3().iterator()).next()?.times(108)
2021-03-11 10:49:46,244 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 10:49:46,244 [main:66] - Compilation checking started
2021-03-11 10:49:46,567 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (MyCollection3().iterator()).next()?.times(108)--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:46,575 [main:56] - replacing (k, Int)
2021-03-11 10:49:46,575 [main:38] - replacing k Int
2021-03-11 10:49:46,575 [main:42] - Getting value of type Int
2021-03-11 10:49:46,692 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:46,734 [main:46] - GENERATED VALUE OF TYPE Int = 909001968
2021-03-11 10:49:46,735 [main:49] - GENERATED IS CALL =false
2021-03-11 10:49:46,867 [main:55] - randomType = ULong
2021-03-11 10:49:46,984 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 10:49:47,020 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@147fe69a]
2021-03-11 10:49:47,021 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UShort.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3e3ebd]
2021-03-11 10:49:47,021 [main:66] - Generated call from random type = (7806565576673955904.toULong()).toUShort().countOneBits()
2021-03-11 10:49:47,022 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:49:47,027 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:49:47,027 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:47,027 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:49:47,145 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:47,148 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().coerceAtLeast(-517598954)
2021-03-11 10:49:47,148 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:49:47,148 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:47,148 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:49:47,148 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().inc()
2021-03-11 10:49:47,148 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:49:47,148 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:47,148 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:49:47,266 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:47,269 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().or(1936425191)
2021-03-11 10:49:47,269 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:49:47,269 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:47,269 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:49:47,388 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:47,390 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().compareTo(83)
2021-03-11 10:49:47,390 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:49:47,390 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:47,390 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:49:47,390 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().toInt()
2021-03-11 10:49:47,390 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:49:47,391 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:47,391 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:49:47,507 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:47,510 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().rotateLeft(-897383875)
2021-03-11 10:49:47,510 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:49:47,510 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:47,510 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:49:47,625 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:47,627 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().and(-1820510293)
2021-03-11 10:49:47,628 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:49:47,628 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:47,628 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:49:47,745 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:47,748 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().minus(-98)
2021-03-11 10:49:47,748 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:49:47,748 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:47,748 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:49:47,866 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:47,868 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().div(-58)
2021-03-11 10:49:47,868 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:49:47,868 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:47,868 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:49:47,985 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:47,988 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().coerceAtMost(-1899799157)
2021-03-11 10:49:47,988 [main:63] - replacement of k of type Int is (MyCollection1().iterator()).next().coerceAtMost(-1899799157)
2021-03-11 10:49:48,107 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:49:48,107 [main:66] - Compilation checking started
2021-03-11 10:49:48,422 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (MyCollection1().iterator()).next().coerceAtMost(-1899799157)--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > 0
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:48,430 [main:56] - replacing (0, Int)
2021-03-11 10:49:48,430 [main:38] - replacing 0 Int
2021-03-11 10:49:48,430 [main:42] - Getting value of type Int
2021-03-11 10:49:48,549 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:48,552 [main:46] - GENERATED VALUE OF TYPE Int = -812823293
2021-03-11 10:49:48,552 [main:49] - GENERATED IS CALL =false
2021-03-11 10:49:48,557 [main:55] - randomType = Long
2021-03-11 10:49:48,672 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:49:48,711 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:49:48,711 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:49:48,826 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:48,828 [main:66] - Generated call from random type = (-320850265710915887).toInt().minus(-48)
2021-03-11 10:49:48,829 [main:94] - GETTING Int from Array<Int?>
2021-03-11 10:49:48,843 [main:101] - Case = [public inline fun <T> kotlin.Array<out T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e45404d]]
2021-03-11 10:49:48,843 [main:137] - GENERATING call of type public inline fun <T> kotlin.Array<out T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e45404d]
2021-03-11 10:49:48,963 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 10:49:48,966 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:49:48,969 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).indexOfLast({a: T -> true})
2021-03-11 10:49:48,969 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:49:48,969 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:49:49,087 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:49,090 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:49:49,206 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:49,208 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(1353170343)?.and(610446238)
2021-03-11 10:49:49,208 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:49:49,208 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.absoluteValue
2021-03-11 10:49:49,208 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:49:49,208 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:49:49,209 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.dec()
2021-03-11 10:49:49,209 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:49:49,209 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:49:49,325 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:49,328 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:49:49,328 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-757846857)?.toInt()
2021-03-11 10:49:49,328 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:49:49,328 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:49:49,445 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:49,563 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:49,566 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.coerceIn(823924244, 1496316218)
2021-03-11 10:49:49,566 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:49:49,566 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:49:49,566 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.unaryPlus()
2021-03-11 10:49:49,566 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@17f8ae0]]
2021-03-11 10:49:49,566 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@17f8ae0]
2021-03-11 10:49:49,566 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).count()
2021-03-11 10:49:49,566 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:49:49,566 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:49:49,681 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:49,684 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.div(-127)
2021-03-11 10:49:49,685 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:49:49,685 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:49:49,803 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:49,806 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:49:49,924 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:49,927 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(1859772778)?.times(127)
2021-03-11 10:49:49,927 [main:63] - replacement of 0 of type Int is -812823293
2021-03-11 10:49:50,042 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-11 10:49:50,042 [main:66] - Compilation checking started
2021-03-11 10:49:50,485 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > -812823293
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:50,495 [main:56] - replacing (MyIterator(), MyIterator)
2021-03-11 10:49:50,495 [main:38] - replacing MyIterator() MyIterator
2021-03-11 10:49:50,495 [main:42] - Getting value of type MyIterator
2021-03-11 10:49:50,615 [main:302] - generating value of type = MyIterator false depth = 0
2021-03-11 10:49:50,617 [main:112] - generating klass MyIterator text = class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
2021-03-11 10:49:50,617 [main:46] - GENERATED VALUE OF TYPE MyIterator = 
2021-03-11 10:49:50,627 [main:55] - randomType = MyCollection4
2021-03-11 10:49:50,784 [main:302] - generating value of type = MyCollection4 false depth = 0
2021-03-11 10:49:50,788 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:50,910 [main:194] - Type params = []
2021-03-11 10:49:51,036 [main:137] - GENERATING call of type public final operator fun iterator(): MyCollection4.MyIterator defined in MyCollection4[SimpleFunctionDescriptorImpl@1a81a42b]
2021-03-11 10:49:51,036 [main:66] - Generated call from random type = (MyCollection4()).iterator()
2021-03-11 10:49:51,037 [main:94] - GETTING MyIterator from Int
2021-03-11 10:49:51,076 [main:94] - GETTING MyIterator from Int
2021-03-11 10:49:51,077 [main:94] - GETTING MyIterator from Iterator<Int>
2021-03-11 10:49:51,085 [main:94] - GETTING MyIterator from MyIterator
2021-03-11 10:49:51,093 [main:63] - replacement of MyIterator() of type MyIterator is (MyCollection4()).iterator()
2021-03-11 10:49:51,212 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:49:51,212 [main:66] - Compilation checking started
2021-03-11 10:49:51,529 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = (MyCollection4()).iterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > -812823293
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:51,537 [main:56] - replacing (sum, Int)
2021-03-11 10:49:51,539 [main:38] - replacing sum Int
2021-03-11 10:49:51,539 [main:42] - Getting value of type Int
2021-03-11 10:49:51,659 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:51,662 [main:46] - GENERATED VALUE OF TYPE Int = 39386114
2021-03-11 10:49:51,662 [main:49] - GENERATED IS CALL =false
2021-03-11 10:49:51,816 [main:55] - randomType = LinkedHashMap<Double, MyCollection2>
2021-03-11 10:49:51,935 [main:302] - generating value of type = LinkedHashMap<Double, MyCollection2> false depth = 0
2021-03-11 10:49:52,060 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Double, MyCollection2> = TODO()
2021-03-11 10:49:52,063 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Double, MyCollection2> = TODO()
2021-03-11 10:49:52,185 [main:95] - GENERATED = linkedMapOf<Double, MyCollection2>()
2021-03-11 10:49:52,308 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:49:52,427 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:52,429 [main:66] - Generated call from random type = (linkedMapOf<Double, MyCollection2>()).size.shr(-1851119985)
2021-03-11 10:49:52,429 [main:94] - GETTING Int from Int
2021-03-11 10:49:52,470 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:49:52,470 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:49:52,586 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:52,589 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:49:52,589 [main:105] - GENERATED CALL = (i).compareTo(238500224).unaryPlus()
2021-03-11 10:49:52,589 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@4af8e595]]
2021-03-11 10:49:52,589 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:49:52,708 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:52,711 [main:105] - GENERATED CALL = (i).rangeTo(-4).endInclusive
2021-03-11 10:49:52,711 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@62aaa4bd]]
2021-03-11 10:49:52,711 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:49:52,711 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@62aaa4bd]
2021-03-11 10:49:52,711 [main:105] - GENERATED CALL = (i).toFloat().roundToInt()
2021-03-11 10:49:52,711 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:49:52,711 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:49:52,711 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:49:52,830 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:52,832 [main:105] - GENERATED CALL = (i).toInt().shr(-738843635)
2021-03-11 10:49:52,833 [main:101] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@b2d8722], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ea49e27]]
2021-03-11 10:49:52,833 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@b2d8722]
2021-03-11 10:49:52,952 [main:302] - generating value of type = Float true depth = 0
2021-03-11 10:49:52,954 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ea49e27]
2021-03-11 10:49:52,955 [main:105] - GENERATED CALL = (i).div(0.66898465f).toRawBits()
2021-03-11 10:49:52,955 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@719372c6]]
2021-03-11 10:49:52,955 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:49:52,955 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@719372c6]
2021-03-11 10:49:52,955 [main:105] - GENERATED CALL = (i).toShort().unaryPlus()
2021-03-11 10:49:52,955 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:49:52,955 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:49:53,072 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:53,075 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:49:53,192 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:53,194 [main:105] - GENERATED CALL = (i).compareTo(398757265).coerceAtMost(735766979)
2021-03-11 10:49:53,194 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:49:53,194 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:49:53,310 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:53,313 [main:105] - GENERATED CALL = (i).compareTo(110)
2021-03-11 10:49:53,313 [main:101] - Case = [public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:49:53,313 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:49:53,313 [main:105] - GENERATED CALL = (i).toInt()
2021-03-11 10:49:53,313 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:49:53,313 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:49:53,433 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:53,435 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:49:53,558 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:53,560 [main:105] - GENERATED CALL = (i).compareTo(-575212217).shr(-1270184554)
2021-03-11 10:49:53,560 [main:63] - replacement of sum of type Int is (i).toInt().shr(-738843635)
2021-03-11 10:49:53,676 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:49:53,677 [main:66] - Compilation checking started
2021-03-11 10:49:53,986 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = 0
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        (i).toInt().shr(-738843635) = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > -812823293
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:53,994 [main:56] - replacing (sum, Int)
2021-03-11 10:49:53,994 [main:38] - replacing sum Int
2021-03-11 10:49:53,994 [main:42] - Getting value of type Int
2021-03-11 10:49:54,112 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:54,115 [main:46] - GENERATED VALUE OF TYPE Int = -1979967898
2021-03-11 10:49:54,115 [main:49] - GENERATED IS CALL =false
2021-03-11 10:49:54,127 [main:55] - randomType = MyCollection1
2021-03-11 10:49:54,244 [main:302] - generating value of type = MyCollection1 false depth = 0
2021-03-11 10:49:54,246 [main:112] - generating klass MyCollection1 text = class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}
2021-03-11 10:49:54,361 [main:194] - Type params = []
2021-03-11 10:49:54,495 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun <T> kotlin.collections.Iterable<T>.maxWithOrNull(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@122a96f9]
2021-03-11 10:49:54,614 [main:302] - generating value of type = Comparator<in T> false depth = 0
2021-03-11 10:49:54,776 [main:43] - GENERATING CALL OF fun <T> compareByDescending(selector: (T)->kotlin.Comparable<*>?): Comparator<T> = TODO()
2021-03-11 10:49:54,780 [main:61] - WITHOUT TYPE PARAMS = fun <T> compareByDescending(selector: (T)->kotlin.Comparable<*>?): Comparator<T> = TODO()
2021-03-11 10:49:55,044 [main:385] - Cant generate call of fun <T> compareByDescending(selector: (T)->kotlin.Comparable<*>?): Comparator<T> = TODO()
2021-03-11 10:49:55,044 [main:144] - CANT GENERATE PARAMS FOR @kotlin.SinceKotlin public fun <T> kotlin.collections.Iterable<T>.maxWithOrNull(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@122a96f9]
2021-03-11 10:49:55,044 [main:66] - Generated call from random type = (MyCollection1()).null!!
2021-03-11 10:49:55,045 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:49:55,054 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:49:55,054 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:49:55,054 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:49:55,054 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().unaryPlus()
2021-03-11 10:49:55,054 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:49:55,055 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:49:55,055 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:49:55,055 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().countLeadingZeroBits()
2021-03-11 10:49:55,055 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:49:55,055 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:49:55,055 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:49:55,172 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:55,174 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().shr(-1309030938)
2021-03-11 10:49:55,174 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:49:55,174 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:49:55,174 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().absoluteValue
2021-03-11 10:49:55,175 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:49:55,175 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:49:55,175 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:49:55,175 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().inc()
2021-03-11 10:49:55,175 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:49:55,175 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:49:55,175 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:49:55,175 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().countTrailingZeroBits()
2021-03-11 10:49:55,175 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:49:55,175 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:49:55,175 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:49:55,175 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().unaryMinus()
2021-03-11 10:49:55,175 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:49:55,175 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:49:55,175 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:49:55,175 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().toInt()
2021-03-11 10:49:55,175 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:49:55,175 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:49:55,176 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:49:55,292 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:55,295 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().plus(110)
2021-03-11 10:49:55,295 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:49:55,295 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:49:55,295 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:49:55,411 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:55,414 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().or(1029601633)
2021-03-11 10:49:55,414 [main:63] - replacement of sum of type Int is (MyCollection2().iterator()).next().unaryMinus()
2021-03-11 10:49:55,529 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:49:55,537 [main:56] - replacing (0, Int)
2021-03-11 10:49:55,539 [main:38] - replacing 0 Int
2021-03-11 10:49:55,539 [main:42] - Getting value of type Int
2021-03-11 10:49:55,655 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:55,658 [main:46] - GENERATED VALUE OF TYPE Int = 272097281
2021-03-11 10:49:55,658 [main:49] - GENERATED IS CALL =false
2021-03-11 10:49:55,668 [main:55] - randomType = MyCollection4
2021-03-11 10:49:55,789 [main:302] - generating value of type = MyCollection4 false depth = 0
2021-03-11 10:49:55,792 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:55,907 [main:194] - Type params = []
2021-03-11 10:49:56,027 [main:137] - GENERATING call of type public final operator fun iterator(): MyCollection4.MyIterator defined in MyCollection4[SimpleFunctionDescriptorImpl@3dfcd3bd]
2021-03-11 10:49:56,027 [main:66] - Generated call from random type = (MyCollection4()).iterator().k
2021-03-11 10:49:56,027 [main:94] - GETTING Int from Int
2021-03-11 10:49:56,065 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:49:56,065 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:49:56,181 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:56,183 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:49:56,184 [main:105] - GENERATED CALL = (sum).compareTo(-168946968).countTrailingZeroBits()
2021-03-11 10:49:56,184 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@4af8e595]]
2021-03-11 10:49:56,184 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:49:56,305 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:56,308 [main:105] - GENERATED CALL = (sum).rangeTo(-15).endInclusive
2021-03-11 10:49:56,308 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@13c687d3]]
2021-03-11 10:49:56,308 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:49:56,308 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@13c687d3]
2021-03-11 10:49:56,423 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:56,426 [main:105] - GENERATED CALL = (sum).toFloat().compareTo(106)
2021-03-11 10:49:56,426 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:49:56,426 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:49:56,542 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:56,545 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:49:56,545 [main:105] - GENERATED CALL = (sum).compareTo(-2085305627).inv()
2021-03-11 10:49:56,545 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:49:56,545 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:49:56,545 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:49:56,660 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:56,663 [main:105] - GENERATED CALL = (sum).toInt().times(77)
2021-03-11 10:49:56,663 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1679473f]]
2021-03-11 10:49:56,663 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:49:56,663 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1679473f]
2021-03-11 10:49:56,663 [main:105] - GENERATED CALL = (sum).toShort().countTrailingZeroBits()
2021-03-11 10:49:56,663 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12f06cb], @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@5959e353]]
2021-03-11 10:49:56,663 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12f06cb]
2021-03-11 10:49:56,663 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@5959e353]
2021-03-11 10:49:56,663 [main:105] - GENERATED CALL = (sum).toDouble().roundToInt()
2021-03-11 10:49:56,663 [main:101] - Case = [public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:49:56,663 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:49:56,779 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:56,782 [main:105] - GENERATED CALL = (sum).xor(-29035806)
2021-03-11 10:49:56,783 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:49:56,783 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:49:56,783 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:49:56,902 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:56,905 [main:105] - GENERATED CALL = (sum).toInt().coerceAtLeast(-2043814637)
2021-03-11 10:49:56,905 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@3fd91132]]
2021-03-11 10:49:56,905 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:49:56,905 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@3fd91132]
2021-03-11 10:49:56,905 [main:105] - GENERATED CALL = (sum).toFloat().toInt()
2021-03-11 10:49:56,905 [main:63] - replacement of 0 of type Int is (sum).rangeTo(-15).endInclusive
2021-03-11 10:49:57,022 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:49:57,023 [main:66] - Compilation checking started
2021-03-11 10:49:57,467 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = 0
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > -812823293
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:57,475 [main:56] - replacing (0, Int)
2021-03-11 10:49:57,476 [main:38] - replacing 0 Int
2021-03-11 10:49:57,476 [main:42] - Getting value of type Int
2021-03-11 10:49:57,595 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:57,597 [main:46] - GENERATED VALUE OF TYPE Int = -1204451167
2021-03-11 10:49:57,597 [main:49] - GENERATED IS CALL =false
2021-03-11 10:49:57,603 [main:55] - randomType = Boolean
2021-03-11 10:49:57,724 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:49:57,737 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:49:57,853 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:49:57,856 [main:66] - Generated call from random type = (false).compareTo(false).absoluteValue
2021-03-11 10:49:57,857 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:49:57,862 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:49:57,862 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:57,862 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:49:57,863 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().countOneBits()
2021-03-11 10:49:57,863 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:49:57,863 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:57,863 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:49:57,863 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().unaryMinus()
2021-03-11 10:49:57,863 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:49:57,863 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:57,863 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:49:57,863 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().takeLowestOneBit()
2021-03-11 10:49:57,863 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:49:57,863 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09]
2021-03-11 10:49:57,982 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:49:57,982 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:49:58,102 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:49:58,105 [main:105] - GENERATED CALL = (MyCollection1().iterator()).equals("sbgqd").compareTo(false)
2021-03-11 10:49:58,105 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:49:58,105 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:58,105 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:49:58,229 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:58,232 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().and(-479542928)
2021-03-11 10:49:58,232 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:49:58,232 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:58,232 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:49:58,356 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:58,358 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().times(-28)
2021-03-11 10:49:58,358 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:49:58,358 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:58,358 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:49:58,482 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:58,485 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().minus(52)
2021-03-11 10:49:58,485 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:49:58,485 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:58,485 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:49:58,606 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:49:58,609 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().rotateLeft(-280498786)
2021-03-11 10:49:58,609 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:49:58,609 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:58,609 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:49:58,728 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:49:58,731 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().rem(125)
2021-03-11 10:49:58,731 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:49:58,731 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:49:58,731 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().absoluteValue
2021-03-11 10:49:58,731 [main:63] - replacement of 0 of type Int is -1204451167
2021-03-11 10:49:58,900 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-11 10:49:58,900 [main:66] - Compilation checking started
2021-03-11 10:49:59,350 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > -812823293
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:49:59,364 [main:56] - replacing (k > -812823293, Boolean)
2021-03-11 10:49:59,364 [main:38] - replacing k > -812823293 Boolean
2021-03-11 10:49:59,364 [main:42] - Getting value of type Boolean
2021-03-11 10:49:59,497 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:49:59,499 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:49:59,500 [main:49] - GENERATED IS CALL =false
2021-03-11 10:50:00,092 [main:55] - randomType = MutableMap<MyCollection2, HashMap<MutableMap<Char?, Long>, Byte>>
2021-03-11 10:50:00,092 [main:94] - GETTING Boolean from Int
2021-03-11 10:50:00,132 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37542446]]
2021-03-11 10:50:00,132 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:50:00,133 [main:137] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37542446]
2021-03-11 10:50:00,133 [main:105] - GENERATED CALL = (el ?: 0).toChar().isLowerCase()
2021-03-11 10:50:00,133 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74998df4]]
2021-03-11 10:50:00,133 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:50:00,133 [main:137] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74998df4]
2021-03-11 10:50:00,133 [main:105] - GENERATED CALL = (el ?: 0).toChar().isSurrogate()
2021-03-11 10:50:00,133 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@99ee4f1]]
2021-03-11 10:50:00,133 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:50:00,251 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:00,254 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@99ee4f1]
2021-03-11 10:50:00,371 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:50:00,371 [main:105] - GENERATED CALL = (el ?: 0).rangeTo(-84).equals("qgjxu")
2021-03-11 10:50:00,371 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cb2732a]]
2021-03-11 10:50:00,371 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:50:00,371 [main:137] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cb2732a]
2021-03-11 10:50:00,371 [main:105] - GENERATED CALL = (el ?: 0).toChar().isLetterOrDigit()
2021-03-11 10:50:00,371 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]]
2021-03-11 10:50:00,371 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:50:00,371 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]
2021-03-11 10:50:00,489 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:50:00,490 [main:105] - GENERATED CALL = (el ?: 0).toInt().equals("goqkt")
2021-03-11 10:50:00,490 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6fdca6c8]]
2021-03-11 10:50:00,490 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431]
2021-03-11 10:50:00,611 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:50:00,613 [main:137] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6fdca6c8]
2021-03-11 10:50:00,613 [main:105] - GENERATED CALL = (el ?: 0).div(0.04967642114956272).isInfinite()
2021-03-11 10:50:00,614 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@197346a8]]
2021-03-11 10:50:00,614 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431]
2021-03-11 10:50:00,732 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:50:00,734 [main:137] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@197346a8]
2021-03-11 10:50:00,734 [main:105] - GENERATED CALL = (el ?: 0).div(0.06731562174817729).isNaN()
2021-03-11 10:50:00,734 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6523a69a]]
2021-03-11 10:50:00,734 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431]
2021-03-11 10:50:00,852 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:50:00,855 [main:137] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6523a69a]
2021-03-11 10:50:00,855 [main:105] - GENERATED CALL = (el ?: 0).div(0.6918738482738922).isFinite()
2021-03-11 10:50:00,855 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@2d87d802]]
2021-03-11 10:50:00,855 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:50:00,855 [main:137] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@2d87d802]
2021-03-11 10:50:00,855 [main:105] - GENERATED CALL = (el ?: 0).toFloat().isFinite()
2021-03-11 10:50:00,855 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@51247d00]]
2021-03-11 10:50:00,856 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431]
2021-03-11 10:50:00,971 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:50:00,974 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@51247d00]
2021-03-11 10:50:01,096 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:50:01,097 [main:105] - GENERATED CALL = (el ?: 0).div(0.803416734796002).equals("fghke")
2021-03-11 10:50:01,097 [main:63] - replacement of k > -812823293 of type Boolean is (el ?: 0).toInt().equals("goqkt")
2021-03-11 10:50:01,216 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:50:01,216 [main:66] - Compilation checking started
2021-03-11 10:50:01,538 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (el ?: 0).toInt().equals("goqkt")
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 5

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:50:01,546 [main:56] - replacing (5, Int)
2021-03-11 10:50:01,546 [main:38] - replacing 5 Int
2021-03-11 10:50:01,546 [main:42] - Getting value of type Int
2021-03-11 10:50:01,662 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:01,664 [main:46] - GENERATED VALUE OF TYPE Int = 771072035
2021-03-11 10:50:01,665 [main:49] - GENERATED IS CALL =false
2021-03-11 10:50:01,819 [main:55] - randomType = HashMap<Int, Double>
2021-03-11 10:50:01,938 [main:302] - generating value of type = HashMap<Int, Double> false depth = 0
2021-03-11 10:50:02,062 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): HashMap<Int, Double> = TODO()
2021-03-11 10:50:02,067 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): HashMap<Int, Double> = TODO()
2021-03-11 10:50:02,189 [main:95] - GENERATED = hashMapOf<Int, Double>()
2021-03-11 10:50:02,293 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:50:02,294 [main:66] - Generated call from random type = (hashMapOf<Int, Double>()).size.inc()
2021-03-11 10:50:02,294 [main:63] - replacement of 5 of type Int is (hashMapOf<Int, Double>()).size.inc()
2021-03-11 10:50:02,410 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:50:02,411 [main:66] - Compilation checking started
2021-03-11 10:50:02,921 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > -812823293
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:50:02,930 [main:56] - replacing (0, Int)
2021-03-11 10:50:02,931 [main:38] - replacing 0 Int
2021-03-11 10:50:02,931 [main:42] - Getting value of type Int
2021-03-11 10:50:03,063 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:03,066 [main:46] - GENERATED VALUE OF TYPE Int = -1297350986
2021-03-11 10:50:03,066 [main:49] - GENERATED IS CALL =false
2021-03-11 10:50:03,072 [main:55] - randomType = Long
2021-03-11 10:50:03,242 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:50:03,316 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97]
2021-03-11 10:50:03,316 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@674346bc]
2021-03-11 10:50:03,317 [main:66] - Generated call from random type = (-4325868639568202290).toLong().countTrailingZeroBits()
2021-03-11 10:50:03,318 [main:94] - GETTING Int from MyIterator
2021-03-11 10:50:03,327 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:50:03,327 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:50:03,448 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:03,451 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.rotateRight(-2045153497)
2021-03-11 10:50:03,451 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:50:03,451 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:50:03,571 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:03,574 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.rotateLeft(1089608525)
2021-03-11 10:50:03,574 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:50:03,574 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:50:03,574 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:50:03,692 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:03,694 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.or(-17233685)
2021-03-11 10:50:03,694 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:50:03,694 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:50:03,694 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:50:03,814 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:50:03,817 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext().compareTo(false)
2021-03-11 10:50:03,817 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:50:03,817 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:50:03,817 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.dec()
2021-03-11 10:50:03,817 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:50:03,817 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:50:03,938 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:03,940 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.coerceAtMost(-813020785)
2021-03-11 10:50:03,940 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:50:03,940 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:50:03,940 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:50:04,058 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:04,061 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.and(-1166082900)
2021-03-11 10:50:04,061 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:50:04,061 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:50:04,061 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.inv()
2021-03-11 10:50:04,061 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:50:04,061 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:50:04,062 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.countLeadingZeroBits()
2021-03-11 10:50:04,062 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]]
2021-03-11 10:50:04,062 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:50:04,062 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()
2021-03-11 10:50:04,062 [main:63] - replacement of 0 of type Int is (MyCollection3().iterator()).next()?.and(-1166082900)
2021-03-11 10:50:04,182 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 10:50:04,183 [main:66] - Compilation checking started
2021-03-11 10:50:04,509 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = (MyCollection3().iterator()).next()?.and(-1166082900)
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = k > -812823293
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:50:04,519 [main:56] - replacing (k > -812823293, Boolean)
2021-03-11 10:50:04,519 [main:38] - replacing k > -812823293 Boolean
2021-03-11 10:50:04,519 [main:42] - Getting value of type Boolean
2021-03-11 10:50:04,640 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:50:04,643 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:50:04,643 [main:49] - GENERATED IS CALL =false
2021-03-11 10:50:04,790 [main:55] - randomType = String?
2021-03-11 10:50:04,913 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:50:04,939 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34f572c6]
2021-03-11 10:50:05,062 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:05,064 [main:137] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e06ac34]
2021-03-11 10:50:05,065 [main:66] - Generated call from random type = ("bgfcd")?.get(1774620633).isISOControl()
2021-03-11 10:50:05,066 [main:94] - GETTING Boolean from MyIterator
2021-03-11 10:50:05,072 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]]
2021-03-11 10:50:05,072 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:50:05,072 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext()
2021-03-11 10:50:05,072 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fb50dd8]]
2021-03-11 10:50:05,072 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:50:05,072 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fb50dd8]
2021-03-11 10:50:05,192 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:50:05,194 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext().xor(true)
2021-03-11 10:50:05,194 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]]
2021-03-11 10:50:05,195 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:50:05,195 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]
2021-03-11 10:50:05,313 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:50:05,313 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.equals("qnygo")
2021-03-11 10:50:05,313 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@11eceb90]]
2021-03-11 10:50:05,313 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:50:05,313 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@11eceb90]
2021-03-11 10:50:05,433 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:50:05,435 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext().or(false)
2021-03-11 10:50:05,435 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@35500bca]]
2021-03-11 10:50:05,435 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:50:05,436 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@35500bca]
2021-03-11 10:50:05,556 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:50:05,556 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext().equals("svlmm")
2021-03-11 10:50:05,556 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]]
2021-03-11 10:50:05,556 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]
2021-03-11 10:50:05,675 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:50:05,675 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.equals("rqdav")
2021-03-11 10:50:05,675 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6d9d9a5]]
2021-03-11 10:50:05,675 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:50:05,675 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6d9d9a5]
2021-03-11 10:50:05,792 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:50:05,794 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext().and(true)
2021-03-11 10:50:05,794 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@cf10153]]
2021-03-11 10:50:05,794 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:50:05,794 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@cf10153]
2021-03-11 10:50:05,795 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext().not()
2021-03-11 10:50:05,795 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyCollection3.MyIterator[DeserializedSimpleFunctionDescriptor@3d80332c]]
2021-03-11 10:50:05,795 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyCollection3.MyIterator[DeserializedSimpleFunctionDescriptor@3d80332c]
2021-03-11 10:50:05,911 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:50:05,911 [main:105] - GENERATED CALL = (MyCollection3().iterator()).equals("oqrfh")
2021-03-11 10:50:05,911 [main:63] - replacement of k > -812823293 of type Boolean is (MyCollection3().iterator()).hasNext()
2021-03-11 10:50:06,028 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:50:06,029 [main:66] - Compilation checking started
2021-03-11 10:50:06,508 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if(sum != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:50:06,517 [main:56] - replacing (sum, Int)
2021-03-11 10:50:06,518 [main:38] - replacing sum Int
2021-03-11 10:50:06,518 [main:42] - Getting value of type Int
2021-03-11 10:50:06,637 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:06,639 [main:46] - GENERATED VALUE OF TYPE Int = 1176294475
2021-03-11 10:50:06,639 [main:49] - GENERATED IS CALL =false
2021-03-11 10:50:06,644 [main:55] - randomType = Float
2021-03-11 10:50:06,765 [main:302] - generating value of type = Float true depth = 0
2021-03-11 10:50:06,804 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@20a14fcf]
2021-03-11 10:50:06,804 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@c73734c]
2021-03-11 10:50:06,927 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:06,929 [main:66] - Generated call from random type = (0.91081476f).toByte().times(-87)
2021-03-11 10:50:06,930 [main:94] - GETTING Int from MyIterator
2021-03-11 10:50:06,935 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:50:06,935 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:50:06,935 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.inc()
2021-03-11 10:50:06,935 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:50:06,935 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:50:07,054 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:07,057 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.or(1633631638)
2021-03-11 10:50:07,057 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:50:07,057 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:50:07,174 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:07,300 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:07,303 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.coerceIn(1861092843, -1958578461)
2021-03-11 10:50:07,303 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:50:07,303 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:50:07,303 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.countOneBits()
2021-03-11 10:50:07,303 [main:101] - Case = [public final operator fun next(): kotlin.Int defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@8257a56]]
2021-03-11 10:50:07,303 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@8257a56]
2021-03-11 10:50:07,303 [main:105] - GENERATED CALL = (MyCollection4().iterator()).next()
2021-03-11 10:50:07,303 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:50:07,303 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:50:07,421 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:07,424 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.coerceAtLeast(1389448599)
2021-03-11 10:50:07,424 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:50:07,424 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:50:07,582 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:07,585 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.shr(-1687504822)
2021-03-11 10:50:07,585 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:50:07,585 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.sign
2021-03-11 10:50:07,585 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:50:07,585 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:50:07,585 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.dec()
2021-03-11 10:50:07,585 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:50:07,585 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:50:07,702 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:07,705 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.div(63)
2021-03-11 10:50:07,705 [main:63] - replacement of sum of type Int is (MyCollection4().iterator()).k.div(63)
2021-03-11 10:50:07,822 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:50:07,822 [main:66] - Compilation checking started
2021-03-11 10:50:08,323 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:50:08,333 [main:56] - replacing (sum, Int)
2021-03-11 10:50:08,334 [main:38] - replacing sum Int
2021-03-11 10:50:08,334 [main:42] - Getting value of type Int
2021-03-11 10:50:08,455 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:08,458 [main:46] - GENERATED VALUE OF TYPE Int = -66582725
2021-03-11 10:50:08,458 [main:49] - GENERATED IS CALL =false
2021-03-11 10:50:08,601 [main:55] - randomType = LinkedHashSet<String>
2021-03-11 10:50:08,721 [main:302] - generating value of type = LinkedHashSet<String> false depth = 0
2021-03-11 10:50:08,846 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(): LinkedHashSet<String> = TODO()
2021-03-11 10:50:08,850 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(): LinkedHashSet<String> = TODO()
2021-03-11 10:50:08,976 [main:95] - GENERATED = LinkedHashSet<String>()
2021-03-11 10:50:09,112 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:50:09,234 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:09,237 [main:66] - Generated call from random type = (LinkedHashSet<String>()).size.div(95)
2021-03-11 10:50:09,237 [main:94] - GETTING Int from Int
2021-03-11 10:50:09,289 [main:101] - Case = [public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:50:09,289 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:50:09,289 [main:105] - GENERATED CALL = (sum).inv()
2021-03-11 10:50:09,289 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a8376bf]]
2021-03-11 10:50:09,289 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97]
2021-03-11 10:50:09,289 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a8376bf]
2021-03-11 10:50:09,289 [main:105] - GENERATED CALL = (sum).toLong().countOneBits()
2021-03-11 10:50:09,289 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:50:09,289 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:50:09,413 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:09,416 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:50:09,537 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:09,540 [main:105] - GENERATED CALL = (sum).compareTo(-1276254316).div(-8)
2021-03-11 10:50:09,540 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@3fd91132]]
2021-03-11 10:50:09,540 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:50:09,540 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@3fd91132]
2021-03-11 10:50:09,540 [main:105] - GENERATED CALL = (sum).toFloat().toInt()
2021-03-11 10:50:09,540 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:50:09,540 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:50:09,660 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:09,663 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:50:09,787 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:09,790 [main:105] - GENERATED CALL = (sum).compareTo(504009525).rotateLeft(-1495372345)
2021-03-11 10:50:09,790 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:50:09,790 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:50:09,913 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:09,916 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:50:10,038 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:10,041 [main:105] - GENERATED CALL = (sum).compareTo(-865511018).shl(938880811)
2021-03-11 10:50:10,041 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@140b0a8d]]
2021-03-11 10:50:10,041 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f]
2021-03-11 10:50:10,164 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:50:10,167 [main:105] - GENERATED CALL = (sum).div(3833248124683094305).sign
2021-03-11 10:50:10,167 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:50:10,167 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:50:10,167 [main:105] - GENERATED CALL = (sum).toInt().absoluteValue
2021-03-11 10:50:10,167 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@f49fa44]]
2021-03-11 10:50:10,167 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:50:10,167 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@f49fa44]
2021-03-11 10:50:10,167 [main:105] - GENERATED CALL = (sum).toByte().unaryPlus()
2021-03-11 10:50:10,167 [main:101] - Case = [public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:50:10,167 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:50:10,292 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:10,295 [main:105] - GENERATED CALL = (sum).times(118)
2021-03-11 10:50:10,295 [main:63] - replacement of sum of type Int is -66582725
2021-03-11 10:50:10,416 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 10:50:10,417 [main:66] - Compilation checking started
2021-03-11 10:50:10,738 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        -66582725 = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:50:10,746 [main:56] - replacing (sum, Int)
2021-03-11 10:50:10,748 [main:38] - replacing sum Int
2021-03-11 10:50:10,748 [main:42] - Getting value of type Int
2021-03-11 10:50:10,870 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:10,873 [main:46] - GENERATED VALUE OF TYPE Int = 1354389605
2021-03-11 10:50:10,873 [main:49] - GENERATED IS CALL =false
2021-03-11 10:50:11,010 [main:55] - randomType = ULong
2021-03-11 10:50:11,130 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 10:50:11,169 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@47b37870]
2021-03-11 10:50:11,169 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UByte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@71d93d18]
2021-03-11 10:50:11,170 [main:66] - Generated call from random type = (5998017002511465648.toULong()).toUByte().countTrailingZeroBits()
2021-03-11 10:50:11,170 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:50:11,176 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:50:11,176 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:50:11,176 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:50:11,297 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:11,301 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().ushr(-691289142)
2021-03-11 10:50:11,301 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:50:11,302 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09]
2021-03-11 10:50:11,420 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:50:11,420 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:50:11,538 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:50:11,541 [main:105] - GENERATED CALL = (MyCollection2().iterator()).equals("bmhvt").compareTo(false)
2021-03-11 10:50:11,541 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:50:11,541 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:50:11,541 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:50:11,660 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:11,662 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().and(828205812)
2021-03-11 10:50:11,662 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:50:11,662 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:50:11,662 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:50:11,663 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().dec()
2021-03-11 10:50:11,663 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:50:11,663 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:50:11,663 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:50:11,784 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:11,787 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().coerceAtMost(1628862653)
2021-03-11 10:50:11,787 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:50:11,787 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:50:11,787 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:50:11,945 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:11,948 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().shl(-2050486789)
2021-03-11 10:50:11,948 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:50:11,948 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:50:11,948 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:50:12,076 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:12,078 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().minus(66)
2021-03-11 10:50:12,078 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:50:12,078 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:50:12,079 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:50:12,079 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().takeHighestOneBit()
2021-03-11 10:50:12,079 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:50:12,079 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:50:12,079 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:50:12,197 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:12,319 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:12,322 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().coerceIn(4134434, -1980365797)
2021-03-11 10:50:12,322 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:50:12,322 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:50:12,322 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:50:12,323 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().takeLowestOneBit()
2021-03-11 10:50:12,323 [main:63] - replacement of sum of type Int is (MyCollection2().iterator()).next().shl(-2050486789)
2021-03-11 10:50:12,445 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:50:12,445 [main:66] - Compilation checking started
2021-03-11 10:50:12,768 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        (MyCollection2().iterator()).next().shl(-2050486789) = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:50:12,777 [main:56] - replacing (k, Int)
2021-03-11 10:50:12,777 [main:38] - replacing k Int
2021-03-11 10:50:12,777 [main:42] - Getting value of type Int
2021-03-11 10:50:12,899 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:12,902 [main:46] - GENERATED VALUE OF TYPE Int = -1511941069
2021-03-11 10:50:12,902 [main:49] - GENERATED IS CALL =false
2021-03-11 10:50:13,036 [main:55] - randomType = Short
2021-03-11 10:50:13,155 [main:302] - generating value of type = Short true depth = 0
2021-03-11 10:50:13,193 [main:137] - GENERATING call of type public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@65649892]
2021-03-11 10:50:13,194 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@55d433d4]
2021-03-11 10:50:13,317 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:13,320 [main:66] - Generated call from random type = (20069).toShort().div(-49)
2021-03-11 10:50:13,321 [main:94] - GETTING Int from Array<Int?>
2021-03-11 10:50:13,332 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:50:13,332 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:50:13,450 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:13,453 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:50:13,573 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:13,576 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(909463408)?.or(1079840446)
2021-03-11 10:50:13,576 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:50:13,576 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:50:13,695 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:13,698 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.ushr(-1932577970)
2021-03-11 10:50:13,698 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:50:13,698 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.sign
2021-03-11 10:50:13,699 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:50:13,699 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:50:13,699 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.dec()
2021-03-11 10:50:13,699 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:50:13,699 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:50:13,834 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:13,838 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.div(-45)
2021-03-11 10:50:13,838 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:50:13,838 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:50:13,967 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:13,970 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.shl(-1888492984)
2021-03-11 10:50:13,970 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:50:13,970 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:50:14,092 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:14,095 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.rotateRight(945703379)
2021-03-11 10:50:14,095 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:50:14,095 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:50:14,217 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:14,220 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:50:14,220 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-274444825)?.unaryMinus()
2021-03-11 10:50:14,220 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:50:14,220 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:50:14,220 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.countTrailingZeroBits()
2021-03-11 10:50:14,220 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:50:14,220 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:50:14,342 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:14,345 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:50:14,464 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:14,467 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-2106747387)?.div(96)
2021-03-11 10:50:14,467 [main:63] - replacement of k of type Int is (arrayOfNulls<Int>(5)).size.shl(-1888492984)
2021-03-11 10:50:14,586 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:50:14,586 [main:66] - Compilation checking started
2021-03-11 10:50:14,923 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (arrayOfNulls<Int>(5)).size.shl(-1888492984)--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:50:14,932 [main:56] - replacing (sum, Int)
2021-03-11 10:50:14,933 [main:38] - replacing sum Int
2021-03-11 10:50:14,933 [main:42] - Getting value of type Int
2021-03-11 10:50:15,052 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:15,055 [main:46] - GENERATED VALUE OF TYPE Int = 1784671671
2021-03-11 10:50:15,055 [main:49] - GENERATED IS CALL =false
2021-03-11 10:50:15,476 [main:55] - randomType = Triple<MyCollection1, UShort, Short>
2021-03-11 10:50:15,595 [main:302] - generating value of type = Triple<MyCollection1, UShort, Short> false depth = 0
2021-03-11 10:50:15,724 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: MyCollection1, second: UShort, third: Short): Triple<MyCollection1, UShort, Short> = TODO()
2021-03-11 10:50:15,727 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: MyCollection1, second: UShort, third: Short): Triple<MyCollection1, UShort, Short> = TODO()
2021-03-11 10:50:15,849 [main:302] - generating value of type = MyCollection1 false depth = 3
2021-03-11 10:50:15,853 [main:112] - generating klass MyCollection1 text = class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}
2021-03-11 10:50:15,989 [main:194] - Type params = []
2021-03-11 10:50:16,112 [main:302] - generating value of type = UShort true depth = 3
2021-03-11 10:50:16,115 [main:302] - generating value of type = Short true depth = 3
2021-03-11 10:50:16,117 [main:95] - GENERATED = Triple<MyCollection1, UShort, Short>(MyCollection1(), 4947.toUShort(), 24906)
2021-03-11 10:50:16,137 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Triple[DeserializedSimpleFunctionDescriptor@18476636]
2021-03-11 10:50:16,298 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:50:16,298 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:50:16,414 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:50:16,418 [main:66] - Generated call from random type = (Triple<MyCollection1, UShort, Short>(MyCollection1(), 4947.toUShort(), 24906)).equals("wshwl").compareTo(false)
2021-03-11 10:50:16,418 [main:94] - GETTING Int from Int
2021-03-11 10:50:16,462 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@63c4310c]]
2021-03-11 10:50:16,462 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:50:16,462 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@63c4310c]
2021-03-11 10:50:16,573 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:16,576 [main:105] - GENERATED CALL = (el ?: 0).toShort().compareTo(-115)
2021-03-11 10:50:16,576 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:50:16,576 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:50:16,576 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:50:16,577 [main:105] - GENERATED CALL = (el ?: 0).toInt().inv()
2021-03-11 10:50:16,577 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:50:16,577 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:50:16,577 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:50:16,688 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:16,691 [main:105] - GENERATED CALL = (el ?: 0).toInt().coerceAtMost(-1616000672)
2021-03-11 10:50:16,691 [main:101] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@b2d8722], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@11d995f6]]
2021-03-11 10:50:16,691 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@b2d8722]
2021-03-11 10:50:16,802 [main:302] - generating value of type = Float true depth = 0
2021-03-11 10:50:16,805 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@11d995f6]
2021-03-11 10:50:16,805 [main:105] - GENERATED CALL = (el ?: 0).div(0.45188195f).toBits()
2021-03-11 10:50:16,805 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:50:16,805 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:50:16,917 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:16,919 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:50:17,031 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:17,034 [main:105] - GENERATED CALL = (el ?: 0).compareTo(-1334629101).or(2083134149)
2021-03-11 10:50:17,034 [main:101] - Case = [public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:50:17,034 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:50:17,034 [main:105] - GENERATED CALL = (el ?: 0).inv()
2021-03-11 10:50:17,034 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:50:17,034 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:50:17,035 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:50:17,146 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:17,149 [main:105] - GENERATED CALL = (el ?: 0).toInt().xor(1685734007)
2021-03-11 10:50:17,149 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:50:17,149 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:50:17,260 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:17,263 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:50:17,263 [main:105] - GENERATED CALL = (el ?: 0).compareTo(1495172583).countOneBits()
2021-03-11 10:50:17,263 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:50:17,263 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:50:17,376 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:17,379 [main:105] - GENERATED CALL = (el ?: 0).compareTo(37)
2021-03-11 10:50:17,379 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@34c43638]]
2021-03-11 10:50:17,379 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:50:17,379 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@34c43638]
2021-03-11 10:50:17,379 [main:105] - GENERATED CALL = (el ?: 0).toByte().countLeadingZeroBits()
2021-03-11 10:50:17,379 [main:63] - replacement of sum of type Int is (el ?: 0).toInt().xor(1685734007)
2021-03-11 10:50:17,490 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:50:17,490 [main:66] - Compilation checking started
2021-03-11 10:50:17,822 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in c6) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        (el ?: 0).toInt().xor(1685734007) = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:50:17,830 [main:56] - replacing (c6, MyCollection4)
2021-03-11 10:50:17,832 [main:38] - replacing c6 MyCollection4
2021-03-11 10:50:17,832 [main:42] - Getting value of type MyCollection4
2021-03-11 10:50:17,945 [main:302] - generating value of type = MyCollection4 false depth = 0
2021-03-11 10:50:17,948 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:50:18,060 [main:194] - Type params = []
2021-03-11 10:50:18,172 [main:46] - GENERATED VALUE OF TYPE MyCollection4 = MyCollection4()
2021-03-11 10:50:18,172 [main:49] - GENERATED IS CALL =true
2021-03-11 10:50:18,301 [main:55] - randomType = UByte
2021-03-11 10:50:18,414 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:50:18,443 [main:94] - GETTING MyCollection4 from Iterator<Int>
2021-03-11 10:50:18,448 [main:94] - GETTING MyCollection4 from Iterator<Int>
2021-03-11 10:50:18,449 [main:94] - GETTING MyCollection4 from MyIterator
2021-03-11 10:50:18,456 [main:94] - GETTING MyCollection4 from Int
2021-03-11 10:50:18,488 [main:94] - GETTING MyCollection4 from Int
2021-03-11 10:50:18,488 [main:94] - GETTING MyCollection4 from Array<Int?>
2021-03-11 10:50:18,499 [main:94] - GETTING MyCollection4 from MyIterator
2021-03-11 10:50:18,499 [main:94] - GETTING MyCollection4 from Int
2021-03-11 10:50:18,499 [main:63] - replacement of c6 of type MyCollection4 is MyCollection4()
2021-03-11 10:50:18,611 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 10:50:18,612 [main:66] - Compilation checking started
2021-03-11 10:50:19,050 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:50:19,058 [main:56] - replacing (sum, Int)
2021-03-11 10:50:19,060 [main:38] - replacing sum Int
2021-03-11 10:50:19,060 [main:42] - Getting value of type Int
2021-03-11 10:50:19,175 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:19,178 [main:46] - GENERATED VALUE OF TYPE Int = 1121885996
2021-03-11 10:50:19,178 [main:49] - GENERATED IS CALL =false
2021-03-11 10:50:19,188 [main:55] - randomType = MyCollection1
2021-03-11 10:50:19,301 [main:302] - generating value of type = MyCollection1 false depth = 0
2021-03-11 10:50:19,304 [main:112] - generating klass MyCollection1 text = class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}
2021-03-11 10:50:19,417 [main:194] - Type params = []
2021-03-11 10:50:19,540 [main:137] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.sumBy(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@124a8d9d]
2021-03-11 10:50:19,653 [main:302] - generating value of type = Function1<T, Int> false depth = 0
2021-03-11 10:50:19,655 [main:302] - generating value of type = Int true depth = 1
2021-03-11 10:50:19,658 [main:66] - Generated call from random type = (MyCollection1()).sumBy({a: T -> 780894114})
2021-03-11 10:50:19,659 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:50:19,664 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:50:19,664 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:50:19,664 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:50:19,665 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().takeHighestOneBit()
2021-03-11 10:50:19,665 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:50:19,665 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:50:19,665 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().absoluteValue
2021-03-11 10:50:19,665 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:50:19,665 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:50:19,665 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:50:19,777 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:19,779 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().div(78)
2021-03-11 10:50:19,779 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:50:19,779 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:50:19,779 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:50:19,780 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().unaryPlus()
2021-03-11 10:50:19,780 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:50:19,780 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:50:19,780 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:50:19,891 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:19,894 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().ushr(-1810955438)
2021-03-11 10:50:19,894 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:50:19,894 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:50:19,894 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:50:19,894 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().toInt()
2021-03-11 10:50:19,894 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:50:19,894 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:50:19,894 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().sign
2021-03-11 10:50:19,894 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:50:19,894 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:50:19,894 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:50:19,894 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().inv()
2021-03-11 10:50:19,894 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:50:19,894 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:50:19,895 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:50:20,007 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:20,009 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().coerceAtLeast(-1001212518)
2021-03-11 10:50:20,009 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:50:20,009 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:50:20,009 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:50:20,010 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().inc()
2021-03-11 10:50:20,010 [main:63] - replacement of sum of type Int is (MyCollection1().iterator()).next().toInt()
2021-03-11 10:50:20,121 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:50:20,121 [main:66] - Compilation checking started
2021-03-11 10:50:20,464 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        (MyCollection1().iterator()).next().toInt() = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true)) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:50:20,472 [main:56] - replacing (el, Int)
2021-03-11 10:50:20,472 [main:38] - replacing el Int
2021-03-11 10:50:20,472 [main:42] - Getting value of type Int
2021-03-11 10:50:20,585 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:20,588 [main:46] - GENERATED VALUE OF TYPE Int = -2127776353
2021-03-11 10:50:20,588 [main:49] - GENERATED IS CALL =false
2021-03-11 10:50:20,853 [main:55] - randomType = Set<MyCollection2>
2021-03-11 10:50:20,854 [main:94] - GETTING Int from Array<Int?>
2021-03-11 10:50:20,865 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:50:20,865 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:50:20,977 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:20,980 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:50:21,094 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:21,097 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(691201125)?.xor(-1132302216)
2021-03-11 10:50:21,097 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:50:21,097 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:50:21,210 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:21,213 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:50:21,324 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:21,327 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-1000219773)?.or(-1340635205)
2021-03-11 10:50:21,327 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:50:21,327 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:50:21,440 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:21,442 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:50:21,443 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-1234854081)?.unaryPlus()
2021-03-11 10:50:21,443 [main:101] - Case = [public inline fun <T> kotlin.Array<out T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e45404d]]
2021-03-11 10:50:21,443 [main:137] - GENERATING call of type public inline fun <T> kotlin.Array<out T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e45404d]
2021-03-11 10:50:21,555 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 10:50:21,557 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:50:21,560 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).indexOfLast({a: T -> false})
2021-03-11 10:50:21,560 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:50:21,560 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:50:21,560 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.countTrailingZeroBits()
2021-03-11 10:50:21,560 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:50:21,560 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:50:21,672 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:21,675 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:50:21,675 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-227350087)?.unaryMinus()
2021-03-11 10:50:21,675 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepHashCode(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@46619276]]
2021-03-11 10:50:21,675 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepHashCode(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@46619276]
2021-03-11 10:50:21,675 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).contentDeepHashCode()
2021-03-11 10:50:21,675 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:50:21,675 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:50:21,675 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.countLeadingZeroBits()
2021-03-11 10:50:21,675 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:50:21,675 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:50:21,787 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:21,789 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.and(-452249700)
2021-03-11 10:50:21,790 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:50:21,790 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:50:21,790 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.inv()
2021-03-11 10:50:21,790 [main:63] - replacement of el of type Int is (arrayOfNulls<Int>(5)).get(-1234854081)?.unaryPlus()
2021-03-11 10:50:21,901 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 10:50:21,909 [main:56] - replacing ((MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true), Boolean)
2021-03-11 10:50:21,911 [main:38] - replacing (MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true) Boolean
2021-03-11 10:50:21,911 [main:42] - Getting value of type Boolean
2021-03-11 10:50:22,023 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:50:22,026 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:50:22,026 [main:49] - GENERATED IS CALL =false
2021-03-11 10:50:22,733 [main:55] - randomType = Pair<LinkedHashMap<Float, Double>, Pair<Byte, MyCollection3?>>?
2021-03-11 10:50:22,845 [main:302] - generating value of type = Pair<LinkedHashMap<Float, Double>, Pair<Byte, MyCollection3?>> false depth = 0
2021-03-11 10:50:22,966 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: LinkedHashMap<Float, Double>, second: Pair<Byte, MyCollection3?>): Pair<LinkedHashMap<Float, Double>, Pair<Byte, MyCollection3?>> = TODO()
2021-03-11 10:50:22,970 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: LinkedHashMap<Float, Double>, second: Pair<Byte, MyCollection3?>): Pair<LinkedHashMap<Float, Double>, Pair<Byte, MyCollection3?>> = TODO()
2021-03-11 10:50:23,090 [main:302] - generating value of type = LinkedHashMap<Float, Double> false depth = 3
2021-03-11 10:50:23,207 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Float, Double> = TODO()
2021-03-11 10:50:23,211 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Float, Double> = TODO()
2021-03-11 10:50:23,328 [main:95] - GENERATED = linkedMapOf<Float, Double>()
2021-03-11 10:50:23,329 [main:302] - generating value of type = Pair<Byte, MyCollection3?> false depth = 3
2021-03-11 10:50:23,447 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Byte, second: MyCollection3?): Pair<Byte, MyCollection3?> = TODO()
2021-03-11 10:50:23,451 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Byte, second: MyCollection3?): Pair<Byte, MyCollection3?> = TODO()
2021-03-11 10:50:23,567 [main:302] - generating value of type = Byte true depth = 6
2021-03-11 10:50:23,570 [main:302] - generating value of type = MyCollection3 false depth = 6
2021-03-11 10:50:23,572 [main:112] - generating klass MyCollection3 text = class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}
2021-03-11 10:50:23,684 [main:194] - Type params = []
2021-03-11 10:50:23,796 [main:95] - GENERATED = Pair<Byte, MyCollection3?>(-81, MyCollection3())
2021-03-11 10:50:23,796 [main:95] - GENERATED = Pair<LinkedHashMap<Float, Double>, Pair<Byte, MyCollection3?>>(linkedMapOf<Float, Double>(), Pair<Byte, MyCollection3?>(-81, MyCollection3()))
2021-03-11 10:50:23,826 [main:137] - GENERATING call of type public open fun containsKey(key: kotlin.Float): kotlin.Boolean defined in kotlin.collections.LinkedHashMap[DeserializedSimpleFunctionDescriptor@42980879]
2021-03-11 10:50:23,938 [main:302] - generating value of type = Float true depth = 0
2021-03-11 10:50:23,941 [main:66] - Generated call from random type = (Pair<LinkedHashMap<Float, Double>, Pair<Byte, MyCollection3?>>(linkedMapOf<Float, Double>(), Pair<Byte, MyCollection3?>(-81, MyCollection3())))?.first.containsKey(0.3479293f)
2021-03-11 10:50:23,942 [main:94] - GETTING Boolean from Array<Int?>
2021-03-11 10:50:23,953 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2760da68], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@35500bca]]
2021-03-11 10:50:23,953 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2760da68]
2021-03-11 10:50:24,065 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:50:24,065 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@35500bca]
2021-03-11 10:50:24,178 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:50:24,178 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).equals("tnzni").equals("qcjgm")
2021-03-11 10:50:24,178 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2760da68]]
2021-03-11 10:50:24,178 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2760da68]
2021-03-11 10:50:24,336 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:50:24,336 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).equals("vrpoc")
2021-03-11 10:50:24,337 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2760da68], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@11eceb90]]
2021-03-11 10:50:24,337 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2760da68]
2021-03-11 10:50:24,450 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:50:24,450 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@11eceb90]
2021-03-11 10:50:24,564 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:50:24,567 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).equals("jfiun").or(false)
2021-03-11 10:50:24,567 [main:101] - Case = [public final operator fun iterator(): kotlin.collections.Iterator<kotlin.Int?> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@688b308a], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@4c209832]]
2021-03-11 10:50:24,567 [main:137] - GENERATING call of type public final operator fun iterator(): kotlin.collections.Iterator<kotlin.Int?> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@688b308a]
2021-03-11 10:50:24,567 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@4c209832]
2021-03-11 10:50:24,680 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:50:24,681 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).iterator().equals("igzac")
2021-03-11 10:50:24,681 [main:101] - Case = [public fun <T> kotlin.Array<out T>.any(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6412f19]]
2021-03-11 10:50:24,681 [main:137] - GENERATING call of type public fun <T> kotlin.Array<out T>.any(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6412f19]
2021-03-11 10:50:24,681 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).any()
2021-03-11 10:50:24,681 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]]
2021-03-11 10:50:24,681 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]
2021-03-11 10:50:24,794 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:50:24,794 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.equals("thpad")
2021-03-11 10:50:24,795 [main:101] - Case = [public operator fun <@kotlin.internal.OnlyInputTypes T> kotlin.Array<out T>.contains(element: T): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@379957ec]]
2021-03-11 10:50:24,795 [main:137] - GENERATING call of type public operator fun <@kotlin.internal.OnlyInputTypes T> kotlin.Array<out T>.contains(element: T): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@379957ec]
2021-03-11 10:50:24,907 [main:302] - generating value of type = T false depth = 0
2021-03-11 10:50:25,035 [main:43] - GENERATING CALL OF fun <T> requireNotNull(value: MyCollection4, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-11 10:50:25,039 [main:61] - WITHOUT TYPE PARAMS = fun <T> requireNotNull(value: MyCollection4, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-11 10:50:25,287 [main:302] - generating value of type = MyCollection4 false depth = 3
2021-03-11 10:50:25,290 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:50:25,402 [main:194] - Type params = []
2021-03-11 10:50:25,515 [main:302] - generating value of type = Function0<Any> false depth = 3
2021-03-11 10:50:25,518 [main:302] - generating value of type = Any false depth = 4
2021-03-11 10:50:25,518 [main:95] - GENERATED = requireNotNull<MyCollection4>(MyCollection4(), { "bdxpa"})
2021-03-11 10:50:25,518 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).contains(requireNotNull<MyCollection4>(MyCollection4(), { "bdxpa"}))
2021-03-11 10:50:25,518 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2760da68], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fb50dd8]]
2021-03-11 10:50:25,518 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2760da68]
2021-03-11 10:50:25,632 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:50:25,632 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fb50dd8]
2021-03-11 10:50:25,745 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:50:25,748 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).equals("rznli").xor(true)
2021-03-11 10:50:25,748 [main:101] - Case = [@kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public infix fun <T> kotlin.Array<out T>.contentEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@70e75ffa]]
2021-03-11 10:50:25,748 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public infix fun <T> kotlin.Array<out T>.contentEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@70e75ffa]
2021-03-11 10:50:25,861 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 10:50:25,980 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 10:50:25,984 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 10:50:26,103 [main:302] - generating value of type = T false depth = 3
2021-03-11 10:50:27,901 [main:43] - GENERATING CALL OF fun <T> maxOf(a: Function2<Byte, Sequence<MyCollection2>, Function2<List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, String>>, MutableMap<MyCollection1, Double>, Long?>>, b: Function2<Byte, Sequence<MyCollection2>, Function2<List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, String>>, MutableMap<MyCollection1, Double>, Long?>>, comparator: kotlin.Comparator<Function2<Byte, Sequence<MyCollection2>, Function2<List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, String>>, MutableMap<MyCollection1, Double>, Long?>>>): T = TODO()
2021-03-11 10:50:27,905 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: Function2<Byte, Sequence<MyCollection2>, Function2<List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, String>>, MutableMap<MyCollection1, Double>, Long?>>, b: Function2<Byte, Sequence<MyCollection2>, Function2<List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, String>>, MutableMap<MyCollection1, Double>, Long?>>, comparator: kotlin.Comparator<Function2<Byte, Sequence<MyCollection2>, Function2<List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, String>>, MutableMap<MyCollection1, Double>, Long?>>>): T = TODO()
2021-03-11 10:50:28,184 [main:302] - generating value of type = Function2<Byte, Sequence<MyCollection2>, Function2<List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, String>>, MutableMap<MyCollection1, Double>, Long?>> false depth = 6
2021-03-11 10:50:28,187 [main:302] - generating value of type = Function2<List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, String>>, MutableMap<MyCollection1, Double>, Long?> false depth = 7
2021-03-11 10:50:28,189 [main:302] - generating value of type = Long true depth = 8
2021-03-11 10:50:28,192 [main:302] - generating value of type = Function2<Byte, Sequence<MyCollection2>, Function2<List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, String>>, MutableMap<MyCollection1, Double>, Long?>> false depth = 6
2021-03-11 10:50:28,195 [main:302] - generating value of type = Function2<List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, String>>, MutableMap<MyCollection1, Double>, Long?> false depth = 7
2021-03-11 10:50:28,198 [main:302] - generating value of type = Long true depth = 8
2021-03-11 10:50:28,201 [main:302] - generating value of type = Comparator<Function2<Byte, Sequence<MyCollection2>, Function2<List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, String>>, MutableMap<MyCollection1, Double>, Long?>>> false depth = 6
2021-03-11 10:50:28,383 [main:43] - GENERATING CALL OF fun <T> compareBy(selectors: Function1<Function2<Byte, Sequence<MyCollection2>, Function2<List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, String>>, MutableMap<MyCollection1, Double>, Long?>>, Comparable<*>?>): Comparator<Function2<Byte, Sequence<MyCollection2>, Function2<List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, Strg>>, MutableMap<MyCollection1, Double>, Long?>>> = TODO()
2021-03-11 10:50:28,387 [main:61] - WITHOUT TYPE PARAMS = fun <T> compareBy(selectors: Function1<Function2<Byte, Sequence<MyCollection2>, Function2<List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, String>>, MutableMap<MyCollection1, Double>, Long?>>, Comparable<*>?>): Comparator<Function2<Byte, Sequence<MyCollection2>, Function2<List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, Strg>>, MutableMap<MyCollection1, Double>, Long?>>> = TODO()
2021-03-11 10:50:28,507 [main:302] - generating value of type = Function1<Function2<Byte, Sequence<MyCollection2>, Function2<List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, String>>, MutableMap<MyCollection1, Double>, Long?>>, Comparable<*>?> false depth = 9
2021-03-11 10:50:28,510 [main:302] - generating value of type = Comparable<*> false depth = 10
2021-03-11 10:50:28,516 [main:95] - GENERATED = compareBy<Function2<Byte, Sequence<MyCollection2>, Function2<List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, String>>, MutableMap<MyCollection1, Double>, Long?>>>({a: Function2<Byte, Sequence<MyCollection2>, Function2<List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, String>>, MutableMap<MyCollection1, Double>, Long?>> -> -22841})
2021-03-11 10:50:28,517 [main:95] - GENERATED = maxOf<Function2<Byte, Sequence<MyCollection2>, Function2<List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, String>>, MutableMap<MyCollection1, Double>, Long?>>>({a: Byte, b: Sequence<MyCollection2> -> {a: List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, String>>, b: MutableMap<MyCollection1, Double> -> 1477422477202314657}}, {a: Byte, b: Sequence<MyCollection2> -> {a: List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, String>>, b: MutableMap<MyCollection1, Double> -> 2759651891142547119}}, compareBy<Function2<Byte, Sequence<MyCollection2>, Function2<List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, String>>, MutableMap<MyCollection1, Double>, Long?>>>({a: Function2<Byte, Sequence<MyCollection2>, Function2<List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, String>>, MutableMap<MyCollection1, Double>, Long?>> -> -22841}))
2021-03-11 10:50:28,517 [main:95] - GENERATED = arrayOf<T>(maxOf<Function2<Byte, Sequence<MyCollection2>, Function2<List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, String>>, MutableMap<MyCollection1, Double>, Long?>>>({a: Byte, b: Sequence<MyCollection2> -> {a: List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, String>>, b: MutableMap<MyCollection1, Double> -> 1477422477202314657}}, {a: Byte, b: Sequence<MyCollection2> -> {a: List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, String>>, b: MutableMap<MyCollection1, Double> -> 2759651891142547119}}, compareBy<Function2<Byte, Sequence<MyCollection2>, Function2<List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, String>>, MutableMap<MyCollection1, Double>, Long?>>>({a: Function2<Byte, Sequence<MyCollection2>, Function2<List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, String>>, MutableMap<MyCollection1, Double>, Long?>> -> -22841})))
2021-03-11 10:50:28,519 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).contentEquals(arrayOf<T>(maxOf<Function2<Byte, Sequence<MyCollection2>, Function2<List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, String>>, MutableMap<MyCollection1, Double>, Long?>>>({a: Byte, b: Sequence<MyCollection2> -> {a: List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, String>>, b: MutableMap<MyCollection1, Double> -> 1477422477202314657}}, {a: Byte, b: Sequence<MyCollection2> -> {a: List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, String>>, b: MutableMap<MyCollection1, Double> -> 2759651891142547119}}, compareBy<Function2<Byte, Sequence<MyCollection2>, Function2<List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, String>>, MutableMap<MyCollection1, Double>, Long?>>>({a: Function2<Byte, Sequence<MyCollection2>, Function2<List<Pair<Function1<Sequence<MyCollection3>, HashSet<List<Byte>>?>, String>>, MutableMap<MyCollection1, Double>, Long?>> -> -22841}))))
2021-03-11 10:50:28,519 [main:101] - Case = [public final operator fun set(index: kotlin.Int, value: kotlin.Int?): kotlin.Unit defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@6a086111], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@9c9dc88]]
2021-03-11 10:50:28,519 [main:137] - GENERATING call of type public final operator fun set(index: kotlin.Int, value: kotlin.Int?): kotlin.Unit defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@6a086111]
2021-03-11 10:50:28,632 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:28,746 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:28,748 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@9c9dc88]
2021-03-11 10:50:28,859 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:50:28,860 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")
2021-03-11 10:50:28,860 [main:63] - replacement of (MyCollection1().iterator()).next().rotateLeft(144432137) != (MyCollection2().iterator()).equals("tfmdg").compareTo(true) of type Boolean is (arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")
2021-03-11 10:50:28,971 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:50:28,971 [main:66] - Compilation checking started
2021-03-11 10:50:29,406 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:50:29,414 [main:56] - replacing (sum, Int)
2021-03-11 10:50:29,415 [main:38] - replacing sum Int
2021-03-11 10:50:29,415 [main:42] - Getting value of type Int
2021-03-11 10:50:29,526 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:29,529 [main:46] - GENERATED VALUE OF TYPE Int = 1855710988
2021-03-11 10:50:29,529 [main:49] - GENERATED IS CALL =false
2021-03-11 10:50:30,217 [main:55] - randomType = Triple<ArrayList<MyCollection4?>, MyCollection4, MyCollection1?>?
2021-03-11 10:50:30,329 [main:302] - generating value of type = Triple<ArrayList<MyCollection4?>, MyCollection4, MyCollection1?> false depth = 0
2021-03-11 10:50:30,446 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: ArrayList<MyCollection4?>, second: MyCollection4, third: MyCollection1?): Triple<ArrayList<MyCollection4?>, MyCollection4, MyCollection1?> = TODO()
2021-03-11 10:50:30,450 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: ArrayList<MyCollection4?>, second: MyCollection4, third: MyCollection1?): Triple<ArrayList<MyCollection4?>, MyCollection4, MyCollection1?> = TODO()
2021-03-11 10:50:30,566 [main:302] - generating value of type = ArrayList<MyCollection4?> false depth = 3
2021-03-11 10:50:30,683 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: MyCollection4?): ArrayList<MyCollection4?> = TODO()
2021-03-11 10:50:30,687 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: MyCollection4?): ArrayList<MyCollection4?> = TODO()
2021-03-11 10:50:30,802 [main:302] - generating value of type = MyCollection4 false depth = 6
2021-03-11 10:50:30,805 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:50:30,916 [main:194] - Type params = []
2021-03-11 10:50:31,027 [main:95] - GENERATED = arrayListOf<MyCollection4?>(MyCollection4())
2021-03-11 10:50:31,027 [main:302] - generating value of type = MyCollection4 false depth = 3
2021-03-11 10:50:31,029 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:50:31,140 [main:194] - Type params = []
2021-03-11 10:50:31,250 [main:95] - GENERATED = Triple<ArrayList<MyCollection4?>, MyCollection4, MyCollection1?>(arrayListOf<MyCollection4?>(MyCollection4()), MyCollection4(), null)
2021-03-11 10:50:31,275 [main:137] - GENERATING call of type public open fun indexOf(element: MyCollection4?): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7ed2b512]
2021-03-11 10:50:31,386 [main:302] - generating value of type = MyCollection4 false depth = 0
2021-03-11 10:50:31,389 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:50:31,500 [main:194] - Type params = []
2021-03-11 10:50:31,611 [main:66] - Generated call from random type = (Triple<ArrayList<MyCollection4?>, MyCollection4, MyCollection1?>(arrayListOf<MyCollection4?>(MyCollection4()), MyCollection4(), null))?.first.indexOf(MyCollection4())
2021-03-11 10:50:31,612 [main:94] - GETTING Int from MyIterator
2021-03-11 10:50:31,617 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:50:31,618 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:50:31,730 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:31,733 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.or(-943357595)
2021-03-11 10:50:31,733 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:50:31,733 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:50:31,733 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.toInt()
2021-03-11 10:50:31,733 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:50:31,733 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:50:31,844 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:31,846 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.compareTo(124)
2021-03-11 10:50:31,846 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:50:31,846 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.absoluteValue
2021-03-11 10:50:31,846 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:50:31,846 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:50:31,958 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:31,960 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.shr(162205533)
2021-03-11 10:50:31,960 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:50:31,960 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:50:32,072 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:32,187 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:32,189 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.coerceIn(1460204973, -872288999)
2021-03-11 10:50:32,189 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:50:32,189 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:50:32,190 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.countTrailingZeroBits()
2021-03-11 10:50:32,190 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:50:32,190 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:50:32,300 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:32,303 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.shl(100818134)
2021-03-11 10:50:32,303 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:50:32,303 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:50:32,303 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.countOneBits()
2021-03-11 10:50:32,303 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:50:32,303 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:50:32,303 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.takeHighestOneBit()
2021-03-11 10:50:32,303 [main:63] - replacement of sum of type Int is (MyCollection4().iterator()).k.shr(162205533)
2021-03-11 10:50:32,414 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:50:32,414 [main:66] - Compilation checking started
2021-03-11 10:50:32,762 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    (MyCollection4().iterator()).k.shr(162205533) = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:50:32,770 [main:56] - replacing (k, Int)
2021-03-11 10:50:32,770 [main:38] - replacing k Int
2021-03-11 10:50:32,770 [main:42] - Getting value of type Int
2021-03-11 10:50:32,882 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:32,884 [main:46] - GENERATED VALUE OF TYPE Int = 1452054875
2021-03-11 10:50:32,884 [main:49] - GENERATED IS CALL =false
2021-03-11 10:50:33,302 [main:55] - randomType = LinkedHashSet<LinkedHashMap<MyCollection4, Function1<Long, Long>>>
2021-03-11 10:50:33,414 [main:302] - generating value of type = LinkedHashSet<LinkedHashMap<MyCollection4, Function1<Long, Long>>> false depth = 0
2021-03-11 10:50:33,533 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(): LinkedHashSet<LinkedHashMap<MyCollection4, Function1<Long, Long>>> = TODO()
2021-03-11 10:50:33,537 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(): LinkedHashSet<LinkedHashMap<MyCollection4, Function1<Long, Long>>> = TODO()
2021-03-11 10:50:33,653 [main:95] - GENERATED = LinkedHashSet<LinkedHashMap<MyCollection4, Function1<Long, Long>>>()
2021-03-11 10:50:33,842 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@634de158]
2021-03-11 10:50:33,843 [main:66] - Generated call from random type = (LinkedHashSet<LinkedHashMap<MyCollection4, Function1<Long, Long>>>()).toArray().lastIndex
2021-03-11 10:50:33,843 [main:94] - GETTING Int from Int
2021-03-11 10:50:33,872 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@68c62048]]
2021-03-11 10:50:33,872 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f]
2021-03-11 10:50:33,983 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:50:33,986 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@68c62048]
2021-03-11 10:50:33,986 [main:105] - GENERATED CALL = (sum).div(-7441700803700300168).countLeadingZeroBits()
2021-03-11 10:50:33,986 [main:101] - Case = [public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:50:33,986 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:50:34,099 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:34,102 [main:105] - GENERATED CALL = (sum).shl(2061738662)
2021-03-11 10:50:34,102 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:50:34,102 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]
2021-03-11 10:50:34,212 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:50:34,213 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:50:34,324 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:50:34,327 [main:105] - GENERATED CALL = (sum).equals("fkcom").compareTo(true)
2021-03-11 10:50:34,327 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:50:34,327 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:50:34,327 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:50:34,439 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:34,441 [main:105] - GENERATED CALL = (sum).toInt().or(-685233145)
2021-03-11 10:50:34,441 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2b7987d7]]
2021-03-11 10:50:34,441 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:50:34,441 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2b7987d7]
2021-03-11 10:50:34,441 [main:105] - GENERATED CALL = (sum).toByte().countTrailingZeroBits()
2021-03-11 10:50:34,442 [main:101] - Case = [public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:50:34,442 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:50:34,555 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:34,558 [main:105] - GENERATED CALL = (sum).ushr(874753878)
2021-03-11 10:50:34,558 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5775f993]]
2021-03-11 10:50:34,558 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:50:34,558 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5775f993]
2021-03-11 10:50:34,669 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:50:34,672 [main:105] - GENERATED CALL = (sum).toChar().compareTo('斨')
2021-03-11 10:50:34,672 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:50:34,672 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:50:34,672 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:50:34,783 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:34,786 [main:105] - GENERATED CALL = (sum).toInt().rem(-56)
2021-03-11 10:50:34,786 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:50:34,786 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:50:34,786 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:50:34,897 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:34,899 [main:105] - GENERATED CALL = (sum).toInt().plus(-1)
2021-03-11 10:50:34,899 [main:101] - Case = [public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:50:34,899 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:50:34,899 [main:105] - GENERATED CALL = (sum).inc()
2021-03-11 10:50:34,899 [main:63] - replacement of k of type Int is (sum).ushr(874753878)
2021-03-11 10:50:35,010 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:50:35,010 [main:66] - Compilation checking started
2021-03-11 10:50:35,363 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (sum).ushr(874753878)--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:50:35,372 [main:56] - replacing (sum, Int)
2021-03-11 10:50:35,373 [main:38] - replacing sum Int
2021-03-11 10:50:35,373 [main:42] - Getting value of type Int
2021-03-11 10:50:35,488 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:35,491 [main:46] - GENERATED VALUE OF TYPE Int = -1792605011
2021-03-11 10:50:35,491 [main:49] - GENERATED IS CALL =false
2021-03-11 10:50:35,496 [main:55] - randomType = Int
2021-03-11 10:50:35,611 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:35,644 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:50:35,755 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:35,758 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:50:35,869 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:35,872 [main:66] - Generated call from random type = (1326811189).compareTo(565360471).xor(-291176020)
2021-03-11 10:50:35,872 [main:94] - GETTING Int from Int
2021-03-11 10:50:35,901 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@21bef933]]
2021-03-11 10:50:35,901 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:50:35,901 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@21bef933]
2021-03-11 10:50:36,013 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:36,015 [main:105] - GENERATED CALL = (i).toByte().div(124)
2021-03-11 10:50:36,015 [main:101] - Case = [public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:50:36,015 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:50:36,015 [main:105] - GENERATED CALL = (i).unaryMinus()
2021-03-11 10:50:36,015 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:50:36,016 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:50:36,128 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:36,130 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:50:36,130 [main:105] - GENERATED CALL = (i).compareTo(-595513694).inv()
2021-03-11 10:50:36,130 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@3fd91132]]
2021-03-11 10:50:36,130 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:50:36,131 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@3fd91132]
2021-03-11 10:50:36,131 [main:105] - GENERATED CALL = (i).toFloat().toInt()
2021-03-11 10:50:36,131 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@63c4310c]]
2021-03-11 10:50:36,131 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:50:36,131 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@63c4310c]
2021-03-11 10:50:36,242 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:36,245 [main:105] - GENERATED CALL = (i).toShort().compareTo(-99)
2021-03-11 10:50:36,245 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], public final val last: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@21a92708]]
2021-03-11 10:50:36,245 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:50:36,356 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:36,359 [main:105] - GENERATED CALL = (i).rangeTo(-3).last
2021-03-11 10:50:36,360 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:50:36,360 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:50:36,471 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:36,474 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:50:36,585 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:36,587 [main:105] - GENERATED CALL = (i).compareTo(772679146).rotateLeft(636953070)
2021-03-11 10:50:36,587 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:50:36,587 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:50:36,587 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:50:36,588 [main:105] - GENERATED CALL = (i).toInt().countTrailingZeroBits()
2021-03-11 10:50:36,588 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:50:36,588 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:50:36,588 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:50:36,588 [main:105] - GENERATED CALL = (i).toInt().inc()
2021-03-11 10:50:36,588 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:50:36,588 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:50:36,588 [main:105] - GENERATED CALL = (i).countOneBits()
2021-03-11 10:50:36,588 [main:63] - replacement of sum of type Int is -1792605011
2021-03-11 10:50:36,700 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 10:50:36,700 [main:66] - Compilation checking started
2021-03-11 10:50:37,046 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    -1792605011 = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:50:37,054 [main:56] - replacing (k, Int)
2021-03-11 10:50:37,054 [main:38] - replacing k Int
2021-03-11 10:50:37,054 [main:42] - Getting value of type Int
2021-03-11 10:50:37,165 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:37,168 [main:46] - GENERATED VALUE OF TYPE Int = -1375897816
2021-03-11 10:50:37,168 [main:49] - GENERATED IS CALL =false
2021-03-11 10:50:37,173 [main:55] - randomType = UInt
2021-03-11 10:50:37,284 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 10:50:37,312 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@10097dc]
2021-03-11 10:50:37,424 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:50:37,427 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:50:37,564 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:37,568 [main:66] - Generated call from random type = (1748835584.toUInt()).compareTo(37.toUByte()).coerceAtMost(1824345884)
2021-03-11 10:50:37,569 [main:94] - GETTING Int from Array<Int?>
2021-03-11 10:50:37,592 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:50:37,592 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:50:37,592 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.dec()
2021-03-11 10:50:37,592 [main:101] - Case = [public inline fun <T> kotlin.Array<out T>.indexOfFirst(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@79423ae4]]
2021-03-11 10:50:37,592 [main:137] - GENERATING call of type public inline fun <T> kotlin.Array<out T>.indexOfFirst(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@79423ae4]
2021-03-11 10:50:37,755 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 10:50:37,759 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:50:37,762 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).indexOfFirst({a: T -> false})
2021-03-11 10:50:37,762 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:50:37,762 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:50:37,882 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:37,884 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.times(107)
2021-03-11 10:50:37,884 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:50:37,884 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:50:37,885 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.inv()
2021-03-11 10:50:37,885 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:50:37,885 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:50:38,004 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:38,007 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:50:38,007 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-1507900787)?.inv()
2021-03-11 10:50:38,007 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:50:38,007 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:50:38,135 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:38,137 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:50:38,256 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:38,259 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(298207373)?.minus(-22)
2021-03-11 10:50:38,259 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:50:38,260 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.sign
2021-03-11 10:50:38,260 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:50:38,260 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:50:38,376 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:38,379 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:50:38,494 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:38,497 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(1952502439)?.rem(-100)
2021-03-11 10:50:38,497 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:50:38,497 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:50:38,617 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:38,620 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:50:38,740 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:38,743 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-453418609)?.plus(15)
2021-03-11 10:50:38,743 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.sumOf(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@43a4f469]]
2021-03-11 10:50:38,743 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.sumOf(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@43a4f469]
2021-03-11 10:50:38,861 [main:302] - generating value of type = Function1<T, Int> false depth = 0
2021-03-11 10:50:38,864 [main:302] - generating value of type = Int true depth = 1
2021-03-11 10:50:38,867 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).sumOf({a: T -> -508730140})
2021-03-11 10:50:38,867 [main:63] - replacement of k of type Int is (arrayOfNulls<Int>(5)).get(-1507900787)?.inv()
2021-03-11 10:50:38,985 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 10:50:38,985 [main:66] - Compilation checking started
2021-03-11 10:50:39,310 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if(sum != sum) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (arrayOfNulls<Int>(5)).get(-1507900787)?.inv()--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:50:39,319 [main:56] - replacing (0, Int)
2021-03-11 10:50:39,319 [main:38] - replacing 0 Int
2021-03-11 10:50:39,319 [main:42] - Getting value of type Int
2021-03-11 10:50:39,440 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:39,442 [main:46] - GENERATED VALUE OF TYPE Int = -615741163
2021-03-11 10:50:39,442 [main:49] - GENERATED IS CALL =false
2021-03-11 10:50:39,448 [main:55] - randomType = Float
2021-03-11 10:50:39,571 [main:302] - generating value of type = Float true depth = 0
2021-03-11 10:50:39,610 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:50:39,610 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:50:39,735 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:39,738 [main:66] - Generated call from random type = (0.3768683f).toInt().or(2022912081)
2021-03-11 10:50:39,739 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:50:39,745 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:50:39,745 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:50:39,745 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:50:39,746 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().inc()
2021-03-11 10:50:39,746 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:50:39,746 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:50:39,746 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:50:39,864 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:39,867 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().shl(-1153105698)
2021-03-11 10:50:39,867 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:50:39,867 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:50:39,867 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:50:39,984 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:39,986 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().coerceAtMost(173516554)
2021-03-11 10:50:39,987 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:50:39,987 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:50:39,987 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().absoluteValue
2021-03-11 10:50:39,987 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:50:39,987 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:50:39,987 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:50:40,111 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:40,114 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().times(-87)
2021-03-11 10:50:40,114 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:50:40,114 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:50:40,114 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:50:40,231 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:40,233 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().ushr(-1092461497)
2021-03-11 10:50:40,233 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:50:40,233 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:50:40,234 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:50:40,234 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().unaryPlus()
2021-03-11 10:50:40,234 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:50:40,234 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09]
2021-03-11 10:50:40,354 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:50:40,354 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:50:40,471 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:50:40,474 [main:105] - GENERATED CALL = (MyCollection2().iterator()).equals("xatex").compareTo(true)
2021-03-11 10:50:40,474 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:50:40,474 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:50:40,474 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:50:40,621 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:40,624 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().and(1816156251)
2021-03-11 10:50:40,624 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:50:40,624 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:50:40,624 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:50:40,747 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:40,870 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:40,873 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().coerceIn(1035667615, -793550924)
2021-03-11 10:50:40,873 [main:63] - replacement of 0 of type Int is (MyCollection2().iterator()).next().absoluteValue
2021-03-11 10:50:40,989 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:50:40,997 [main:56] - replacing (sum != sum, Boolean)
2021-03-11 10:50:40,999 [main:38] - replacing sum != sum Boolean
2021-03-11 10:50:40,999 [main:42] - Getting value of type Boolean
2021-03-11 10:50:41,120 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:50:41,122 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:50:41,123 [main:49] - GENERATED IS CALL =false
2021-03-11 10:50:41,770 [main:55] - randomType = Function1<Map<MutableMap<UByte, MyCollection2>, Byte>, MyCollection3>
2021-03-11 10:50:41,771 [main:94] - GETTING Boolean from Iterator<Int>
2021-03-11 10:50:41,779 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@cf10153]]
2021-03-11 10:50:41,779 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09]
2021-03-11 10:50:41,896 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:50:41,896 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@cf10153]
2021-03-11 10:50:41,896 [main:105] - GENERATED CALL = (MyCollection2().iterator()).equals("uzpam").not()
2021-03-11 10:50:41,897 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6d9d9a5]]
2021-03-11 10:50:41,897 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09]
2021-03-11 10:50:42,016 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:50:42,016 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6d9d9a5]
2021-03-11 10:50:42,135 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:50:42,138 [main:105] - GENERATED CALL = (MyCollection2().iterator()).equals("ioabn").and(true)
2021-03-11 10:50:42,138 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]]
2021-03-11 10:50:42,138 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:50:42,138 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]
2021-03-11 10:50:42,256 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:50:42,256 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().equals("kfhyg")
2021-03-11 10:50:42,256 [main:101] - Case = [public abstract operator fun hasNext(): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@470d26e0]]
2021-03-11 10:50:42,256 [main:137] - GENERATING call of type public abstract operator fun hasNext(): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@470d26e0]
2021-03-11 10:50:42,256 [main:105] - GENERATED CALL = (MyCollection2().iterator()).hasNext()
2021-03-11 10:50:42,256 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09]]
2021-03-11 10:50:42,256 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09]
2021-03-11 10:50:42,374 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:50:42,374 [main:105] - GENERATED CALL = (MyCollection2().iterator()).equals("vgzgb")
2021-03-11 10:50:42,374 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@11eceb90]]
2021-03-11 10:50:42,374 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09]
2021-03-11 10:50:42,491 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:50:42,492 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@11eceb90]
2021-03-11 10:50:42,610 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:50:42,614 [main:105] - GENERATED CALL = (MyCollection2().iterator()).equals("sigxz").or(false)
2021-03-11 10:50:42,614 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@35500bca]]
2021-03-11 10:50:42,614 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09]
2021-03-11 10:50:42,733 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:50:42,733 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@35500bca]
2021-03-11 10:50:42,861 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:50:42,861 [main:105] - GENERATED CALL = (MyCollection2().iterator()).equals("matln").equals("qcirr")
2021-03-11 10:50:42,861 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fb50dd8]]
2021-03-11 10:50:42,861 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09]
2021-03-11 10:50:43,033 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:50:43,034 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fb50dd8]
2021-03-11 10:50:43,199 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:50:43,202 [main:105] - GENERATED CALL = (MyCollection2().iterator()).equals("sxszo").xor(true)
2021-03-11 10:50:43,202 [main:63] - replacement of sum != sum of type Boolean is (MyCollection2().iterator()).equals("vgzgb")
2021-03-11 10:50:43,326 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:50:43,327 [main:66] - Compilation checking started
2021-03-11 10:50:43,873 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:50:43,881 [main:56] - replacing (sum, Int)
2021-03-11 10:50:43,883 [main:38] - replacing sum Int
2021-03-11 10:50:43,883 [main:42] - Getting value of type Int
2021-03-11 10:50:44,008 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:44,011 [main:46] - GENERATED VALUE OF TYPE Int = -1519328581
2021-03-11 10:50:44,011 [main:49] - GENERATED IS CALL =false
2021-03-11 10:50:44,159 [main:55] - randomType = MyCollection2?
2021-03-11 10:50:44,277 [main:302] - generating value of type = MyCollection2 false depth = 0
2021-03-11 10:50:44,280 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}
2021-03-11 10:50:44,404 [main:194] - Type params = []
2021-03-11 10:50:44,537 [main:137] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.indexOfFirst(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@31a82a32]
2021-03-11 10:50:44,659 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 10:50:44,661 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:50:44,665 [main:66] - Generated call from random type = (MyCollection2())?.indexOfFirst({a: T -> true})
2021-03-11 10:50:44,665 [main:63] - replacement of sum of type Int is (MyCollection2())?.indexOfFirst({a: T -> true})
2021-03-11 10:50:44,786 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 10:50:44,786 [main:66] - Compilation checking started
2021-03-11 10:50:45,129 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    (MyCollection2())?.indexOfFirst({a: T -> true}) = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:50:45,137 [main:56] - replacing (k, Int)
2021-03-11 10:50:45,137 [main:38] - replacing k Int
2021-03-11 10:50:45,137 [main:42] - Getting value of type Int
2021-03-11 10:50:45,260 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:45,263 [main:46] - GENERATED VALUE OF TYPE Int = 927328979
2021-03-11 10:50:45,264 [main:49] - GENERATED IS CALL =false
2021-03-11 10:50:45,416 [main:55] - randomType = HashSet<Double>
2021-03-11 10:50:45,539 [main:302] - generating value of type = HashSet<Double> false depth = 0
2021-03-11 10:50:45,666 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(): HashSet<Double> = TODO()
2021-03-11 10:50:45,670 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(): HashSet<Double> = TODO()
2021-03-11 10:50:45,793 [main:95] - GENERATED = LinkedHashSet<Double>()
2021-03-11 10:50:45,916 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:50:46,051 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:46,054 [main:66] - Generated call from random type = (LinkedHashSet<Double>()).size.div(123)
2021-03-11 10:50:46,054 [main:63] - replacement of k of type Int is (LinkedHashSet<Double>()).size.div(123)
2021-03-11 10:50:46,174 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:50:46,182 [main:56] - replacing (sum, Int)
2021-03-11 10:50:46,184 [main:38] - replacing sum Int
2021-03-11 10:50:46,184 [main:42] - Getting value of type Int
2021-03-11 10:50:46,311 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:46,314 [main:46] - GENERATED VALUE OF TYPE Int = -186278087
2021-03-11 10:50:46,314 [main:49] - GENERATED IS CALL =false
2021-03-11 10:50:46,320 [main:55] - randomType = UInt
2021-03-11 10:50:46,465 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 10:50:46,502 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@46ccfaa6]
2021-03-11 10:50:46,663 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 10:50:46,666 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@335f8171]
2021-03-11 10:50:46,786 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:50:46,789 [main:66] - Generated call from random type = (2128127607.toUInt()).div(1303712771759414648.toULong()).compareTo(75.toUByte())
2021-03-11 10:50:46,789 [main:94] - GETTING Int from Int
2021-03-11 10:50:46,828 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:50:46,828 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:50:46,829 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:50:46,829 [main:105] - GENERATED CALL = (el ?: 0).toInt().unaryMinus()
2021-03-11 10:50:46,829 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:50:46,829 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:50:46,945 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:46,947 [main:105] - GENERATED CALL = (el ?: 0).compareTo(-786974508).sign
2021-03-11 10:50:46,948 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:50:46,948 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:50:46,948 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:50:47,065 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:47,068 [main:105] - GENERATED CALL = (el ?: 0).toInt().plus(-48)
2021-03-11 10:50:47,068 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3bfb2f7e]]
2021-03-11 10:50:47,068 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:50:47,068 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3bfb2f7e]
2021-03-11 10:50:47,068 [main:105] - GENERATED CALL = (el ?: 0).toShort().toInt()
2021-03-11 10:50:47,069 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:50:47,069 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:50:47,069 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:50:47,069 [main:105] - GENERATED CALL = (el ?: 0).toInt().unaryPlus()
2021-03-11 10:50:47,069 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:50:47,069 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:50:47,189 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:47,191 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:50:47,191 [main:105] - GENERATED CALL = (el ?: 0).compareTo(-1970606225).countTrailingZeroBits()
2021-03-11 10:50:47,191 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:50:47,191 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:50:47,309 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:47,312 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:50:47,432 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:47,435 [main:105] - GENERATED CALL = (el ?: 0).compareTo(757940871).xor(837264405)
2021-03-11 10:50:47,435 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a8376bf]]
2021-03-11 10:50:47,435 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97]
2021-03-11 10:50:47,435 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a8376bf]
2021-03-11 10:50:47,435 [main:105] - GENERATED CALL = (el ?: 0).toLong().countOneBits()
2021-03-11 10:50:47,435 [main:101] - Case = [public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:50:47,435 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:50:47,435 [main:105] - GENERATED CALL = (el ?: 0).inv()
2021-03-11 10:50:47,436 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:50:47,436 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:50:47,554 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:47,556 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:50:47,557 [main:105] - GENERATED CALL = (el ?: 0).compareTo(2127358085).takeLowestOneBit()
2021-03-11 10:50:47,557 [main:63] - replacement of sum of type Int is (2128127607.toUInt()).div(1303712771759414648.toULong()).compareTo(75.toUByte())
2021-03-11 10:50:47,676 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:50:47,676 [main:66] - Compilation checking started
2021-03-11 10:50:48,010 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        (2128127607.toUInt()).div(1303712771759414648.toULong()).compareTo(75.toUByte()) = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:50:48,018 [main:56] - replacing (MyCollection3(), MyCollection3)
2021-03-11 10:50:48,020 [main:38] - replacing MyCollection3() MyCollection3
2021-03-11 10:50:48,020 [main:42] - Getting value of type MyCollection3
2021-03-11 10:50:48,141 [main:302] - generating value of type = MyCollection3 false depth = 0
2021-03-11 10:50:48,143 [main:112] - generating klass MyCollection3 text = class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}
2021-03-11 10:50:48,264 [main:194] - Type params = []
2021-03-11 10:50:48,385 [main:46] - GENERATED VALUE OF TYPE MyCollection3 = MyCollection3()
2021-03-11 10:50:48,385 [main:49] - GENERATED IS CALL =true
2021-03-11 10:50:48,799 [main:55] - randomType = Array<MyCollection2?>?
2021-03-11 10:50:48,917 [main:302] - generating value of type = Array<MyCollection2?> false depth = 0
2021-03-11 10:50:49,040 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<MyCollection2?> = TODO()
2021-03-11 10:50:49,043 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<MyCollection2?> = TODO()
2021-03-11 10:50:49,165 [main:95] - GENERATED = emptyArray<MyCollection2?>()
2021-03-11 10:50:49,178 [main:94] - GETTING MyCollection3 from Iterator<Int>
2021-03-11 10:50:49,186 [main:94] - GETTING MyCollection3 from Int
2021-03-11 10:50:49,224 [main:94] - GETTING MyCollection3 from Int
2021-03-11 10:50:49,225 [main:94] - GETTING MyCollection3 from Array<Int?>
2021-03-11 10:50:49,240 [main:94] - GETTING MyCollection3 from Int
2021-03-11 10:50:49,241 [main:94] - GETTING MyCollection3 from MyIterator
2021-03-11 10:50:49,245 [main:94] - GETTING MyCollection3 from Iterator<Int>
2021-03-11 10:50:49,246 [main:94] - GETTING MyCollection3 from MyIterator
2021-03-11 10:50:49,246 [main:63] - replacement of MyCollection3() of type MyCollection3 is MyCollection3()
2021-03-11 10:50:49,364 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 10:50:49,373 [main:56] - replacing (i, Int)
2021-03-11 10:50:49,375 [main:38] - replacing i Int
2021-03-11 10:50:49,375 [main:42] - Getting value of type Int
2021-03-11 10:50:49,491 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:49,494 [main:46] - GENERATED VALUE OF TYPE Int = 421647359
2021-03-11 10:50:49,494 [main:49] - GENERATED IS CALL =false
2021-03-11 10:50:49,500 [main:55] - randomType = Double
2021-03-11 10:50:49,618 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:50:49,654 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@7cbfa935]
2021-03-11 10:50:49,654 [main:137] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@22a1cf7f]
2021-03-11 10:50:49,654 [main:66] - Generated call from random type = (0.7566736079534216).toChar().toInt()
2021-03-11 10:50:49,654 [main:63] - replacement of i of type Int is (0.7566736079534216).toChar().toInt()
2021-03-11 10:50:49,771 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:50:49,771 [main:66] - Compilation checking started
2021-03-11 10:50:50,097 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (0.7566736079534216).toChar().toInt()++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:50:50,106 [main:56] - replacing (sum, Int)
2021-03-11 10:50:50,107 [main:38] - replacing sum Int
2021-03-11 10:50:50,107 [main:42] - Getting value of type Int
2021-03-11 10:50:50,229 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:50,231 [main:46] - GENERATED VALUE OF TYPE Int = 1888503295
2021-03-11 10:50:50,232 [main:49] - GENERATED IS CALL =false
2021-03-11 10:50:50,529 [main:55] - randomType = Function2<ULong, MyCollection3, Long>
2021-03-11 10:50:50,529 [main:94] - GETTING Int from MyIterator
2021-03-11 10:50:50,536 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:50:50,536 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:50:50,536 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.unaryPlus()
2021-03-11 10:50:50,536 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:50:50,536 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:50:50,655 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:50,658 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.shr(1489880630)
2021-03-11 10:50:50,658 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:50:50,658 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:50:50,658 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:50:50,658 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.unaryPlus()
2021-03-11 10:50:50,658 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:50:50,659 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:50:50,659 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:50:50,778 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:50,782 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.shr(-1321473108)
2021-03-11 10:50:50,782 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:50:50,782 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:50:50,899 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:50,902 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.compareTo(113)
2021-03-11 10:50:50,902 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:50:50,902 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:50:51,022 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:51,025 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.times(66)
2021-03-11 10:50:51,025 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:50:51,025 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:50:51,142 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:51,145 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.rem(72)
2021-03-11 10:50:51,145 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:50:51,145 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.absoluteValue
2021-03-11 10:50:51,145 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf]]
2021-03-11 10:50:51,145 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k
2021-03-11 10:50:51,145 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:50:51,145 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:50:51,145 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:50:51,265 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:51,267 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.shl(-388853355)
2021-03-11 10:50:51,267 [main:63] - replacement of sum of type Int is (MyCollection3().iterator()).k.unaryPlus()
2021-03-11 10:50:51,438 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:50:51,439 [main:66] - Compilation checking started
2021-03-11 10:50:51,758 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        (MyCollection3().iterator()).k.unaryPlus() = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:50:51,767 [main:56] - replacing (sum, Int)
2021-03-11 10:50:51,768 [main:38] - replacing sum Int
2021-03-11 10:50:51,769 [main:42] - Getting value of type Int
2021-03-11 10:50:51,890 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:51,893 [main:46] - GENERATED VALUE OF TYPE Int = -1074964489
2021-03-11 10:50:51,893 [main:49] - GENERATED IS CALL =false
2021-03-11 10:50:52,030 [main:55] - randomType = Short
2021-03-11 10:50:52,152 [main:302] - generating value of type = Short true depth = 0
2021-03-11 10:50:52,194 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@72edc246]
2021-03-11 10:50:52,194 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@f49fa44]
2021-03-11 10:50:52,194 [main:66] - Generated call from random type = (15360).toByte().unaryPlus()
2021-03-11 10:50:52,194 [main:63] - replacement of sum of type Int is (15360).toByte().unaryPlus()
2021-03-11 10:50:52,322 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:50:52,322 [main:66] - Compilation checking started
2021-03-11 10:50:52,658 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        (15360).toByte().unaryPlus() = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008)
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:50:52,667 [main:56] - replacing ((i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008), Int)
2021-03-11 10:50:52,668 [main:38] - replacing (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008) Int
2021-03-11 10:50:52,668 [main:42] - Getting value of type Int
2021-03-11 10:50:52,788 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:52,790 [main:46] - GENERATED VALUE OF TYPE Int = 1799985780
2021-03-11 10:50:52,791 [main:49] - GENERATED IS CALL =false
2021-03-11 10:50:52,927 [main:55] - randomType = ULong
2021-03-11 10:50:53,045 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 10:50:53,084 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@64861e9d]
2021-03-11 10:50:53,084 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UShort.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5ac1e6ee]
2021-03-11 10:50:53,084 [main:66] - Generated call from random type = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
2021-03-11 10:50:53,084 [main:63] - replacement of (i).shr(-777624980) + (MyCollection2().iterator()).next().and(-866255008) of type Int is (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
2021-03-11 10:50:53,203 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:50:53,203 [main:66] - Compilation checking started
2021-03-11 10:50:53,714 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:50:53,723 [main:56] - replacing (sum, Int)
2021-03-11 10:50:53,724 [main:38] - replacing sum Int
2021-03-11 10:50:53,724 [main:42] - Getting value of type Int
2021-03-11 10:50:53,859 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:53,862 [main:46] - GENERATED VALUE OF TYPE Int = 202429762
2021-03-11 10:50:53,862 [main:49] - GENERATED IS CALL =false
2021-03-11 10:50:54,017 [main:55] - randomType = UShort
2021-03-11 10:50:54,136 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 10:50:54,171 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@681e8d1c]
2021-03-11 10:50:54,171 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a8376bf]
2021-03-11 10:50:54,171 [main:66] - Generated call from random type = (13070.toUShort()).toLong().countOneBits()
2021-03-11 10:50:54,171 [main:94] - GETTING Int from Int
2021-03-11 10:50:54,205 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@f49fa44]]
2021-03-11 10:50:54,206 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:50:54,206 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@f49fa44]
2021-03-11 10:50:54,206 [main:105] - GENERATED CALL = (sum).toByte().unaryPlus()
2021-03-11 10:50:54,206 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@4af8e595]]
2021-03-11 10:50:54,206 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:50:54,323 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:54,326 [main:105] - GENERATED CALL = (sum).rangeTo(-5).endInclusive
2021-03-11 10:50:54,326 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], public final val last: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@21a92708]]
2021-03-11 10:50:54,326 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:50:54,445 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:54,448 [main:105] - GENERATED CALL = (sum).rangeTo(-16).last
2021-03-11 10:50:54,448 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a8376bf]]
2021-03-11 10:50:54,448 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f]
2021-03-11 10:50:54,565 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:50:54,568 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a8376bf]
2021-03-11 10:50:54,568 [main:105] - GENERATED CALL = (sum).div(-272546388914910163).countOneBits()
2021-03-11 10:50:54,568 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431], @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@5959e353]]
2021-03-11 10:50:54,568 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431]
2021-03-11 10:50:54,687 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:50:54,690 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@5959e353]
2021-03-11 10:50:54,690 [main:105] - GENERATED CALL = (sum).div(0.8344525052584906).roundToInt()
2021-03-11 10:50:54,690 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:50:54,690 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:50:54,690 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:50:54,808 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:54,811 [main:105] - GENERATED CALL = (sum).toInt().rem(-19)
2021-03-11 10:50:54,811 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:50:54,811 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:50:54,811 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:50:54,930 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:54,933 [main:105] - GENERATED CALL = (sum).toInt().shr(-1290438422)
2021-03-11 10:50:54,933 [main:101] - Case = [public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:50:54,933 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:50:55,053 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:55,055 [main:105] - GENERATED CALL = (sum).or(148490598)
2021-03-11 10:50:55,056 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:50:55,056 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:50:55,177 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:55,179 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:50:55,180 [main:105] - GENERATED CALL = (sum).compareTo(-683378425).unaryPlus()
2021-03-11 10:50:55,180 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:50:55,180 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:50:55,298 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:55,300 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:50:55,301 [main:105] - GENERATED CALL = (sum).compareTo(1703281281).inc()
2021-03-11 10:50:55,301 [main:63] - replacement of sum of type Int is (sum).toInt().rem(-19)
2021-03-11 10:50:55,419 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:50:55,420 [main:66] - Compilation checking started
2021-03-11 10:50:55,774 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    (sum).toInt().rem(-19) = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:50:55,782 [main:56] - replacing (sum, Int)
2021-03-11 10:50:55,784 [main:38] - replacing sum Int
2021-03-11 10:50:55,784 [main:42] - Getting value of type Int
2021-03-11 10:50:55,907 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:55,910 [main:46] - GENERATED VALUE OF TYPE Int = -1712445624
2021-03-11 10:50:55,910 [main:49] - GENERATED IS CALL =false
2021-03-11 10:50:55,916 [main:55] - randomType = UInt
2021-03-11 10:50:56,036 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 10:50:56,072 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2abada50]
2021-03-11 10:50:56,072 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@719372c6]
2021-03-11 10:50:56,072 [main:66] - Generated call from random type = (1693182358.toUInt()).toShort().unaryPlus()
2021-03-11 10:50:56,073 [main:94] - GETTING Int from MyIterator
2021-03-11 10:50:56,079 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:50:56,079 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:50:56,194 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:56,197 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.rem(42)
2021-03-11 10:50:56,198 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:50:56,198 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:50:56,198 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.takeLowestOneBit()
2021-03-11 10:50:56,198 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:50:56,198 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:50:56,360 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:56,363 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.or(-1754137713)
2021-03-11 10:50:56,363 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:50:56,363 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:50:56,480 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:56,483 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.and(1478179230)
2021-03-11 10:50:56,483 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:50:56,483 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:50:56,483 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:50:56,607 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:56,610 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.times(82)
2021-03-11 10:50:56,610 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:50:56,610 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:50:56,610 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.inv()
2021-03-11 10:50:56,610 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:50:56,610 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:50:56,610 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:50:56,610 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.unaryPlus()
2021-03-11 10:50:56,610 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:50:56,610 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:50:56,610 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:50:56,736 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:56,738 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.compareTo(10)
2021-03-11 10:50:56,738 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:50:56,739 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:50:56,857 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:56,860 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.ushr(1584546254)
2021-03-11 10:50:56,860 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:50:56,860 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:50:56,860 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:50:56,977 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:56,981 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.or(426879211)
2021-03-11 10:50:56,981 [main:63] - replacement of sum of type Int is (MyCollection3().iterator()).k.and(1478179230)
2021-03-11 10:50:57,100 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:50:57,100 [main:66] - Compilation checking started
2021-03-11 10:50:57,421 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    (MyCollection3().iterator()).k.and(1478179230) = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:50:57,429 [main:56] - replacing ((sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677), Int)
2021-03-11 10:50:57,431 [main:38] - replacing (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677) Int
2021-03-11 10:50:57,431 [main:42] - Getting value of type Int
2021-03-11 10:50:57,552 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:57,555 [main:46] - GENERATED VALUE OF TYPE Int = -1039480118
2021-03-11 10:50:57,555 [main:49] - GENERATED IS CALL =false
2021-03-11 10:50:57,984 [main:55] - randomType = Function2<HashSet<ULong>, Boolean, Float>
2021-03-11 10:50:57,985 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:50:57,991 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:50:57,991 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:50:57,991 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:50:58,110 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:58,114 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().ushr(14479035)
2021-03-11 10:50:58,114 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:50:58,114 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:50:58,114 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:50:58,232 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:58,234 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().minus(-55)
2021-03-11 10:50:58,235 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:50:58,235 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:50:58,235 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:50:58,352 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:50:58,355 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().div(84)
2021-03-11 10:50:58,355 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:50:58,355 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:50:58,355 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:50:58,355 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().inv()
2021-03-11 10:50:58,356 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:50:58,356 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:50:58,356 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:50:58,473 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:58,475 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().rotateLeft(1797756632)
2021-03-11 10:50:58,475 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:50:58,475 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:50:58,476 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:50:58,476 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().takeLowestOneBit()
2021-03-11 10:50:58,476 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:50:58,476 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:50:58,476 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:50:58,594 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:58,597 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().xor(2070216314)
2021-03-11 10:50:58,597 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:50:58,597 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:50:58,597 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:50:58,714 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:58,836 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:58,838 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().coerceIn(-1238330720, 1721044619)
2021-03-11 10:50:58,838 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:50:58,839 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:50:58,839 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().absoluteValue
2021-03-11 10:50:58,839 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:50:58,839 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:50:58,839 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:50:58,839 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().unaryPlus()
2021-03-11 10:50:58,839 [main:63] - replacement of (sum).toByte().compareTo(35) + (MyCollection3().iterator()).k.coerceAtMost(521063677) of type Int is (MyCollection2().iterator()).next().xor(2070216314)
2021-03-11 10:50:58,957 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:50:58,957 [main:66] - Compilation checking started
2021-03-11 10:50:59,443 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:50:59,453 [main:56] - replacing (sum, Int)
2021-03-11 10:50:59,454 [main:38] - replacing sum Int
2021-03-11 10:50:59,454 [main:42] - Getting value of type Int
2021-03-11 10:50:59,581 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:50:59,584 [main:46] - GENERATED VALUE OF TYPE Int = 2021933186
2021-03-11 10:50:59,584 [main:49] - GENERATED IS CALL =false
2021-03-11 10:50:59,741 [main:55] - randomType = LinkedHashMap<MyCollection4, MyCollection4>
2021-03-11 10:50:59,859 [main:302] - generating value of type = LinkedHashMap<MyCollection4, MyCollection4> false depth = 0
2021-03-11 10:50:59,981 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<MyCollection4, MyCollection4> = TODO()
2021-03-11 10:50:59,985 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<MyCollection4, MyCollection4> = TODO()
2021-03-11 10:51:00,107 [main:95] - GENERATED = linkedMapOf<MyCollection4, MyCollection4>()
2021-03-11 10:51:00,246 [main:66] - Generated call from random type = (linkedMapOf<MyCollection4, MyCollection4>()).size.sign
2021-03-11 10:51:00,247 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:51:00,252 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:51:00,252 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:00,252 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:51:00,252 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().unaryMinus()
2021-03-11 10:51:00,253 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:51:00,253 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:00,253 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:51:00,253 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().countLeadingZeroBits()
2021-03-11 10:51:00,253 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:51:00,253 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:00,253 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:51:00,369 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:00,371 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().rotateLeft(822708700)
2021-03-11 10:51:00,372 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:51:00,372 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:00,372 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:51:00,488 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:00,490 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().minus(84)
2021-03-11 10:51:00,491 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:51:00,491 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:00,491 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:51:00,609 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:00,612 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().plus(2)
2021-03-11 10:51:00,612 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:51:00,612 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:00,612 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().sign
2021-03-11 10:51:00,612 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:51:00,613 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:00,613 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:51:00,729 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:00,732 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().and(570012943)
2021-03-11 10:51:00,732 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:51:00,732 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:00,732 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:51:00,849 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:00,852 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().shl(1776633675)
2021-03-11 10:51:00,852 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:51:00,852 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:00,852 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:51:00,971 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:00,974 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().ushr(2067370091)
2021-03-11 10:51:00,974 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:51:00,974 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:00,974 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:51:01,148 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:01,151 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().xor(-1282364932)
2021-03-11 10:51:01,151 [main:63] - replacement of sum of type Int is (MyCollection2().iterator()).next().countLeadingZeroBits()
2021-03-11 10:51:01,268 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:51:01,268 [main:66] - Compilation checking started
2021-03-11 10:51:01,589 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        (MyCollection2().iterator()).next().countLeadingZeroBits() = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614)
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:51:01,597 [main:56] - replacing ((MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614), Boolean)
2021-03-11 10:51:01,597 [main:38] - replacing (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614) Boolean
2021-03-11 10:51:01,597 [main:42] - Getting value of type Boolean
2021-03-11 10:51:01,717 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:51:01,720 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:51:01,720 [main:49] - GENERATED IS CALL =false
2021-03-11 10:51:01,725 [main:55] - randomType = UShort
2021-03-11 10:51:01,842 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 10:51:01,879 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@729ded0c]
2021-03-11 10:51:01,879 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@408a855b]
2021-03-11 10:51:01,995 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:51:01,995 [main:66] - Generated call from random type = (28720.toUShort()).toFloat().equals("gpqjr")
2021-03-11 10:51:01,996 [main:94] - GETTING Boolean from MyIterator
2021-03-11 10:51:02,006 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fb50dd8]]
2021-03-11 10:51:02,006 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:51:02,006 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fb50dd8]
2021-03-11 10:51:02,126 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:51:02,129 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext().xor(false)
2021-03-11 10:51:02,129 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@cf10153]]
2021-03-11 10:51:02,129 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:51:02,129 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@cf10153]
2021-03-11 10:51:02,129 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext().not()
2021-03-11 10:51:02,129 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@35500bca]]
2021-03-11 10:51:02,129 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:51:02,129 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@35500bca]
2021-03-11 10:51:02,250 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:51:02,250 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext().equals("qrqsb")
2021-03-11 10:51:02,250 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyCollection3.MyIterator[DeserializedSimpleFunctionDescriptor@3d80332c]]
2021-03-11 10:51:02,250 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyCollection3.MyIterator[DeserializedSimpleFunctionDescriptor@3d80332c]
2021-03-11 10:51:02,370 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:51:02,370 [main:105] - GENERATED CALL = (MyCollection3().iterator()).equals("lbjfw")
2021-03-11 10:51:02,370 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@11eceb90]]
2021-03-11 10:51:02,370 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:51:02,370 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@11eceb90]
2021-03-11 10:51:02,492 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:51:02,494 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext().or(true)
2021-03-11 10:51:02,494 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]]
2021-03-11 10:51:02,494 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:51:02,495 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext()
2021-03-11 10:51:02,495 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6d9d9a5]]
2021-03-11 10:51:02,495 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:51:02,495 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6d9d9a5]
2021-03-11 10:51:02,622 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:51:02,625 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext().and(false)
2021-03-11 10:51:02,625 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]]
2021-03-11 10:51:02,625 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:51:02,625 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]
2021-03-11 10:51:02,740 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:51:02,741 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.equals("bwqdd")
2021-03-11 10:51:02,741 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]]
2021-03-11 10:51:02,741 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]
2021-03-11 10:51:02,857 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:51:02,858 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.equals("dstyd")
2021-03-11 10:51:02,858 [main:63] - replacement of (MyCollection4().iterator()).k.or(834913545) > (MyCollection4().iterator()).k.ushr(1661081614) of type Boolean is (MyCollection3().iterator()).k.equals("dstyd")
2021-03-11 10:51:02,974 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:51:02,974 [main:66] - Compilation checking started
2021-03-11 10:51:03,439 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:51:03,447 [main:56] - replacing (i, Int)
2021-03-11 10:51:03,448 [main:38] - replacing i Int
2021-03-11 10:51:03,448 [main:42] - Getting value of type Int
2021-03-11 10:51:03,575 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:03,577 [main:46] - GENERATED VALUE OF TYPE Int = -1891957707
2021-03-11 10:51:03,578 [main:49] - GENERATED IS CALL =false
2021-03-11 10:51:04,010 [main:55] - randomType = Function1<ArrayList<Char>, LinkedHashMap<MyCollection4, MyCollection3>>
2021-03-11 10:51:04,011 [main:94] - GETTING Int from Array<Int?>
2021-03-11 10:51:04,023 [main:101] - Case = [public inline fun <T> kotlin.Array<out T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e45404d]]
2021-03-11 10:51:04,023 [main:137] - GENERATING call of type public inline fun <T> kotlin.Array<out T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e45404d]
2021-03-11 10:51:04,142 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 10:51:04,145 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:51:04,148 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).indexOfLast({a: T -> false})
2021-03-11 10:51:04,148 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:51:04,148 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:51:04,148 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.takeHighestOneBit()
2021-03-11 10:51:04,148 [main:101] - Case = [@kotlin.jvm.JvmName public fun kotlin.Array<out kotlin.Byte>.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3842ee34]]
2021-03-11 10:51:04,148 [main:137] - GENERATING call of type @kotlin.jvm.JvmName public fun kotlin.Array<out kotlin.Byte>.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3842ee34]
2021-03-11 10:51:04,148 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).sum()
2021-03-11 10:51:04,148 [main:101] - Case = [public inline fun <T> kotlin.Array<out T>.indexOfFirst(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@79423ae4]]
2021-03-11 10:51:04,148 [main:137] - GENERATING call of type public inline fun <T> kotlin.Array<out T>.indexOfFirst(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@79423ae4]
2021-03-11 10:51:04,268 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 10:51:04,270 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:51:04,273 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).indexOfFirst({a: T -> true})
2021-03-11 10:51:04,273 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:51:04,273 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:51:04,273 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.inv()
2021-03-11 10:51:04,273 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]]
2021-03-11 10:51:04,273 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:51:04,391 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:04,394 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-604701828)
2021-03-11 10:51:04,394 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:51:04,394 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:51:04,511 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:04,514 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:51:04,632 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:04,635 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(265139364)?.times(71)
2021-03-11 10:51:04,636 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:51:04,636 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:51:04,754 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:04,757 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:51:04,872 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:04,875 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(1247885848)?.div(71)
2021-03-11 10:51:04,875 [main:101] - Case = [public fun <@kotlin.internal.OnlyInputTypes T> kotlin.Array<out T>.indexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@534707bb]]
2021-03-11 10:51:04,875 [main:137] - GENERATING call of type public fun <@kotlin.internal.OnlyInputTypes T> kotlin.Array<out T>.indexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@534707bb]
2021-03-11 10:51:04,991 [main:302] - generating value of type = T false depth = 0
2021-03-11 10:51:05,130 [main:43] - GENERATING CALL OF fun <T> minOf(a: Comparable<T>, b: Comparable<T>, c: Comparable<T>): T = TODO()
2021-03-11 10:51:05,133 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: Comparable<T>, b: Comparable<T>, c: Comparable<T>): T = TODO()
2021-03-11 10:51:05,259 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-11 10:51:05,266 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-11 10:51:05,395 [main:43] - GENERATING CALL OF fun <E> Enum(name: kotlin.String, ordinal: kotlin.Int): Comparable<T> = TODO()
2021-03-11 10:51:05,399 [main:61] - WITHOUT TYPE PARAMS = fun <E> Enum(name: kotlin.String, ordinal: kotlin.Int): Comparable<T> = TODO()
2021-03-11 10:51:05,780 [main:302] - generating value of type = String true depth = 6
2021-03-11 10:51:05,783 [main:302] - generating value of type = Int true depth = 6
2021-03-11 10:51:05,785 [main:95] - GENERATED = Enum<Enum<E>>("jbbfe", -330004839)
2021-03-11 10:51:05,785 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-11 10:51:05,907 [main:43] - GENERATING CALL OF fun KotlinVersion(major: kotlin.Int, minor: kotlin.Int): Comparable<T> = TODO()
2021-03-11 10:51:05,910 [main:61] - WITHOUT TYPE PARAMS = fun KotlinVersion(major: kotlin.Int, minor: kotlin.Int): Comparable<T> = TODO()
2021-03-11 10:51:06,357 [main:302] - generating value of type = Int true depth = 6
2021-03-11 10:51:06,360 [main:302] - generating value of type = Int true depth = 6
2021-03-11 10:51:06,362 [main:95] - GENERATED = KotlinVersion(15986460, 249667676)
2021-03-11 10:51:06,363 [main:95] - GENERATED = minOf<Comparable<T>>(0.5619335883252599, Enum<Enum<E>>("jbbfe", -330004839), KotlinVersion(15986460, 249667676))
2021-03-11 10:51:06,363 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).indexOf(minOf<Comparable<T>>(0.5619335883252599, Enum<Enum<E>>("jbbfe", -330004839), KotlinVersion(15986460, 249667676)))
2021-03-11 10:51:06,363 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:51:06,363 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:51:06,482 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:06,484 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.ushr(431187414)
2021-03-11 10:51:06,484 [main:63] - replacement of i of type Int is (arrayOfNulls<Int>(5)).size.takeHighestOneBit()
2021-03-11 10:51:06,610 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:51:06,610 [main:66] - Compilation checking started
2021-03-11 10:51:06,923 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (arrayOfNulls<Int>(5)).size.takeHighestOneBit()++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:51:06,931 [main:56] - replacing (MyIterator(), MyIterator)
2021-03-11 10:51:06,931 [main:38] - replacing MyIterator() MyIterator
2021-03-11 10:51:06,931 [main:42] - Getting value of type MyIterator
2021-03-11 10:51:07,048 [main:302] - generating value of type = MyIterator false depth = 0
2021-03-11 10:51:07,051 [main:112] - generating klass MyIterator text = class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
2021-03-11 10:51:07,051 [main:46] - GENERATED VALUE OF TYPE MyIterator = 
2021-03-11 10:51:07,060 [main:55] - randomType = MyCollection2
2021-03-11 10:51:07,181 [main:302] - generating value of type = MyCollection2 false depth = 0
2021-03-11 10:51:07,184 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}
2021-03-11 10:51:07,301 [main:194] - Type params = []
2021-03-11 10:51:07,427 [main:94] - GETTING MyIterator from MyIterator
2021-03-11 10:51:07,437 [main:63] - replacement of MyIterator() of type MyIterator is MyCollection3().iterator()
2021-03-11 10:51:07,551 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:51:07,552 [main:66] - Compilation checking started
2021-03-11 10:51:07,874 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = 0
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyCollection3().iterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:51:07,882 [main:56] - replacing (0, Int)
2021-03-11 10:51:07,884 [main:38] - replacing 0 Int
2021-03-11 10:51:07,884 [main:42] - Getting value of type Int
2021-03-11 10:51:07,999 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:08,002 [main:46] - GENERATED VALUE OF TYPE Int = -1475898940
2021-03-11 10:51:08,002 [main:49] - GENERATED IS CALL =false
2021-03-11 10:51:08,012 [main:55] - randomType = MyCollection4
2021-03-11 10:51:08,136 [main:302] - generating value of type = MyCollection4 false depth = 0
2021-03-11 10:51:08,138 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:51:08,259 [main:194] - Type params = []
2021-03-11 10:51:08,381 [main:137] - GENERATING call of type public final operator fun iterator(): MyCollection4.MyIterator defined in MyCollection4[SimpleFunctionDescriptorImpl@1810121b]
2021-03-11 10:51:08,382 [main:66] - Generated call from random type = (MyCollection4()).iterator().k
2021-03-11 10:51:08,382 [main:63] - replacement of 0 of type Int is (MyCollection4()).iterator().k
2021-03-11 10:51:08,500 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:51:08,500 [main:66] - Compilation checking started
2021-03-11 10:51:08,964 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int> (5)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:51:08,973 [main:56] - replacing (arrayOfNulls<Int> (5), Array<Int?>)
2021-03-11 10:51:08,975 [main:38] - replacing arrayOfNulls<Int> (5) Array<Int?>
2021-03-11 10:51:08,975 [main:42] - Getting value of type Array<Int?>
2021-03-11 10:51:09,096 [main:302] - generating value of type = Array<Int?> false depth = 0
2021-03-11 10:51:09,221 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<Int?> = TODO()
2021-03-11 10:51:09,224 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<Int?> = TODO()
2021-03-11 10:51:09,478 [main:302] - generating value of type = Int true depth = 3
2021-03-11 10:51:09,482 [main:95] - GENERATED = arrayOfNulls<Int?>(-435848346)
2021-03-11 10:51:09,482 [main:46] - GENERATED VALUE OF TYPE Array<Int?> = arrayOfNulls<Int?>(-435848346)
2021-03-11 10:51:09,482 [main:49] - GENERATED IS CALL =true
2021-03-11 10:51:09,640 [main:55] - randomType = HashMap<MyCollection4, MyCollection3>
2021-03-11 10:51:09,759 [main:302] - generating value of type = HashMap<MyCollection4, MyCollection3> false depth = 0
2021-03-11 10:51:09,884 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<MyCollection4, MyCollection3> = TODO()
2021-03-11 10:51:09,887 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<MyCollection4, MyCollection3> = TODO()
2021-03-11 10:51:10,015 [main:95] - GENERATED = linkedMapOf<MyCollection4, MyCollection3>()
2021-03-11 10:51:10,128 [main:94] - GETTING Array<Int?> from Int
2021-03-11 10:51:10,162 [main:94] - GETTING Array<Int?> from Iterator<Int>
2021-03-11 10:51:10,171 [main:94] - GETTING Array<Int?> from Array<Int?>
2021-03-11 10:51:10,184 [main:101] - Case = [public fun <T> kotlin.Array<T>.sliceArray(indices: kotlin.collections.Collection<kotlin.Int>): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7940abfb]]
2021-03-11 10:51:10,184 [main:137] - GENERATING call of type public fun <T> kotlin.Array<T>.sliceArray(indices: kotlin.collections.Collection<kotlin.Int>): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7940abfb]
2021-03-11 10:51:10,303 [main:302] - generating value of type = Collection<Int> false depth = 0
2021-03-11 10:51:10,442 [main:43] - GENERATING CALL OF fun UIntArray(size: kotlin.Int): Collection<Int> = TODO()
2021-03-11 10:51:10,446 [main:61] - WITHOUT TYPE PARAMS = fun UIntArray(size: kotlin.Int): Collection<Int> = TODO()
2021-03-11 10:51:10,697 [main:302] - generating value of type = Int true depth = 3
2021-03-11 10:51:10,700 [main:95] - GENERATED = UIntArray(-563009696)
2021-03-11 10:51:10,700 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).sliceArray(UIntArray(-563009696))
2021-03-11 10:51:10,700 [main:101] - Case = [public fun <T : kotlin.Comparable<T>> kotlin.Array<T>.sortedArrayDescending(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@508fd8b1]]
2021-03-11 10:51:10,700 [main:137] - GENERATING call of type public fun <T : kotlin.Comparable<T>> kotlin.Array<T>.sortedArrayDescending(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@508fd8b1]
2021-03-11 10:51:10,701 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).sortedArrayDescending()
2021-03-11 10:51:10,701 [main:101] - Case = [public fun <T> kotlin.Array<T>.reversedArray(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1f7c53ea]]
2021-03-11 10:51:10,701 [main:137] - GENERATING call of type public fun <T> kotlin.Array<T>.reversedArray(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1f7c53ea]
2021-03-11 10:51:10,701 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).reversedArray()
2021-03-11 10:51:10,701 [main:101] - Case = [public fun <T : kotlin.Any> kotlin.Array<T?>.requireNoNulls(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3358e940]]
2021-03-11 10:51:10,701 [main:137] - GENERATING call of type public fun <T : kotlin.Any> kotlin.Array<T?>.requireNoNulls(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3358e940]
2021-03-11 10:51:10,701 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).requireNoNulls()
2021-03-11 10:51:10,701 [main:101] - Case = [public fun <T : kotlin.Comparable<T>> kotlin.Array<T>.sortedArray(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@62c4b0c7]]
2021-03-11 10:51:10,701 [main:137] - GENERATING call of type public fun <T : kotlin.Comparable<T>> kotlin.Array<T>.sortedArray(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@62c4b0c7]
2021-03-11 10:51:10,701 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).sortedArray()
2021-03-11 10:51:10,701 [main:63] - replacement of arrayOfNulls<Int> (5) of type Array<Int?> is arrayOfNulls<Int?>(-435848346)
2021-03-11 10:51:10,817 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 10:51:10,817 [main:66] - Compilation checking started
2021-03-11 10:51:11,332 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:51:11,342 [main:56] - replacing (sum, Int)
2021-03-11 10:51:11,343 [main:38] - replacing sum Int
2021-03-11 10:51:11,343 [main:42] - Getting value of type Int
2021-03-11 10:51:11,460 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:11,463 [main:46] - GENERATED VALUE OF TYPE Int = -783507036
2021-03-11 10:51:11,463 [main:49] - GENERATED IS CALL =false
2021-03-11 10:51:11,473 [main:55] - randomType = MyCollection2
2021-03-11 10:51:11,598 [main:302] - generating value of type = MyCollection2 false depth = 0
2021-03-11 10:51:11,602 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}
2021-03-11 10:51:11,731 [main:194] - Type params = []
2021-03-11 10:51:11,881 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.max(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6a94082b]
2021-03-11 10:51:11,881 [main:66] - Generated call from random type = (MyCollection2()).max()!!
2021-03-11 10:51:11,881 [main:94] - GETTING Int from Int
2021-03-11 10:51:11,934 [main:101] - Case = [public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:51:11,934 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:51:12,052 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:12,055 [main:105] - GENERATED CALL = (el ?: 0).shr(164883766)
2021-03-11 10:51:12,055 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ea49e27]]
2021-03-11 10:51:12,055 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:51:12,055 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ea49e27]
2021-03-11 10:51:12,055 [main:105] - GENERATED CALL = (el ?: 0).toFloat().toRawBits()
2021-03-11 10:51:12,055 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:51:12,055 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:51:12,172 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:12,175 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:51:12,291 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:12,294 [main:105] - GENERATED CALL = (el ?: 0).compareTo(-450643355).coerceAtMost(39372984)
2021-03-11 10:51:12,294 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:51:12,294 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:51:12,410 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:12,414 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:51:12,529 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:12,532 [main:105] - GENERATED CALL = (el ?: 0).compareTo(1416071769).xor(-1704122148)
2021-03-11 10:51:12,532 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4d6e37cb]]
2021-03-11 10:51:12,532 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431]
2021-03-11 10:51:12,648 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:51:12,651 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4d6e37cb]
2021-03-11 10:51:12,769 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:12,771 [main:105] - GENERATED CALL = (el ?: 0).div(0.0544242560971393).compareTo(-100)
2021-03-11 10:51:12,771 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:51:12,772 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:51:12,772 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:51:12,887 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:12,890 [main:105] - GENERATED CALL = (el ?: 0).toInt().rem(99)
2021-03-11 10:51:12,890 [main:101] - Case = [public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:51:12,890 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:51:13,007 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:13,010 [main:105] - GENERATED CALL = (el ?: 0).or(257538087)
2021-03-11 10:51:13,010 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@78e981e4]]
2021-03-11 10:51:13,010 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:51:13,010 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@78e981e4]
2021-03-11 10:51:13,126 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:13,129 [main:105] - GENERATED CALL = (el ?: 0).toShort().times(20)
2021-03-11 10:51:13,129 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@57d953ba]]
2021-03-11 10:51:13,129 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:51:13,129 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@57d953ba]
2021-03-11 10:51:13,129 [main:105] - GENERATED CALL = (el ?: 0).toByte().toInt()
2021-03-11 10:51:13,129 [main:101] - Case = [public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:51:13,129 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:51:13,245 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:13,247 [main:105] - GENERATED CALL = (el ?: 0).plus(123)
2021-03-11 10:51:13,247 [main:63] - replacement of sum of type Int is (el ?: 0).toByte().toInt()
2021-03-11 10:51:13,369 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:51:13,370 [main:66] - Compilation checking started
2021-03-11 10:51:13,692 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        (el ?: 0).toByte().toInt() = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:51:13,701 [main:56] - replacing (sum, Int)
2021-03-11 10:51:13,703 [main:38] - replacing sum Int
2021-03-11 10:51:13,703 [main:42] - Getting value of type Int
2021-03-11 10:51:13,822 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:13,825 [main:46] - GENERATED VALUE OF TYPE Int = -1104492474
2021-03-11 10:51:13,825 [main:49] - GENERATED IS CALL =false
2021-03-11 10:51:13,830 [main:55] - randomType = Double
2021-03-11 10:51:13,948 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:51:13,990 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@69f564bd]
2021-03-11 10:51:13,991 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@63c4310c]
2021-03-11 10:51:14,107 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:14,110 [main:66] - Generated call from random type = (0.031936605221527414).toShort().compareTo(-120)
2021-03-11 10:51:14,111 [main:94] - GETTING Int from MyIterator
2021-03-11 10:51:14,121 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:51:14,122 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:51:14,122 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:51:14,240 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:51:14,243 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext().compareTo(true)
2021-03-11 10:51:14,243 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:51:14,243 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:51:14,243 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.takeLowestOneBit()
2021-03-11 10:51:14,243 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:51:14,243 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:51:14,243 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.countLeadingZeroBits()
2021-03-11 10:51:14,243 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:51:14,243 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:51:14,358 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:14,475 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:14,478 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.coerceIn(791383599, 1654941237)
2021-03-11 10:51:14,478 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]]
2021-03-11 10:51:14,478 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:51:14,478 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()
2021-03-11 10:51:14,478 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:51:14,478 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:51:14,478 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.countTrailingZeroBits()
2021-03-11 10:51:14,479 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:51:14,479 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:51:14,479 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:51:14,596 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:14,599 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.shr(1315061246)
2021-03-11 10:51:14,599 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:51:14,599 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:51:14,599 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:51:14,715 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:14,718 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.shl(1117476852)
2021-03-11 10:51:14,718 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:51:14,719 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:51:14,719 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.unaryPlus()
2021-03-11 10:51:14,719 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:51:14,719 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:51:14,839 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:14,842 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.compareTo(-112)
2021-03-11 10:51:14,842 [main:63] - replacement of sum of type Int is (MyCollection3().iterator()).next()
2021-03-11 10:51:14,957 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:51:14,957 [main:66] - Compilation checking started
2021-03-11 10:51:15,280 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        (MyCollection3().iterator()).next() = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while(i < (MyCollection1().iterator()).next().inv()) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:51:15,290 [main:56] - replacing (i < (MyCollection1().iterator()).next().inv(), Boolean)
2021-03-11 10:51:15,291 [main:38] - replacing i < (MyCollection1().iterator()).next().inv() Boolean
2021-03-11 10:51:15,291 [main:42] - Getting value of type Boolean
2021-03-11 10:51:15,411 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:51:15,413 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:51:15,414 [main:49] - GENERATED IS CALL =false
2021-03-11 10:51:15,706 [main:55] - randomType = ArrayDeque<LinkedHashMap<String, UInt>>
2021-03-11 10:51:15,870 [main:302] - generating value of type = ArrayDeque<LinkedHashMap<String, UInt>> false depth = 0
2021-03-11 10:51:15,992 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<LinkedHashMap<String, UInt>>): ArrayDeque<LinkedHashMap<String, UInt>> = TODO()
2021-03-11 10:51:15,996 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<LinkedHashMap<String, UInt>>): ArrayDeque<LinkedHashMap<String, UInt>> = TODO()
2021-03-11 10:51:16,260 [main:302] - generating value of type = Collection<LinkedHashMap<String, UInt>> false depth = 3
2021-03-11 10:51:16,384 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): Collection<LkedHashMap<Strg, UInt>> = TODO()
2021-03-11 10:51:16,387 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): Collection<LkedHashMap<Strg, UInt>> = TODO()
2021-03-11 10:51:16,508 [main:95] - GENERATED = hashSetOf<LinkedHashMap<String, UInt>>()
2021-03-11 10:51:16,508 [main:95] - GENERATED = ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())
2021-03-11 10:51:16,702 [main:137] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.collections.LinkedHashMap<kotlin.String, kotlin.UInt>> defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@6f67410e]
2021-03-11 10:51:16,824 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:16,943 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:16,946 [main:137] - GENERATING call of type public abstract fun contains(element: kotlin.collections.LinkedHashMap<kotlin.String, kotlin.UInt>): kotlin.Boolean defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@59a4f5ec]
2021-03-11 10:51:17,063 [main:302] - generating value of type = LinkedHashMap<String, UInt> false depth = 0
2021-03-11 10:51:17,186 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(original: kotlin.collections.Map<String, UInt>): LinkedHashMap<String, UInt> = TODO()
2021-03-11 10:51:17,189 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(original: kotlin.collections.Map<String, UInt>): LinkedHashMap<String, UInt> = TODO()
2021-03-11 10:51:17,462 [main:302] - generating value of type = Map<String, UInt> false depth = 3
2021-03-11 10:51:17,599 [main:43] - GENERATING CALL OF fun <K, V> HashMap(): Map<String, UInt> = TODO()
2021-03-11 10:51:17,603 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> HashMap(): Map<String, UInt> = TODO()
2021-03-11 10:51:17,723 [main:95] - GENERATED = HashMap<String, UInt>()
2021-03-11 10:51:17,723 [main:95] - GENERATED = LinkedHashMap<String, UInt>(HashMap<String, UInt>())
2021-03-11 10:51:17,723 [main:66] - Generated call from random type = (ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))
2021-03-11 10:51:17,724 [main:94] - GETTING Boolean from MyIterator
2021-03-11 10:51:17,730 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]]
2021-03-11 10:51:17,731 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:51:17,731 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]
2021-03-11 10:51:17,846 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:51:17,846 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.equals("ihmhs")
2021-03-11 10:51:17,846 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]]
2021-03-11 10:51:17,846 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]
2021-03-11 10:51:17,959 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:51:17,960 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.equals("cxcqo")
2021-03-11 10:51:17,960 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]]
2021-03-11 10:51:17,960 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:51:17,960 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext()
2021-03-11 10:51:17,960 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fb50dd8]]
2021-03-11 10:51:17,960 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:51:17,960 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fb50dd8]
2021-03-11 10:51:18,075 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:51:18,078 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext().xor(true)
2021-03-11 10:51:18,078 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyCollection3.MyIterator[DeserializedSimpleFunctionDescriptor@3d80332c]]
2021-03-11 10:51:18,078 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyCollection3.MyIterator[DeserializedSimpleFunctionDescriptor@3d80332c]
2021-03-11 10:51:18,194 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:51:18,195 [main:105] - GENERATED CALL = (MyCollection3().iterator()).equals("fozll")
2021-03-11 10:51:18,195 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@35500bca]]
2021-03-11 10:51:18,195 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:51:18,195 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@35500bca]
2021-03-11 10:51:18,310 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:51:18,311 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext().equals("norro")
2021-03-11 10:51:18,311 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@cf10153]]
2021-03-11 10:51:18,311 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:51:18,311 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@cf10153]
2021-03-11 10:51:18,311 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext().not()
2021-03-11 10:51:18,311 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6d9d9a5]]
2021-03-11 10:51:18,312 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:51:18,312 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6d9d9a5]
2021-03-11 10:51:18,427 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:51:18,430 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext().and(false)
2021-03-11 10:51:18,430 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@11eceb90]]
2021-03-11 10:51:18,430 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:51:18,430 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@11eceb90]
2021-03-11 10:51:18,559 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:51:18,562 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext().or(true)
2021-03-11 10:51:18,562 [main:63] - replacement of i < (MyCollection1().iterator()).next().inv() of type Boolean is (ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))
2021-03-11 10:51:18,691 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:51:18,691 [main:66] - Compilation checking started
2021-03-11 10:51:19,320 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = k--
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:51:19,330 [main:56] - replacing (k--, Int)
2021-03-11 10:51:19,330 [main:38] - replacing k-- Int
2021-03-11 10:51:19,330 [main:42] - Getting value of type Int
2021-03-11 10:51:19,490 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:19,495 [main:46] - GENERATED VALUE OF TYPE Int = 496849723
2021-03-11 10:51:19,495 [main:49] - GENERATED IS CALL =false
2021-03-11 10:51:19,846 [main:55] - randomType = Set<String>
2021-03-11 10:51:19,847 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:51:19,854 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:51:19,854 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:19,854 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:51:19,854 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().inv()
2021-03-11 10:51:19,854 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:51:19,855 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:19,855 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:51:19,855 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().inc()
2021-03-11 10:51:19,855 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:51:19,855 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:19,855 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:51:19,978 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:19,982 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().div(55)
2021-03-11 10:51:19,982 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:51:19,982 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:19,982 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:51:20,113 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:20,115 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().compareTo(-106)
2021-03-11 10:51:20,116 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:51:20,116 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:20,116 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:51:20,269 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:20,272 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().xor(658557000)
2021-03-11 10:51:20,272 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]]
2021-03-11 10:51:20,272 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:20,272 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next()
2021-03-11 10:51:20,272 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:51:20,272 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:20,272 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:51:20,272 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().takeLowestOneBit()
2021-03-11 10:51:20,272 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:51:20,272 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:20,272 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:51:20,272 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().countTrailingZeroBits()
2021-03-11 10:51:20,273 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:51:20,273 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:20,273 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:51:20,406 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:20,409 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().plus(38)
2021-03-11 10:51:20,409 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:51:20,409 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:20,410 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().sign
2021-03-11 10:51:20,410 [main:63] - replacement of k-- of type Int is (MyCollection2().iterator()).next()
2021-03-11 10:51:20,537 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:51:20,538 [main:66] - Compilation checking started
2021-03-11 10:51:21,100 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:51:21,109 [main:56] - replacing (sum, Int)
2021-03-11 10:51:21,165 [main:38] - replacing sum Int
2021-03-11 10:51:21,166 [main:42] - Getting value of type Int
2021-03-11 10:51:21,313 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:21,316 [main:46] - GENERATED VALUE OF TYPE Int = -1383135059
2021-03-11 10:51:21,316 [main:49] - GENERATED IS CALL =false
2021-03-11 10:51:21,327 [main:55] - randomType = MyCollection4
2021-03-11 10:51:21,454 [main:302] - generating value of type = MyCollection4 false depth = 0
2021-03-11 10:51:21,456 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:51:21,578 [main:194] - Type params = []
2021-03-11 10:51:21,701 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyCollection4[DeserializedSimpleFunctionDescriptor@2e9076c9]
2021-03-11 10:51:21,826 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:51:21,826 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:51:21,949 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:51:21,953 [main:66] - Generated call from random type = (MyCollection4()).equals("dtibt").compareTo(true)
2021-03-11 10:51:21,953 [main:94] - GETTING Int from Int
2021-03-11 10:51:21,997 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62c19a2]]
2021-03-11 10:51:21,997 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:51:21,997 [main:137] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62c19a2]
2021-03-11 10:51:21,997 [main:105] - GENERATED CALL = (el ?: 0).toChar().digitToInt()
2021-03-11 10:51:21,997 [main:101] - Case = [public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:51:21,997 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:51:21,998 [main:105] - GENERATED CALL = (el ?: 0).inc()
2021-03-11 10:51:21,998 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:51:21,998 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:51:22,125 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:22,127 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:51:22,249 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:22,251 [main:105] - GENERATED CALL = (el ?: 0).compareTo(702492369).shl(579846838)
2021-03-11 10:51:22,251 [main:101] - Case = [public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:51:22,251 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:51:22,370 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:22,373 [main:105] - GENERATED CALL = (el ?: 0).xor(-1513561470)
2021-03-11 10:51:22,373 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:51:22,373 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:51:22,501 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:22,504 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:51:22,624 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:22,627 [main:105] - GENERATED CALL = (el ?: 0).compareTo(-1666127553).plus(7)
2021-03-11 10:51:22,627 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:51:22,627 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:51:22,748 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:22,751 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:51:22,751 [main:105] - GENERATED CALL = (el ?: 0).compareTo(-926738218).takeLowestOneBit()
2021-03-11 10:51:22,751 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:51:22,752 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:51:22,871 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:22,874 [main:105] - GENERATED CALL = (el ?: 0).rotateLeft(751204488)
2021-03-11 10:51:22,874 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a8376bf]]
2021-03-11 10:51:22,874 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f]
2021-03-11 10:51:22,997 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:51:23,000 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a8376bf]
2021-03-11 10:51:23,000 [main:105] - GENERATED CALL = (el ?: 0).div(931207448581916041).countOneBits()
2021-03-11 10:51:23,000 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:51:23,000 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:51:23,118 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:23,121 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:51:23,121 [main:105] - GENERATED CALL = (el ?: 0).compareTo(-1096396074).countLeadingZeroBits()
2021-03-11 10:51:23,121 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:51:23,121 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:51:23,121 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:51:23,241 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:23,243 [main:105] - GENERATED CALL = (el ?: 0).toInt().rem(30)
2021-03-11 10:51:23,244 [main:63] - replacement of sum of type Int is (el ?: 0).compareTo(-926738218).takeLowestOneBit()
2021-03-11 10:51:23,362 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:51:23,362 [main:66] - Compilation checking started
2021-03-11 10:51:23,857 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    (el ?: 0).compareTo(-926738218).takeLowestOneBit() = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:51:23,866 [main:56] - replacing (i, Int)
2021-03-11 10:51:23,868 [main:38] - replacing i Int
2021-03-11 10:51:23,868 [main:42] - Getting value of type Int
2021-03-11 10:51:23,999 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:24,001 [main:46] - GENERATED VALUE OF TYPE Int = 903829383
2021-03-11 10:51:24,002 [main:49] - GENERATED IS CALL =false
2021-03-11 10:51:24,012 [main:55] - randomType = MyCollection2
2021-03-11 10:51:24,134 [main:302] - generating value of type = MyCollection2 false depth = 0
2021-03-11 10:51:24,137 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}
2021-03-11 10:51:24,260 [main:194] - Type params = []
2021-03-11 10:51:24,394 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.min(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5aa730f0]
2021-03-11 10:51:24,395 [main:66] - Generated call from random type = (MyCollection2()).min()!!
2021-03-11 10:51:24,395 [main:94] - GETTING Int from Int
2021-03-11 10:51:24,437 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:51:24,437 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:51:24,438 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:51:24,557 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:24,678 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:24,681 [main:105] - GENERATED CALL = (i).toInt().coerceIn(1121666292, -964437998)
2021-03-11 10:51:24,681 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:51:24,681 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:51:24,800 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:24,803 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:51:24,924 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:24,927 [main:105] - GENERATED CALL = (i).compareTo(-282211393).and(1584721952)
2021-03-11 10:51:24,927 [main:101] - Case = [public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:51:24,927 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:51:25,071 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:25,197 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:25,200 [main:105] - GENERATED CALL = (i).coerceIn(-1471906457, 1911148722)
2021-03-11 10:51:25,200 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:51:25,200 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:51:25,330 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:25,333 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:51:25,333 [main:105] - GENERATED CALL = (i).compareTo(2124020239).unaryPlus()
2021-03-11 10:51:25,333 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3bfb2f7e]]
2021-03-11 10:51:25,333 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:51:25,333 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3bfb2f7e]
2021-03-11 10:51:25,333 [main:105] - GENERATED CALL = (i).toShort().toInt()
2021-03-11 10:51:25,333 [main:101] - Case = [@kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:51:25,333 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:51:25,459 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:25,463 [main:105] - GENERATED CALL = (i).rem(-72)
2021-03-11 10:51:25,463 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@674346bc]]
2021-03-11 10:51:25,463 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97]
2021-03-11 10:51:25,463 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@674346bc]
2021-03-11 10:51:25,463 [main:105] - GENERATED CALL = (i).toLong().countTrailingZeroBits()
2021-03-11 10:51:25,463 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:51:25,463 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:51:25,463 [main:105] - GENERATED CALL = (i).countOneBits()
2021-03-11 10:51:25,464 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], public final val step: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@d97c869]]
2021-03-11 10:51:25,464 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:51:25,602 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:25,605 [main:105] - GENERATED CALL = (i).rangeTo(-108).step
2021-03-11 10:51:25,605 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:51:25,605 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:51:25,605 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:51:25,605 [main:105] - GENERATED CALL = (i).toInt().unaryMinus()
2021-03-11 10:51:25,605 [main:63] - replacement of i of type Int is 903829383
2021-03-11 10:51:25,730 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 10:51:25,730 [main:66] - Compilation checking started
2021-03-11 10:51:26,099 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = 0
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = 903829383++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:51:26,108 [main:56] - replacing (sum, Int)
2021-03-11 10:51:26,108 [main:38] - replacing sum Int
2021-03-11 10:51:26,108 [main:42] - Getting value of type Int
2021-03-11 10:51:26,235 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:26,238 [main:46] - GENERATED VALUE OF TYPE Int = -1494093417
2021-03-11 10:51:26,238 [main:49] - GENERATED IS CALL =false
2021-03-11 10:51:26,450 [main:55] - randomType = MyCollection2?
2021-03-11 10:51:26,575 [main:302] - generating value of type = MyCollection2 false depth = 0
2021-03-11 10:51:26,577 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}
2021-03-11 10:51:26,703 [main:194] - Type params = []
2021-03-11 10:51:26,843 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.lastOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1f129187]
2021-03-11 10:51:26,844 [main:66] - Generated call from random type = (MyCollection2())?.lastOrNull()!!
2021-03-11 10:51:26,845 [main:94] - GETTING Int from Array<Int?>
2021-03-11 10:51:26,859 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:51:26,859 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:51:26,981 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:26,984 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:51:26,984 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(1144759010)?.dec()
2021-03-11 10:51:26,984 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:51:26,984 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:51:27,108 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:27,111 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.plus(-55)
2021-03-11 10:51:27,112 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:51:27,112 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:51:27,233 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:27,236 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:51:27,236 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(31092252)?.inv()
2021-03-11 10:51:27,237 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:51:27,237 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:51:27,237 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.dec()
2021-03-11 10:51:27,237 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:51:27,237 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:51:27,357 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:27,360 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:51:27,481 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:27,484 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-1186196700)?.shr(1894851403)
2021-03-11 10:51:27,484 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2760da68], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:51:27,484 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2760da68]
2021-03-11 10:51:27,605 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:51:27,605 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:51:27,727 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:51:27,731 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).equals("spwjk").compareTo(false)
2021-03-11 10:51:27,731 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:51:27,731 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:51:27,854 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:27,857 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.coerceAtLeast(-470810138)
2021-03-11 10:51:27,857 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:51:27,857 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:51:27,978 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:27,981 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.rotateRight(-778941339)
2021-03-11 10:51:27,981 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:51:27,981 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:51:28,104 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:28,107 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.compareTo(-77)
2021-03-11 10:51:28,107 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:51:28,107 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:51:28,227 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:28,230 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.times(71)
2021-03-11 10:51:28,230 [main:63] - replacement of sum of type Int is (arrayOfNulls<Int>(5)).get(-1186196700)?.shr(1894851403)
2021-03-11 10:51:28,351 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 10:51:28,359 [main:56] - replacing (0, Int)
2021-03-11 10:51:28,361 [main:38] - replacing 0 Int
2021-03-11 10:51:28,361 [main:42] - Getting value of type Int
2021-03-11 10:51:28,491 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:28,494 [main:46] - GENERATED VALUE OF TYPE Int = 1378318448
2021-03-11 10:51:28,494 [main:49] - GENERATED IS CALL =false
2021-03-11 10:51:28,650 [main:55] - randomType = Float?
2021-03-11 10:51:28,772 [main:302] - generating value of type = Float true depth = 0
2021-03-11 10:51:28,811 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@1d640183]
2021-03-11 10:51:28,812 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6abd8a99]
2021-03-11 10:51:28,931 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:28,933 [main:66] - Generated call from random type = (0.8140517f)?.toShort().plus(75)
2021-03-11 10:51:28,934 [main:94] - GETTING Int from MyIterator
2021-03-11 10:51:28,939 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:51:28,939 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:51:29,059 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:29,063 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.rotateRight(381234683)
2021-03-11 10:51:29,063 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:51:29,063 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:51:29,185 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:29,188 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.or(-1734423616)
2021-03-11 10:51:29,188 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:51:29,188 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:51:29,319 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:29,322 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.coerceAtLeast(832979327)
2021-03-11 10:51:29,322 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:51:29,322 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:51:29,322 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.inv()
2021-03-11 10:51:29,322 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:51:29,322 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:51:29,444 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:29,447 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.and(201063131)
2021-03-11 10:51:29,447 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:51:29,447 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.absoluteValue
2021-03-11 10:51:29,447 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:51:29,447 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:51:29,447 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.countLeadingZeroBits()
2021-03-11 10:51:29,447 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:51:29,447 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:51:29,447 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.dec()
2021-03-11 10:51:29,448 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:51:29,448 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:51:29,568 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:29,571 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.rotateLeft(-189116369)
2021-03-11 10:51:29,571 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:51:29,571 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:51:29,692 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:29,695 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.rem(125)
2021-03-11 10:51:29,695 [main:63] - replacement of 0 of type Int is (MyCollection4().iterator()).k.dec()
2021-03-11 10:51:29,822 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:51:29,822 [main:66] - Compilation checking started
2021-03-11 10:51:30,342 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:51:30,356 [main:56] - replacing (sum, Int)
2021-03-11 10:51:30,359 [main:38] - replacing sum Int
2021-03-11 10:51:30,359 [main:42] - Getting value of type Int
2021-03-11 10:51:30,507 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:30,509 [main:46] - GENERATED VALUE OF TYPE Int = -1695932127
2021-03-11 10:51:30,509 [main:49] - GENERATED IS CALL =false
2021-03-11 10:51:30,949 [main:55] - randomType = Collection<LinkedHashMap<MyCollection4, Float?>>
2021-03-11 10:51:30,949 [main:94] - GETTING Int from Int
2021-03-11 10:51:30,986 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:51:30,986 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:51:31,107 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:31,109 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:51:31,229 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:31,352 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:31,354 [main:105] - GENERATED CALL = (i).compareTo(850768817).coerceIn(1638166765, 1899893015)
2021-03-11 10:51:31,354 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@719372c6]]
2021-03-11 10:51:31,354 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:51:31,355 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@719372c6]
2021-03-11 10:51:31,355 [main:105] - GENERATED CALL = (i).toShort().unaryPlus()
2021-03-11 10:51:31,355 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:51:31,355 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:51:31,355 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:51:31,355 [main:105] - GENERATED CALL = (i).toInt().countTrailingZeroBits()
2021-03-11 10:51:31,355 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:51:31,355 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:51:31,355 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:51:31,355 [main:105] - GENERATED CALL = (i).toInt().inv()
2021-03-11 10:51:31,355 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@f49fa44]]
2021-03-11 10:51:31,355 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:51:31,355 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@f49fa44]
2021-03-11 10:51:31,355 [main:105] - GENERATED CALL = (i).toByte().unaryPlus()
2021-03-11 10:51:31,355 [main:101] - Case = [public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:51:31,355 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:51:31,356 [main:105] - GENERATED CALL = (i).toInt()
2021-03-11 10:51:31,356 [main:101] - Case = [public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:51:31,356 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:51:31,356 [main:105] - GENERATED CALL = (i).unaryMinus()
2021-03-11 10:51:31,356 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:51:31,356 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:51:31,356 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:51:31,477 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:31,480 [main:105] - GENERATED CALL = (i).toInt().xor(-353793332)
2021-03-11 10:51:31,480 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:51:31,480 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:51:31,658 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:31,662 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:51:31,783 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:31,786 [main:105] - GENERATED CALL = (i).compareTo(-1236166456).rem(20)
2021-03-11 10:51:31,786 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], public final val last: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@21a92708]]
2021-03-11 10:51:31,786 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:51:31,906 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:31,909 [main:105] - GENERATED CALL = (i).rangeTo(-79).last
2021-03-11 10:51:31,909 [main:63] - replacement of sum of type Int is (i).toInt().inv()
2021-03-11 10:51:32,028 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:51:32,028 [main:66] - Compilation checking started
2021-03-11 10:51:32,378 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        (i).toInt().inv() = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:51:32,387 [main:56] - replacing (k, Int)
2021-03-11 10:51:32,387 [main:38] - replacing k Int
2021-03-11 10:51:32,387 [main:42] - Getting value of type Int
2021-03-11 10:51:32,517 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:32,519 [main:46] - GENERATED VALUE OF TYPE Int = -1301263438
2021-03-11 10:51:32,519 [main:49] - GENERATED IS CALL =false
2021-03-11 10:51:32,529 [main:55] - randomType = MyCollection1
2021-03-11 10:51:32,654 [main:302] - generating value of type = MyCollection1 false depth = 0
2021-03-11 10:51:32,656 [main:112] - generating klass MyCollection1 text = class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}
2021-03-11 10:51:32,779 [main:194] - Type params = []
2021-03-11 10:51:32,915 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.minOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@44b673bb]
2021-03-11 10:51:32,915 [main:66] - Generated call from random type = (MyCollection1()).minOrNull()!!
2021-03-11 10:51:32,915 [main:94] - GETTING Int from Int
2021-03-11 10:51:32,948 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3b9b155c]]
2021-03-11 10:51:32,948 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:51:32,948 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3b9b155c]
2021-03-11 10:51:32,948 [main:105] - GENERATED CALL = (i).toShort().unaryMinus()
2021-03-11 10:51:32,948 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:51:32,948 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:51:32,948 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:51:33,075 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:33,078 [main:105] - GENERATED CALL = (i).toInt().rotateRight(-44020099)
2021-03-11 10:51:33,078 [main:101] - Case = [public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:51:33,078 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:51:33,079 [main:105] - GENERATED CALL = (i).unaryMinus()
2021-03-11 10:51:33,079 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:51:33,079 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:51:33,079 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:51:33,207 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:33,209 [main:105] - GENERATED CALL = (i).toInt().ushr(1644823720)
2021-03-11 10:51:33,209 [main:101] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@b2d8722], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@11d995f6]]
2021-03-11 10:51:33,209 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@b2d8722]
2021-03-11 10:51:33,342 [main:302] - generating value of type = Float true depth = 0
2021-03-11 10:51:33,345 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@11d995f6]
2021-03-11 10:51:33,345 [main:105] - GENERATED CALL = (i).div(0.1722312f).toBits()
2021-03-11 10:51:33,345 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:51:33,345 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:51:33,345 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:51:33,345 [main:105] - GENERATED CALL = (i).toInt().takeLowestOneBit()
2021-03-11 10:51:33,345 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:51:33,345 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:51:33,345 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:51:33,468 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:33,471 [main:105] - GENERATED CALL = (i).toInt().minus(-1)
2021-03-11 10:51:33,471 [main:101] - Case = [@kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:51:33,471 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:51:33,593 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:33,596 [main:105] - GENERATED CALL = (i).rem(57)
2021-03-11 10:51:33,596 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3af86106]]
2021-03-11 10:51:33,596 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:51:33,596 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3af86106]
2021-03-11 10:51:33,718 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:33,721 [main:105] - GENERATED CALL = (i).toByte().minus(-127)
2021-03-11 10:51:33,721 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62c19a2]]
2021-03-11 10:51:33,721 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:51:33,721 [main:137] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62c19a2]
2021-03-11 10:51:33,722 [main:105] - GENERATED CALL = (i).toChar().digitToInt()
2021-03-11 10:51:33,722 [main:63] - replacement of k of type Int is (i).toInt().minus(-1)
2021-03-11 10:51:33,842 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:51:33,842 [main:66] - Compilation checking started
2021-03-11 10:51:34,190 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = i++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (i).toInt().minus(-1)--
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:51:34,199 [main:56] - replacing (i, Int)
2021-03-11 10:51:34,201 [main:38] - replacing i Int
2021-03-11 10:51:34,201 [main:42] - Getting value of type Int
2021-03-11 10:51:34,323 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:34,325 [main:46] - GENERATED VALUE OF TYPE Int = 396089157
2021-03-11 10:51:34,326 [main:49] - GENERATED IS CALL =false
2021-03-11 10:51:34,331 [main:55] - randomType = String
2021-03-11 10:51:34,451 [main:302] - generating value of type = String true depth = 0
2021-03-11 10:51:34,473 [main:66] - Generated call from random type = ("tfmht").lastIndex
2021-03-11 10:51:34,474 [main:94] - GETTING Int from MyIterator
2021-03-11 10:51:34,481 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:51:34,481 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:51:34,606 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:34,608 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.coerceAtMost(-1542888114)
2021-03-11 10:51:34,608 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:51:34,609 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:51:34,732 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:34,734 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.compareTo(106)
2021-03-11 10:51:34,734 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:51:34,734 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:51:34,734 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:51:34,856 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:34,858 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.rem(67)
2021-03-11 10:51:34,858 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:51:34,858 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:51:34,859 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.dec()
2021-03-11 10:51:34,859 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:51:34,859 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:51:34,984 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:34,987 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.coerceAtLeast(41173287)
2021-03-11 10:51:34,987 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:51:34,987 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:51:34,987 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.unaryPlus()
2021-03-11 10:51:34,987 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:51:34,987 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:51:34,987 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.toInt()
2021-03-11 10:51:34,987 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:51:34,988 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:51:34,988 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:51:35,113 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:35,115 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.ushr(-577194142)
2021-03-11 10:51:35,116 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:51:35,116 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.absoluteValue
2021-03-11 10:51:35,116 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:51:35,116 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:51:35,116 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.inc()
2021-03-11 10:51:35,116 [main:63] - replacement of i of type Int is (MyCollection3().iterator()).k.compareTo(106)
2021-03-11 10:51:35,236 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:51:35,236 [main:66] - Compilation checking started
2021-03-11 10:51:35,582 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection3().iterator()).k.compareTo(106)++
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:51:35,590 [main:56] - replacing (0, Int)
2021-03-11 10:51:35,590 [main:38] - replacing 0 Int
2021-03-11 10:51:35,590 [main:42] - Getting value of type Int
2021-03-11 10:51:35,712 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:35,715 [main:46] - GENERATED VALUE OF TYPE Int = 1207655390
2021-03-11 10:51:35,715 [main:49] - GENERATED IS CALL =false
2021-03-11 10:51:35,725 [main:55] - randomType = MyCollection4
2021-03-11 10:51:35,845 [main:302] - generating value of type = MyCollection4 false depth = 0
2021-03-11 10:51:35,847 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:51:35,966 [main:194] - Type params = []
2021-03-11 10:51:36,101 [main:137] - GENERATING call of type public final operator fun iterator(): MyCollection4.MyIterator defined in MyCollection4[SimpleFunctionDescriptorImpl@4fd1f276]
2021-03-11 10:51:36,101 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@68460a]
2021-03-11 10:51:36,101 [main:66] - Generated call from random type = (MyCollection4()).iterator().next()
2021-03-11 10:51:36,101 [main:94] - GETTING Int from Int
2021-03-11 10:51:36,136 [main:101] - Case = [public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:51:36,136 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:51:36,259 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:36,262 [main:105] - GENERATED CALL = (i).minus(-3)
2021-03-11 10:51:36,262 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], public final val step: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@d97c869]]
2021-03-11 10:51:36,262 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:51:36,382 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:36,385 [main:105] - GENERATED CALL = (i).rangeTo(101).step
2021-03-11 10:51:36,385 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:51:36,385 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:51:36,385 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:51:36,385 [main:105] - GENERATED CALL = (i).toInt().takeHighestOneBit()
2021-03-11 10:51:36,386 [main:101] - Case = [public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:51:36,386 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:51:36,506 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:36,508 [main:105] - GENERATED CALL = (i).and(-2091030420)
2021-03-11 10:51:36,509 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:51:36,509 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:51:36,509 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:51:36,628 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:36,631 [main:105] - GENERATED CALL = (i).toInt().coerceAtMost(-956094594)
2021-03-11 10:51:36,631 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:51:36,631 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:51:36,631 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:51:36,631 [main:105] - GENERATED CALL = (i).toInt().inv()
2021-03-11 10:51:36,632 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@13c687d3]]
2021-03-11 10:51:36,632 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:51:36,632 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@13c687d3]
2021-03-11 10:51:36,750 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:36,753 [main:105] - GENERATED CALL = (i).toFloat().compareTo(-37)
2021-03-11 10:51:36,753 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:51:36,753 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:51:36,753 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:51:36,753 [main:105] - GENERATED CALL = (i).toInt().unaryPlus()
2021-03-11 10:51:36,753 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:51:36,753 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:51:36,928 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:36,930 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:51:36,930 [main:105] - GENERATED CALL = (i).compareTo(-1432421696).unaryPlus()
2021-03-11 10:51:36,930 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:51:36,930 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:51:36,931 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:51:37,052 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:37,055 [main:105] - GENERATED CALL = (i).toInt().div(-50)
2021-03-11 10:51:37,055 [main:63] - replacement of 0 of type Int is (MyCollection4()).iterator().next()
2021-03-11 10:51:37,175 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:51:37,184 [main:56] - replacing (i++, Int)
2021-03-11 10:51:37,186 [main:38] - replacing i++ Int
2021-03-11 10:51:37,186 [main:42] - Getting value of type Int
2021-03-11 10:51:37,318 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:37,321 [main:46] - GENERATED VALUE OF TYPE Int = 686828702
2021-03-11 10:51:37,321 [main:49] - GENERATED IS CALL =false
2021-03-11 10:51:37,326 [main:55] - randomType = Char
2021-03-11 10:51:37,450 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:51:37,472 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5775f993]
2021-03-11 10:51:37,597 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:51:37,600 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:51:37,722 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:37,725 [main:66] - Generated call from random type = ('쌪').compareTo('瓄').rotateLeft(-809397685)
2021-03-11 10:51:37,725 [main:94] - GETTING Int from MyIterator
2021-03-11 10:51:37,730 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:51:37,730 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:51:37,730 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.toInt()
2021-03-11 10:51:37,730 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:51:37,731 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:51:37,731 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.takeHighestOneBit()
2021-03-11 10:51:37,731 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:51:37,731 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.sign
2021-03-11 10:51:37,731 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:51:37,731 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:51:37,731 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.unaryMinus()
2021-03-11 10:51:37,731 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:51:37,731 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:51:37,731 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.inv()
2021-03-11 10:51:37,731 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:51:37,731 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:51:37,852 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:37,855 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.rotateLeft(1584687898)
2021-03-11 10:51:37,855 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:51:37,855 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:51:37,975 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:37,978 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.plus(-69)
2021-03-11 10:51:37,978 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:51:37,979 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:51:38,098 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:38,101 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.rotateRight(162158760)
2021-03-11 10:51:38,101 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:51:38,101 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:51:38,223 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:38,225 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.or(-1064130264)
2021-03-11 10:51:38,226 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:51:38,226 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:51:38,353 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:38,478 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:38,481 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.coerceIn(108497807, 446018023)
2021-03-11 10:51:38,481 [main:63] - replacement of i++ of type Int is (MyCollection4().iterator()).k.or(-1064130264)
2021-03-11 10:51:38,601 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:51:38,602 [main:66] - Compilation checking started
2021-03-11 10:51:39,103 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println(sum)
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:51:39,111 [main:56] - replacing (sum, Int)
2021-03-11 10:51:39,113 [main:38] - replacing sum Int
2021-03-11 10:51:39,113 [main:42] - Getting value of type Int
2021-03-11 10:51:39,237 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:39,239 [main:46] - GENERATED VALUE OF TYPE Int = -2023167701
2021-03-11 10:51:39,239 [main:49] - GENERATED IS CALL =false
2021-03-11 10:51:39,250 [main:55] - randomType = MyCollection2
2021-03-11 10:51:39,371 [main:302] - generating value of type = MyCollection2 false depth = 0
2021-03-11 10:51:39,374 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}
2021-03-11 10:51:39,494 [main:194] - Type params = []
2021-03-11 10:51:39,624 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.minOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@44b673bb]
2021-03-11 10:51:39,624 [main:66] - Generated call from random type = (MyCollection2()).minOrNull()!!
2021-03-11 10:51:39,625 [main:94] - GETTING Int from MyIterator
2021-03-11 10:51:39,635 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:51:39,635 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:51:39,635 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.takeHighestOneBit()
2021-03-11 10:51:39,635 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:51:39,635 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:51:39,635 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:51:39,754 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:39,757 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.rem(48)
2021-03-11 10:51:39,757 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:51:39,757 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:51:39,876 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:39,879 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.minus(107)
2021-03-11 10:51:39,879 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:51:39,879 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:51:39,879 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:51:39,880 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.toInt()
2021-03-11 10:51:39,880 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:51:39,880 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:51:39,880 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:51:39,880 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.unaryMinus()
2021-03-11 10:51:39,880 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:51:39,880 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:51:40,000 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:40,004 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.coerceAtMost(766958473)
2021-03-11 10:51:40,004 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:51:40,004 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:51:40,004 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.unaryPlus()
2021-03-11 10:51:40,004 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:51:40,004 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:51:40,004 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:51:40,127 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:40,130 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.plus(-30)
2021-03-11 10:51:40,130 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:51:40,130 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:51:40,249 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:40,252 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.coerceAtLeast(498139411)
2021-03-11 10:51:40,252 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:51:40,252 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:51:40,375 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:40,378 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.compareTo(-51)
2021-03-11 10:51:40,378 [main:63] - replacement of sum of type Int is (MyCollection3().iterator()).k.coerceAtLeast(498139411)
2021-03-11 10:51:40,499 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:51:40,500 [main:66] - Compilation checking started
2021-03-11 10:51:40,987 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:51:40,996 [main:56] - replacing (sum, Int)
2021-03-11 10:51:40,998 [main:38] - replacing sum Int
2021-03-11 10:51:40,998 [main:42] - Getting value of type Int
2021-03-11 10:51:41,122 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:41,124 [main:46] - GENERATED VALUE OF TYPE Int = 719668850
2021-03-11 10:51:41,124 [main:49] - GENERATED IS CALL =false
2021-03-11 10:51:41,135 [main:55] - randomType = MyCollection4
2021-03-11 10:51:41,257 [main:302] - generating value of type = MyCollection4 false depth = 0
2021-03-11 10:51:41,260 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:51:41,382 [main:194] - Type params = []
2021-03-11 10:51:41,513 [main:137] - GENERATING call of type public final operator fun iterator(): MyCollection4.MyIterator defined in MyCollection4[SimpleFunctionDescriptorImpl@4fd1f276]
2021-03-11 10:51:41,513 [main:66] - Generated call from random type = (MyCollection4()).iterator().k
2021-03-11 10:51:41,513 [main:94] - GETTING Int from Int
2021-03-11 10:51:41,549 [main:101] - Case = [public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:51:41,550 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:51:41,672 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:41,675 [main:105] - GENERATED CALL = (el ?: 0).coerceAtMost(-180055318)
2021-03-11 10:51:41,675 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:51:41,675 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:51:41,796 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:41,799 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:51:41,923 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:41,925 [main:105] - GENERATED CALL = (el ?: 0).compareTo(127666875).ushr(-1994398121)
2021-03-11 10:51:41,926 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:51:41,926 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:51:41,926 [main:105] - GENERATED CALL = (el ?: 0).countLeadingZeroBits()
2021-03-11 10:51:41,926 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:51:41,926 [main:105] - GENERATED CALL = (el ?: 0).absoluteValue
2021-03-11 10:51:41,926 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4751263b]]
2021-03-11 10:51:41,926 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97]
2021-03-11 10:51:41,926 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4751263b]
2021-03-11 10:51:42,052 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:42,055 [main:105] - GENERATED CALL = (el ?: 0).toLong().compareTo(-53)
2021-03-11 10:51:42,055 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1547992c]]
2021-03-11 10:51:42,055 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:51:42,055 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1547992c]
2021-03-11 10:51:42,226 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:51:42,229 [main:105] - GENERATED CALL = (el ?: 0).toChar().minus('처')
2021-03-11 10:51:42,229 [main:101] - Case = [@kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:51:42,229 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:51:42,349 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:42,351 [main:105] - GENERATED CALL = (el ?: 0).rem(54)
2021-03-11 10:51:42,352 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:51:42,352 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:51:42,352 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:51:42,473 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:42,475 [main:105] - GENERATED CALL = (el ?: 0).toInt().div(-100)
2021-03-11 10:51:42,475 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:51:42,476 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:51:42,599 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:42,602 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:51:42,602 [main:105] - GENERATED CALL = (el ?: 0).compareTo(-1634242313).toInt()
2021-03-11 10:51:42,602 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:51:42,602 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:51:42,602 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:51:42,602 [main:105] - GENERATED CALL = (el ?: 0).toInt().unaryPlus()
2021-03-11 10:51:42,602 [main:63] - replacement of sum of type Int is (el ?: 0).toLong().compareTo(-53)
2021-03-11 10:51:42,723 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:51:42,724 [main:66] - Compilation checking started
2021-03-11 10:51:43,073 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    (el ?: 0).toLong().compareTo(-53) = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:51:43,082 [main:56] - replacing (0, Int)
2021-03-11 10:51:43,083 [main:38] - replacing 0 Int
2021-03-11 10:51:43,083 [main:42] - Getting value of type Int
2021-03-11 10:51:43,205 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:43,208 [main:46] - GENERATED VALUE OF TYPE Int = 1867655430
2021-03-11 10:51:43,208 [main:49] - GENERATED IS CALL =false
2021-03-11 10:51:43,363 [main:55] - randomType = Pair<Long, Char>
2021-03-11 10:51:43,485 [main:302] - generating value of type = Pair<Long, Char> false depth = 0
2021-03-11 10:51:43,615 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Long, second: Char): Pair<Long, Char> = TODO()
2021-03-11 10:51:43,619 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Long, second: Char): Pair<Long, Char> = TODO()
2021-03-11 10:51:43,747 [main:302] - generating value of type = Long true depth = 3
2021-03-11 10:51:43,749 [main:302] - generating value of type = Char true depth = 3
2021-03-11 10:51:43,752 [main:95] - GENERATED = Pair<Long, Char>(-1764348282172902084, '촇')
2021-03-11 10:51:43,764 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@674346bc]
2021-03-11 10:51:43,764 [main:66] - Generated call from random type = (Pair<Long, Char>(-1764348282172902084, '촇')).first.countTrailingZeroBits()
2021-03-11 10:51:43,765 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:51:43,773 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:51:43,773 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:43,773 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:51:43,897 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:43,900 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().ushr(-1913679968)
2021-03-11 10:51:43,900 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:51:43,900 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:43,900 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:51:43,900 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().unaryMinus()
2021-03-11 10:51:43,900 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:51:43,900 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:43,900 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:51:44,024 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:44,027 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().shr(-228587872)
2021-03-11 10:51:44,028 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:51:44,028 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:44,028 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().sign
2021-03-11 10:51:44,028 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:51:44,028 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:44,028 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:51:44,151 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:44,154 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().compareTo(-92)
2021-03-11 10:51:44,154 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:51:44,154 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:44,154 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:51:44,155 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().toInt()
2021-03-11 10:51:44,155 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:51:44,155 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:44,155 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:51:44,155 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().countLeadingZeroBits()
2021-03-11 10:51:44,155 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:51:44,155 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:44,155 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:51:44,279 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:44,282 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().xor(457147496)
2021-03-11 10:51:44,282 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:51:44,282 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:44,282 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:51:44,407 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:44,410 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().rem(-25)
2021-03-11 10:51:44,411 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:51:44,411 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:44,411 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:51:44,411 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().countTrailingZeroBits()
2021-03-11 10:51:44,411 [main:63] - replacement of 0 of type Int is (MyCollection2().iterator()).next().sign
2021-03-11 10:51:44,537 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:51:44,546 [main:56] - replacing (el!!, Int)
2021-03-11 10:51:44,546 [main:38] - replacing el!! Int
2021-03-11 10:51:44,546 [main:42] - Getting value of type Int
2021-03-11 10:51:44,677 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:44,681 [main:46] - GENERATED VALUE OF TYPE Int = 1181964229
2021-03-11 10:51:44,681 [main:49] - GENERATED IS CALL =false
2021-03-11 10:51:44,688 [main:55] - randomType = Long
2021-03-11 10:51:44,813 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:51:44,853 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4751263b]
2021-03-11 10:51:44,975 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:44,977 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:51:45,104 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:45,231 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:45,235 [main:66] - Generated call from random type = (-9160383978747233842).compareTo(-93).coerceIn(-1844605009, 471982189)
2021-03-11 10:51:45,236 [main:94] - GETTING Int from MyIterator
2021-03-11 10:51:45,245 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:51:45,245 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:51:45,369 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:45,372 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.coerceAtMost(-612663493)
2021-03-11 10:51:45,372 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:51:45,372 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.sign
2021-03-11 10:51:45,372 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:51:45,372 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:51:45,372 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:51:45,372 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.dec()
2021-03-11 10:51:45,372 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:51:45,372 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:51:45,372 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:51:45,495 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:45,498 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.ushr(1330658755)
2021-03-11 10:51:45,498 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:51:45,498 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:51:45,498 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.inv()
2021-03-11 10:51:45,498 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:51:45,498 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:51:45,625 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:45,628 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.rotateRight(-1586011830)
2021-03-11 10:51:45,628 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:51:45,628 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:51:45,628 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.countTrailingZeroBits()
2021-03-11 10:51:45,628 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:51:45,628 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:51:45,753 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:45,756 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.times(-68)
2021-03-11 10:51:45,756 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:51:45,756 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:51:45,756 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:51:45,881 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:45,884 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.minus(83)
2021-03-11 10:51:45,884 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:51:45,884 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:51:45,884 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:51:46,006 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:46,009 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.rem(-106)
2021-03-11 10:51:46,009 [main:63] - replacement of el!! of type Int is 1181964229
2021-03-11 10:51:46,136 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 10:51:46,146 [main:56] - replacing (k, Int)
2021-03-11 10:51:46,146 [main:38] - replacing k Int
2021-03-11 10:51:46,146 [main:42] - Getting value of type Int
2021-03-11 10:51:46,269 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:46,271 [main:46] - GENERATED VALUE OF TYPE Int = 1570741654
2021-03-11 10:51:46,271 [main:49] - GENERATED IS CALL =false
2021-03-11 10:51:46,564 [main:55] - randomType = HashSet<ArrayList<MyCollection2>>
2021-03-11 10:51:46,693 [main:302] - generating value of type = HashSet<ArrayList<MyCollection2>> false depth = 0
2021-03-11 10:51:46,822 [main:43] - GENERATING CALL OF fun <E> HashSet(): HashSet<ArrayList<MyCollection2>> = TODO()
2021-03-11 10:51:46,826 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(): HashSet<ArrayList<MyCollection2>> = TODO()
2021-03-11 10:51:46,952 [main:95] - GENERATED = HashSet<ArrayList<MyCollection2>>()
2021-03-11 10:51:47,095 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:51:47,217 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:47,220 [main:66] - Generated call from random type = (HashSet<ArrayList<MyCollection2>>()).size.ushr(-1547129739)
2021-03-11 10:51:47,221 [main:94] - GETTING Int from MyIterator
2021-03-11 10:51:47,225 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:51:47,226 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:51:47,226 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.toInt()
2021-03-11 10:51:47,226 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:51:47,226 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:51:47,226 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.inv()
2021-03-11 10:51:47,226 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:51:47,226 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:51:47,226 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.countTrailingZeroBits()
2021-03-11 10:51:47,226 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:51:47,226 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:51:47,351 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:47,354 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.ushr(-1931976290)
2021-03-11 10:51:47,354 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:51:47,354 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:51:47,534 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:47,537 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.plus(76)
2021-03-11 10:51:47,537 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:51:47,537 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:51:47,659 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:47,662 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.xor(-1196659225)
2021-03-11 10:51:47,662 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:51:47,662 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:51:47,784 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:47,787 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.minus(-46)
2021-03-11 10:51:47,787 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:51:47,787 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:51:47,787 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.countOneBits()
2021-03-11 10:51:47,787 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@149259da], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:51:47,787 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@149259da]
2021-03-11 10:51:47,787 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:51:47,908 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:51:47,911 [main:105] - GENERATED CALL = (MyCollection4().iterator()).hasNext().compareTo(false)
2021-03-11 10:51:47,911 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:51:47,911 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:51:48,035 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:48,157 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:48,160 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.coerceIn(1312941151, -771880635)
2021-03-11 10:51:48,160 [main:63] - replacement of k of type Int is (MyCollection4().iterator()).k.coerceIn(1312941151, -771880635)
2021-03-11 10:51:48,284 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:51:48,284 [main:66] - Compilation checking started
2021-03-11 10:51:48,648 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceIn(1312941151, -771880635)--
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:51:48,657 [main:56] - replacing (i, Int)
2021-03-11 10:51:48,658 [main:38] - replacing i Int
2021-03-11 10:51:48,658 [main:42] - Getting value of type Int
2021-03-11 10:51:48,784 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:48,787 [main:46] - GENERATED VALUE OF TYPE Int = -1922819724
2021-03-11 10:51:48,787 [main:49] - GENERATED IS CALL =false
2021-03-11 10:51:48,934 [main:55] - randomType = Char?
2021-03-11 10:51:49,056 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:51:49,085 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5775f993]
2021-03-11 10:51:49,208 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:51:49,211 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:51:49,211 [main:66] - Generated call from random type = ('')?.compareTo('뎸').countLeadingZeroBits()
2021-03-11 10:51:49,213 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:51:49,220 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:51:49,220 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:49,221 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:51:49,342 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:49,345 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().coerceAtMost(2065459018)
2021-03-11 10:51:49,345 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:51:49,345 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:49,345 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:51:49,465 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:49,468 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().shr(-1531382017)
2021-03-11 10:51:49,468 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:51:49,468 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:49,468 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:51:49,588 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:49,591 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().xor(-1639208419)
2021-03-11 10:51:49,591 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:51:49,591 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:49,591 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:51:49,591 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().takeHighestOneBit()
2021-03-11 10:51:49,591 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:51:49,591 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:49,592 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:51:49,592 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().unaryMinus()
2021-03-11 10:51:49,592 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:51:49,592 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:49,592 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:51:49,724 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:49,727 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().plus(103)
2021-03-11 10:51:49,727 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:51:49,727 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:49,727 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:51:49,848 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:49,973 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:49,976 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().coerceIn(-852713608, 2103943459)
2021-03-11 10:51:49,976 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:51:49,976 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:49,976 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:51:49,976 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().unaryPlus()
2021-03-11 10:51:49,976 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:51:49,976 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:49,976 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:51:50,102 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:50,105 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().compareTo(-95)
2021-03-11 10:51:50,105 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:51:50,105 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:50,105 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().sign
2021-03-11 10:51:50,105 [main:63] - replacement of i of type Int is (MyCollection2().iterator()).next().plus(103)
2021-03-11 10:51:50,234 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:51:50,234 [main:66] - Compilation checking started
2021-03-11 10:51:50,591 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    (MyCollection2().iterator()).next().plus(103) = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:51:50,600 [main:56] - replacing (sum, Int)
2021-03-11 10:51:50,602 [main:38] - replacing sum Int
2021-03-11 10:51:50,602 [main:42] - Getting value of type Int
2021-03-11 10:51:50,723 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:50,726 [main:46] - GENERATED VALUE OF TYPE Int = -585858643
2021-03-11 10:51:50,726 [main:49] - GENERATED IS CALL =false
2021-03-11 10:51:51,035 [main:55] - randomType = Pair<String?, MyCollection4>
2021-03-11 10:51:51,156 [main:302] - generating value of type = Pair<String?, MyCollection4> false depth = 0
2021-03-11 10:51:51,287 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: String?, second: MyCollection4): Pair<String?, MyCollection4> = TODO()
2021-03-11 10:51:51,291 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: String?, second: MyCollection4): Pair<String?, MyCollection4> = TODO()
2021-03-11 10:51:51,419 [main:302] - generating value of type = String true depth = 3
2021-03-11 10:51:51,422 [main:302] - generating value of type = MyCollection4 false depth = 3
2021-03-11 10:51:51,425 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:51:51,548 [main:194] - Type params = []
2021-03-11 10:51:51,670 [main:95] - GENERATED = Pair<String?, MyCollection4>("ilnwk", MyCollection4())
2021-03-11 10:51:51,685 [main:66] - Generated call from random type = (Pair<String?, MyCollection4>("ilnwk", MyCollection4())).first?.length!!
2021-03-11 10:51:51,686 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:51:51,691 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:51:51,691 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:51,691 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:51:51,692 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().countTrailingZeroBits()
2021-03-11 10:51:51,692 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:51:51,692 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:51,692 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:51:51,817 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:51,819 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().times(80)
2021-03-11 10:51:51,819 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:51:51,820 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:51,820 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:51:51,820 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().unaryMinus()
2021-03-11 10:51:51,820 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:51:51,820 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:51,820 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:51:51,945 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:52,073 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:52,076 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().coerceIn(1743207339, 160247570)
2021-03-11 10:51:52,076 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:51:52,076 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:52,077 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:51:52,206 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:52,209 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().and(2089460379)
2021-03-11 10:51:52,209 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:51:52,209 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:52,209 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:51:52,334 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:52,337 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().rem(-110)
2021-03-11 10:51:52,337 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:51:52,337 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:52,337 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:51:52,458 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:52,462 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().rotateRight(-655502469)
2021-03-11 10:51:52,462 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:51:52,462 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:52,462 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:51:52,583 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:52,586 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().minus(-53)
2021-03-11 10:51:52,586 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:51:52,586 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:52,586 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:51:52,706 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:52,708 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().coerceAtLeast(54802917)
2021-03-11 10:51:52,709 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:51:52,709 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:51:52,709 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:51:52,709 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().takeLowestOneBit()
2021-03-11 10:51:52,709 [main:63] - replacement of sum of type Int is (MyCollection2().iterator()).next().coerceIn(1743207339, 160247570)
2021-03-11 10:51:52,831 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:51:52,832 [main:66] - Compilation checking started
2021-03-11 10:51:53,246 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    (MyCollection2().iterator()).next().coerceIn(1743207339, 160247570) = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:51:53,254 [main:56] - replacing (k, Int)
2021-03-11 10:51:53,254 [main:38] - replacing k Int
2021-03-11 10:51:53,254 [main:42] - Getting value of type Int
2021-03-11 10:51:53,381 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:53,384 [main:46] - GENERATED VALUE OF TYPE Int = -315598138
2021-03-11 10:51:53,384 [main:49] - GENERATED IS CALL =false
2021-03-11 10:51:53,672 [main:55] - randomType = ArrayList<MyCollection1>
2021-03-11 10:51:53,798 [main:302] - generating value of type = ArrayList<MyCollection1> false depth = 0
2021-03-11 10:51:53,927 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: MyCollection1): ArrayList<MyCollection1> = TODO()
2021-03-11 10:51:53,931 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: MyCollection1): ArrayList<MyCollection1> = TODO()
2021-03-11 10:51:54,059 [main:302] - generating value of type = MyCollection1 false depth = 3
2021-03-11 10:51:54,062 [main:112] - generating klass MyCollection1 text = class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}
2021-03-11 10:51:54,184 [main:194] - Type params = []
2021-03-11 10:51:54,307 [main:95] - GENERATED = arrayListOf<MyCollection1>(MyCollection1())
2021-03-11 10:51:54,444 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@6ad33e12]
2021-03-11 10:51:54,445 [main:137] - GENERATING call of type public inline fun <T> kotlin.Array<out T>.sumBy(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@50430cb2]
2021-03-11 10:51:54,569 [main:302] - generating value of type = Function1<T, Int> false depth = 0
2021-03-11 10:51:54,572 [main:302] - generating value of type = Int true depth = 1
2021-03-11 10:51:54,574 [main:66] - Generated call from random type = (arrayListOf<MyCollection1>(MyCollection1())).toArray().sumBy({a: T -> -1303679946})
2021-03-11 10:51:54,575 [main:63] - replacement of k of type Int is (arrayListOf<MyCollection1>(MyCollection1())).toArray().sumBy({a: T -> -1303679946})
2021-03-11 10:51:54,696 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:51:54,696 [main:66] - Compilation checking started
2021-03-11 10:51:55,103 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (arrayListOf<MyCollection1>(MyCollection1())).toArray().sumBy({a: T -> -1303679946})--
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:51:55,117 [main:56] - replacing (sum, Int)
2021-03-11 10:51:55,120 [main:38] - replacing sum Int
2021-03-11 10:51:55,121 [main:42] - Getting value of type Int
2021-03-11 10:51:55,294 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:55,297 [main:46] - GENERATED VALUE OF TYPE Int = 265958276
2021-03-11 10:51:55,298 [main:49] - GENERATED IS CALL =false
2021-03-11 10:51:56,094 [main:55] - randomType = Function1<MyCollection2, Function2<MyCollection3?, MyCollection4, Set<MyCollection2>>>
2021-03-11 10:51:56,094 [main:94] - GETTING Int from Int
2021-03-11 10:51:56,138 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:51:56,138 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:51:56,138 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:51:56,267 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:56,270 [main:105] - GENERATED CALL = (sum).toInt().rem(-113)
2021-03-11 10:51:56,270 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:51:56,270 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:51:56,399 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:56,402 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:51:56,529 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:56,654 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:56,657 [main:105] - GENERATED CALL = (sum).compareTo(1398724492).coerceIn(252755233, -1008954615)
2021-03-11 10:51:56,657 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:51:56,657 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:51:56,782 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:56,785 [main:105] - GENERATED CALL = (sum).compareTo(-2073216010).absoluteValue
2021-03-11 10:51:56,785 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:51:56,785 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:51:56,912 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:56,915 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:51:57,040 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:57,042 [main:105] - GENERATED CALL = (sum).compareTo(1934999628).and(531429992)
2021-03-11 10:51:57,042 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@f49fa44]]
2021-03-11 10:51:57,042 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:51:57,043 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@f49fa44]
2021-03-11 10:51:57,043 [main:105] - GENERATED CALL = (sum).toByte().unaryPlus()
2021-03-11 10:51:57,043 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:51:57,043 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:51:57,043 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:51:57,043 [main:105] - GENERATED CALL = (sum).toInt().inc()
2021-03-11 10:51:57,043 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12f06cb], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4d6e37cb]]
2021-03-11 10:51:57,043 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12f06cb]
2021-03-11 10:51:57,043 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4d6e37cb]
2021-03-11 10:51:57,165 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:51:57,168 [main:105] - GENERATED CALL = (sum).toDouble().compareTo(13)
2021-03-11 10:51:57,168 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@68c62048]]
2021-03-11 10:51:57,168 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f]
2021-03-11 10:51:57,292 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:51:57,295 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@68c62048]
2021-03-11 10:51:57,295 [main:105] - GENERATED CALL = (sum).div(-8451708992494212818).countLeadingZeroBits()
2021-03-11 10:51:57,295 [main:101] - Case = [public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:51:57,295 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:51:57,428 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:57,431 [main:105] - GENERATED CALL = (sum).and(-699454468)
2021-03-11 10:51:57,431 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:51:57,431 [main:105] - GENERATED CALL = (sum).absoluteValue
2021-03-11 10:51:57,431 [main:63] - replacement of sum of type Int is (sum).div(-8451708992494212818).countLeadingZeroBits()
2021-03-11 10:51:57,553 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:51:57,553 [main:66] - Compilation checking started
2021-03-11 10:51:57,915 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    (sum).div(-8451708992494212818).countLeadingZeroBits() = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = k--
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:51:57,925 [main:56] - replacing (k--, Int)
2021-03-11 10:51:57,925 [main:38] - replacing k-- Int
2021-03-11 10:51:57,925 [main:42] - Getting value of type Int
2021-03-11 10:51:58,052 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:58,054 [main:46] - GENERATED VALUE OF TYPE Int = 1128294798
2021-03-11 10:51:58,055 [main:49] - GENERATED IS CALL =false
2021-03-11 10:51:58,196 [main:55] - randomType = UByte
2021-03-11 10:51:58,326 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:51:58,369 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@9625ecc]
2021-03-11 10:51:58,491 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:51:58,494 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:51:58,673 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:51:58,675 [main:66] - Generated call from random type = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
2021-03-11 10:51:58,676 [main:63] - replacement of k-- of type Int is (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
2021-03-11 10:51:58,797 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:51:58,797 [main:66] - Compilation checking started
2021-03-11 10:51:59,312 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:51:59,322 [main:56] - replacing (MyIterator(), MyIterator)
2021-03-11 10:51:59,323 [main:38] - replacing MyIterator() MyIterator
2021-03-11 10:51:59,323 [main:42] - Getting value of type MyIterator
2021-03-11 10:51:59,457 [main:302] - generating value of type = MyIterator false depth = 0
2021-03-11 10:51:59,460 [main:112] - generating klass MyIterator text = class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
2021-03-11 10:51:59,460 [main:46] - GENERATED VALUE OF TYPE MyIterator = 
2021-03-11 10:51:59,754 [main:55] - randomType = List<Float>
2021-03-11 10:51:59,755 [main:94] - GETTING MyIterator from Array<Int?>
2021-03-11 10:51:59,773 [main:94] - GETTING MyIterator from MyIterator
2021-03-11 10:51:59,782 [main:63] - replacement of MyIterator() of type MyIterator is MyCollection3().iterator()
2021-03-11 10:51:59,909 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:51:59,910 [main:66] - Compilation checking started
2021-03-11 10:52:00,436 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true)) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:52:00,445 [main:56] - replacing ((MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true), Boolean)
2021-03-11 10:52:00,446 [main:38] - replacing (MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true) Boolean
2021-03-11 10:52:00,446 [main:42] - Getting value of type Boolean
2021-03-11 10:52:00,573 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:52:00,576 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 10:52:00,576 [main:49] - GENERATED IS CALL =false
2021-03-11 10:52:00,587 [main:55] - randomType = MyCollection2
2021-03-11 10:52:00,712 [main:302] - generating value of type = MyCollection2 false depth = 0
2021-03-11 10:52:00,715 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}
2021-03-11 10:52:00,841 [main:194] - Type params = []
2021-03-11 10:52:00,980 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyCollection2[DeserializedSimpleFunctionDescriptor@44782a0b]
2021-03-11 10:52:01,105 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:52:01,105 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@cf10153]
2021-03-11 10:52:01,105 [main:66] - Generated call from random type = (MyCollection2()).equals("jxqtc").not()
2021-03-11 10:52:01,106 [main:94] - GETTING Boolean from Int
2021-03-11 10:52:01,141 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@619c3b77]]
2021-03-11 10:52:01,141 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:52:01,141 [main:137] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@619c3b77]
2021-03-11 10:52:01,141 [main:105] - GENERATED CALL = (sum).toFloat().isInfinite()
2021-03-11 10:52:01,141 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73c0e622]]
2021-03-11 10:52:01,141 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:52:01,141 [main:137] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73c0e622]
2021-03-11 10:52:01,141 [main:105] - GENERATED CALL = (sum).toChar().isLetter()
2021-03-11 10:52:01,141 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6523a69a]]
2021-03-11 10:52:01,141 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431]
2021-03-11 10:52:01,263 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:52:01,266 [main:137] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6523a69a]
2021-03-11 10:52:01,266 [main:105] - GENERATED CALL = (sum).div(0.2958389450949245).isFinite()
2021-03-11 10:52:01,266 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]]
2021-03-11 10:52:01,266 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:52:01,400 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:01,403 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]
2021-03-11 10:52:01,527 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:52:01,527 [main:105] - GENERATED CALL = (sum).compareTo(-126816528).equals("bxegn")
2021-03-11 10:52:01,527 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12f06cb], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@51247d00]]
2021-03-11 10:52:01,527 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12f06cb]
2021-03-11 10:52:01,527 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@51247d00]
2021-03-11 10:52:01,650 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:52:01,651 [main:105] - GENERATED CALL = (sum).toDouble().equals("fetng")
2021-03-11 10:52:01,651 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]]
2021-03-11 10:52:01,651 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:52:01,651 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79c8e98]
2021-03-11 10:52:01,774 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:52:01,775 [main:105] - GENERATED CALL = (sum).toInt().equals("emcmp")
2021-03-11 10:52:01,775 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e06ac34]]
2021-03-11 10:52:01,775 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:52:01,775 [main:137] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e06ac34]
2021-03-11 10:52:01,775 [main:105] - GENERATED CALL = (sum).toChar().isISOControl()
2021-03-11 10:52:01,775 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@51247d00]]
2021-03-11 10:52:01,775 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431]
2021-03-11 10:52:01,903 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:52:01,906 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@51247d00]
2021-03-11 10:52:02,035 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:52:02,036 [main:105] - GENERATED CALL = (sum).div(0.44306338048212734).equals("wholg")
2021-03-11 10:52:02,036 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@7afa26ab]]
2021-03-11 10:52:02,036 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97]
2021-03-11 10:52:02,036 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@7afa26ab]
2021-03-11 10:52:02,157 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:52:02,158 [main:105] - GENERATED CALL = (sum).toLong().equals("xznik")
2021-03-11 10:52:02,158 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12f06cb], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6523a69a]]
2021-03-11 10:52:02,158 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12f06cb]
2021-03-11 10:52:02,158 [main:137] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6523a69a]
2021-03-11 10:52:02,158 [main:105] - GENERATED CALL = (sum).toDouble().isFinite()
2021-03-11 10:52:02,158 [main:63] - replacement of (MyCollection1().iterator()).next().plus(-61) != (MyCollection3().iterator()).hasNext().compareTo(true) of type Boolean is (MyCollection2()).equals("jxqtc").not()
2021-03-11 10:52:02,280 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:52:02,281 [main:66] - Compilation checking started
2021-03-11 10:52:02,914 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:52:02,924 [main:56] - replacing (MyIterator(), MyIterator)
2021-03-11 10:52:02,924 [main:38] - replacing MyIterator() MyIterator
2021-03-11 10:52:02,924 [main:42] - Getting value of type MyIterator
2021-03-11 10:52:03,107 [main:302] - generating value of type = MyIterator false depth = 0
2021-03-11 10:52:03,109 [main:112] - generating klass MyIterator text = class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
2021-03-11 10:52:03,109 [main:46] - GENERATED VALUE OF TYPE MyIterator = 
2021-03-11 10:52:03,115 [main:55] - randomType = Byte
2021-03-11 10:52:03,235 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:03,279 [main:94] - GETTING MyIterator from Int
2021-03-11 10:52:03,318 [main:94] - GETTING MyIterator from MyIterator
2021-03-11 10:52:03,322 [main:63] - replacement of MyIterator() of type MyIterator is MyCollection4().iterator()
2021-03-11 10:52:03,452 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:52:03,453 [main:66] - Compilation checking started
2021-03-11 10:52:03,847 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyCollection4().iterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:52:03,862 [main:56] - replacing (sum, Int)
2021-03-11 10:52:03,865 [main:38] - replacing sum Int
2021-03-11 10:52:03,865 [main:42] - Getting value of type Int
2021-03-11 10:52:04,002 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:04,004 [main:46] - GENERATED VALUE OF TYPE Int = 2060078773
2021-03-11 10:52:04,004 [main:49] - GENERATED IS CALL =false
2021-03-11 10:52:04,369 [main:55] - randomType = Collection<MyCollection2>
2021-03-11 10:52:04,370 [main:94] - GETTING Int from MyIterator
2021-03-11 10:52:04,377 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:52:04,378 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:52:04,378 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.countLeadingZeroBits()
2021-03-11 10:52:04,378 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:52:04,378 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:52:04,378 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:52:04,378 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.inc()
2021-03-11 10:52:04,378 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:52:04,378 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:52:04,378 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:52:04,504 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:04,507 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.minus(4)
2021-03-11 10:52:04,507 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:52:04,507 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:52:04,507 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.countOneBits()
2021-03-11 10:52:04,507 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:52:04,507 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:52:04,641 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:04,646 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.div(-94)
2021-03-11 10:52:04,646 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:52:04,646 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:52:04,646 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:52:04,864 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:04,867 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.xor(833942171)
2021-03-11 10:52:04,867 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:52:04,867 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:52:04,867 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.takeHighestOneBit()
2021-03-11 10:52:04,867 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:52:04,867 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:52:04,867 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:52:04,996 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:04,999 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.compareTo(104)
2021-03-11 10:52:04,999 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:52:04,999 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.sign
2021-03-11 10:52:04,999 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:52:04,999 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:52:04,999 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:52:05,125 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:05,128 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.ushr(1951258935)
2021-03-11 10:52:05,128 [main:63] - replacement of sum of type Int is (MyCollection3().iterator()).k.div(-94)
2021-03-11 10:52:05,253 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:52:05,253 [main:66] - Compilation checking started
2021-03-11 10:52:05,617 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    (MyCollection3().iterator()).k.div(-94) = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:52:05,626 [main:56] - replacing (sum, Int)
2021-03-11 10:52:05,628 [main:38] - replacing sum Int
2021-03-11 10:52:05,629 [main:42] - Getting value of type Int
2021-03-11 10:52:05,757 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:05,761 [main:46] - GENERATED VALUE OF TYPE Int = -662147968
2021-03-11 10:52:05,761 [main:49] - GENERATED IS CALL =false
2021-03-11 10:52:05,942 [main:55] - randomType = Function2<Double, MyCollection2, UShort>
2021-03-11 10:52:05,944 [main:94] - GETTING Int from Array<Int?>
2021-03-11 10:52:05,958 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:52:05,958 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:52:06,085 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:06,088 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.div(14)
2021-03-11 10:52:06,088 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:52:06,088 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.absoluteValue
2021-03-11 10:52:06,088 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:52:06,088 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:52:06,219 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:06,222 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:52:06,356 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:06,359 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(884568393)?.and(-630229341)
2021-03-11 10:52:06,359 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:52:06,359 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:52:06,484 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:06,487 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.times(123)
2021-03-11 10:52:06,487 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:52:06,487 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:52:06,616 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:06,619 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:52:06,619 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-248511584)?.toInt()
2021-03-11 10:52:06,619 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:52:06,619 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:52:06,755 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:06,759 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:52:06,759 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(310847139)?.inv()
2021-03-11 10:52:06,759 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:52:06,759 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:52:06,759 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.inc()
2021-03-11 10:52:06,759 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:52:06,759 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:52:06,892 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:06,896 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:52:07,028 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:07,031 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-1230576385)?.compareTo(62)
2021-03-11 10:52:07,031 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:52:07,031 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:52:07,158 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:07,161 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:52:07,161 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(1225737162)?.inc()
2021-03-11 10:52:07,161 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:52:07,161 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:52:07,161 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.dec()
2021-03-11 10:52:07,161 [main:63] - replacement of sum of type Int is (arrayOfNulls<Int>(5)).get(310847139)?.inv()
2021-03-11 10:52:07,302 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 10:52:07,302 [main:66] - Compilation checking started
2021-03-11 10:52:07,677 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        (arrayOfNulls<Int>(5)).get(310847139)?.inv() = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:52:07,686 [main:56] - replacing (sum, Int)
2021-03-11 10:52:07,688 [main:38] - replacing sum Int
2021-03-11 10:52:07,688 [main:42] - Getting value of type Int
2021-03-11 10:52:07,814 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:07,818 [main:46] - GENERATED VALUE OF TYPE Int = 834380539
2021-03-11 10:52:07,818 [main:49] - GENERATED IS CALL =false
2021-03-11 10:52:08,533 [main:55] - randomType = HashMap<Function1<MyCollection1, Boolean>, MyCollection2?>?
2021-03-11 10:52:08,659 [main:302] - generating value of type = HashMap<Function1<MyCollection1, Boolean>, MyCollection2?> false depth = 0
2021-03-11 10:52:08,806 [main:43] - GENERATING CALL OF fun <K, V> HashMap(): HashMap<Function1<MyCollection1, Boolean>, MyCollection2?> = TODO()
2021-03-11 10:52:08,810 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> HashMap(): HashMap<Function1<MyCollection1, Boolean>, MyCollection2?> = TODO()
2021-03-11 10:52:08,955 [main:95] - GENERATED = HashMap<Function1<MyCollection1, Boolean>, MyCollection2?>()
2021-03-11 10:52:09,101 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:52:09,228 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:09,366 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:09,369 [main:66] - Generated call from random type = (HashMap<Function1<MyCollection1, Boolean>, MyCollection2?>())?.size.coerceIn(-1871946785, -883693015)
2021-03-11 10:52:09,369 [main:94] - GETTING Int from Array<Int?>
2021-03-11 10:52:09,388 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:52:09,388 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:52:09,571 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:09,574 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:52:09,704 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:09,707 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(701168686)?.shr(-1299376404)
2021-03-11 10:52:09,707 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:52:09,707 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:52:09,707 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.inv()
2021-03-11 10:52:09,707 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:52:09,707 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:52:09,849 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:09,854 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.rem(77)
2021-03-11 10:52:09,854 [main:101] - Case = [@kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentHashCode(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6cbd4f7b]]
2021-03-11 10:52:09,854 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentHashCode(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6cbd4f7b]
2021-03-11 10:52:09,854 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).contentHashCode()
2021-03-11 10:52:09,854 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:52:09,855 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:52:10,013 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:10,169 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:10,172 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.coerceIn(-1945618553, -2140540215)
2021-03-11 10:52:10,172 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:52:10,173 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:52:10,306 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:10,309 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.coerceAtMost(-1765368955)
2021-03-11 10:52:10,309 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:52:10,309 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:52:10,309 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.dec()
2021-03-11 10:52:10,309 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:52:10,309 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:52:10,442 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:10,445 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:52:10,446 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-521571133)?.inc()
2021-03-11 10:52:10,446 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:52:10,446 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:52:10,574 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:10,577 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:52:10,707 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:10,711 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(937909441)?.shl(-370013372)
2021-03-11 10:52:10,711 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:52:10,711 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:52:10,920 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:10,923 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:52:10,923 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-2011336502)?.dec()
2021-03-11 10:52:10,923 [main:63] - replacement of sum of type Int is (arrayOfNulls<Int>(5)).get(-521571133)?.inc()
2021-03-11 10:52:11,062 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 10:52:11,063 [main:66] - Compilation checking started
2021-03-11 10:52:11,451 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = 0

    val c6 = MyCollection4()
    (arrayOfNulls<Int>(5)).get(-521571133)?.inc() = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in c5) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:52:11,460 [main:56] - replacing (c5, MyCollection3)
2021-03-11 10:52:11,462 [main:38] - replacing c5 MyCollection3
2021-03-11 10:52:11,462 [main:42] - Getting value of type MyCollection3
2021-03-11 10:52:11,626 [main:302] - generating value of type = MyCollection3 false depth = 0
2021-03-11 10:52:11,629 [main:112] - generating klass MyCollection3 text = class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}
2021-03-11 10:52:11,757 [main:194] - Type params = []
2021-03-11 10:52:11,881 [main:46] - GENERATED VALUE OF TYPE MyCollection3 = MyCollection3()
2021-03-11 10:52:11,882 [main:49] - GENERATED IS CALL =true
2021-03-11 10:52:11,887 [main:55] - randomType = Float
2021-03-11 10:52:12,014 [main:302] - generating value of type = Float true depth = 0
2021-03-11 10:52:12,061 [main:94] - GETTING MyCollection3 from Array<Int?>
2021-03-11 10:52:12,073 [main:94] - GETTING MyCollection3 from Int
2021-03-11 10:52:12,116 [main:94] - GETTING MyCollection3 from MyIterator
2021-03-11 10:52:12,123 [main:94] - GETTING MyCollection3 from Int
2021-03-11 10:52:12,124 [main:94] - GETTING MyCollection3 from Iterator<Int>
2021-03-11 10:52:12,129 [main:94] - GETTING MyCollection3 from Iterator<Int>
2021-03-11 10:52:12,130 [main:94] - GETTING MyCollection3 from MyIterator
2021-03-11 10:52:12,130 [main:94] - GETTING MyCollection3 from Int
2021-03-11 10:52:12,130 [main:63] - replacement of c5 of type MyCollection3 is MyCollection3()
2021-03-11 10:52:12,252 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 10:52:12,252 [main:66] - Compilation checking started
2021-03-11 10:52:12,752 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:52:12,761 [main:56] - replacing (0, Int)
2021-03-11 10:52:12,761 [main:38] - replacing 0 Int
2021-03-11 10:52:12,761 [main:42] - Getting value of type Int
2021-03-11 10:52:12,889 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:12,892 [main:46] - GENERATED VALUE OF TYPE Int = -1619279608
2021-03-11 10:52:12,892 [main:49] - GENERATED IS CALL =false
2021-03-11 10:52:13,650 [main:55] - randomType = Map<ArrayDeque<Pair<MyCollection4, Char>>?, Float?>
2021-03-11 10:52:13,651 [main:94] - GETTING Int from Int
2021-03-11 10:52:13,691 [main:101] - Case = [public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:52:13,691 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:52:13,691 [main:105] - GENERATED CALL = (i).inv()
2021-03-11 10:52:13,691 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@f49fa44]]
2021-03-11 10:52:13,691 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:52:13,691 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@f49fa44]
2021-03-11 10:52:13,691 [main:105] - GENERATED CALL = (i).toByte().unaryPlus()
2021-03-11 10:52:13,691 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6cf21a44]]
2021-03-11 10:52:13,691 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:52:13,691 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6cf21a44]
2021-03-11 10:52:13,817 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:13,819 [main:105] - GENERATED CALL = (i).toByte().plus(-4)
2021-03-11 10:52:13,820 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], public final val last: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@21a92708]]
2021-03-11 10:52:13,820 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:52:13,941 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:13,945 [main:105] - GENERATED CALL = (i).rangeTo(111).last
2021-03-11 10:52:13,945 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@5e1f7c80]]
2021-03-11 10:52:13,945 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:52:13,945 [main:105] - GENERATED CALL = (i).toChar().code
2021-03-11 10:52:13,945 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:52:13,945 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:52:14,069 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:14,072 [main:105] - GENERATED CALL = (i).compareTo(-153348805).absoluteValue
2021-03-11 10:52:14,072 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431], @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@5959e353]]
2021-03-11 10:52:14,072 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431]
2021-03-11 10:52:14,198 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:52:14,201 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@5959e353]
2021-03-11 10:52:14,201 [main:105] - GENERATED CALL = (i).div(0.5125464656037603).roundToInt()
2021-03-11 10:52:14,201 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:52:14,201 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:52:14,325 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:14,328 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:52:14,328 [main:105] - GENERATED CALL = (i).compareTo(727913039).takeHighestOneBit()
2021-03-11 10:52:14,328 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1547992c]]
2021-03-11 10:52:14,328 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:52:14,328 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1547992c]
2021-03-11 10:52:14,450 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:52:14,453 [main:105] - GENERATED CALL = (i).toChar().minus('췗')
2021-03-11 10:52:14,453 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:52:14,453 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:52:14,581 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:14,584 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:52:14,712 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:14,838 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:14,841 [main:105] - GENERATED CALL = (i).compareTo(1311837500).coerceIn(1614261534, -1590653129)
2021-03-11 10:52:14,841 [main:63] - replacement of 0 of type Int is (i).compareTo(1311837500).coerceIn(1614261534, -1590653129)
2021-03-11 10:52:14,963 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:52:14,972 [main:56] - replacing ((MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k, Boolean)
2021-03-11 10:52:14,973 [main:38] - replacing (MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k Boolean
2021-03-11 10:52:14,973 [main:42] - Getting value of type Boolean
2021-03-11 10:52:15,099 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:52:15,103 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 10:52:15,103 [main:49] - GENERATED IS CALL =false
2021-03-11 10:52:15,253 [main:55] - randomType = ULong?
2021-03-11 10:52:15,377 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 10:52:15,415 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@7c7d8cd7]
2021-03-11 10:52:15,415 [main:137] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6523a69a]
2021-03-11 10:52:15,415 [main:66] - Generated call from random type = (5736058657525924703.toULong())?.toDouble().isFinite()
2021-03-11 10:52:15,415 [main:63] - replacement of (MyCollection4().iterator()).k.div(63) != (MyCollection4()).iterator().k of type Boolean is (5736058657525924703.toULong())?.toDouble().isFinite()
2021-03-11 10:52:15,536 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:52:15,537 [main:66] - Compilation checking started
2021-03-11 10:52:16,061 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = 0

    val c6 = MyCollection4()
    sum = 0
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:52:16,070 [main:56] - replacing (0, Int)
2021-03-11 10:52:16,072 [main:38] - replacing 0 Int
2021-03-11 10:52:16,072 [main:42] - Getting value of type Int
2021-03-11 10:52:16,209 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:16,212 [main:46] - GENERATED VALUE OF TYPE Int = 967832644
2021-03-11 10:52:16,212 [main:49] - GENERATED IS CALL =false
2021-03-11 10:52:16,358 [main:55] - randomType = List<UShort>
2021-03-11 10:52:16,358 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:52:16,367 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:52:16,367 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:52:16,367 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:52:16,488 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:16,491 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().or(332746493)
2021-03-11 10:52:16,491 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:52:16,491 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:52:16,491 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:52:16,491 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().countTrailingZeroBits()
2021-03-11 10:52:16,491 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:52:16,491 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:52:16,492 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:52:16,671 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:16,674 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().ushr(1744154678)
2021-03-11 10:52:16,674 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:52:16,674 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:52:16,674 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:52:16,797 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:16,800 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().times(-126)
2021-03-11 10:52:16,800 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:52:16,800 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:52:16,800 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:52:16,800 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().inv()
2021-03-11 10:52:16,800 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:52:16,800 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:52:16,800 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:52:16,800 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().takeHighestOneBit()
2021-03-11 10:52:16,801 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:52:16,801 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:52:16,801 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:52:16,921 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:16,924 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().rotateLeft(857993925)
2021-03-11 10:52:16,924 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:52:16,924 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:52:16,924 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:52:17,051 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:17,054 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().shl(-1753567995)
2021-03-11 10:52:17,054 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:52:17,054 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:52:17,054 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:52:17,179 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:17,182 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().minus(100)
2021-03-11 10:52:17,182 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:52:17,182 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09]
2021-03-11 10:52:17,305 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:52:17,305 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:52:17,435 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:52:17,438 [main:105] - GENERATED CALL = (MyCollection1().iterator()).equals("bbfby").compareTo(false)
2021-03-11 10:52:17,438 [main:63] - replacement of 0 of type Int is (MyCollection1().iterator()).next().takeHighestOneBit()
2021-03-11 10:52:17,559 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:52:17,560 [main:66] - Compilation checking started
2021-03-11 10:52:18,060 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = 0

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = 0
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:52:18,069 [main:56] - replacing (0, Int)
2021-03-11 10:52:18,071 [main:38] - replacing 0 Int
2021-03-11 10:52:18,071 [main:42] - Getting value of type Int
2021-03-11 10:52:18,192 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:18,195 [main:46] - GENERATED VALUE OF TYPE Int = 1414612703
2021-03-11 10:52:18,195 [main:49] - GENERATED IS CALL =false
2021-03-11 10:52:18,793 [main:55] - randomType = Function2<HashSet<Long?>, MyCollection2, Map<Int, MyCollection1>>
2021-03-11 10:52:18,794 [main:94] - GETTING Int from MyIterator
2021-03-11 10:52:18,803 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:52:18,803 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:52:18,924 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:18,926 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.shl(-1055026406)
2021-03-11 10:52:18,926 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:52:18,926 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:52:19,048 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:19,051 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.coerceAtMost(1454918945)
2021-03-11 10:52:19,051 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:52:19,051 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:52:19,173 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:19,176 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.minus(-127)
2021-03-11 10:52:19,176 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:52:19,176 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:52:19,299 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:19,301 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.coerceAtLeast(-1562560362)
2021-03-11 10:52:19,301 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:52:19,302 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:52:19,302 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.inv()
2021-03-11 10:52:19,302 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:52:19,302 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:52:19,302 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:52:19,424 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:19,427 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.rem(21)
2021-03-11 10:52:19,428 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:52:19,428 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:52:19,550 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:19,553 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.rotateRight(1188738182)
2021-03-11 10:52:19,553 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:52:19,553 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:52:19,553 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:52:19,679 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:52:19,682 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext().compareTo(true)
2021-03-11 10:52:19,682 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:52:19,682 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:52:19,683 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.takeLowestOneBit()
2021-03-11 10:52:19,683 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:52:19,683 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:52:19,683 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:52:19,683 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.unaryMinus()
2021-03-11 10:52:19,683 [main:63] - replacement of 0 of type Int is (MyCollection3().iterator()).k.minus(-127)
2021-03-11 10:52:19,805 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:52:19,805 [main:66] - Compilation checking started
2021-03-11 10:52:20,437 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = 0

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:52:20,448 [main:56] - replacing (MyIterator(), MyIterator)
2021-03-11 10:52:20,448 [main:38] - replacing MyIterator() MyIterator
2021-03-11 10:52:20,448 [main:42] - Getting value of type MyIterator
2021-03-11 10:52:20,580 [main:302] - generating value of type = MyIterator false depth = 0
2021-03-11 10:52:20,584 [main:112] - generating klass MyIterator text = class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
2021-03-11 10:52:20,584 [main:46] - GENERATED VALUE OF TYPE MyIterator = 
2021-03-11 10:52:21,022 [main:55] - randomType = HashSet<Triple<Byte, MyCollection1, Double>>
2021-03-11 10:52:21,207 [main:302] - generating value of type = HashSet<Triple<Byte, MyCollection1, Double>> false depth = 0
2021-03-11 10:52:21,362 [main:43] - GENERATING CALL OF fun <E> HashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashSet<Triple<Byte, MyCollection1, Double>> = TODO()
2021-03-11 10:52:21,365 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashSet<Triple<Byte, MyCollection1, Double>> = TODO()
2021-03-11 10:52:21,902 [main:302] - generating value of type = Int true depth = 3
2021-03-11 10:52:21,905 [main:302] - generating value of type = Float true depth = 3
2021-03-11 10:52:21,909 [main:95] - GENERATED = HashSet<Triple<Byte, MyCollection1, Double>>(1199907488, 0.13351834f)
2021-03-11 10:52:22,112 [main:94] - GETTING MyIterator from Int
2021-03-11 10:52:22,152 [main:94] - GETTING MyIterator from MyIterator
2021-03-11 10:52:22,157 [main:63] - replacement of MyIterator() of type MyIterator is MyCollection3().iterator()
2021-03-11 10:52:22,285 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:52:22,285 [main:66] - Compilation checking started
2021-03-11 10:52:22,646 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = 0

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:52:22,655 [main:56] - replacing (sum, Int)
2021-03-11 10:52:22,656 [main:38] - replacing sum Int
2021-03-11 10:52:22,657 [main:42] - Getting value of type Int
2021-03-11 10:52:22,834 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:22,836 [main:46] - GENERATED VALUE OF TYPE Int = 1154558954
2021-03-11 10:52:22,837 [main:49] - GENERATED IS CALL =false
2021-03-11 10:52:23,266 [main:55] - randomType = List<MyCollection1?>
2021-03-11 10:52:23,267 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:52:23,275 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:52:23,275 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:52:23,275 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:52:23,415 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:23,418 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().shl(-2095752729)
2021-03-11 10:52:23,418 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:52:23,418 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:52:23,418 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:52:23,553 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:23,556 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().shr(1708239746)
2021-03-11 10:52:23,556 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:52:23,556 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:52:23,556 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:52:23,723 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:23,726 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().coerceAtLeast(-504238597)
2021-03-11 10:52:23,726 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:52:23,726 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09]
2021-03-11 10:52:23,852 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:52:23,852 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:52:23,995 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:52:23,998 [main:105] - GENERATED CALL = (MyCollection2().iterator()).equals("dloww").compareTo(true)
2021-03-11 10:52:23,998 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:52:23,998 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:52:23,998 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:52:24,144 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:24,147 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().ushr(449404168)
2021-03-11 10:52:24,147 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:52:24,147 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:52:24,147 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:52:24,311 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:24,315 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().xor(-272682477)
2021-03-11 10:52:24,315 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:52:24,315 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:52:24,315 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:52:24,449 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:24,454 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().compareTo(127)
2021-03-11 10:52:24,454 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:52:24,454 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:52:24,454 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().sign
2021-03-11 10:52:24,454 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:52:24,454 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:52:24,454 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:52:24,454 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().takeHighestOneBit()
2021-03-11 10:52:24,454 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:52:24,455 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:52:24,455 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:52:24,455 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().countLeadingZeroBits()
2021-03-11 10:52:24,455 [main:63] - replacement of sum of type Int is (MyCollection2().iterator()).equals("dloww").compareTo(true)
2021-03-11 10:52:24,591 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:52:24,592 [main:66] - Compilation checking started
2021-03-11 10:52:25,044 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = 0

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        (MyCollection2().iterator()).equals("dloww").compareTo(true) = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:52:25,053 [main:56] - replacing (sum, Int)
2021-03-11 10:52:25,054 [main:38] - replacing sum Int
2021-03-11 10:52:25,054 [main:42] - Getting value of type Int
2021-03-11 10:52:25,212 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:25,215 [main:46] - GENERATED VALUE OF TYPE Int = -2041001074
2021-03-11 10:52:25,215 [main:49] - GENERATED IS CALL =false
2021-03-11 10:52:25,229 [main:55] - randomType = MyCollection3
2021-03-11 10:52:25,363 [main:302] - generating value of type = MyCollection3 false depth = 0
2021-03-11 10:52:25,368 [main:112] - generating klass MyCollection3 text = class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}
2021-03-11 10:52:25,503 [main:194] - Type params = []
2021-03-11 10:52:25,660 [main:137] - GENERATING call of type public final operator fun iterator(): MyCollection3.MyIterator defined in MyCollection3[SimpleFunctionDescriptorImpl@5ed3804b]
2021-03-11 10:52:25,661 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@365cf473]
2021-03-11 10:52:25,661 [main:66] - Generated call from random type = (MyCollection3()).iterator().next()!!
2021-03-11 10:52:25,662 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:52:25,673 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:52:25,673 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:52:25,673 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:52:25,674 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().countLeadingZeroBits()
2021-03-11 10:52:25,674 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:52:25,674 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:52:25,674 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:52:25,674 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().takeLowestOneBit()
2021-03-11 10:52:25,674 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:52:25,674 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@54436f09]
2021-03-11 10:52:25,799 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:52:25,800 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:52:25,952 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:52:25,955 [main:105] - GENERATED CALL = (MyCollection2().iterator()).equals("dxmyw").compareTo(true)
2021-03-11 10:52:25,955 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:52:25,955 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:52:25,955 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:52:26,083 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:26,086 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().plus(-123)
2021-03-11 10:52:26,086 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:52:26,086 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:52:26,086 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:52:26,256 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:26,260 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().times(52)
2021-03-11 10:52:26,260 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:52:26,260 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:52:26,260 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:52:26,260 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().inc()
2021-03-11 10:52:26,260 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:52:26,260 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:52:26,260 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:52:26,260 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().countTrailingZeroBits()
2021-03-11 10:52:26,260 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:52:26,261 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:52:26,261 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:52:26,434 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:26,437 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().coerceAtMost(-1598510206)
2021-03-11 10:52:26,437 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:52:26,437 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:52:26,438 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:52:26,564 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:26,567 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().compareTo(-54)
2021-03-11 10:52:26,567 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:52:26,567 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:52:26,568 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().sign
2021-03-11 10:52:26,568 [main:63] - replacement of sum of type Int is (MyCollection2().iterator()).next().inc()
2021-03-11 10:52:26,734 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:52:26,734 [main:66] - Compilation checking started
2021-03-11 10:52:27,121 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = 0

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        (MyCollection2().iterator()).next().inc() = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:52:27,132 [main:56] - replacing (sum, Int)
2021-03-11 10:52:27,134 [main:38] - replacing sum Int
2021-03-11 10:52:27,134 [main:42] - Getting value of type Int
2021-03-11 10:52:27,275 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:27,279 [main:46] - GENERATED VALUE OF TYPE Int = -279553770
2021-03-11 10:52:27,280 [main:49] - GENERATED IS CALL =false
2021-03-11 10:52:27,286 [main:55] - randomType = Boolean
2021-03-11 10:52:27,435 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:52:27,447 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:52:27,577 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:52:27,580 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:52:27,711 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:27,714 [main:66] - Generated call from random type = (false).compareTo(true).rem(43)
2021-03-11 10:52:27,714 [main:94] - GETTING Int from Int
2021-03-11 10:52:27,755 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:52:27,755 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:52:27,755 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:52:27,890 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:27,894 [main:105] - GENERATED CALL = (el ?: 0).toInt().shr(751244865)
2021-03-11 10:52:27,894 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6abd8a99]]
2021-03-11 10:52:27,894 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:52:27,894 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6abd8a99]
2021-03-11 10:52:28,023 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:28,027 [main:105] - GENERATED CALL = (el ?: 0).toShort().plus(-3)
2021-03-11 10:52:28,027 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a8376bf]]
2021-03-11 10:52:28,027 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97]
2021-03-11 10:52:28,027 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a8376bf]
2021-03-11 10:52:28,027 [main:105] - GENERATED CALL = (el ?: 0).toLong().countOneBits()
2021-03-11 10:52:28,027 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:52:28,027 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:52:28,027 [main:105] - GENERATED CALL = (el ?: 0).countTrailingZeroBits()
2021-03-11 10:52:28,027 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], public final val last: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@21a92708]]
2021-03-11 10:52:28,027 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:52:28,152 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:28,155 [main:105] - GENERATED CALL = (el ?: 0).rangeTo(-85).last
2021-03-11 10:52:28,155 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:52:28,155 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:52:28,155 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:52:28,279 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:28,282 [main:105] - GENERATED CALL = (el ?: 0).toInt().coerceAtLeast(1402444443)
2021-03-11 10:52:28,282 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:52:28,282 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:52:28,282 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:52:28,411 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:28,539 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:28,542 [main:105] - GENERATED CALL = (el ?: 0).toInt().coerceIn(-889669133, 702849412)
2021-03-11 10:52:28,542 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:52:28,542 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:52:28,543 [main:105] - GENERATED CALL = (el ?: 0).countLeadingZeroBits()
2021-03-11 10:52:28,543 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:52:28,543 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:52:28,543 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:52:28,669 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:28,672 [main:105] - GENERATED CALL = (el ?: 0).toInt().shl(740268108)
2021-03-11 10:52:28,672 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:52:28,672 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:52:28,800 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:28,803 [main:105] - GENERATED CALL = (el ?: 0).compareTo(-404466122).sign
2021-03-11 10:52:28,803 [main:63] - replacement of sum of type Int is (el ?: 0).rangeTo(-85).last
2021-03-11 10:52:28,931 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:52:28,932 [main:66] - Compilation checking started
2021-03-11 10:52:29,349 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = 0

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    (el ?: 0).rangeTo(-85).last = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:52:29,359 [main:56] - replacing (0, Int)
2021-03-11 10:52:29,361 [main:38] - replacing 0 Int
2021-03-11 10:52:29,361 [main:42] - Getting value of type Int
2021-03-11 10:52:29,488 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:29,491 [main:46] - GENERATED VALUE OF TYPE Int = 1180206071
2021-03-11 10:52:29,491 [main:49] - GENERATED IS CALL =false
2021-03-11 10:52:29,643 [main:55] - randomType = MyCollection2?
2021-03-11 10:52:29,769 [main:302] - generating value of type = MyCollection2 false depth = 0
2021-03-11 10:52:29,771 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}
2021-03-11 10:52:29,915 [main:194] - Type params = []
2021-03-11 10:52:30,058 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@d5c0bf9]
2021-03-11 10:52:30,058 [main:66] - Generated call from random type = (MyCollection2())?.count()
2021-03-11 10:52:30,059 [main:94] - GETTING Int from MyIterator
2021-03-11 10:52:30,064 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:52:30,064 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:52:30,184 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:30,186 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.ushr(-1436497894)
2021-03-11 10:52:30,187 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:52:30,187 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:52:30,187 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.countLeadingZeroBits()
2021-03-11 10:52:30,187 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:52:30,187 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:52:30,312 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:30,315 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.coerceAtLeast(1897299330)
2021-03-11 10:52:30,315 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:52:30,315 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:52:30,440 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:30,443 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.minus(-122)
2021-03-11 10:52:30,443 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@149259da], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:52:30,443 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@149259da]
2021-03-11 10:52:30,443 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:52:30,560 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:52:30,563 [main:105] - GENERATED CALL = (MyCollection4().iterator()).hasNext().compareTo(false)
2021-03-11 10:52:30,563 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:52:30,563 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:52:30,563 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.takeHighestOneBit()
2021-03-11 10:52:30,563 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:52:30,563 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:52:30,564 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.toInt()
2021-03-11 10:52:30,564 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:52:30,564 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:52:30,680 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:30,683 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.rotateRight(-1249797753)
2021-03-11 10:52:30,683 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:52:30,683 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:52:30,683 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.countOneBits()
2021-03-11 10:52:30,683 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:52:30,683 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:52:30,684 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.takeLowestOneBit()
2021-03-11 10:52:30,684 [main:63] - replacement of 0 of type Int is (MyCollection4().iterator()).k.toInt()
2021-03-11 10:52:30,801 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:52:30,801 [main:66] - Compilation checking started
2021-03-11 10:52:31,294 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:52:31,309 [main:56] - replacing (sum, Int)
2021-03-11 10:52:31,312 [main:38] - replacing sum Int
2021-03-11 10:52:31,312 [main:42] - Getting value of type Int
2021-03-11 10:52:31,437 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:31,439 [main:46] - GENERATED VALUE OF TYPE Int = -411068057
2021-03-11 10:52:31,439 [main:49] - GENERATED IS CALL =false
2021-03-11 10:52:31,445 [main:55] - randomType = Char
2021-03-11 10:52:31,562 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:52:31,582 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5775f993]
2021-03-11 10:52:31,699 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:52:31,702 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:52:31,820 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:31,823 [main:66] - Generated call from random type = ('䬏').compareTo('䙙').compareTo(-57)
2021-03-11 10:52:31,823 [main:94] - GETTING Int from Int
2021-03-11 10:52:31,853 [main:101] - Case = [public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:52:31,853 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:52:31,970 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:31,973 [main:105] - GENERATED CALL = (i).xor(1714060423)
2021-03-11 10:52:31,973 [main:101] - Case = [public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:52:31,973 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:52:32,091 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:32,094 [main:105] - GENERATED CALL = (i).and(-1439903661)
2021-03-11 10:52:32,094 [main:101] - Case = [public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:52:32,094 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:52:32,211 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:32,333 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:32,336 [main:105] - GENERATED CALL = (i).coerceIn(-72248713, 214997480)
2021-03-11 10:52:32,336 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], public final val step: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@d97c869]]
2021-03-11 10:52:32,336 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:52:32,456 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:32,459 [main:105] - GENERATED CALL = (i).rangeTo(-35).step
2021-03-11 10:52:32,459 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2b7987d7]]
2021-03-11 10:52:32,459 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:52:32,459 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2b7987d7]
2021-03-11 10:52:32,459 [main:105] - GENERATED CALL = (i).toByte().countTrailingZeroBits()
2021-03-11 10:52:32,459 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:52:32,459 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:52:32,459 [main:105] - GENERATED CALL = (i).countLeadingZeroBits()
2021-03-11 10:52:32,459 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:52:32,459 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:52:32,579 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:32,582 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:52:32,701 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:32,704 [main:105] - GENERATED CALL = (i).compareTo(-1655766811).times(-110)
2021-03-11 10:52:32,704 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:52:32,704 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:52:32,704 [main:105] - GENERATED CALL = (i).toInt().absoluteValue
2021-03-11 10:52:32,704 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:52:32,704 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:52:32,823 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:32,826 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:52:32,827 [main:105] - GENERATED CALL = (i).compareTo(1381707127).countLeadingZeroBits()
2021-03-11 10:52:32,827 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], public final val first: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@46455b22]]
2021-03-11 10:52:32,827 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:52:32,946 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:32,949 [main:105] - GENERATED CALL = (i).rangeTo(-45).first
2021-03-11 10:52:32,949 [main:63] - replacement of sum of type Int is (i).toByte().countTrailingZeroBits()
2021-03-11 10:52:33,068 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:52:33,068 [main:66] - Compilation checking started
2021-03-11 10:52:33,405 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    (i).toByte().countTrailingZeroBits() = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:52:33,414 [main:56] - replacing (sum, Int)
2021-03-11 10:52:33,415 [main:38] - replacing sum Int
2021-03-11 10:52:33,415 [main:42] - Getting value of type Int
2021-03-11 10:52:33,534 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:33,536 [main:46] - GENERATED VALUE OF TYPE Int = 1333715129
2021-03-11 10:52:33,537 [main:49] - GENERATED IS CALL =false
2021-03-11 10:52:33,942 [main:55] - randomType = ArrayDeque<Array<Short>>
2021-03-11 10:52:34,061 [main:302] - generating value of type = ArrayDeque<Array<Short>> false depth = 0
2021-03-11 10:52:34,186 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Array<Short>>): ArrayDeque<Array<Short>> = TODO()
2021-03-11 10:52:34,189 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Array<Short>>): ArrayDeque<Array<Short>> = TODO()
2021-03-11 10:52:34,454 [main:302] - generating value of type = Collection<Array<Short>> false depth = 3
2021-03-11 10:52:34,579 [main:43] - GENERATING CALL OF fun <T> setOfNotNull(element: Array<Short>): Collection<Array<Short>> = TODO()
2021-03-11 10:52:34,582 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOfNotNull(element: Array<Short>): Collection<Array<Short>> = TODO()
2021-03-11 10:52:34,766 [main:302] - generating value of type = Array<Short> false depth = 6
2021-03-11 10:52:34,892 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: Short): Array<Short> = TODO()
2021-03-11 10:52:34,896 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: Short): Array<Short> = TODO()
2021-03-11 10:52:35,020 [main:302] - generating value of type = Short true depth = 9
2021-03-11 10:52:35,023 [main:95] - GENERATED = arrayOf<Short>(-32300)
2021-03-11 10:52:35,023 [main:95] - GENERATED = setOfNotNull<Array<Short>>(arrayOf<Short>(-32300))
2021-03-11 10:52:35,023 [main:95] - GENERATED = ArrayDeque<Array<Short>>(setOfNotNull<Array<Short>>(arrayOf<Short>(-32300)))
2021-03-11 10:52:35,195 [main:137] - GENERATING call of type public open fun listIterator(): kotlin.collections.MutableListIterator<kotlin.Array<kotlin.Short>> defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@6bdaac27]
2021-03-11 10:52:35,195 [main:137] - GENERATING call of type public abstract fun previousIndex(): kotlin.Int defined in kotlin.collections.MutableListIterator[DeserializedSimpleFunctionDescriptor@4354153c]
2021-03-11 10:52:35,195 [main:66] - Generated call from random type = (ArrayDeque<Array<Short>>(setOfNotNull<Array<Short>>(arrayOf<Short>(-32300)))).listIterator().previousIndex()
2021-03-11 10:52:35,195 [main:63] - replacement of sum of type Int is (ArrayDeque<Array<Short>>(setOfNotNull<Array<Short>>(arrayOf<Short>(-32300)))).listIterator().previousIndex()
2021-03-11 10:52:35,314 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:52:35,314 [main:66] - Compilation checking started
2021-03-11 10:52:35,667 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        (ArrayDeque<Array<Short>>(setOfNotNull<Array<Short>>(arrayOf<Short>(-32300)))).listIterator().previousIndex() = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:52:35,676 [main:56] - replacing (sum, Int)
2021-03-11 10:52:35,678 [main:38] - replacing sum Int
2021-03-11 10:52:35,678 [main:42] - Getting value of type Int
2021-03-11 10:52:35,798 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:35,801 [main:46] - GENERATED VALUE OF TYPE Int = 2046174652
2021-03-11 10:52:35,801 [main:49] - GENERATED IS CALL =false
2021-03-11 10:52:35,807 [main:55] - randomType = Int
2021-03-11 10:52:35,925 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:35,961 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:52:36,082 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:36,085 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:52:36,205 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:36,208 [main:66] - Generated call from random type = (1883786299).compareTo(1430933483).and(-146505924)
2021-03-11 10:52:36,209 [main:94] - GETTING Int from MyIterator
2021-03-11 10:52:36,215 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:52:36,215 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:52:36,215 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.inc()
2021-03-11 10:52:36,215 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:52:36,215 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:52:36,215 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:52:36,335 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:36,338 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.shl(-397516703)
2021-03-11 10:52:36,338 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:52:36,338 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:52:36,338 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.takeLowestOneBit()
2021-03-11 10:52:36,338 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:52:36,338 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:52:36,338 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:52:36,457 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:36,460 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.or(-1935071677)
2021-03-11 10:52:36,460 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:52:36,460 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:52:36,460 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:52:36,593 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:36,596 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.rem(8)
2021-03-11 10:52:36,596 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:52:36,596 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:52:36,714 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:36,717 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.rotateLeft(-1375969248)
2021-03-11 10:52:36,717 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:52:36,717 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:52:36,717 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:52:36,834 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:36,837 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.and(-1749682627)
2021-03-11 10:52:36,837 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:52:36,837 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:52:36,837 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:52:36,955 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:36,958 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.xor(-292574938)
2021-03-11 10:52:36,958 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:52:36,958 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:52:36,958 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:52:36,959 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.inv()
2021-03-11 10:52:36,959 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:52:36,959 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:52:36,959 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:52:37,078 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:37,081 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.plus(-41)
2021-03-11 10:52:37,081 [main:63] - replacement of sum of type Int is (MyCollection3().iterator()).k.inc()
2021-03-11 10:52:37,198 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:52:37,199 [main:66] - Compilation checking started
2021-03-11 10:52:37,523 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        (MyCollection3().iterator()).k.inc() = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:52:37,532 [main:56] - replacing (sum, Int)
2021-03-11 10:52:37,534 [main:38] - replacing sum Int
2021-03-11 10:52:37,534 [main:42] - Getting value of type Int
2021-03-11 10:52:37,652 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:37,654 [main:46] - GENERATED VALUE OF TYPE Int = -1429827906
2021-03-11 10:52:37,654 [main:49] - GENERATED IS CALL =false
2021-03-11 10:52:37,665 [main:55] - randomType = MyCollection4
2021-03-11 10:52:37,783 [main:302] - generating value of type = MyCollection4 false depth = 0
2021-03-11 10:52:37,786 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:52:37,931 [main:194] - Type params = []
2021-03-11 10:52:38,059 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyCollection4[DeserializedSimpleFunctionDescriptor@69cb026]
2021-03-11 10:52:38,182 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:52:38,182 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:52:38,307 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:52:38,310 [main:66] - Generated call from random type = (MyCollection4()).equals("iznee").compareTo(true)
2021-03-11 10:52:38,311 [main:63] - replacement of sum of type Int is (MyCollection4()).equals("iznee").compareTo(true)
2021-03-11 10:52:38,436 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:52:38,436 [main:66] - Compilation checking started
2021-03-11 10:52:38,787 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        (MyCollection4()).equals("iznee").compareTo(true) = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:52:38,797 [main:56] - replacing (sum, Int)
2021-03-11 10:52:38,798 [main:38] - replacing sum Int
2021-03-11 10:52:38,799 [main:42] - Getting value of type Int
2021-03-11 10:52:38,927 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:38,930 [main:46] - GENERATED VALUE OF TYPE Int = -849496623
2021-03-11 10:52:38,930 [main:49] - GENERATED IS CALL =false
2021-03-11 10:52:38,936 [main:55] - randomType = Float
2021-03-11 10:52:39,064 [main:302] - generating value of type = Float true depth = 0
2021-03-11 10:52:39,100 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:52:39,101 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:52:39,226 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:39,229 [main:66] - Generated call from random type = (0.91180605f).toInt().ushr(-1578061182)
2021-03-11 10:52:39,230 [main:94] - GETTING Int from Array<Int?>
2021-03-11 10:52:39,243 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:52:39,243 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:52:39,373 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:39,376 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:52:39,507 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:39,510 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(782315703)?.shl(62793442)
2021-03-11 10:52:39,511 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:52:39,511 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:52:39,638 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:39,642 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:52:39,767 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:39,770 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-907347484)?.ushr(275452818)
2021-03-11 10:52:39,770 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:52:39,770 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:52:39,896 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:39,899 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.and(-736509482)
2021-03-11 10:52:39,899 [main:101] - Case = [public final operator fun iterator(): kotlin.collections.Iterator<kotlin.Int?> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@688b308a], public abstract operator fun next(): kotlin.Int? defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@4b06cee5]]
2021-03-11 10:52:39,899 [main:137] - GENERATING call of type public final operator fun iterator(): kotlin.collections.Iterator<kotlin.Int?> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@688b308a]
2021-03-11 10:52:39,899 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int? defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@4b06cee5]
2021-03-11 10:52:39,899 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).iterator().next()
2021-03-11 10:52:39,899 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:52:39,900 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:52:39,900 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.countOneBits()
2021-03-11 10:52:39,900 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:52:39,900 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:52:40,035 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:40,037 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:52:40,038 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(1235599680)?.dec()
2021-03-11 10:52:40,038 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:52:40,038 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:52:40,190 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:40,195 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:52:40,388 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:40,391 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-2018341174)?.minus(116)
2021-03-11 10:52:40,392 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.sumOf(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@43a4f469]]
2021-03-11 10:52:40,392 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.sumOf(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@43a4f469]
2021-03-11 10:52:40,525 [main:302] - generating value of type = Function1<T, Int> false depth = 0
2021-03-11 10:52:40,528 [main:302] - generating value of type = Int true depth = 1
2021-03-11 10:52:40,531 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).sumOf({a: T -> -1566975894})
2021-03-11 10:52:40,531 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:52:40,531 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:52:40,653 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:40,656 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:52:40,786 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:40,788 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(1277148307)?.times(76)
2021-03-11 10:52:40,788 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:52:40,789 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:52:40,915 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:40,918 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:52:40,918 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(738296248)?.unaryMinus()
2021-03-11 10:52:40,918 [main:63] - replacement of sum of type Int is (arrayOfNulls<Int>(5)).sumOf({a: T -> -1566975894})
2021-03-11 10:52:41,049 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:52:41,050 [main:66] - Compilation checking started
2021-03-11 10:52:41,452 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        (arrayOfNulls<Int>(5)).sumOf({a: T -> -1566975894}) = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:52:41,461 [main:56] - replacing (MyIterator(), MyIterator)
2021-03-11 10:52:41,461 [main:38] - replacing MyIterator() MyIterator
2021-03-11 10:52:41,461 [main:42] - Getting value of type MyIterator
2021-03-11 10:52:41,590 [main:302] - generating value of type = MyIterator false depth = 0
2021-03-11 10:52:41,592 [main:112] - generating klass MyIterator text = class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
2021-03-11 10:52:41,593 [main:46] - GENERATED VALUE OF TYPE MyIterator = 
2021-03-11 10:52:41,920 [main:55] - randomType = Map<UInt, UByte?>
2021-03-11 10:52:41,922 [main:94] - GETTING MyIterator from Iterator<Int>
2021-03-11 10:52:41,935 [main:94] - GETTING MyIterator from Iterator<Int>
2021-03-11 10:52:41,936 [main:94] - GETTING MyIterator from Int
2021-03-11 10:52:41,989 [main:94] - GETTING MyIterator from MyIterator
2021-03-11 10:52:42,001 [main:63] - replacement of MyIterator() of type MyIterator is MyCollection3().iterator()
2021-03-11 10:52:42,131 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:52:42,131 [main:66] - Compilation checking started
2021-03-11 10:52:42,508 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyCollection3().iterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:52:42,518 [main:56] - replacing (b, Array<Int?>)
2021-03-11 10:52:42,520 [main:38] - replacing b Array<Int?>
2021-03-11 10:52:42,520 [main:42] - Getting value of type Array<Int?>
2021-03-11 10:52:42,647 [main:302] - generating value of type = Array<Int?> false depth = 0
2021-03-11 10:52:42,781 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Int?): Array<Int?> = TODO()
2021-03-11 10:52:42,785 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Int?): Array<Int?> = TODO()
2021-03-11 10:52:43,216 [main:302] - generating value of type = Int true depth = 3
2021-03-11 10:52:43,218 [main:302] - generating value of type = Function1<Int, Int?> false depth = 3
2021-03-11 10:52:43,222 [main:302] - generating value of type = Int true depth = 4
2021-03-11 10:52:43,226 [main:95] - GENERATED = Array<Int?>(-1888616055, {a: Int -> 1293049251})
2021-03-11 10:52:43,226 [main:46] - GENERATED VALUE OF TYPE Array<Int?> = Array<Int?>(-1888616055, {a: Int -> 1293049251})
2021-03-11 10:52:43,227 [main:49] - GENERATED IS CALL =true
2021-03-11 10:52:43,232 [main:55] - randomType = Double
2021-03-11 10:52:43,357 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:52:43,398 [main:94] - GETTING Array<Int?> from Iterator<Int>
2021-03-11 10:52:43,405 [main:94] - GETTING Array<Int?> from MyIterator
2021-03-11 10:52:43,412 [main:94] - GETTING Array<Int?> from Array<Int?>
2021-03-11 10:52:43,422 [main:101] - Case = [public fun <T> kotlin.Array<T>.sliceArray(indices: kotlin.collections.Collection<kotlin.Int>): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7940abfb]]
2021-03-11 10:52:43,423 [main:137] - GENERATING call of type public fun <T> kotlin.Array<T>.sliceArray(indices: kotlin.collections.Collection<kotlin.Int>): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7940abfb]
2021-03-11 10:52:43,555 [main:302] - generating value of type = Collection<Int> false depth = 0
2021-03-11 10:52:43,691 [main:43] - GENERATING CALL OF fun <T> setOfNotNull(elements: Int): Collection<Int> = TODO()
2021-03-11 10:52:43,695 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOfNotNull(elements: Int): Collection<Int> = TODO()
2021-03-11 10:52:43,827 [main:302] - generating value of type = Int true depth = 3
2021-03-11 10:52:43,830 [main:95] - GENERATED = setOfNotNull<Int>(-2030730480)
2021-03-11 10:52:43,831 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).sliceArray(setOfNotNull<Int>(-2030730480))
2021-03-11 10:52:43,831 [main:101] - Case = [public fun <T> kotlin.Array<T>.reversedArray(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1f7c53ea]]
2021-03-11 10:52:43,831 [main:137] - GENERATING call of type public fun <T> kotlin.Array<T>.reversedArray(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1f7c53ea]
2021-03-11 10:52:43,831 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).reversedArray()
2021-03-11 10:52:43,831 [main:101] - Case = [public fun <T : kotlin.Comparable<T>> kotlin.Array<T>.sortedArrayDescending(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@508fd8b1]]
2021-03-11 10:52:43,831 [main:137] - GENERATING call of type public fun <T : kotlin.Comparable<T>> kotlin.Array<T>.sortedArrayDescending(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@508fd8b1]
2021-03-11 10:52:43,831 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).sortedArrayDescending()
2021-03-11 10:52:43,831 [main:101] - Case = [public fun <T : kotlin.Comparable<T>> kotlin.Array<T>.sortedArray(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@62c4b0c7]]
2021-03-11 10:52:43,831 [main:137] - GENERATING call of type public fun <T : kotlin.Comparable<T>> kotlin.Array<T>.sortedArray(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@62c4b0c7]
2021-03-11 10:52:43,831 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).sortedArray()
2021-03-11 10:52:43,831 [main:101] - Case = [public fun <T : kotlin.Any> kotlin.Array<T?>.requireNoNulls(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3358e940]]
2021-03-11 10:52:43,831 [main:137] - GENERATING call of type public fun <T : kotlin.Any> kotlin.Array<T?>.requireNoNulls(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3358e940]
2021-03-11 10:52:43,832 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).requireNoNulls()
2021-03-11 10:52:43,832 [main:63] - replacement of b of type Array<Int?> is (arrayOfNulls<Int>(5)).sortedArray()
2021-03-11 10:52:43,956 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:52:43,956 [main:66] - Compilation checking started
2021-03-11 10:52:44,326 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sortedArray()) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:52:44,335 [main:56] - replacing (sum, Int)
2021-03-11 10:52:44,337 [main:38] - replacing sum Int
2021-03-11 10:52:44,337 [main:42] - Getting value of type Int
2021-03-11 10:52:44,471 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:44,474 [main:46] - GENERATED VALUE OF TYPE Int = -59190933
2021-03-11 10:52:44,474 [main:49] - GENERATED IS CALL =false
2021-03-11 10:52:44,619 [main:55] - randomType = Short
2021-03-11 10:52:44,751 [main:302] - generating value of type = Short true depth = 0
2021-03-11 10:52:44,794 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:52:44,794 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:52:44,795 [main:66] - Generated call from random type = (-25670).toInt().countTrailingZeroBits()
2021-03-11 10:52:44,795 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:52:44,802 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:52:44,802 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:52:44,802 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:52:44,924 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:44,927 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().rem(109)
2021-03-11 10:52:44,927 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:52:44,927 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:52:44,927 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:52:45,050 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:45,183 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:45,186 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().coerceIn(-1391302113, 1879060518)
2021-03-11 10:52:45,186 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]]
2021-03-11 10:52:45,186 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:52:45,186 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next()
2021-03-11 10:52:45,186 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:52:45,186 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:52:45,186 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:52:45,310 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:45,313 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().shr(-6958572)
2021-03-11 10:52:45,313 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:52:45,313 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:52:45,313 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:52:45,438 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:45,441 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().or(-10422334)
2021-03-11 10:52:45,441 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:52:45,441 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:52:45,441 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:52:45,441 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().dec()
2021-03-11 10:52:45,441 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:52:45,442 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:52:45,442 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:52:45,570 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:45,573 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().rotateLeft(-548501206)
2021-03-11 10:52:45,573 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:52:45,573 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:52:45,573 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:52:45,697 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:45,700 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().compareTo(38)
2021-03-11 10:52:45,700 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:52:45,700 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:52:45,700 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:52:45,823 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:45,827 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().minus(45)
2021-03-11 10:52:45,827 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:52:45,827 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:52:45,827 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:52:45,953 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:45,955 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().rotateRight(-403760454)
2021-03-11 10:52:45,956 [main:63] - replacement of sum of type Int is (MyCollection2().iterator()).next().rotateLeft(-548501206)
2021-03-11 10:52:46,085 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:52:46,085 [main:66] - Compilation checking started
2021-03-11 10:52:46,503 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        (MyCollection2().iterator()).next().rotateLeft(-548501206) = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:52:46,514 [main:56] - replacing (sum, Int)
2021-03-11 10:52:46,516 [main:38] - replacing sum Int
2021-03-11 10:52:46,516 [main:42] - Getting value of type Int
2021-03-11 10:52:46,641 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:46,644 [main:46] - GENERATED VALUE OF TYPE Int = 677115844
2021-03-11 10:52:46,644 [main:49] - GENERATED IS CALL =false
2021-03-11 10:52:46,649 [main:55] - randomType = Boolean
2021-03-11 10:52:46,774 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:52:46,786 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:52:46,910 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:52:46,912 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:52:46,913 [main:66] - Generated call from random type = (false).compareTo(true).unaryPlus()
2021-03-11 10:52:46,913 [main:63] - replacement of sum of type Int is (false).compareTo(true).unaryPlus()
2021-03-11 10:52:47,038 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:52:47,039 [main:66] - Compilation checking started
2021-03-11 10:52:47,408 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    (false).compareTo(true).unaryPlus() = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:52:47,417 [main:56] - replacing (i, Int)
2021-03-11 10:52:47,418 [main:38] - replacing i Int
2021-03-11 10:52:47,418 [main:42] - Getting value of type Int
2021-03-11 10:52:47,542 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:47,545 [main:46] - GENERATED VALUE OF TYPE Int = -1999982765
2021-03-11 10:52:47,545 [main:49] - GENERATED IS CALL =false
2021-03-11 10:52:47,551 [main:55] - randomType = UShort
2021-03-11 10:52:47,676 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 10:52:47,715 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@2cf21468]
2021-03-11 10:52:47,842 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:52:47,845 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:52:47,979 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:47,982 [main:66] - Generated call from random type = (21785.toUShort()).compareTo(78.toUByte()).shl(2043723300)
2021-03-11 10:52:47,982 [main:94] - GETTING Int from Int
2021-03-11 10:52:48,030 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@3fd91132]]
2021-03-11 10:52:48,030 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:52:48,030 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@3fd91132]
2021-03-11 10:52:48,030 [main:105] - GENERATED CALL = (i).toFloat().toInt()
2021-03-11 10:52:48,030 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3b9b155c]]
2021-03-11 10:52:48,030 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:52:48,030 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3b9b155c]
2021-03-11 10:52:48,030 [main:105] - GENERATED CALL = (i).toShort().unaryMinus()
2021-03-11 10:52:48,030 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:52:48,030 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:52:48,160 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:48,163 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:52:48,287 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:48,290 [main:105] - GENERATED CALL = (i).compareTo(-2031072449).shr(-1578982502)
2021-03-11 10:52:48,290 [main:101] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@b2d8722], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@11d995f6]]
2021-03-11 10:52:48,290 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@b2d8722]
2021-03-11 10:52:48,415 [main:302] - generating value of type = Float true depth = 0
2021-03-11 10:52:48,418 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@11d995f6]
2021-03-11 10:52:48,418 [main:105] - GENERATED CALL = (i).div(0.83870304f).toBits()
2021-03-11 10:52:48,418 [main:101] - Case = [public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:52:48,418 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:52:48,418 [main:105] - GENERATED CALL = (i).dec()
2021-03-11 10:52:48,419 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62c19a2]]
2021-03-11 10:52:48,419 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:52:48,419 [main:137] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62c19a2]
2021-03-11 10:52:48,419 [main:105] - GENERATED CALL = (i).toChar().digitToInt()
2021-03-11 10:52:48,419 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@5e1f7c80]]
2021-03-11 10:52:48,419 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:52:48,419 [main:105] - GENERATED CALL = (i).toChar().code
2021-03-11 10:52:48,419 [main:101] - Case = [public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:52:48,419 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:52:48,544 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:48,547 [main:105] - GENERATED CALL = (i).coerceAtMost(-939888664)
2021-03-11 10:52:48,547 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:52:48,547 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:52:48,547 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:52:48,671 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:48,674 [main:105] - GENERATED CALL = (i).toInt().coerceAtMost(1105245485)
2021-03-11 10:52:48,675 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@34c43638]]
2021-03-11 10:52:48,675 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:52:48,675 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@34c43638]
2021-03-11 10:52:48,675 [main:105] - GENERATED CALL = (i).toByte().countLeadingZeroBits()
2021-03-11 10:52:48,675 [main:63] - replacement of i of type Int is (21785.toUShort()).compareTo(78.toUByte()).shl(2043723300)
2021-03-11 10:52:48,799 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:52:48,808 [main:56] - replacing (MyCollection1(), MyCollection1)
2021-03-11 10:52:48,809 [main:38] - replacing MyCollection1() MyCollection1
2021-03-11 10:52:48,809 [main:42] - Getting value of type MyCollection1
2021-03-11 10:52:48,934 [main:302] - generating value of type = MyCollection1 false depth = 0
2021-03-11 10:52:48,936 [main:112] - generating klass MyCollection1 text = class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}
2021-03-11 10:52:49,064 [main:194] - Type params = []
2021-03-11 10:52:49,188 [main:46] - GENERATED VALUE OF TYPE MyCollection1 = MyCollection1()
2021-03-11 10:52:49,188 [main:49] - GENERATED IS CALL =true
2021-03-11 10:52:49,355 [main:55] - randomType = Map<MyCollection1, String>
2021-03-11 10:52:49,356 [main:94] - GETTING MyCollection1 from Int
2021-03-11 10:52:49,405 [main:94] - GETTING MyCollection1 from Iterator<Int>
2021-03-11 10:52:49,410 [main:94] - GETTING MyCollection1 from MyIterator
2021-03-11 10:52:49,415 [main:94] - GETTING MyCollection1 from Int
2021-03-11 10:52:49,416 [main:94] - GETTING MyCollection1 from Iterator<Int>
2021-03-11 10:52:49,416 [main:94] - GETTING MyCollection1 from Array<Int?>
2021-03-11 10:52:49,430 [main:94] - GETTING MyCollection1 from Int
2021-03-11 10:52:49,430 [main:94] - GETTING MyCollection1 from MyIterator
2021-03-11 10:52:49,430 [main:63] - replacement of MyCollection1() of type MyCollection1 is MyCollection1()
2021-03-11 10:52:49,554 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 10:52:49,563 [main:56] - replacing (i, Int)
2021-03-11 10:52:49,565 [main:38] - replacing i Int
2021-03-11 10:52:49,565 [main:42] - Getting value of type Int
2021-03-11 10:52:49,690 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:49,693 [main:46] - GENERATED VALUE OF TYPE Int = -1073394634
2021-03-11 10:52:49,693 [main:49] - GENERATED IS CALL =false
2021-03-11 10:52:50,009 [main:55] - randomType = Pair<MyCollection4?, MyCollection4>
2021-03-11 10:52:50,137 [main:302] - generating value of type = Pair<MyCollection4?, MyCollection4> false depth = 0
2021-03-11 10:52:50,270 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: MyCollection4?, second: MyCollection4): Pair<MyCollection4?, MyCollection4> = TODO()
2021-03-11 10:52:50,273 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: MyCollection4?, second: MyCollection4): Pair<MyCollection4?, MyCollection4> = TODO()
2021-03-11 10:52:50,403 [main:302] - generating value of type = MyCollection4 false depth = 3
2021-03-11 10:52:50,406 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:52:50,532 [main:194] - Type params = []
2021-03-11 10:52:50,655 [main:302] - generating value of type = MyCollection4 false depth = 3
2021-03-11 10:52:50,659 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:52:50,784 [main:194] - Type params = []
2021-03-11 10:52:50,907 [main:95] - GENERATED = Pair<MyCollection4?, MyCollection4>(MyCollection4(), MyCollection4())
2021-03-11 10:52:50,922 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Pair[DeserializedSimpleFunctionDescriptor@12f43b45]
2021-03-11 10:52:51,047 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:52:51,047 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:52:51,171 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:52:51,174 [main:66] - Generated call from random type = (Pair<MyCollection4?, MyCollection4>(MyCollection4(), MyCollection4())).equals("rhxgg").compareTo(false)
2021-03-11 10:52:51,174 [main:94] - GETTING Int from Int
2021-03-11 10:52:51,210 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], public final val last: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@21a92708]]
2021-03-11 10:52:51,210 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:52:51,334 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:51,337 [main:105] - GENERATED CALL = (i).rangeTo(-102).last
2021-03-11 10:52:51,337 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@f49fa44]]
2021-03-11 10:52:51,337 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:52:51,337 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@f49fa44]
2021-03-11 10:52:51,337 [main:105] - GENERATED CALL = (i).toByte().unaryPlus()
2021-03-11 10:52:51,337 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:52:51,337 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:52:51,337 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:52:51,464 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:51,467 [main:105] - GENERATED CALL = (i).toInt().coerceAtMost(1345952113)
2021-03-11 10:52:51,467 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:52:51,467 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:52:51,592 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:51,595 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:52:51,721 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:51,724 [main:105] - GENERATED CALL = (i).compareTo(770209034).times(-48)
2021-03-11 10:52:51,724 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@34c43638]]
2021-03-11 10:52:51,724 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:52:51,724 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@34c43638]
2021-03-11 10:52:51,724 [main:105] - GENERATED CALL = (i).toByte().countLeadingZeroBits()
2021-03-11 10:52:51,724 [main:101] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@b2d8722], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ea49e27]]
2021-03-11 10:52:51,724 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@b2d8722]
2021-03-11 10:52:51,850 [main:302] - generating value of type = Float true depth = 0
2021-03-11 10:52:51,852 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ea49e27]
2021-03-11 10:52:51,852 [main:105] - GENERATED CALL = (i).div(0.18942213f).toRawBits()
2021-03-11 10:52:51,853 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:52:51,853 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:52:51,853 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:52:51,853 [main:105] - GENERATED CALL = (i).toInt().countLeadingZeroBits()
2021-03-11 10:52:51,853 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:52:51,853 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:52:51,853 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:52:51,853 [main:105] - GENERATED CALL = (i).toInt().takeHighestOneBit()
2021-03-11 10:52:51,853 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1180d1b3]]
2021-03-11 10:52:51,853 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:52:51,853 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1180d1b3]
2021-03-11 10:52:52,042 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:52,045 [main:105] - GENERATED CALL = (i).toShort().rem(117)
2021-03-11 10:52:52,045 [main:101] - Case = [public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:52:52,045 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:52:52,169 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:52,172 [main:105] - GENERATED CALL = (i).shl(-2142522229)
2021-03-11 10:52:52,172 [main:63] - replacement of i of type Int is (i).toShort().rem(117)
2021-03-11 10:52:52,298 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:52:52,299 [main:66] - Compilation checking started
2021-03-11 10:52:52,652 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    (i).toShort().rem(117) = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:52:52,662 [main:56] - replacing (sum, Int)
2021-03-11 10:52:52,663 [main:38] - replacing sum Int
2021-03-11 10:52:52,663 [main:42] - Getting value of type Int
2021-03-11 10:52:52,789 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:52,792 [main:46] - GENERATED VALUE OF TYPE Int = -1340064546
2021-03-11 10:52:52,793 [main:49] - GENERATED IS CALL =false
2021-03-11 10:52:52,804 [main:55] - randomType = MyCollection3
2021-03-11 10:52:52,929 [main:302] - generating value of type = MyCollection3 false depth = 0
2021-03-11 10:52:52,932 [main:112] - generating klass MyCollection3 text = class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}
2021-03-11 10:52:53,054 [main:194] - Type params = []
2021-03-11 10:52:53,186 [main:137] - GENERATING call of type public final operator fun iterator(): MyCollection3.MyIterator defined in MyCollection3[SimpleFunctionDescriptorImpl@5c2ac986]
2021-03-11 10:52:53,187 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@14f91c4f]
2021-03-11 10:52:53,187 [main:66] - Generated call from random type = (MyCollection3()).iterator().next()!!
2021-03-11 10:52:53,187 [main:94] - GETTING Int from Int
2021-03-11 10:52:53,226 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@13c687d3]]
2021-03-11 10:52:53,226 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:52:53,227 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@13c687d3]
2021-03-11 10:52:53,351 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:53,353 [main:105] - GENERATED CALL = (el ?: 0).toFloat().compareTo(61)
2021-03-11 10:52:53,354 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3c2cc2a6]]
2021-03-11 10:52:53,354 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:52:53,354 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3c2cc2a6]
2021-03-11 10:52:53,354 [main:105] - GENERATED CALL = (el ?: 0).toShort().countLeadingZeroBits()
2021-03-11 10:52:53,354 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@55d433d4]]
2021-03-11 10:52:53,354 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:52:53,354 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@55d433d4]
2021-03-11 10:52:53,480 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:53,483 [main:105] - GENERATED CALL = (el ?: 0).toShort().div(-19)
2021-03-11 10:52:53,483 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2b7987d7]]
2021-03-11 10:52:53,483 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:52:53,484 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2b7987d7]
2021-03-11 10:52:53,484 [main:105] - GENERATED CALL = (el ?: 0).toByte().countTrailingZeroBits()
2021-03-11 10:52:53,484 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:52:53,484 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:52:53,484 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:52:53,484 [main:105] - GENERATED CALL = (el ?: 0).toInt().dec()
2021-03-11 10:52:53,484 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:52:53,484 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:52:53,611 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:53,614 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:52:53,614 [main:105] - GENERATED CALL = (el ?: 0).compareTo(5264773).countTrailingZeroBits()
2021-03-11 10:52:53,614 [main:101] - Case = [public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:52:53,614 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:52:53,738 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:53,741 [main:105] - GENERATED CALL = (el ?: 0).coerceAtLeast(1878078921)
2021-03-11 10:52:53,741 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:52:53,741 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:52:53,741 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:52:53,741 [main:105] - GENERATED CALL = (el ?: 0).toInt().unaryMinus()
2021-03-11 10:52:53,742 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:52:53,742 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:52:53,867 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:53,870 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:52:53,994 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:53,997 [main:105] - GENERATED CALL = (el ?: 0).compareTo(-840684).shr(-619677468)
2021-03-11 10:52:53,998 [main:101] - Case = [public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:52:53,998 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:52:54,121 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:54,124 [main:105] - GENERATED CALL = (el ?: 0).plus(-11)
2021-03-11 10:52:54,124 [main:63] - replacement of sum of type Int is (el ?: 0).coerceAtLeast(1878078921)
2021-03-11 10:52:54,247 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:52:54,248 [main:66] - Compilation checking started
2021-03-11 10:52:54,611 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    (el ?: 0).coerceAtLeast(1878078921) = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:52:54,620 [main:56] - replacing (sum, Int)
2021-03-11 10:52:54,620 [main:38] - replacing sum Int
2021-03-11 10:52:54,620 [main:42] - Getting value of type Int
2021-03-11 10:52:54,750 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:54,753 [main:46] - GENERATED VALUE OF TYPE Int = -531142912
2021-03-11 10:52:54,753 [main:49] - GENERATED IS CALL =false
2021-03-11 10:52:54,909 [main:55] - randomType = MyCollection4?
2021-03-11 10:52:55,034 [main:302] - generating value of type = MyCollection4 false depth = 0
2021-03-11 10:52:55,037 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:52:55,162 [main:194] - Type params = []
2021-03-11 10:52:55,291 [main:137] - GENERATING call of type public final operator fun iterator(): MyCollection3.MyIterator defined in MyCollection4[SimpleFunctionDescriptorImpl@5c2a08ca]
2021-03-11 10:52:55,291 [main:66] - Generated call from random type = (MyCollection4())?.iterator().k
2021-03-11 10:52:55,292 [main:94] - GETTING Int from MyIterator
2021-03-11 10:52:55,296 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:52:55,296 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:52:55,422 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:55,425 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.xor(465726863)
2021-03-11 10:52:55,425 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:52:55,425 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:52:55,426 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.inc()
2021-03-11 10:52:55,426 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:52:55,426 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:52:55,550 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:55,552 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.rotateRight(327467478)
2021-03-11 10:52:55,553 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:52:55,553 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:52:55,679 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:55,682 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.and(-1767974476)
2021-03-11 10:52:55,682 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:52:55,682 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:52:55,809 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:55,812 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.minus(56)
2021-03-11 10:52:55,812 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:52:55,812 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.sign
2021-03-11 10:52:55,813 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:52:55,813 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:52:55,813 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.countTrailingZeroBits()
2021-03-11 10:52:55,813 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:52:55,813 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:52:55,813 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.takeHighestOneBit()
2021-03-11 10:52:55,813 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508]]
2021-03-11 10:52:55,813 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k
2021-03-11 10:52:55,813 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:52:55,813 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.absoluteValue
2021-03-11 10:52:55,813 [main:63] - replacement of sum of type Int is -531142912
2021-03-11 10:52:55,936 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 10:52:55,945 [main:56] - replacing (k, Int)
2021-03-11 10:52:55,945 [main:38] - replacing k Int
2021-03-11 10:52:55,945 [main:42] - Getting value of type Int
2021-03-11 10:52:56,070 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:56,073 [main:46] - GENERATED VALUE OF TYPE Int = 299299399
2021-03-11 10:52:56,073 [main:49] - GENERATED IS CALL =false
2021-03-11 10:52:56,224 [main:55] - randomType = Collection<UByte>
2021-03-11 10:52:56,225 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:52:56,231 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:52:56,231 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:52:56,231 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:52:56,358 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:56,361 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().ushr(589243446)
2021-03-11 10:52:56,361 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:52:56,361 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:52:56,361 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:52:56,361 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().takeLowestOneBit()
2021-03-11 10:52:56,361 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:52:56,361 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:52:56,361 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:52:56,487 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:56,490 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().rem(-31)
2021-03-11 10:52:56,490 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:52:56,490 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:52:56,490 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:52:56,490 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().inv()
2021-03-11 10:52:56,490 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:52:56,490 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:52:56,490 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:52:56,490 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().toInt()
2021-03-11 10:52:56,490 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:52:56,490 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:52:56,490 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:52:56,491 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().countTrailingZeroBits()
2021-03-11 10:52:56,491 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:52:56,491 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:52:56,491 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:52:56,616 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:56,619 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().minus(-21)
2021-03-11 10:52:56,619 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:52:56,619 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:52:56,620 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:52:56,742 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:56,745 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().shr(-178903354)
2021-03-11 10:52:56,745 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:52:56,745 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:52:56,745 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:52:56,869 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:56,872 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().coerceAtMost(759279605)
2021-03-11 10:52:56,872 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:52:56,872 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:52:56,872 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:52:56,872 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().unaryMinus()
2021-03-11 10:52:56,872 [main:63] - replacement of k of type Int is (MyCollection1().iterator()).next().ushr(589243446)
2021-03-11 10:52:56,996 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:52:57,005 [main:56] - replacing (i, Int)
2021-03-11 10:52:57,007 [main:38] - replacing i Int
2021-03-11 10:52:57,007 [main:42] - Getting value of type Int
2021-03-11 10:52:57,131 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:57,134 [main:46] - GENERATED VALUE OF TYPE Int = 1916110451
2021-03-11 10:52:57,134 [main:49] - GENERATED IS CALL =false
2021-03-11 10:52:57,273 [main:55] - randomType = Short
2021-03-11 10:52:57,401 [main:302] - generating value of type = Short true depth = 0
2021-03-11 10:52:57,450 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2cb53aa5]
2021-03-11 10:52:57,584 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:52:57,587 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a8376bf]
2021-03-11 10:52:57,587 [main:66] - Generated call from random type = (-13199).div(-6003621533869889760).countOneBits()
2021-03-11 10:52:57,588 [main:94] - GETTING Int from MyIterator
2021-03-11 10:52:57,595 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:52:57,595 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:52:57,723 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:57,727 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.plus(-92)
2021-03-11 10:52:57,727 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:52:57,727 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:52:57,727 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.inv()
2021-03-11 10:52:57,727 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:52:57,727 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:52:57,912 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:57,916 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.compareTo(-99)
2021-03-11 10:52:57,916 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:52:57,916 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:52:58,044 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:58,047 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.rotateRight(905429474)
2021-03-11 10:52:58,048 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:52:58,048 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:52:58,048 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.countOneBits()
2021-03-11 10:52:58,048 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:52:58,048 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:52:58,048 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.dec()
2021-03-11 10:52:58,048 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:52:58,048 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:52:58,172 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:58,298 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:58,301 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.coerceIn(-1017981763, -256715047)
2021-03-11 10:52:58,302 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:52:58,302 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:52:58,425 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:58,428 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.shr(-922999658)
2021-03-11 10:52:58,428 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:52:58,428 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:52:58,552 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:58,555 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.and(-1440038874)
2021-03-11 10:52:58,555 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:52:58,555 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:52:58,678 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:52:58,681 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.times(90)
2021-03-11 10:52:58,681 [main:63] - replacement of i of type Int is (MyCollection4().iterator()).k.and(-1440038874)
2021-03-11 10:52:58,804 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:52:58,804 [main:66] - Compilation checking started
2021-03-11 10:52:59,152 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    (MyCollection4().iterator()).k.and(-1440038874) = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:52:59,162 [main:56] - replacing (el, Int)
2021-03-11 10:52:59,162 [main:38] - replacing el Int
2021-03-11 10:52:59,162 [main:42] - Getting value of type Int
2021-03-11 10:52:59,288 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:59,291 [main:46] - GENERATED VALUE OF TYPE Int = -1744796887
2021-03-11 10:52:59,291 [main:49] - GENERATED IS CALL =false
2021-03-11 10:52:59,301 [main:55] - randomType = MyCollection4
2021-03-11 10:52:59,427 [main:302] - generating value of type = MyCollection4 false depth = 0
2021-03-11 10:52:59,429 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:52:59,553 [main:194] - Type params = []
2021-03-11 10:52:59,684 [main:137] - GENERATING call of type public final operator fun iterator(): MyCollection3.MyIterator defined in MyCollection4[SimpleFunctionDescriptorImpl@69055091]
2021-03-11 10:52:59,685 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@14f91c4f]
2021-03-11 10:52:59,685 [main:66] - Generated call from random type = (MyCollection4()).iterator().next()!!
2021-03-11 10:52:59,685 [main:94] - GETTING Int from Int
2021-03-11 10:52:59,719 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@674346bc]]
2021-03-11 10:52:59,719 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f]
2021-03-11 10:52:59,845 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:52:59,849 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@674346bc]
2021-03-11 10:52:59,849 [main:105] - GENERATED CALL = (el ?: 0).div(3379425469160281237).countTrailingZeroBits()
2021-03-11 10:52:59,849 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@62aaa4bd]]
2021-03-11 10:52:59,849 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:52:59,849 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@62aaa4bd]
2021-03-11 10:52:59,849 [main:105] - GENERATED CALL = (el ?: 0).toFloat().roundToInt()
2021-03-11 10:52:59,849 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3bfb2f7e]]
2021-03-11 10:52:59,849 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:52:59,849 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3bfb2f7e]
2021-03-11 10:52:59,850 [main:105] - GENERATED CALL = (el ?: 0).toShort().toInt()
2021-03-11 10:52:59,850 [main:101] - Case = [public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:52:59,850 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:52:59,850 [main:105] - GENERATED CALL = (el ?: 0).toInt()
2021-03-11 10:52:59,850 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@22a1cf7f]]
2021-03-11 10:52:59,850 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:52:59,850 [main:137] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@22a1cf7f]
2021-03-11 10:52:59,850 [main:105] - GENERATED CALL = (el ?: 0).toChar().toInt()
2021-03-11 10:52:59,850 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:52:59,850 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:52:59,973 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:52:59,977 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:52:59,977 [main:105] - GENERATED CALL = (el ?: 0).compareTo(1037452824).unaryPlus()
2021-03-11 10:52:59,977 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@5e1f7c80]]
2021-03-11 10:52:59,977 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:52:59,978 [main:105] - GENERATED CALL = (el ?: 0).toChar().code
2021-03-11 10:52:59,978 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@63c4310c]]
2021-03-11 10:52:59,978 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:52:59,978 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@63c4310c]
2021-03-11 10:53:00,102 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:00,105 [main:105] - GENERATED CALL = (el ?: 0).toShort().compareTo(84)
2021-03-11 10:53:00,105 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:53:00,105 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:53:00,105 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:53:00,230 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:00,233 [main:105] - GENERATED CALL = (el ?: 0).toInt().coerceAtMost(1554311882)
2021-03-11 10:53:00,234 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62c19a2]]
2021-03-11 10:53:00,234 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:53:00,234 [main:137] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62c19a2]
2021-03-11 10:53:00,234 [main:105] - GENERATED CALL = (el ?: 0).toChar().digitToInt()
2021-03-11 10:53:00,234 [main:63] - replacement of el of type Int is (arrayOfNulls<Int>(5))?.get(1713397499)?.rem(-55) ?: (MyCollection2().iterator()).next().absoluteValue
2021-03-11 10:53:00,379 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 10:53:00,394 [main:56] - replacing (i, Int)
2021-03-11 10:53:00,394 [main:38] - replacing i Int
2021-03-11 10:53:00,394 [main:42] - Getting value of type Int
2021-03-11 10:53:00,576 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:00,580 [main:46] - GENERATED VALUE OF TYPE Int = 1220195346
2021-03-11 10:53:00,580 [main:49] - GENERATED IS CALL =false
2021-03-11 10:53:00,586 [main:55] - randomType = Double
2021-03-11 10:53:00,753 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:53:00,827 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4d6e37cb]
2021-03-11 10:53:00,975 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:00,979 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:53:01,112 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:01,115 [main:66] - Generated call from random type = (0.4762355523960755).compareTo(127).shr(-861858094)
2021-03-11 10:53:01,115 [main:94] - GETTING Int from Int
2021-03-11 10:53:01,153 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:53:01,153 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:53:01,153 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:53:01,153 [main:105] - GENERATED CALL = (i).toInt().inc()
2021-03-11 10:53:01,153 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@55d433d4]]
2021-03-11 10:53:01,153 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:53:01,153 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@55d433d4]
2021-03-11 10:53:01,341 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:01,345 [main:105] - GENERATED CALL = (i).toShort().div(39)
2021-03-11 10:53:01,346 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431], public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@74f66b42]]
2021-03-11 10:53:01,346 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431]
2021-03-11 10:53:01,495 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:53:01,498 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@74f66b42]
2021-03-11 10:53:01,498 [main:105] - GENERATED CALL = (i).div(0.2830767018772756).toInt()
2021-03-11 10:53:01,499 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], public final val first: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@46455b22]]
2021-03-11 10:53:01,499 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:53:01,658 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:01,661 [main:105] - GENERATED CALL = (i).rangeTo(-115).first
2021-03-11 10:53:01,661 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], public open val start: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@4e51b8]]
2021-03-11 10:53:01,661 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:53:01,792 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:01,796 [main:105] - GENERATED CALL = (i).rangeTo(90).start
2021-03-11 10:53:01,796 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:53:01,797 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:53:01,797 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:53:01,959 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:01,963 [main:105] - GENERATED CALL = (i).toInt().and(388783145)
2021-03-11 10:53:01,963 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1632fabd]]
2021-03-11 10:53:01,963 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:53:01,963 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1632fabd]
2021-03-11 10:53:01,963 [main:105] - GENERATED CALL = (i).toShort().countOneBits()
2021-03-11 10:53:01,963 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@4af8e595]]
2021-03-11 10:53:01,963 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:53:02,093 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:02,096 [main:105] - GENERATED CALL = (i).rangeTo(-33).endInclusive
2021-03-11 10:53:02,096 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@140b0a8d]]
2021-03-11 10:53:02,096 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f]
2021-03-11 10:53:02,228 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:53:02,231 [main:105] - GENERATED CALL = (i).div(5873705597708973390).sign
2021-03-11 10:53:02,231 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:53:02,231 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:53:02,368 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:02,371 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:53:02,514 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:02,518 [main:105] - GENERATED CALL = (i).compareTo(430488435).xor(-2124000272)
2021-03-11 10:53:02,518 [main:63] - replacement of i of type Int is (i).div(0.2830767018772756).toInt()
2021-03-11 10:53:02,649 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:53:02,663 [main:56] - replacing (sum, Int)
2021-03-11 10:53:02,665 [main:38] - replacing sum Int
2021-03-11 10:53:02,665 [main:42] - Getting value of type Int
2021-03-11 10:53:02,796 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:02,799 [main:46] - GENERATED VALUE OF TYPE Int = -431678762
2021-03-11 10:53:02,799 [main:49] - GENERATED IS CALL =false
2021-03-11 10:53:03,096 [main:55] - randomType = LinkedHashSet<Long>
2021-03-11 10:53:03,222 [main:302] - generating value of type = LinkedHashSet<Long> false depth = 0
2021-03-11 10:53:03,355 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Long): LkedHashSet<Long> = TODO()
2021-03-11 10:53:03,359 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Long): LkedHashSet<Long> = TODO()
2021-03-11 10:53:03,489 [main:302] - generating value of type = Long true depth = 3
2021-03-11 10:53:03,492 [main:95] - GENERATED = linkedSetOf<Long>(396657288859526139)
2021-03-11 10:53:03,621 [main:66] - Generated call from random type = (linkedSetOf<Long>(396657288859526139)).size
2021-03-11 10:53:03,622 [main:94] - GETTING Int from MyIterator
2021-03-11 10:53:03,629 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:53:03,629 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:53:03,756 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:03,760 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.shr(1363155430)
2021-03-11 10:53:03,760 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:53:03,761 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:53:03,761 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:53:03,894 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:53:03,897 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext().compareTo(true)
2021-03-11 10:53:03,897 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:53:03,897 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:53:04,019 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:04,021 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.shl(-1891123440)
2021-03-11 10:53:04,022 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:53:04,022 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:53:04,022 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:53:04,147 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:04,150 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.or(59543720)
2021-03-11 10:53:04,150 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:53:04,150 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:53:04,339 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:04,344 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.minus(-4)
2021-03-11 10:53:04,344 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:53:04,344 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:53:04,344 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.inc()
2021-03-11 10:53:04,344 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:53:04,345 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:53:04,345 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.countOneBits()
2021-03-11 10:53:04,345 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:53:04,345 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:53:04,473 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:04,476 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.ushr(436403727)
2021-03-11 10:53:04,476 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:53:04,476 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:53:04,476 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.unaryMinus()
2021-03-11 10:53:04,476 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:53:04,476 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:53:04,477 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:53:04,601 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:04,603 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.shr(1330494984)
2021-03-11 10:53:04,603 [main:63] - replacement of sum of type Int is (MyCollection3().iterator()).k.unaryMinus()
2021-03-11 10:53:04,734 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:53:04,734 [main:66] - Compilation checking started
2021-03-11 10:53:05,127 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        (MyCollection3().iterator()).k.unaryMinus() = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:53:05,137 [main:56] - replacing (sum, Int)
2021-03-11 10:53:05,139 [main:38] - replacing sum Int
2021-03-11 10:53:05,139 [main:42] - Getting value of type Int
2021-03-11 10:53:05,267 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:05,270 [main:46] - GENERATED VALUE OF TYPE Int = 1481947052
2021-03-11 10:53:05,270 [main:49] - GENERATED IS CALL =false
2021-03-11 10:53:05,277 [main:55] - randomType = Double
2021-03-11 10:53:05,406 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:53:05,439 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@69f564bd]
2021-03-11 10:53:05,439 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@63c4310c]
2021-03-11 10:53:05,569 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:05,572 [main:66] - Generated call from random type = (0.36991490835203555).toShort().compareTo(107)
2021-03-11 10:53:05,573 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:53:05,580 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:53:05,580 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:53:05,580 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:53:05,580 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().takeLowestOneBit()
2021-03-11 10:53:05,580 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:53:05,580 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:53:05,580 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:53:05,580 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().unaryPlus()
2021-03-11 10:53:05,580 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:53:05,580 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:53:05,580 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:53:05,580 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().unaryMinus()
2021-03-11 10:53:05,580 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:53:05,580 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:53:05,581 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:53:05,581 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().toInt()
2021-03-11 10:53:05,581 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:53:05,581 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:53:05,581 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:53:05,709 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:05,712 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().and(1235963045)
2021-03-11 10:53:05,712 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:53:05,712 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:53:05,712 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:53:05,712 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().dec()
2021-03-11 10:53:05,712 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:53:05,712 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:53:05,712 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:53:05,840 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:05,844 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().rotateLeft(-979546655)
2021-03-11 10:53:05,844 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:53:05,844 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:53:05,844 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:53:05,973 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:05,976 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().plus(-107)
2021-03-11 10:53:05,976 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:53:05,976 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:53:05,977 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:53:06,105 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:06,108 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().rem(-14)
2021-03-11 10:53:06,108 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:53:06,108 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:53:06,108 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:53:06,236 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:06,239 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().compareTo(79)
2021-03-11 10:53:06,239 [main:63] - replacement of sum of type Int is (MyCollection2().iterator()).next().takeLowestOneBit()
2021-03-11 10:53:06,365 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:53:06,365 [main:66] - Compilation checking started
2021-03-11 10:53:06,720 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        (MyCollection2().iterator()).next().takeLowestOneBit() = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:53:06,729 [main:56] - replacing (sum, Int)
2021-03-11 10:53:06,731 [main:38] - replacing sum Int
2021-03-11 10:53:06,731 [main:42] - Getting value of type Int
2021-03-11 10:53:06,859 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:06,862 [main:46] - GENERATED VALUE OF TYPE Int = -333578281
2021-03-11 10:53:06,862 [main:49] - GENERATED IS CALL =false
2021-03-11 10:53:07,763 [main:55] - randomType = LinkedHashMap<Function2<MyCollection3, List<MyCollection4>, MyCollection4>, Sequence<Short>>
2021-03-11 10:53:07,889 [main:302] - generating value of type = LinkedHashMap<Function2<MyCollection3, List<MyCollection4>, MyCollection4>, Sequence<Short>> false depth = 0
2021-03-11 10:53:08,022 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Function2<MyCollection3, List<MyCollection4>, MyCollection4>, Sequence<Short>>): LkedHashMap<Function2<MyCollection3, List<MyCollection4>, MyCollection4>, Sequence<Short>> = TODO()
2021-03-11 10:53:08,026 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Function2<MyCollection3, List<MyCollection4>, MyCollection4>, Sequence<Short>>): LkedHashMap<Function2<MyCollection3, List<MyCollection4>, MyCollection4>, Sequence<Short>> = TODO()
2021-03-11 10:53:08,159 [main:302] - generating value of type = Pair<Function2<MyCollection3, List<MyCollection4>, MyCollection4>, Sequence<Short>> false depth = 3
2021-03-11 10:53:08,294 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Function2<MyCollection3, List<MyCollection4>, MyCollection4>, second: Sequence<Short>): Pair<Function2<MyCollection3, List<MyCollection4>, MyCollection4>, Sequence<Short>> = TODO()
2021-03-11 10:53:08,298 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Function2<MyCollection3, List<MyCollection4>, MyCollection4>, second: Sequence<Short>): Pair<Function2<MyCollection3, List<MyCollection4>, MyCollection4>, Sequence<Short>> = TODO()
2021-03-11 10:53:08,434 [main:302] - generating value of type = Function2<MyCollection3, List<MyCollection4>, MyCollection4> false depth = 6
2021-03-11 10:53:08,437 [main:302] - generating value of type = MyCollection4 false depth = 7
2021-03-11 10:53:08,440 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:53:08,564 [main:194] - Type params = []
2021-03-11 10:53:08,686 [main:302] - generating value of type = Sequence<Short> false depth = 6
2021-03-11 10:53:08,816 [main:43] - GENERATING CALL OF fun <T> emptySequence(): Sequence<Short> = TODO()
2021-03-11 10:53:08,819 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptySequence(): Sequence<Short> = TODO()
2021-03-11 10:53:08,946 [main:95] - GENERATED = emptySequence<Short>()
2021-03-11 10:53:08,946 [main:95] - GENERATED = Pair<Function2<MyCollection3, List<MyCollection4>, MyCollection4>, Sequence<Short>>({a: MyCollection3, b: List<MyCollection4> -> MyCollection4()}, emptySequence<Short>())
2021-03-11 10:53:08,947 [main:95] - GENERATED = linkedMapOf<Function2<MyCollection3, List<MyCollection4>, MyCollection4>, Sequence<Short>>(Pair<Function2<MyCollection3, List<MyCollection4>, MyCollection4>, Sequence<Short>>({a: MyCollection3, b: List<MyCollection4> -> MyCollection4()}, emptySequence<Short>()))
2021-03-11 10:53:09,175 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:53:09,176 [main:66] - Generated call from random type = (linkedMapOf<Function2<MyCollection3, List<MyCollection4>, MyCollection4>, Sequence<Short>>(Pair<Function2<MyCollection3, List<MyCollection4>, MyCollection4>, Sequence<Short>>({a: MyCollection3, b: List<MyCollection4> -> MyCollection4()}, emptySequence<Short>()))).size.inv()
2021-03-11 10:53:09,177 [main:94] - GETTING Int from Array<Int?>
2021-03-11 10:53:09,194 [main:101] - Case = [public inline fun <T> kotlin.Array<out T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e45404d]]
2021-03-11 10:53:09,194 [main:137] - GENERATING call of type public inline fun <T> kotlin.Array<out T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e45404d]
2021-03-11 10:53:09,321 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 10:53:09,324 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:53:09,327 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).indexOfLast({a: T -> true})
2021-03-11 10:53:09,327 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:53:09,327 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:53:09,464 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:09,467 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.coerceAtLeast(941940853)
2021-03-11 10:53:09,467 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:53:09,467 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:53:09,590 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:09,593 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.or(-1418748446)
2021-03-11 10:53:09,593 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@17f8ae0]]
2021-03-11 10:53:09,593 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@17f8ae0]
2021-03-11 10:53:09,593 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).count()
2021-03-11 10:53:09,593 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:53:09,593 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:53:09,593 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.inv()
2021-03-11 10:53:09,593 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2760da68], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:53:09,594 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2760da68]
2021-03-11 10:53:09,719 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:53:09,719 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:53:09,843 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:53:09,846 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).equals("dstnb").compareTo(true)
2021-03-11 10:53:09,846 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:53:09,846 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:53:09,973 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:09,977 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:53:09,977 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(1792828642)?.unaryMinus()
2021-03-11 10:53:09,977 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:53:09,977 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:53:10,104 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:10,107 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.div(-118)
2021-03-11 10:53:10,107 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:53:10,107 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:53:10,232 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:10,235 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:53:10,418 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:10,421 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-919330470)?.plus(17)
2021-03-11 10:53:10,421 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:53:10,421 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:53:10,546 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:10,550 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.shr(-234275849)
2021-03-11 10:53:10,550 [main:63] - replacement of sum of type Int is (arrayOfNulls<Int>(5)).get(1792828642)?.unaryMinus()
2021-03-11 10:53:10,675 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 10:53:10,675 [main:66] - Compilation checking started
2021-03-11 10:53:11,025 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        (arrayOfNulls<Int>(5)).get(1792828642)?.unaryMinus() = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:53:11,034 [main:56] - replacing (sum, Int)
2021-03-11 10:53:11,036 [main:38] - replacing sum Int
2021-03-11 10:53:11,036 [main:42] - Getting value of type Int
2021-03-11 10:53:11,160 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:11,162 [main:46] - GENERATED VALUE OF TYPE Int = 238642453
2021-03-11 10:53:11,163 [main:49] - GENERATED IS CALL =false
2021-03-11 10:53:11,310 [main:55] - randomType = ULong?
2021-03-11 10:53:11,439 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 10:53:11,476 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@581d996d]
2021-03-11 10:53:11,476 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@719372c6]
2021-03-11 10:53:11,476 [main:66] - Generated call from random type = (4240154442529472630.toULong())?.toShort().unaryPlus()
2021-03-11 10:53:11,477 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:53:11,486 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:53:11,486 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:53:11,486 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:53:11,613 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:11,616 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().and(-23862715)
2021-03-11 10:53:11,616 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:53:11,616 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:53:11,616 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:53:11,739 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:11,743 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().shl(-1005336589)
2021-03-11 10:53:11,743 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:53:11,743 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:53:11,743 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:53:11,867 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:11,870 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().rotateRight(197396042)
2021-03-11 10:53:11,870 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:53:11,870 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:53:11,870 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:53:11,995 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:12,122 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:12,125 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().coerceIn(764528236, 2127667275)
2021-03-11 10:53:12,126 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:53:12,126 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:53:12,126 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:53:12,249 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:12,252 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().rotateLeft(514086726)
2021-03-11 10:53:12,252 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]]
2021-03-11 10:53:12,252 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:53:12,252 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next()
2021-03-11 10:53:12,252 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:53:12,252 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:53:12,252 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:53:12,379 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:12,382 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().coerceAtLeast(-1682975880)
2021-03-11 10:53:12,382 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:53:12,382 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:53:12,382 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:53:12,382 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().inc()
2021-03-11 10:53:12,382 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:53:12,382 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:53:12,382 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:53:12,507 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:12,511 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().coerceAtMost(-740689798)
2021-03-11 10:53:12,511 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:53:12,511 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:53:12,511 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:53:12,636 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:12,639 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().xor(260163013)
2021-03-11 10:53:12,639 [main:63] - replacement of sum of type Int is (MyCollection1().iterator()).next().and(-23862715)
2021-03-11 10:53:12,765 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:53:12,765 [main:66] - Compilation checking started
2021-03-11 10:53:13,116 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        (MyCollection1().iterator()).next().and(-23862715) = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:53:13,126 [main:56] - replacing (i, Int)
2021-03-11 10:53:13,127 [main:38] - replacing i Int
2021-03-11 10:53:13,128 [main:42] - Getting value of type Int
2021-03-11 10:53:13,252 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:13,254 [main:46] - GENERATED VALUE OF TYPE Int = -38271997
2021-03-11 10:53:13,254 [main:49] - GENERATED IS CALL =false
2021-03-11 10:53:13,260 [main:55] - randomType = Char
2021-03-11 10:53:13,389 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:53:13,415 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5775f993]
2021-03-11 10:53:13,538 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:53:13,541 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:53:13,541 [main:66] - Generated call from random type = ('ꌶ').compareTo('').countOneBits()
2021-03-11 10:53:13,541 [main:63] - replacement of i of type Int is ('ꌶ').compareTo('').countOneBits()
2021-03-11 10:53:13,667 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:53:13,667 [main:66] - Compilation checking started
2021-03-11 10:53:14,023 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    ('ꌶ').compareTo('').countOneBits() = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:53:14,034 [main:56] - replacing (sum, Int)
2021-03-11 10:53:14,035 [main:38] - replacing sum Int
2021-03-11 10:53:14,036 [main:42] - Getting value of type Int
2021-03-11 10:53:14,160 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:14,163 [main:46] - GENERATED VALUE OF TYPE Int = 458608359
2021-03-11 10:53:14,163 [main:49] - GENERATED IS CALL =false
2021-03-11 10:53:14,169 [main:55] - randomType = UByte
2021-03-11 10:53:14,293 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:53:14,329 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@697a50b1]
2021-03-11 10:53:14,329 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@11d995f6]
2021-03-11 10:53:14,330 [main:66] - Generated call from random type = (54.toUByte()).toFloat().toBits()
2021-03-11 10:53:14,330 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:53:14,337 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:53:14,337 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:53:14,337 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:53:14,338 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().countLeadingZeroBits()
2021-03-11 10:53:14,338 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:53:14,338 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:53:14,338 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:53:14,466 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:14,469 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().xor(-235175493)
2021-03-11 10:53:14,469 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:53:14,469 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:53:14,469 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:53:14,598 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:14,601 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().compareTo(-26)
2021-03-11 10:53:14,601 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:53:14,601 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:53:14,601 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:53:14,601 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().takeHighestOneBit()
2021-03-11 10:53:14,602 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:53:14,602 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:53:14,602 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().absoluteValue
2021-03-11 10:53:14,602 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:53:14,602 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:53:14,602 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:53:14,602 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().inc()
2021-03-11 10:53:14,602 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:53:14,602 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:53:14,602 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:53:14,729 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:14,732 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().rotateRight(-218353942)
2021-03-11 10:53:14,732 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:53:14,732 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:53:14,732 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:53:14,856 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:14,859 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().div(77)
2021-03-11 10:53:14,859 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:53:14,859 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:53:14,859 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:53:14,860 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().unaryMinus()
2021-03-11 10:53:14,860 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:53:14,860 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:53:14,860 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:53:14,984 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:14,987 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().rotateLeft(572233685)
2021-03-11 10:53:14,987 [main:63] - replacement of sum of type Int is (MyCollection2().iterator()).next().compareTo(-26)
2021-03-11 10:53:15,114 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:53:15,115 [main:66] - Compilation checking started
2021-03-11 10:53:15,475 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    (MyCollection2().iterator()).next().compareTo(-26) = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in b) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:53:15,486 [main:56] - replacing (b, Array<Int?>)
2021-03-11 10:53:15,488 [main:38] - replacing b Array<Int?>
2021-03-11 10:53:15,488 [main:42] - Getting value of type Array<Int?>
2021-03-11 10:53:15,615 [main:302] - generating value of type = Array<Int?> false depth = 0
2021-03-11 10:53:15,751 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Int?): Array<Int?> = TODO()
2021-03-11 10:53:15,755 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Int?): Array<Int?> = TODO()
2021-03-11 10:53:16,190 [main:302] - generating value of type = Int true depth = 3
2021-03-11 10:53:16,193 [main:302] - generating value of type = Function1<Int, Int?> false depth = 3
2021-03-11 10:53:16,196 [main:302] - generating value of type = Int true depth = 4
2021-03-11 10:53:16,199 [main:95] - GENERATED = Array<Int?>(1451942154, {a: Int -> -569734402})
2021-03-11 10:53:16,199 [main:46] - GENERATED VALUE OF TYPE Array<Int?> = Array<Int?>(1451942154, {a: Int -> -569734402})
2021-03-11 10:53:16,199 [main:49] - GENERATED IS CALL =true
2021-03-11 10:53:16,205 [main:55] - randomType = Long
2021-03-11 10:53:16,327 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:53:16,365 [main:94] - GETTING Array<Int?> from MyIterator
2021-03-11 10:53:16,372 [main:94] - GETTING Array<Int?> from Iterator<Int>
2021-03-11 10:53:16,380 [main:94] - GETTING Array<Int?> from Int
2021-03-11 10:53:16,416 [main:94] - GETTING Array<Int?> from Int
2021-03-11 10:53:16,417 [main:94] - GETTING Array<Int?> from Int
2021-03-11 10:53:16,417 [main:94] - GETTING Array<Int?> from Array<Int?>
2021-03-11 10:53:16,431 [main:101] - Case = [public fun <T> kotlin.Array<T>.sliceArray(indices: kotlin.collections.Collection<kotlin.Int>): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7940abfb]]
2021-03-11 10:53:16,431 [main:137] - GENERATING call of type public fun <T> kotlin.Array<T>.sliceArray(indices: kotlin.collections.Collection<kotlin.Int>): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7940abfb]
2021-03-11 10:53:16,609 [main:302] - generating value of type = Collection<Int> false depth = 0
2021-03-11 10:53:16,750 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): Collection<Int> = TODO()
2021-03-11 10:53:16,754 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): Collection<Int> = TODO()
2021-03-11 10:53:16,887 [main:95] - GENERATED = hashSetOf<Int>()
2021-03-11 10:53:16,887 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())
2021-03-11 10:53:16,887 [main:101] - Case = [public fun <T> kotlin.Array<T>.reversedArray(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1f7c53ea]]
2021-03-11 10:53:16,887 [main:137] - GENERATING call of type public fun <T> kotlin.Array<T>.reversedArray(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1f7c53ea]
2021-03-11 10:53:16,887 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).reversedArray()
2021-03-11 10:53:16,887 [main:101] - Case = [public fun <T : kotlin.Comparable<T>> kotlin.Array<T>.sortedArray(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@62c4b0c7]]
2021-03-11 10:53:16,887 [main:137] - GENERATING call of type public fun <T : kotlin.Comparable<T>> kotlin.Array<T>.sortedArray(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@62c4b0c7]
2021-03-11 10:53:16,887 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).sortedArray()
2021-03-11 10:53:16,888 [main:101] - Case = [public fun <T : kotlin.Any> kotlin.Array<T?>.requireNoNulls(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3358e940]]
2021-03-11 10:53:16,888 [main:137] - GENERATING call of type public fun <T : kotlin.Any> kotlin.Array<T?>.requireNoNulls(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3358e940]
2021-03-11 10:53:16,888 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).requireNoNulls()
2021-03-11 10:53:16,888 [main:101] - Case = [public fun <T : kotlin.Comparable<T>> kotlin.Array<T>.sortedArrayDescending(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@508fd8b1]]
2021-03-11 10:53:16,888 [main:137] - GENERATING call of type public fun <T : kotlin.Comparable<T>> kotlin.Array<T>.sortedArrayDescending(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@508fd8b1]
2021-03-11 10:53:16,888 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).sortedArrayDescending()
2021-03-11 10:53:16,888 [main:63] - replacement of b of type Array<Int?> is (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())
2021-03-11 10:53:17,010 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:53:17,011 [main:66] - Compilation checking started
2021-03-11 10:53:17,516 [main:53] - Result = true
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:53:17,525 [main:56] - replacing (MyIterator(), MyIterator)
2021-03-11 10:53:17,525 [main:38] - replacing MyIterator() MyIterator
2021-03-11 10:53:17,525 [main:42] - Getting value of type MyIterator
2021-03-11 10:53:17,658 [main:302] - generating value of type = MyIterator false depth = 0
2021-03-11 10:53:17,661 [main:112] - generating klass MyIterator text = class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
2021-03-11 10:53:17,661 [main:46] - GENERATED VALUE OF TYPE MyIterator = 
2021-03-11 10:53:17,672 [main:55] - randomType = MyCollection3
2021-03-11 10:53:17,800 [main:302] - generating value of type = MyCollection3 false depth = 0
2021-03-11 10:53:17,803 [main:112] - generating klass MyCollection3 text = class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}
2021-03-11 10:53:17,932 [main:194] - Type params = []
2021-03-11 10:53:18,065 [main:137] - GENERATING call of type public final operator fun iterator(): MyCollection3.MyIterator defined in MyCollection3[SimpleFunctionDescriptorImpl@9bfc232]
2021-03-11 10:53:18,065 [main:66] - Generated call from random type = (MyCollection3()).iterator()
2021-03-11 10:53:18,065 [main:94] - GETTING MyIterator from MyIterator
2021-03-11 10:53:18,072 [main:63] - replacement of MyIterator() of type MyIterator is MyCollection4().iterator()
2021-03-11 10:53:18,200 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:53:18,201 [main:66] - Compilation checking started
2021-03-11 10:53:18,555 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyCollection4().iterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:53:18,565 [main:56] - replacing (sum, Int)
2021-03-11 10:53:18,567 [main:38] - replacing sum Int
2021-03-11 10:53:18,567 [main:42] - Getting value of type Int
2021-03-11 10:53:18,696 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:18,699 [main:46] - GENERATED VALUE OF TYPE Int = 1763545726
2021-03-11 10:53:18,699 [main:49] - GENERATED IS CALL =false
2021-03-11 10:53:18,851 [main:55] - randomType = Byte?
2021-03-11 10:53:18,980 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:19,031 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6b8bfcfc]
2021-03-11 10:53:19,159 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:19,163 [main:66] - Generated call from random type = (-76)?.compareTo(62)
2021-03-11 10:53:19,164 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:53:19,171 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]]
2021-03-11 10:53:19,171 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:53:19,171 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next()
2021-03-11 10:53:19,172 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:53:19,172 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:53:19,172 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().absoluteValue
2021-03-11 10:53:19,172 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:53:19,172 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:53:19,172 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:53:19,299 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:19,302 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().times(77)
2021-03-11 10:53:19,302 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:53:19,302 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:53:19,302 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:53:19,302 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().toInt()
2021-03-11 10:53:19,302 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:53:19,302 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:53:19,302 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:53:19,302 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().takeLowestOneBit()
2021-03-11 10:53:19,302 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:53:19,302 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:53:19,302 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:53:19,303 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().countLeadingZeroBits()
2021-03-11 10:53:19,303 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:53:19,303 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:53:19,303 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:53:19,434 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:19,437 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().coerceAtLeast(1233874230)
2021-03-11 10:53:19,437 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:53:19,437 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:53:19,437 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:53:19,568 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:19,571 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().shl(187112238)
2021-03-11 10:53:19,571 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:53:19,571 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:53:19,571 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:53:19,697 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:19,700 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().and(1745574712)
2021-03-11 10:53:19,700 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:53:19,700 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:53:19,700 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:53:19,700 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().unaryMinus()
2021-03-11 10:53:19,700 [main:63] - replacement of sum of type Int is 1763545726
2021-03-11 10:53:19,831 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 10:53:19,831 [main:66] - Compilation checking started
2021-03-11 10:53:20,195 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    1763545726 = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:53:20,209 [main:56] - replacing (sum, Int)
2021-03-11 10:53:20,211 [main:38] - replacing sum Int
2021-03-11 10:53:20,211 [main:42] - Getting value of type Int
2021-03-11 10:53:20,345 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:20,347 [main:46] - GENERATED VALUE OF TYPE Int = 246314281
2021-03-11 10:53:20,347 [main:49] - GENERATED IS CALL =false
2021-03-11 10:53:20,353 [main:55] - randomType = UShort
2021-03-11 10:53:20,488 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 10:53:20,531 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UShort.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3e3ebd]
2021-03-11 10:53:20,532 [main:66] - Generated call from random type = (29110.toUShort()).countOneBits()
2021-03-11 10:53:20,532 [main:94] - GETTING Int from Int
2021-03-11 10:53:20,580 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@719372c6]]
2021-03-11 10:53:20,580 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:53:20,580 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@719372c6]
2021-03-11 10:53:20,580 [main:105] - GENERATED CALL = (el ?: 0).toShort().unaryPlus()
2021-03-11 10:53:20,580 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:53:20,580 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:53:20,580 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:53:20,580 [main:105] - GENERATED CALL = (el ?: 0).toInt().countOneBits()
2021-03-11 10:53:20,580 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:53:20,581 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:53:20,715 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:20,718 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:53:20,844 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:20,847 [main:105] - GENERATED CALL = (el ?: 0).compareTo(696511293).and(-699682902)
2021-03-11 10:53:20,847 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:53:20,847 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:53:20,847 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:53:20,973 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:20,977 [main:105] - GENERATED CALL = (el ?: 0).toInt().minus(-25)
2021-03-11 10:53:20,977 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3f4ea447]]
2021-03-11 10:53:20,977 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:53:21,102 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:21,105 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3f4ea447]
2021-03-11 10:53:21,105 [main:105] - GENERATED CALL = (el ?: 0).rangeTo(60).random()
2021-03-11 10:53:21,105 [main:101] - Case = [@kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:53:21,105 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:53:21,236 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:21,239 [main:105] - GENERATED CALL = (el ?: 0).rem(-96)
2021-03-11 10:53:21,239 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5775f993]]
2021-03-11 10:53:21,239 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:53:21,239 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5775f993]
2021-03-11 10:53:21,367 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:53:21,370 [main:105] - GENERATED CALL = (el ?: 0).toChar().compareTo('')
2021-03-11 10:53:21,370 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@f49fa44]]
2021-03-11 10:53:21,370 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:53:21,370 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@f49fa44]
2021-03-11 10:53:21,370 [main:105] - GENERATED CALL = (el ?: 0).toByte().unaryPlus()
2021-03-11 10:53:21,370 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:53:21,370 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:53:21,497 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:21,499 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:53:21,500 [main:105] - GENERATED CALL = (el ?: 0).compareTo(2061546535).unaryPlus()
2021-03-11 10:53:21,500 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97], public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@6ec53a5]]
2021-03-11 10:53:21,500 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97]
2021-03-11 10:53:21,500 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@6ec53a5]
2021-03-11 10:53:21,500 [main:105] - GENERATED CALL = (el ?: 0).toLong().toInt()
2021-03-11 10:53:21,500 [main:63] - replacement of sum of type Int is (el ?: 0).toInt().minus(-25)
2021-03-11 10:53:21,628 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:53:21,629 [main:66] - Compilation checking started
2021-03-11 10:53:21,997 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        (el ?: 0).toInt().minus(-25) = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:53:22,006 [main:56] - replacing (sum, Int)
2021-03-11 10:53:22,008 [main:38] - replacing sum Int
2021-03-11 10:53:22,008 [main:42] - Getting value of type Int
2021-03-11 10:53:22,146 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:22,149 [main:46] - GENERATED VALUE OF TYPE Int = 1797376779
2021-03-11 10:53:22,149 [main:49] - GENERATED IS CALL =false
2021-03-11 10:53:22,293 [main:55] - randomType = Short
2021-03-11 10:53:22,422 [main:302] - generating value of type = Short true depth = 0
2021-03-11 10:53:22,477 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:53:22,477 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:53:22,604 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:22,607 [main:66] - Generated call from random type = (-6860).toInt().rotateRight(-2005339544)
2021-03-11 10:53:22,608 [main:94] - GETTING Int from MyIterator
2021-03-11 10:53:22,613 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:53:22,613 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:53:22,613 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.countTrailingZeroBits()
2021-03-11 10:53:22,613 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@149259da], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:53:22,613 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@149259da]
2021-03-11 10:53:22,613 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:53:22,741 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:53:22,744 [main:105] - GENERATED CALL = (MyCollection4().iterator()).hasNext().compareTo(false)
2021-03-11 10:53:22,744 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:53:22,744 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:53:22,744 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.dec()
2021-03-11 10:53:22,744 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508]]
2021-03-11 10:53:22,744 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k
2021-03-11 10:53:22,744 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:53:22,744 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:53:22,921 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:22,924 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.compareTo(-85)
2021-03-11 10:53:22,924 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:53:22,924 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:53:23,051 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:23,054 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.shl(-1266472710)
2021-03-11 10:53:23,054 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:53:23,054 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:53:23,183 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:23,186 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.and(-1947542475)
2021-03-11 10:53:23,186 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:53:23,186 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:53:23,313 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:23,316 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.coerceAtMost(250652099)
2021-03-11 10:53:23,316 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:53:23,316 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:53:23,316 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.takeLowestOneBit()
2021-03-11 10:53:23,316 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:53:23,316 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:53:23,316 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.inv()
2021-03-11 10:53:23,317 [main:63] - replacement of sum of type Int is (MyCollection4().iterator()).k.compareTo(-85)
2021-03-11 10:53:23,441 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:53:23,442 [main:66] - Compilation checking started
2021-03-11 10:53:23,803 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        (MyCollection4().iterator()).k.compareTo(-85) = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:53:23,812 [main:56] - replacing (sum, Int)
2021-03-11 10:53:23,813 [main:38] - replacing sum Int
2021-03-11 10:53:23,813 [main:42] - Getting value of type Int
2021-03-11 10:53:23,942 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:23,945 [main:46] - GENERATED VALUE OF TYPE Int = -652650501
2021-03-11 10:53:23,945 [main:49] - GENERATED IS CALL =false
2021-03-11 10:53:23,951 [main:55] - randomType = UShort
2021-03-11 10:53:24,077 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 10:53:24,103 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@284e49cf]
2021-03-11 10:53:24,103 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1503d0ee]
2021-03-11 10:53:24,103 [main:66] - Generated call from random type = (26098.toUShort()).toByte().unaryMinus()
2021-03-11 10:53:24,104 [main:94] - GETTING Int from Int
2021-03-11 10:53:24,145 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3b9b155c]]
2021-03-11 10:53:24,145 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:53:24,145 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3b9b155c]
2021-03-11 10:53:24,145 [main:105] - GENERATED CALL = (sum).toShort().unaryMinus()
2021-03-11 10:53:24,145 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@719372c6]]
2021-03-11 10:53:24,145 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:53:24,145 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@719372c6]
2021-03-11 10:53:24,145 [main:105] - GENERATED CALL = (sum).toShort().unaryPlus()
2021-03-11 10:53:24,145 [main:101] - Case = [@kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:53:24,145 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:53:24,278 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:24,282 [main:105] - GENERATED CALL = (sum).rem(-128)
2021-03-11 10:53:24,282 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:53:24,282 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:53:24,282 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:53:24,415 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:24,418 [main:105] - GENERATED CALL = (sum).toInt().ushr(-694422460)
2021-03-11 10:53:24,418 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@57d953ba]]
2021-03-11 10:53:24,418 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:53:24,418 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@57d953ba]
2021-03-11 10:53:24,418 [main:105] - GENERATED CALL = (sum).toByte().toInt()
2021-03-11 10:53:24,418 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6abd8a99]]
2021-03-11 10:53:24,418 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:53:24,418 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6abd8a99]
2021-03-11 10:53:24,547 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:24,550 [main:105] - GENERATED CALL = (sum).toShort().plus(-3)
2021-03-11 10:53:24,550 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12f06cb], public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@74f66b42]]
2021-03-11 10:53:24,550 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12f06cb]
2021-03-11 10:53:24,550 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@74f66b42]
2021-03-11 10:53:24,550 [main:105] - GENERATED CALL = (sum).toDouble().toInt()
2021-03-11 10:53:24,550 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], public final val step: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@d97c869]]
2021-03-11 10:53:24,550 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:53:24,678 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:24,682 [main:105] - GENERATED CALL = (sum).rangeTo(-3).step
2021-03-11 10:53:24,682 [main:101] - Case = [public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:53:24,682 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:53:24,682 [main:105] - GENERATED CALL = (sum).toInt()
2021-03-11 10:53:24,682 [main:101] - Case = [public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:53:24,682 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:53:24,812 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:24,815 [main:105] - GENERATED CALL = (sum).and(-519412490)
2021-03-11 10:53:24,815 [main:63] - replacement of sum of type Int is -652650501
2021-03-11 10:53:24,944 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 10:53:24,945 [main:66] - Compilation checking started
2021-03-11 10:53:25,315 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    -652650501 = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:53:25,325 [main:56] - replacing (sum, Int)
2021-03-11 10:53:25,327 [main:38] - replacing sum Int
2021-03-11 10:53:25,327 [main:42] - Getting value of type Int
2021-03-11 10:53:25,456 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:25,459 [main:46] - GENERATED VALUE OF TYPE Int = 518516478
2021-03-11 10:53:25,459 [main:49] - GENERATED IS CALL =false
2021-03-11 10:53:25,758 [main:55] - randomType = Set<Sequence<String>>
2021-03-11 10:53:25,759 [main:94] - GETTING Int from Int
2021-03-11 10:53:25,803 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:53:25,803 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:53:25,929 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:25,932 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:53:26,060 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:26,063 [main:105] - GENERATED CALL = (sum).compareTo(-175858832).ushr(1923247763)
2021-03-11 10:53:26,063 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@21bef933]]
2021-03-11 10:53:26,063 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:53:26,063 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@21bef933]
2021-03-11 10:53:26,192 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:26,195 [main:105] - GENERATED CALL = (sum).toByte().div(88)
2021-03-11 10:53:26,195 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4751263b]]
2021-03-11 10:53:26,195 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97]
2021-03-11 10:53:26,196 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4751263b]
2021-03-11 10:53:26,322 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:26,326 [main:105] - GENERATED CALL = (sum).toLong().compareTo(-16)
2021-03-11 10:53:26,326 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@62aaa4bd]]
2021-03-11 10:53:26,326 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:53:26,326 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@62aaa4bd]
2021-03-11 10:53:26,326 [main:105] - GENERATED CALL = (sum).toFloat().roundToInt()
2021-03-11 10:53:26,326 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@f49fa44]]
2021-03-11 10:53:26,326 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:53:26,326 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@f49fa44]
2021-03-11 10:53:26,326 [main:105] - GENERATED CALL = (sum).toByte().unaryPlus()
2021-03-11 10:53:26,326 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@13c687d3]]
2021-03-11 10:53:26,326 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:53:26,326 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@13c687d3]
2021-03-11 10:53:26,455 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:26,458 [main:105] - GENERATED CALL = (sum).toFloat().compareTo(10)
2021-03-11 10:53:26,458 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:53:26,458 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:53:26,458 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:53:26,459 [main:105] - GENERATED CALL = (sum).toInt().countTrailingZeroBits()
2021-03-11 10:53:26,459 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6cf21a44]]
2021-03-11 10:53:26,459 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:53:26,459 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6cf21a44]
2021-03-11 10:53:26,583 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:26,585 [main:105] - GENERATED CALL = (sum).toByte().plus(-82)
2021-03-11 10:53:26,586 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@674346bc]]
2021-03-11 10:53:26,586 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f]
2021-03-11 10:53:26,712 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:53:26,715 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@674346bc]
2021-03-11 10:53:26,715 [main:105] - GENERATED CALL = (sum).div(-6334991784300622517).countTrailingZeroBits()
2021-03-11 10:53:26,715 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:53:26,715 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:53:26,842 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:26,845 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:53:26,971 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:27,103 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:27,106 [main:105] - GENERATED CALL = (sum).compareTo(-1786636979).coerceIn(1587946807, 368059535)
2021-03-11 10:53:27,106 [main:63] - replacement of sum of type Int is sum
2021-03-11 10:53:27,233 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 10:53:27,242 [main:56] - replacing (sum, Int)
2021-03-11 10:53:27,244 [main:38] - replacing sum Int
2021-03-11 10:53:27,244 [main:42] - Getting value of type Int
2021-03-11 10:53:27,370 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:27,374 [main:46] - GENERATED VALUE OF TYPE Int = -693061086
2021-03-11 10:53:27,374 [main:49] - GENERATED IS CALL =false
2021-03-11 10:53:27,527 [main:55] - randomType = HashSet<MyCollection3>
2021-03-11 10:53:27,653 [main:302] - generating value of type = HashSet<MyCollection3> false depth = 0
2021-03-11 10:53:27,787 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: MyCollection3): HashSet<MyCollection3> = TODO()
2021-03-11 10:53:27,790 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: MyCollection3): HashSet<MyCollection3> = TODO()
2021-03-11 10:53:27,920 [main:302] - generating value of type = MyCollection3 false depth = 3
2021-03-11 10:53:27,923 [main:112] - generating klass MyCollection3 text = class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}
2021-03-11 10:53:28,048 [main:194] - Type params = []
2021-03-11 10:53:28,177 [main:95] - GENERATED = hashSetOf<MyCollection3>(MyCollection3())
2021-03-11 10:53:28,288 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@6d67d52d]
2021-03-11 10:53:28,289 [main:137] - GENERATING call of type public fun <@kotlin.internal.OnlyInputTypes T> kotlin.Array<out T>.indexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@534707bb]
2021-03-11 10:53:28,418 [main:66] - Generated call from random type = (hashSetOf<MyCollection3>(MyCollection3())).toArray().indexOf(null)
2021-03-11 10:53:28,418 [main:63] - replacement of sum of type Int is (hashSetOf<MyCollection3>(MyCollection3())).toArray().indexOf(null)
2021-03-11 10:53:28,545 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:53:28,545 [main:66] - Compilation checking started
2021-03-11 10:53:28,939 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    (hashSetOf<MyCollection3>(MyCollection3())).toArray().indexOf(null) = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:53:28,948 [main:56] - replacing (sum, Int)
2021-03-11 10:53:28,950 [main:38] - replacing sum Int
2021-03-11 10:53:28,950 [main:42] - Getting value of type Int
2021-03-11 10:53:29,136 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:29,139 [main:46] - GENERATED VALUE OF TYPE Int = -854433510
2021-03-11 10:53:29,139 [main:49] - GENERATED IS CALL =false
2021-03-11 10:53:29,314 [main:55] - randomType = Triple<Double, MyCollection1, Char>
2021-03-11 10:53:29,442 [main:302] - generating value of type = Triple<Double, MyCollection1, Char> false depth = 0
2021-03-11 10:53:29,579 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Double, second: MyCollection1, third: Char): Triple<Double, MyCollection1, Char> = TODO()
2021-03-11 10:53:29,582 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Double, second: MyCollection1, third: Char): Triple<Double, MyCollection1, Char> = TODO()
2021-03-11 10:53:29,719 [main:302] - generating value of type = Double true depth = 3
2021-03-11 10:53:29,722 [main:302] - generating value of type = MyCollection1 false depth = 3
2021-03-11 10:53:29,725 [main:112] - generating klass MyCollection1 text = class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}
2021-03-11 10:53:29,855 [main:194] - Type params = []
2021-03-11 10:53:29,985 [main:302] - generating value of type = Char true depth = 3
2021-03-11 10:53:29,988 [main:95] - GENERATED = Triple<Double, MyCollection1, Char>(0.683316993740891, MyCollection1(), '凣')
2021-03-11 10:53:30,003 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Triple[DeserializedSimpleFunctionDescriptor@316fb30c]
2021-03-11 10:53:30,135 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:53:30,136 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:53:30,264 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:53:30,267 [main:66] - Generated call from random type = (Triple<Double, MyCollection1, Char>(0.683316993740891, MyCollection1(), '凣')).equals("wjoqs").compareTo(true)
2021-03-11 10:53:30,267 [main:63] - replacement of sum of type Int is (Triple<Double, MyCollection1, Char>(0.683316993740891, MyCollection1(), '凣')).equals("wjoqs").compareTo(true)
2021-03-11 10:53:30,395 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:53:30,395 [main:66] - Compilation checking started
2021-03-11 10:53:30,759 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        (Triple<Double, MyCollection1, Char>(0.683316993740891, MyCollection1(), '凣')).equals("wjoqs").compareTo(true) = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:53:30,769 [main:56] - replacing (sum, Int)
2021-03-11 10:53:30,770 [main:38] - replacing sum Int
2021-03-11 10:53:30,770 [main:42] - Getting value of type Int
2021-03-11 10:53:30,902 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:30,904 [main:46] - GENERATED VALUE OF TYPE Int = -853292906
2021-03-11 10:53:30,905 [main:49] - GENERATED IS CALL =false
2021-03-11 10:53:30,916 [main:55] - randomType = MyCollection4
2021-03-11 10:53:31,045 [main:302] - generating value of type = MyCollection4 false depth = 0
2021-03-11 10:53:31,048 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:53:31,184 [main:194] - Type params = []
2021-03-11 10:53:31,323 [main:137] - GENERATING call of type public final operator fun iterator(): MyCollection3.MyIterator defined in MyCollection4[SimpleFunctionDescriptorImpl@3d622821]
2021-03-11 10:53:31,324 [main:66] - Generated call from random type = (MyCollection4()).iterator().k
2021-03-11 10:53:31,324 [main:94] - GETTING Int from Int
2021-03-11 10:53:31,364 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62c19a2]]
2021-03-11 10:53:31,364 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:53:31,364 [main:137] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62c19a2]
2021-03-11 10:53:31,364 [main:105] - GENERATED CALL = (sum).toChar().digitToInt()
2021-03-11 10:53:31,364 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:53:31,364 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:53:31,364 [main:105] - GENERATED CALL = (sum).countTrailingZeroBits()
2021-03-11 10:53:31,364 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:53:31,364 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:53:31,364 [main:105] - GENERATED CALL = (sum).countLeadingZeroBits()
2021-03-11 10:53:31,365 [main:101] - Case = [public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:53:31,365 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:53:31,365 [main:105] - GENERATED CALL = (sum).unaryPlus()
2021-03-11 10:53:31,365 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:53:31,365 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:53:31,365 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:53:31,491 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:31,622 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:31,626 [main:105] - GENERATED CALL = (sum).toInt().coerceIn(-1996467762, -1004914366)
2021-03-11 10:53:31,626 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:53:31,626 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:53:31,626 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:53:31,626 [main:105] - GENERATED CALL = (sum).toInt().countLeadingZeroBits()
2021-03-11 10:53:31,626 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:53:31,626 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:53:31,754 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:31,757 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:53:31,885 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:31,888 [main:105] - GENERATED CALL = (sum).compareTo(1724606450).plus(-90)
2021-03-11 10:53:31,888 [main:101] - Case = [public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:53:31,888 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:53:32,015 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:32,018 [main:105] - GENERATED CALL = (sum).and(1311860117)
2021-03-11 10:53:32,018 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5775f993]]
2021-03-11 10:53:32,018 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:53:32,018 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5775f993]
2021-03-11 10:53:32,150 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:53:32,153 [main:105] - GENERATED CALL = (sum).toChar().compareTo('ꉩ')
2021-03-11 10:53:32,153 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1632fabd]]
2021-03-11 10:53:32,153 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:53:32,153 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1632fabd]
2021-03-11 10:53:32,154 [main:105] - GENERATED CALL = (sum).toShort().countOneBits()
2021-03-11 10:53:32,154 [main:63] - replacement of sum of type Int is -853292906
2021-03-11 10:53:32,282 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 10:53:32,283 [main:66] - Compilation checking started
2021-03-11 10:53:32,641 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    -853292906 = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:53:32,651 [main:56] - replacing (sum, Int)
2021-03-11 10:53:32,652 [main:38] - replacing sum Int
2021-03-11 10:53:32,652 [main:42] - Getting value of type Int
2021-03-11 10:53:32,784 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:32,786 [main:46] - GENERATED VALUE OF TYPE Int = -2122381369
2021-03-11 10:53:32,786 [main:49] - GENERATED IS CALL =false
2021-03-11 10:53:33,880 [main:55] - randomType = MutableMap<Function2<MyCollection4?, Byte?, Double>, Function1<List<MyCollection3>, Pair<MyCollection2, Int>>>
2021-03-11 10:53:33,881 [main:94] - GETTING Int from Array<Int?>
2021-03-11 10:53:33,893 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:53:33,893 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:53:34,027 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:34,030 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:53:34,030 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-874230525)?.inv()
2021-03-11 10:53:34,030 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:53:34,030 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:53:34,030 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.inc()
2021-03-11 10:53:34,030 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:53:34,031 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:53:34,160 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:34,163 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.xor(-691550023)
2021-03-11 10:53:34,163 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:53:34,163 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:53:34,291 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:34,294 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:53:34,294 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(621397562)?.unaryPlus()
2021-03-11 10:53:34,294 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:53:34,294 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:53:34,420 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:34,424 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:53:34,424 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-850922354)?.unaryMinus()
2021-03-11 10:53:34,424 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:53:34,424 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:53:34,424 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.countTrailingZeroBits()
2021-03-11 10:53:34,424 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:53:34,424 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:53:34,551 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:34,554 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.compareTo(-1)
2021-03-11 10:53:34,554 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.sumOf(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@43a4f469]]
2021-03-11 10:53:34,554 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.sumOf(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@43a4f469]
2021-03-11 10:53:34,680 [main:302] - generating value of type = Function1<T, Int> false depth = 0
2021-03-11 10:53:34,683 [main:302] - generating value of type = Int true depth = 1
2021-03-11 10:53:34,686 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).sumOf({a: T -> 1559542263})
2021-03-11 10:53:34,686 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:53:34,686 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:53:34,811 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:34,814 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.ushr(-1597183710)
2021-03-11 10:53:34,814 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:53:34,814 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:53:34,814 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.takeHighestOneBit()
2021-03-11 10:53:34,814 [main:63] - replacement of sum of type Int is (arrayOfNulls<Int>(5)).sumOf({a: T -> 1559542263})
2021-03-11 10:53:34,941 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:53:34,941 [main:66] - Compilation checking started
2021-03-11 10:53:35,386 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        (arrayOfNulls<Int>(5)).sumOf({a: T -> 1559542263}) = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:53:35,398 [main:56] - replacing (sum, Int)
2021-03-11 10:53:35,400 [main:38] - replacing sum Int
2021-03-11 10:53:35,400 [main:42] - Getting value of type Int
2021-03-11 10:53:35,529 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:35,532 [main:46] - GENERATED VALUE OF TYPE Int = -716356333
2021-03-11 10:53:35,532 [main:49] - GENERATED IS CALL =false
2021-03-11 10:53:35,674 [main:55] - randomType = Short
2021-03-11 10:53:35,802 [main:302] - generating value of type = Short true depth = 0
2021-03-11 10:53:35,839 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@63c4310c]
2021-03-11 10:53:35,965 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:35,968 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:53:36,095 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:36,098 [main:66] - Generated call from random type = (1343).compareTo(20).div(97)
2021-03-11 10:53:36,099 [main:94] - GETTING Int from Array<Int?>
2021-03-11 10:53:36,113 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:53:36,113 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:53:36,239 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:36,242 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.coerceAtLeast(-1426521094)
2021-03-11 10:53:36,242 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:53:36,242 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:53:36,371 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:36,375 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.div(123)
2021-03-11 10:53:36,375 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:53:36,375 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.absoluteValue
2021-03-11 10:53:36,375 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:53:36,375 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:53:36,375 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.unaryMinus()
2021-03-11 10:53:36,375 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:53:36,375 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:53:36,502 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:36,505 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:53:36,506 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-1848748255)?.inv()
2021-03-11 10:53:36,506 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:53:36,506 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:53:36,506 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.takeHighestOneBit()
2021-03-11 10:53:36,506 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:53:36,506 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:53:36,506 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.inc()
2021-03-11 10:53:36,506 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:53:36,506 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:53:36,634 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:36,637 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.shr(-907574696)
2021-03-11 10:53:36,637 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:53:36,637 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:53:36,765 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:36,768 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.rotateRight(-1193510280)
2021-03-11 10:53:36,768 [main:101] - Case = [public fun <@kotlin.internal.OnlyInputTypes T> kotlin.Array<out T>.lastIndexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7f0e5754]]
2021-03-11 10:53:36,768 [main:137] - GENERATING call of type public fun <@kotlin.internal.OnlyInputTypes T> kotlin.Array<out T>.lastIndexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7f0e5754]
2021-03-11 10:53:36,893 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).lastIndexOf(null)
2021-03-11 10:53:36,894 [main:63] - replacement of sum of type Int is (arrayOfNulls<Int>(5)).lastIndexOf(null)
2021-03-11 10:53:37,021 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:53:37,021 [main:66] - Compilation checking started
2021-03-11 10:53:37,415 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        (arrayOfNulls<Int>(5)).lastIndexOf(null) = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:53:37,425 [main:56] - replacing (sum, Int)
2021-03-11 10:53:37,428 [main:38] - replacing sum Int
2021-03-11 10:53:37,428 [main:42] - Getting value of type Int
2021-03-11 10:53:37,555 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:37,558 [main:46] - GENERATED VALUE OF TYPE Int = 211752979
2021-03-11 10:53:37,558 [main:49] - GENERATED IS CALL =false
2021-03-11 10:53:37,860 [main:55] - randomType = MutableMap<Byte?, Byte>
2021-03-11 10:53:37,860 [main:94] - GETTING Int from Int
2021-03-11 10:53:37,896 [main:101] - Case = [public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:53:37,897 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:53:38,024 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:38,027 [main:105] - GENERATED CALL = (sum).xor(-1623525943)
2021-03-11 10:53:38,027 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:53:38,027 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:53:38,156 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:38,159 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:53:38,287 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:38,290 [main:105] - GENERATED CALL = (sum).compareTo(-2088613767).minus(-39)
2021-03-11 10:53:38,290 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:53:38,290 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:53:38,417 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:38,420 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:53:38,547 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:38,550 [main:105] - GENERATED CALL = (sum).compareTo(2021353145).ushr(-1227990710)
2021-03-11 10:53:38,550 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:53:38,551 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:53:38,682 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:38,684 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:53:38,813 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:38,816 [main:105] - GENERATED CALL = (sum).compareTo(52332352).or(-488593367)
2021-03-11 10:53:38,816 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:53:38,816 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:53:38,816 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:53:38,816 [main:105] - GENERATED CALL = (sum).toInt().takeLowestOneBit()
2021-03-11 10:53:38,816 [main:101] - Case = [public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:53:38,816 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:53:38,817 [main:105] - GENERATED CALL = (sum).unaryPlus()
2021-03-11 10:53:38,817 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@26e773b5]]
2021-03-11 10:53:38,817 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:53:38,817 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@26e773b5]
2021-03-11 10:53:38,953 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:38,956 [main:105] - GENERATED CALL = (sum).toShort().minus(-80)
2021-03-11 10:53:38,956 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:53:38,956 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:53:38,956 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:53:39,085 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:39,088 [main:105] - GENERATED CALL = (sum).toInt().coerceAtMost(1062218246)
2021-03-11 10:53:39,088 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2b7987d7]]
2021-03-11 10:53:39,088 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:53:39,088 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2b7987d7]
2021-03-11 10:53:39,089 [main:105] - GENERATED CALL = (sum).toByte().countTrailingZeroBits()
2021-03-11 10:53:39,089 [main:101] - Case = [public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:53:39,089 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:53:39,219 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:39,222 [main:105] - GENERATED CALL = (sum).plus(-40)
2021-03-11 10:53:39,222 [main:63] - replacement of sum of type Int is sum
2021-03-11 10:53:39,351 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 10:53:39,360 [main:56] - replacing (MyCollection2(), MyCollection2)
2021-03-11 10:53:39,362 [main:38] - replacing MyCollection2() MyCollection2
2021-03-11 10:53:39,362 [main:42] - Getting value of type MyCollection2
2021-03-11 10:53:39,491 [main:302] - generating value of type = MyCollection2 false depth = 0
2021-03-11 10:53:39,493 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}
2021-03-11 10:53:39,622 [main:194] - Type params = []
2021-03-11 10:53:39,750 [main:46] - GENERATED VALUE OF TYPE MyCollection2 = MyCollection2()
2021-03-11 10:53:39,750 [main:49] - GENERATED IS CALL =true
2021-03-11 10:53:39,902 [main:55] - randomType = Double?
2021-03-11 10:53:40,035 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:53:40,084 [main:94] - GETTING MyCollection2 from MyIterator
2021-03-11 10:53:40,089 [main:94] - GETTING MyCollection2 from Int
2021-03-11 10:53:40,123 [main:94] - GETTING MyCollection2 from MyIterator
2021-03-11 10:53:40,124 [main:94] - GETTING MyCollection2 from Int
2021-03-11 10:53:40,125 [main:94] - GETTING MyCollection2 from Iterator<Int>
2021-03-11 10:53:40,133 [main:94] - GETTING MyCollection2 from Int
2021-03-11 10:53:40,134 [main:94] - GETTING MyCollection2 from Iterator<Int>
2021-03-11 10:53:40,134 [main:94] - GETTING MyCollection2 from Array<Int?>
2021-03-11 10:53:40,148 [main:63] - replacement of MyCollection2() of type MyCollection2 is MyCollection2()
2021-03-11 10:53:40,277 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 10:53:40,286 [main:56] - replacing (k, Int)
2021-03-11 10:53:40,287 [main:38] - replacing k Int
2021-03-11 10:53:40,287 [main:42] - Getting value of type Int
2021-03-11 10:53:40,415 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:40,418 [main:46] - GENERATED VALUE OF TYPE Int = -182646434
2021-03-11 10:53:40,418 [main:49] - GENERATED IS CALL =false
2021-03-11 10:53:40,573 [main:55] - randomType = MyCollection2?
2021-03-11 10:53:40,700 [main:302] - generating value of type = MyCollection2 false depth = 0
2021-03-11 10:53:40,702 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}
2021-03-11 10:53:40,829 [main:194] - Type params = []
2021-03-11 10:53:40,970 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@172ee667]
2021-03-11 10:53:41,098 [main:302] - generating value of type = Function1<T, Int> false depth = 0
2021-03-11 10:53:41,100 [main:302] - generating value of type = Int true depth = 1
2021-03-11 10:53:41,103 [main:66] - Generated call from random type = (MyCollection2())?.sumOf({a: T -> 858731960})
2021-03-11 10:53:41,103 [main:94] - GETTING Int from Int
2021-03-11 10:53:41,141 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@26e773b5]]
2021-03-11 10:53:41,141 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:53:41,141 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@26e773b5]
2021-03-11 10:53:41,281 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:41,284 [main:105] - GENERATED CALL = (i).toShort().minus(-43)
2021-03-11 10:53:41,284 [main:101] - Case = [public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:53:41,284 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:53:41,410 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:41,413 [main:105] - GENERATED CALL = (i).and(-1605305277)
2021-03-11 10:53:41,413 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1632fabd]]
2021-03-11 10:53:41,413 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:53:41,413 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1632fabd]
2021-03-11 10:53:41,413 [main:105] - GENERATED CALL = (i).toShort().countOneBits()
2021-03-11 10:53:41,413 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:53:41,413 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:53:41,413 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:53:41,608 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:41,611 [main:105] - GENERATED CALL = (i).toInt().xor(646947231)
2021-03-11 10:53:41,611 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:53:41,611 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:53:41,737 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:41,740 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:53:41,870 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:41,873 [main:105] - GENERATED CALL = (i).compareTo(1073113522).coerceAtLeast(2026084996)
2021-03-11 10:53:41,873 [main:101] - Case = [public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:53:41,873 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:53:42,000 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:42,003 [main:105] - GENERATED CALL = (i).shr(1816505123)
2021-03-11 10:53:42,003 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:53:42,003 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:53:42,003 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:53:42,129 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:42,132 [main:105] - GENERATED CALL = (i).toInt().div(-54)
2021-03-11 10:53:42,132 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62c19a2]]
2021-03-11 10:53:42,132 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:53:42,132 [main:137] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62c19a2]
2021-03-11 10:53:42,132 [main:105] - GENERATED CALL = (i).toChar().digitToInt()
2021-03-11 10:53:42,132 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4751263b]]
2021-03-11 10:53:42,132 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97]
2021-03-11 10:53:42,132 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4751263b]
2021-03-11 10:53:42,259 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:42,262 [main:105] - GENERATED CALL = (i).toLong().compareTo(21)
2021-03-11 10:53:42,262 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:53:42,262 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:53:42,262 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:53:42,389 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:42,392 [main:105] - GENERATED CALL = (i).toInt().rotateRight(-1469573923)
2021-03-11 10:53:42,392 [main:63] - replacement of k of type Int is (i).toChar().digitToInt()
2021-03-11 10:53:42,520 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:53:42,531 [main:56] - replacing (sum, Int)
2021-03-11 10:53:42,533 [main:38] - replacing sum Int
2021-03-11 10:53:42,533 [main:42] - Getting value of type Int
2021-03-11 10:53:42,663 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:42,666 [main:46] - GENERATED VALUE OF TYPE Int = -688486594
2021-03-11 10:53:42,666 [main:49] - GENERATED IS CALL =false
2021-03-11 10:53:42,820 [main:55] - randomType = MyCollection1?
2021-03-11 10:53:42,947 [main:302] - generating value of type = MyCollection1 false depth = 0
2021-03-11 10:53:42,949 [main:112] - generating klass MyCollection1 text = class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}
2021-03-11 10:53:43,078 [main:194] - Type params = []
2021-03-11 10:53:43,216 [main:137] - GENERATING call of type @kotlin.SinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.minByOrNull(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7fa2c491]
2021-03-11 10:53:43,344 [main:302] - generating value of type = Function1<T, R> false depth = 0
2021-03-11 10:53:43,347 [main:302] - generating value of type = R false depth = 1
2021-03-11 10:53:43,492 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: Boolean, block: T.()->Long): R = TODO()
2021-03-11 10:53:43,495 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: Boolean, block: T.()->Long): R = TODO()
2021-03-11 10:53:43,774 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 10:53:43,777 [main:385] - Cant generate call of fun <T, R> with(receiver: Boolean, block: T.()->Long): R = TODO()
2021-03-11 10:53:43,778 [main:66] - Generated call from random type = (MyCollection1())?.minByOrNull({a: T -> })!!
2021-03-11 10:53:43,778 [main:94] - GETTING Int from MyIterator
2021-03-11 10:53:43,783 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:53:43,784 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:53:43,910 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:43,913 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.shl(-512477845)
2021-03-11 10:53:43,913 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:53:43,913 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.sign
2021-03-11 10:53:43,913 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:53:43,913 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:53:44,041 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:44,044 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.ushr(-1660857577)
2021-03-11 10:53:44,044 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:53:44,044 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:53:44,171 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:44,174 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.div(102)
2021-03-11 10:53:44,174 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:53:44,174 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:53:44,174 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.inv()
2021-03-11 10:53:44,174 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:53:44,174 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:53:44,174 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.toInt()
2021-03-11 10:53:44,175 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:53:44,175 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:53:44,175 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.unaryMinus()
2021-03-11 10:53:44,175 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:53:44,175 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:53:44,300 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:44,303 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.minus(107)
2021-03-11 10:53:44,303 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:53:44,304 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:53:44,429 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:44,431 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.or(-630393072)
2021-03-11 10:53:44,432 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:53:44,432 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:53:44,558 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:44,561 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.xor(-1193103253)
2021-03-11 10:53:44,561 [main:63] - replacement of sum of type Int is (MyCollection4().iterator()).k.unaryMinus()
2021-03-11 10:53:44,687 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:53:44,687 [main:66] - Compilation checking started
2021-03-11 10:53:45,042 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        (MyCollection4().iterator()).k.unaryMinus() = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:53:45,052 [main:56] - replacing (sum, Int)
2021-03-11 10:53:45,052 [main:38] - replacing sum Int
2021-03-11 10:53:45,052 [main:42] - Getting value of type Int
2021-03-11 10:53:45,179 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:45,182 [main:46] - GENERATED VALUE OF TYPE Int = 528264009
2021-03-11 10:53:45,182 [main:49] - GENERATED IS CALL =false
2021-03-11 10:53:45,188 [main:55] - randomType = Boolean
2021-03-11 10:53:45,313 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:53:45,328 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:53:45,452 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:53:45,455 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:53:45,582 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:45,585 [main:66] - Generated call from random type = (true).compareTo(true).coerceAtMost(-440801516)
2021-03-11 10:53:45,585 [main:94] - GETTING Int from Int
2021-03-11 10:53:45,621 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1632fabd]]
2021-03-11 10:53:45,622 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:53:45,622 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1632fabd]
2021-03-11 10:53:45,622 [main:105] - GENERATED CALL = (sum).toShort().countOneBits()
2021-03-11 10:53:45,622 [main:101] - Case = [public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:53:45,622 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:53:45,749 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:45,752 [main:105] - GENERATED CALL = (sum).and(-1693901313)
2021-03-11 10:53:45,752 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a8376bf]]
2021-03-11 10:53:45,752 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f]
2021-03-11 10:53:45,881 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:53:45,884 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a8376bf]
2021-03-11 10:53:45,884 [main:105] - GENERATED CALL = (sum).div(-3531922764342001364).countOneBits()
2021-03-11 10:53:45,884 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:53:45,884 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:53:45,884 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:53:46,011 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:46,014 [main:105] - GENERATED CALL = (sum).toInt().times(96)
2021-03-11 10:53:46,014 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@140b0a8d]]
2021-03-11 10:53:46,014 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f]
2021-03-11 10:53:46,142 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:53:46,145 [main:105] - GENERATED CALL = (sum).div(7155520561408860173).sign
2021-03-11 10:53:46,145 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@26e773b5]]
2021-03-11 10:53:46,145 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:53:46,145 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@26e773b5]
2021-03-11 10:53:46,271 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:46,274 [main:105] - GENERATED CALL = (sum).toShort().minus(-119)
2021-03-11 10:53:46,274 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:53:46,274 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:53:46,274 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:53:46,410 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:46,413 [main:105] - GENERATED CALL = (sum).toInt().and(-229877366)
2021-03-11 10:53:46,413 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6abd8a99]]
2021-03-11 10:53:46,413 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:53:46,413 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6abd8a99]
2021-03-11 10:53:46,540 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:46,543 [main:105] - GENERATED CALL = (sum).toShort().plus(-65)
2021-03-11 10:53:46,543 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:53:46,543 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:53:46,543 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:53:46,543 [main:105] - GENERATED CALL = (sum).toInt().toInt()
2021-03-11 10:53:46,543 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:53:46,543 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:53:46,543 [main:105] - GENERATED CALL = (sum).countTrailingZeroBits()
2021-03-11 10:53:46,543 [main:63] - replacement of sum of type Int is (sum).div(7155520561408860173).sign
2021-03-11 10:53:46,674 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:53:46,684 [main:56] - replacing (sum, Int)
2021-03-11 10:53:46,686 [main:38] - replacing sum Int
2021-03-11 10:53:46,686 [main:42] - Getting value of type Int
2021-03-11 10:53:46,817 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:46,820 [main:46] - GENERATED VALUE OF TYPE Int = 1755222428
2021-03-11 10:53:46,820 [main:49] - GENERATED IS CALL =false
2021-03-11 10:53:47,121 [main:55] - randomType = LinkedHashSet<MyCollection4?>
2021-03-11 10:53:47,257 [main:302] - generating value of type = LinkedHashSet<MyCollection4?> false depth = 0
2021-03-11 10:53:47,392 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(): LinkedHashSet<MyCollection4?> = TODO()
2021-03-11 10:53:47,559 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(): LinkedHashSet<MyCollection4?> = TODO()
2021-03-11 10:53:47,690 [main:95] - GENERATED = LinkedHashSet<MyCollection4?>()
2021-03-11 10:53:47,824 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:53:48,033 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:48,036 [main:66] - Generated call from random type = (LinkedHashSet<MyCollection4?>()).size.ushr(1605025621)
2021-03-11 10:53:48,036 [main:94] - GETTING Int from Int
2021-03-11 10:53:48,078 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@55d433d4]]
2021-03-11 10:53:48,078 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:53:48,078 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@55d433d4]
2021-03-11 10:53:48,205 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:48,208 [main:105] - GENERATED CALL = (el ?: 0).toShort().div(43)
2021-03-11 10:53:48,208 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:53:48,208 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:53:48,208 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:53:48,334 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:48,337 [main:105] - GENERATED CALL = (el ?: 0).toInt().rem(-114)
2021-03-11 10:53:48,337 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:53:48,337 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:53:48,465 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:48,467 [main:105] - GENERATED CALL = (el ?: 0).rotateRight(-1604900598)
2021-03-11 10:53:48,468 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:53:48,468 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:53:48,468 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:53:48,595 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:48,598 [main:105] - GENERATED CALL = (el ?: 0).toInt().xor(953692477)
2021-03-11 10:53:48,598 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:53:48,598 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:53:48,728 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:48,731 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:53:48,861 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:48,864 [main:105] - GENERATED CALL = (el ?: 0).compareTo(31843682).compareTo(-25)
2021-03-11 10:53:48,864 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:53:48,864 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:53:48,996 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:48,999 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:53:49,124 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:49,127 [main:105] - GENERATED CALL = (el ?: 0).compareTo(-1461402064).plus(10)
2021-03-11 10:53:49,127 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@5e1f7c80]]
2021-03-11 10:53:49,127 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:53:49,127 [main:105] - GENERATED CALL = (el ?: 0).toChar().code
2021-03-11 10:53:49,127 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6b8bfcfc]]
2021-03-11 10:53:49,127 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:53:49,127 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6b8bfcfc]
2021-03-11 10:53:49,252 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:49,255 [main:105] - GENERATED CALL = (el ?: 0).toByte().compareTo(-4)
2021-03-11 10:53:49,255 [main:101] - Case = [public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:53:49,255 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:53:49,256 [main:105] - GENERATED CALL = (el ?: 0).dec()
2021-03-11 10:53:49,256 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:53:49,256 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:53:49,256 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:53:49,383 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:49,386 [main:105] - GENERATED CALL = (el ?: 0).toInt().shl(-655117734)
2021-03-11 10:53:49,386 [main:63] - replacement of sum of type Int is (el ?: 0).compareTo(31843682).compareTo(-25)
2021-03-11 10:53:49,519 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:53:49,519 [main:66] - Compilation checking started
2021-03-11 10:53:49,877 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        (el ?: 0).compareTo(31843682).compareTo(-25) = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:53:49,886 [main:56] - replacing (sum, Int)
2021-03-11 10:53:49,888 [main:38] - replacing sum Int
2021-03-11 10:53:49,888 [main:42] - Getting value of type Int
2021-03-11 10:53:50,014 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:50,017 [main:46] - GENERATED VALUE OF TYPE Int = -1408793062
2021-03-11 10:53:50,017 [main:49] - GENERATED IS CALL =false
2021-03-11 10:53:50,466 [main:55] - randomType = ArrayDeque<HashSet<Char>>
2021-03-11 10:53:50,597 [main:302] - generating value of type = ArrayDeque<HashSet<Char>> false depth = 0
2021-03-11 10:53:50,727 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<HashSet<Char>>): ArrayDeque<HashSet<Char>> = TODO()
2021-03-11 10:53:50,731 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<HashSet<Char>>): ArrayDeque<HashSet<Char>> = TODO()
2021-03-11 10:53:51,022 [main:302] - generating value of type = Collection<HashSet<Char>> false depth = 3
2021-03-11 10:53:51,156 [main:43] - GENERATING CALL OF fun <T> mutableSetOf(elements: HashSet<Char>): Collection<HashSet<Char>> = TODO()
2021-03-11 10:53:51,160 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableSetOf(elements: HashSet<Char>): Collection<HashSet<Char>> = TODO()
2021-03-11 10:53:51,289 [main:302] - generating value of type = HashSet<Char> false depth = 6
2021-03-11 10:53:51,421 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Char): HashSet<Char> = TODO()
2021-03-11 10:53:51,425 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Char): HashSet<Char> = TODO()
2021-03-11 10:53:51,555 [main:302] - generating value of type = Char true depth = 9
2021-03-11 10:53:51,558 [main:95] - GENERATED = hashSetOf<Char>('ǈ')
2021-03-11 10:53:51,558 [main:95] - GENERATED = mutableSetOf<HashSet<Char>>(hashSetOf<Char>('ǈ'))
2021-03-11 10:53:51,558 [main:95] - GENERATED = ArrayDeque<HashSet<Char>>(mutableSetOf<HashSet<Char>>(hashSetOf<Char>('ǈ')))
2021-03-11 10:53:51,733 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@4e4c636f]
2021-03-11 10:53:51,734 [main:66] - Generated call from random type = (ArrayDeque<HashSet<Char>>(mutableSetOf<HashSet<Char>>(hashSetOf<Char>('ǈ')))).toArray().size
2021-03-11 10:53:51,734 [main:94] - GETTING Int from MyIterator
2021-03-11 10:53:51,742 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:53:51,742 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:53:51,742 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.toInt()
2021-03-11 10:53:51,742 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:53:51,742 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:53:51,870 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:51,873 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.coerceAtMost(-1999273248)
2021-03-11 10:53:51,873 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:53:51,873 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:53:51,873 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.unaryMinus()
2021-03-11 10:53:51,874 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:53:51,874 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:53:51,874 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:53:51,874 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.inc()
2021-03-11 10:53:51,874 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:53:51,874 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:53:51,874 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:53:52,002 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:53:52,005 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext().compareTo(false)
2021-03-11 10:53:52,005 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:53:52,005 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:53:52,136 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:52,139 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.and(-328287135)
2021-03-11 10:53:52,139 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:53:52,139 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:53:52,139 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:53:52,139 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.dec()
2021-03-11 10:53:52,139 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:53:52,139 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:53:52,139 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:53:52,140 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.toInt()
2021-03-11 10:53:52,140 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:53:52,140 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:53:52,140 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:53:52,140 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.inv()
2021-03-11 10:53:52,140 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:53:52,140 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:53:52,140 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.countOneBits()
2021-03-11 10:53:52,140 [main:63] - replacement of sum of type Int is (MyCollection3().iterator()).k.unaryMinus()
2021-03-11 10:53:52,268 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:53:52,268 [main:66] - Compilation checking started
2021-03-11 10:53:52,646 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        (MyCollection3().iterator()).k.unaryMinus() = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:53:52,655 [main:56] - replacing (sum, Int)
2021-03-11 10:53:52,658 [main:38] - replacing sum Int
2021-03-11 10:53:52,658 [main:42] - Getting value of type Int
2021-03-11 10:53:52,784 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:52,787 [main:46] - GENERATED VALUE OF TYPE Int = -923356964
2021-03-11 10:53:52,787 [main:49] - GENERATED IS CALL =false
2021-03-11 10:53:52,971 [main:55] - randomType = Function2<MyCollection3, MyCollection3, MyCollection4>
2021-03-11 10:53:52,972 [main:94] - GETTING Int from MyIterator
2021-03-11 10:53:52,977 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:53:52,977 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:53:53,107 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:53,110 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.div(-50)
2021-03-11 10:53:53,110 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:53:53,110 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:53:53,110 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.countOneBits()
2021-03-11 10:53:53,110 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:53:53,110 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:53:53,110 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.inv()
2021-03-11 10:53:53,110 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:53:53,110 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:53:53,246 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:53,249 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.and(315337793)
2021-03-11 10:53:53,249 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@149259da], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:53:53,249 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@149259da]
2021-03-11 10:53:53,249 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:53:53,377 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:53:53,379 [main:105] - GENERATED CALL = (MyCollection4().iterator()).hasNext().compareTo(false)
2021-03-11 10:53:53,380 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:53:53,380 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:53:53,504 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:53,632 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:53,635 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.coerceIn(1068614042, 738635417)
2021-03-11 10:53:53,635 [main:101] - Case = [public final operator fun next(): kotlin.Int defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@8257a56]]
2021-03-11 10:53:53,635 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@8257a56]
2021-03-11 10:53:53,635 [main:105] - GENERATED CALL = (MyCollection4().iterator()).next()
2021-03-11 10:53:53,635 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:53:53,635 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:53:53,759 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:53,762 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.coerceAtLeast(-108625813)
2021-03-11 10:53:53,763 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:53:53,763 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:53:53,763 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.inc()
2021-03-11 10:53:53,763 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:53:53,763 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:53:53,887 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:53,890 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.plus(90)
2021-03-11 10:53:53,891 [main:63] - replacement of sum of type Int is (MyCollection4().iterator()).k.inv()
2021-03-11 10:53:54,015 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:53:54,016 [main:66] - Compilation checking started
2021-03-11 10:53:54,448 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    (MyCollection4().iterator()).k.inv() = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:53:54,457 [main:56] - replacing (sum, Int)
2021-03-11 10:53:54,459 [main:38] - replacing sum Int
2021-03-11 10:53:54,459 [main:42] - Getting value of type Int
2021-03-11 10:53:54,584 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:54,587 [main:46] - GENERATED VALUE OF TYPE Int = 1037629329
2021-03-11 10:53:54,587 [main:49] - GENERATED IS CALL =false
2021-03-11 10:53:54,593 [main:55] - randomType = Char
2021-03-11 10:53:54,729 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:53:54,752 [main:137] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@22a1cf7f]
2021-03-11 10:53:54,752 [main:66] - Generated call from random type = ('䡪').toInt()
2021-03-11 10:53:54,752 [main:63] - replacement of sum of type Int is ('䡪').toInt()
2021-03-11 10:53:54,878 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:53:54,878 [main:66] - Compilation checking started
2021-03-11 10:53:55,241 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        ('䡪').toInt() = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:53:55,250 [main:56] - replacing (sum, Int)
2021-03-11 10:53:55,252 [main:38] - replacing sum Int
2021-03-11 10:53:55,252 [main:42] - Getting value of type Int
2021-03-11 10:53:55,383 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:55,385 [main:46] - GENERATED VALUE OF TYPE Int = 425231888
2021-03-11 10:53:55,386 [main:49] - GENERATED IS CALL =false
2021-03-11 10:53:55,552 [main:55] - randomType = Pair<Double, MyCollection1>
2021-03-11 10:53:55,681 [main:302] - generating value of type = Pair<Double, MyCollection1> false depth = 0
2021-03-11 10:53:55,815 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Double, second: MyCollection1): Pair<Double, MyCollection1> = TODO()
2021-03-11 10:53:55,818 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Double, second: MyCollection1): Pair<Double, MyCollection1> = TODO()
2021-03-11 10:53:55,959 [main:302] - generating value of type = Double true depth = 3
2021-03-11 10:53:55,962 [main:302] - generating value of type = MyCollection1 false depth = 3
2021-03-11 10:53:55,965 [main:112] - generating klass MyCollection1 text = class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}
2021-03-11 10:53:56,093 [main:194] - Type params = []
2021-03-11 10:53:56,220 [main:95] - GENERATED = Pair<Double, MyCollection1>(0.17207570724257082, MyCollection1())
2021-03-11 10:53:56,231 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@5959e353]
2021-03-11 10:53:56,232 [main:66] - Generated call from random type = (Pair<Double, MyCollection1>(0.17207570724257082, MyCollection1())).first.roundToInt()
2021-03-11 10:53:56,233 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:53:56,237 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:53:56,237 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:53:56,237 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:53:56,237 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().toInt()
2021-03-11 10:53:56,238 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:53:56,238 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:53:56,238 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:53:56,365 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:56,368 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().rotateLeft(-783298965)
2021-03-11 10:53:56,368 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:53:56,368 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:53:56,368 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:53:56,492 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:56,495 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().div(60)
2021-03-11 10:53:56,495 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:53:56,495 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:53:56,495 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:53:56,627 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:56,631 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().coerceAtMost(-1814759525)
2021-03-11 10:53:56,631 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:53:56,631 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:53:56,631 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:53:56,631 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().countOneBits()
2021-03-11 10:53:56,631 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:53:56,631 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:53:56,631 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:53:56,759 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:56,762 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().or(-1610706411)
2021-03-11 10:53:56,762 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:53:56,763 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:53:56,763 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:53:56,893 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:56,895 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().minus(-41)
2021-03-11 10:53:56,896 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:53:56,896 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:53:56,896 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:53:56,896 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().inv()
2021-03-11 10:53:56,896 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:53:56,896 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:53:56,896 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:53:56,896 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().countTrailingZeroBits()
2021-03-11 10:53:56,896 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:53:56,896 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:53:56,896 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:53:57,024 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:57,027 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().rotateRight(1338183004)
2021-03-11 10:53:57,027 [main:63] - replacement of sum of type Int is (MyCollection2().iterator()).next().inv()
2021-03-11 10:53:57,160 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:53:57,160 [main:66] - Compilation checking started
2021-03-11 10:53:57,519 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        (MyCollection2().iterator()).next().inv() = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:53:57,529 [main:56] - replacing (MyIterator(), MyIterator)
2021-03-11 10:53:57,529 [main:38] - replacing MyIterator() MyIterator
2021-03-11 10:53:57,529 [main:42] - Getting value of type MyIterator
2021-03-11 10:53:57,653 [main:302] - generating value of type = MyIterator false depth = 0
2021-03-11 10:53:57,656 [main:112] - generating klass MyIterator text = class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
2021-03-11 10:53:57,656 [main:46] - GENERATED VALUE OF TYPE MyIterator = 
2021-03-11 10:53:57,662 [main:55] - randomType = Double
2021-03-11 10:53:57,791 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:53:57,823 [main:94] - GETTING MyIterator from MyIterator
2021-03-11 10:53:57,829 [main:63] - replacement of MyIterator() of type MyIterator is MyCollection3().iterator()
2021-03-11 10:53:57,954 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:53:57,954 [main:66] - Compilation checking started
2021-03-11 10:53:58,335 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyCollection3().iterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:53:58,345 [main:56] - replacing (el, Int)
2021-03-11 10:53:58,345 [main:38] - replacing el Int
2021-03-11 10:53:58,345 [main:42] - Getting value of type Int
2021-03-11 10:53:58,475 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:58,478 [main:46] - GENERATED VALUE OF TYPE Int = 108828749
2021-03-11 10:53:58,478 [main:49] - GENERATED IS CALL =false
2021-03-11 10:53:58,484 [main:55] - randomType = UByte
2021-03-11 10:53:58,613 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:53:58,654 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@56be5655]
2021-03-11 10:53:58,781 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:53:58,784 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:53:58,915 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:58,918 [main:66] - Generated call from random type = (55.toUByte()).compareTo(34.toUByte()).ushr(-2012208721)
2021-03-11 10:53:58,918 [main:94] - GETTING Int from Int
2021-03-11 10:53:58,966 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:53:58,966 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:53:58,966 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:53:59,112 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:53:59,115 [main:105] - GENERATED CALL = (i).toInt().times(-124)
2021-03-11 10:53:59,115 [main:101] - Case = [public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:53:59,115 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:53:59,258 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:59,261 [main:105] - GENERATED CALL = (i).coerceAtLeast(-2025640450)
2021-03-11 10:53:59,261 [main:101] - Case = [public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:53:59,261 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:53:59,393 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:59,396 [main:105] - GENERATED CALL = (i).or(240806930)
2021-03-11 10:53:59,396 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:53:59,396 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:53:59,396 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:53:59,527 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:59,530 [main:105] - GENERATED CALL = (i).toInt().rotateRight(-468157083)
2021-03-11 10:53:59,530 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:53:59,530 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:53:59,664 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:59,667 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:53:59,802 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:59,935 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:53:59,938 [main:105] - GENERATED CALL = (i).compareTo(-1689269350).coerceIn(682204216, 890756475)
2021-03-11 10:53:59,938 [main:101] - Case = [@kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:53:59,938 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:54:00,084 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:00,087 [main:105] - GENERATED CALL = (i).rem(77)
2021-03-11 10:54:00,087 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@719372c6]]
2021-03-11 10:54:00,088 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:54:00,088 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@719372c6]
2021-03-11 10:54:00,088 [main:105] - GENERATED CALL = (i).toShort().unaryPlus()
2021-03-11 10:54:00,088 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3b9b155c]]
2021-03-11 10:54:00,088 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:54:00,088 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3b9b155c]
2021-03-11 10:54:00,088 [main:105] - GENERATED CALL = (i).toShort().unaryMinus()
2021-03-11 10:54:00,088 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:54:00,088 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:54:00,235 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:00,238 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:54:00,382 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:00,385 [main:105] - GENERATED CALL = (i).compareTo(1598215189).coerceAtMost(271304514)
2021-03-11 10:54:00,385 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@140b0a8d]]
2021-03-11 10:54:00,385 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c84dc97]
2021-03-11 10:54:00,385 [main:105] - GENERATED CALL = (i).toLong().sign
2021-03-11 10:54:00,385 [main:63] - replacement of el of type Int is (i).toInt().rotateRight(-468157083)
2021-03-11 10:54:00,527 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:54:00,537 [main:56] - replacing (MyCollection1(), MyCollection1)
2021-03-11 10:54:00,539 [main:38] - replacing MyCollection1() MyCollection1
2021-03-11 10:54:00,540 [main:42] - Getting value of type MyCollection1
2021-03-11 10:54:00,681 [main:302] - generating value of type = MyCollection1 false depth = 0
2021-03-11 10:54:00,683 [main:112] - generating klass MyCollection1 text = class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}
2021-03-11 10:54:00,812 [main:194] - Type params = []
2021-03-11 10:54:00,946 [main:46] - GENERATED VALUE OF TYPE MyCollection1 = MyCollection1()
2021-03-11 10:54:00,946 [main:49] - GENERATED IS CALL =true
2021-03-11 10:54:01,158 [main:55] - randomType = UShort?
2021-03-11 10:54:01,290 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 10:54:01,325 [main:94] - GETTING MyCollection1 from MyIterator
2021-03-11 10:54:01,331 [main:94] - GETTING MyCollection1 from Int
2021-03-11 10:54:01,372 [main:94] - GETTING MyCollection1 from Iterator<Int>
2021-03-11 10:54:01,382 [main:94] - GETTING MyCollection1 from MyIterator
2021-03-11 10:54:01,383 [main:94] - GETTING MyCollection1 from Int
2021-03-11 10:54:01,384 [main:94] - GETTING MyCollection1 from Int
2021-03-11 10:54:01,384 [main:94] - GETTING MyCollection1 from Iterator<Int>
2021-03-11 10:54:01,385 [main:94] - GETTING MyCollection1 from Array<Int?>
2021-03-11 10:54:01,403 [main:63] - replacement of MyCollection1() of type MyCollection1 is MyCollection1()
2021-03-11 10:54:01,530 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 10:54:01,540 [main:56] - replacing (sum, Int)
2021-03-11 10:54:01,541 [main:38] - replacing sum Int
2021-03-11 10:54:01,542 [main:42] - Getting value of type Int
2021-03-11 10:54:01,672 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:01,675 [main:46] - GENERATED VALUE OF TYPE Int = -95607656
2021-03-11 10:54:01,675 [main:49] - GENERATED IS CALL =false
2021-03-11 10:54:01,681 [main:55] - randomType = Int
2021-03-11 10:54:01,813 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:01,850 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:54:01,851 [main:66] - Generated call from random type = (1674331305).toInt().sign
2021-03-11 10:54:01,851 [main:94] - GETTING Int from MyIterator
2021-03-11 10:54:01,859 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:54:01,859 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:54:01,859 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:54:01,860 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.unaryMinus()
2021-03-11 10:54:01,860 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:54:01,860 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:54:01,860 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.inv()
2021-03-11 10:54:01,860 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:54:01,860 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:54:01,860 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:54:01,993 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:01,996 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.xor(-2142790940)
2021-03-11 10:54:01,997 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]]
2021-03-11 10:54:01,997 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:54:01,997 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()
2021-03-11 10:54:01,997 [main:101] - Case = [public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:54:01,997 [main:137] - GENERATING call of type public final operator fun hasNext(): kotlin.Boolean defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@7bd471d9]
2021-03-11 10:54:01,997 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:54:02,126 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:54:02,130 [main:105] - GENERATED CALL = (MyCollection3().iterator()).hasNext().compareTo(true)
2021-03-11 10:54:02,130 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:54:02,130 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:54:02,258 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:02,261 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.rotateLeft(404724244)
2021-03-11 10:54:02,261 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:54:02,262 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:54:02,262 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:54:02,262 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.dec()
2021-03-11 10:54:02,262 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:54:02,262 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:54:02,393 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:02,396 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.or(1738678040)
2021-03-11 10:54:02,557 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:54:02,557 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:54:02,558 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:54:02,558 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.unaryPlus()
2021-03-11 10:54:02,558 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:54:02,558 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:54:02,558 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.takeLowestOneBit()
2021-03-11 10:54:02,558 [main:63] - replacement of sum of type Int is (MyCollection3().iterator()).k.inv()
2021-03-11 10:54:02,695 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:54:02,695 [main:66] - Compilation checking started
2021-03-11 10:54:03,085 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        (MyCollection3().iterator()).k.inv() = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:54:03,096 [main:56] - replacing (sum, Int)
2021-03-11 10:54:03,097 [main:38] - replacing sum Int
2021-03-11 10:54:03,098 [main:42] - Getting value of type Int
2021-03-11 10:54:03,233 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:03,236 [main:46] - GENERATED VALUE OF TYPE Int = -1270099911
2021-03-11 10:54:03,236 [main:49] - GENERATED IS CALL =false
2021-03-11 10:54:03,865 [main:55] - randomType = LinkedHashMap<String, LinkedHashMap<MyCollection4, Short>>?
2021-03-11 10:54:03,991 [main:302] - generating value of type = LinkedHashMap<String, LinkedHashMap<MyCollection4, Short>> false depth = 0
2021-03-11 10:54:04,127 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<String, LinkedHashMap<MyCollection4, Short>>): LkedHashMap<Strg, LkedHashMap<MyCollection4, Short>> = TODO()
2021-03-11 10:54:04,131 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<String, LinkedHashMap<MyCollection4, Short>>): LkedHashMap<Strg, LkedHashMap<MyCollection4, Short>> = TODO()
2021-03-11 10:54:04,263 [main:302] - generating value of type = Pair<String, LinkedHashMap<MyCollection4, Short>> false depth = 3
2021-03-11 10:54:04,397 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: String, second: LinkedHashMap<MyCollection4, Short>): Pair<String, LinkedHashMap<MyCollection4, Short>> = TODO()
2021-03-11 10:54:04,401 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: String, second: LinkedHashMap<MyCollection4, Short>): Pair<String, LinkedHashMap<MyCollection4, Short>> = TODO()
2021-03-11 10:54:04,532 [main:302] - generating value of type = String true depth = 6
2021-03-11 10:54:04,535 [main:302] - generating value of type = LinkedHashMap<MyCollection4, Short> false depth = 6
2021-03-11 10:54:04,669 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<MyCollection4, Short> = TODO()
2021-03-11 10:54:04,672 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<MyCollection4, Short> = TODO()
2021-03-11 10:54:04,807 [main:95] - GENERATED = linkedMapOf<MyCollection4, Short>()
2021-03-11 10:54:04,808 [main:95] - GENERATED = Pair<String, LinkedHashMap<MyCollection4, Short>>("zfvto", linkedMapOf<MyCollection4, Short>())
2021-03-11 10:54:04,808 [main:95] - GENERATED = linkedMapOf<String, LinkedHashMap<MyCollection4, Short>>(Pair<String, LinkedHashMap<MyCollection4, Short>>("zfvto", linkedMapOf<MyCollection4, Short>()))
2021-03-11 10:54:04,995 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:54:05,128 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:05,131 [main:66] - Generated call from random type = (linkedMapOf<String, LinkedHashMap<MyCollection4, Short>>(Pair<String, LinkedHashMap<MyCollection4, Short>>("zfvto", linkedMapOf<MyCollection4, Short>())))?.size.times(-122)
2021-03-11 10:54:05,132 [main:94] - GETTING Int from MyIterator
2021-03-11 10:54:05,136 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:54:05,136 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:54:05,269 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:05,272 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.times(17)
2021-03-11 10:54:05,272 [main:101] - Case = [public final operator fun next(): kotlin.Int defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@8257a56]]
2021-03-11 10:54:05,272 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@8257a56]
2021-03-11 10:54:05,272 [main:105] - GENERATED CALL = (MyCollection4().iterator()).next()
2021-03-11 10:54:05,272 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:54:05,272 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:54:05,411 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:05,414 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.ushr(-1973286358)
2021-03-11 10:54:05,414 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:54:05,414 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:54:05,542 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:05,545 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.xor(-1204443187)
2021-03-11 10:54:05,545 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:54:05,545 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:54:05,546 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.inv()
2021-03-11 10:54:05,546 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:54:05,546 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:54:05,673 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:05,676 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.compareTo(-118)
2021-03-11 10:54:05,676 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:54:05,676 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:54:05,806 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:05,809 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.shl(-1031565446)
2021-03-11 10:54:05,809 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:54:05,809 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:54:05,936 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:05,939 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.coerceAtMost(1109700889)
2021-03-11 10:54:05,939 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:54:05,939 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:54:06,070 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:06,073 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.or(-703562707)
2021-03-11 10:54:06,074 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:54:06,074 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:54:06,201 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:06,204 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.shr(-1105873368)
2021-03-11 10:54:06,204 [main:63] - replacement of sum of type Int is (MyCollection4().iterator()).k.or(-703562707)
2021-03-11 10:54:06,333 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:54:06,333 [main:66] - Compilation checking started
2021-03-11 10:54:06,702 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        (MyCollection4().iterator()).k.or(-703562707) = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:54:06,711 [main:56] - replacing (sum, Int)
2021-03-11 10:54:06,713 [main:38] - replacing sum Int
2021-03-11 10:54:06,713 [main:42] - Getting value of type Int
2021-03-11 10:54:06,844 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:06,847 [main:46] - GENERATED VALUE OF TYPE Int = -1995532548
2021-03-11 10:54:06,847 [main:49] - GENERATED IS CALL =false
2021-03-11 10:54:06,852 [main:55] - randomType = Boolean
2021-03-11 10:54:06,986 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:54:06,998 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:54:07,126 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:54:07,129 [main:66] - Generated call from random type = (true).compareTo(false)
2021-03-11 10:54:07,129 [main:63] - replacement of sum of type Int is (true).compareTo(false)
2021-03-11 10:54:07,268 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:54:07,268 [main:66] - Compilation checking started
2021-03-11 10:54:07,650 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        (true).compareTo(false) = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:54:07,660 [main:56] - replacing (sum, Int)
2021-03-11 10:54:07,660 [main:38] - replacing sum Int
2021-03-11 10:54:07,660 [main:42] - Getting value of type Int
2021-03-11 10:54:07,861 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:07,864 [main:46] - GENERATED VALUE OF TYPE Int = -1109801649
2021-03-11 10:54:07,864 [main:49] - GENERATED IS CALL =false
2021-03-11 10:54:07,876 [main:55] - randomType = MyCollection4
2021-03-11 10:54:08,010 [main:302] - generating value of type = MyCollection4 false depth = 0
2021-03-11 10:54:08,013 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:54:08,140 [main:194] - Type params = []
2021-03-11 10:54:08,289 [main:137] - GENERATING call of type public final operator fun iterator(): MyCollection3.MyIterator defined in MyCollection4[SimpleFunctionDescriptorImpl@1093d67e]
2021-03-11 10:54:08,289 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@3ec1ce8a]
2021-03-11 10:54:08,290 [main:66] - Generated call from random type = (MyCollection4()).iterator().next()!!
2021-03-11 10:54:08,290 [main:94] - GETTING Int from Int
2021-03-11 10:54:08,340 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@140b0a8d]]
2021-03-11 10:54:08,340 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79d77c1f]
2021-03-11 10:54:08,475 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:54:08,478 [main:105] - GENERATED CALL = (i).div(-5547680623309615697).sign
2021-03-11 10:54:08,478 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@4af8e595]]
2021-03-11 10:54:08,478 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:54:08,619 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:08,622 [main:105] - GENERATED CALL = (i).rangeTo(-41).endInclusive
2021-03-11 10:54:08,623 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:54:08,623 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:54:08,758 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:08,761 [main:105] - GENERATED CALL = (i).rotateRight(-1190453134)
2021-03-11 10:54:08,762 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@c73734c]]
2021-03-11 10:54:08,762 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:54:08,762 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@c73734c]
2021-03-11 10:54:08,900 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:08,903 [main:105] - GENERATED CALL = (i).toByte().times(127)
2021-03-11 10:54:08,903 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1679473f]]
2021-03-11 10:54:08,904 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:54:08,904 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1679473f]
2021-03-11 10:54:08,904 [main:105] - GENERATED CALL = (i).toShort().countTrailingZeroBits()
2021-03-11 10:54:08,904 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ea49e27]]
2021-03-11 10:54:08,904 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:54:08,904 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ea49e27]
2021-03-11 10:54:08,904 [main:105] - GENERATED CALL = (i).toFloat().toRawBits()
2021-03-11 10:54:08,904 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:54:08,904 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:54:08,904 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:54:09,038 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:09,041 [main:105] - GENERATED CALL = (i).toInt().coerceAtMost(-774922072)
2021-03-11 10:54:09,041 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:54:09,041 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:54:09,182 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:09,185 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:54:09,185 [main:105] - GENERATED CALL = (i).compareTo(-1856417457).countOneBits()
2021-03-11 10:54:09,185 [main:101] - Case = [public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:54:09,185 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:54:09,320 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:09,324 [main:105] - GENERATED CALL = (i).div(-51)
2021-03-11 10:54:09,324 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:54:09,324 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:54:09,450 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:09,453 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:54:09,582 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:09,585 [main:105] - GENERATED CALL = (i).compareTo(-256925867).minus(-102)
2021-03-11 10:54:09,585 [main:63] - replacement of sum of type Int is (i).toFloat().toRawBits()
2021-03-11 10:54:09,716 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:54:09,726 [main:56] - replacing (sum, Int)
2021-03-11 10:54:09,728 [main:38] - replacing sum Int
2021-03-11 10:54:09,728 [main:42] - Getting value of type Int
2021-03-11 10:54:09,858 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:09,861 [main:46] - GENERATED VALUE OF TYPE Int = 1243777738
2021-03-11 10:54:09,861 [main:49] - GENERATED IS CALL =false
2021-03-11 10:54:10,015 [main:55] - randomType = ULong?
2021-03-11 10:54:10,146 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 10:54:10,193 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@14fd340b]
2021-03-11 10:54:10,322 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:54:10,325 [main:66] - Generated call from random type = (7035906112253048711.toULong())?.compareTo(107.toUByte()).sign
2021-03-11 10:54:10,325 [main:63] - replacement of sum of type Int is (7035906112253048711.toULong())?.compareTo(107.toUByte()).sign
2021-03-11 10:54:10,454 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:54:10,455 [main:66] - Compilation checking started
2021-03-11 10:54:10,824 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        (7035906112253048711.toULong())?.compareTo(107.toUByte()).sign = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:54:10,833 [main:56] - replacing (sum, Int)
2021-03-11 10:54:10,836 [main:38] - replacing sum Int
2021-03-11 10:54:10,836 [main:42] - Getting value of type Int
2021-03-11 10:54:10,969 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:10,972 [main:46] - GENERATED VALUE OF TYPE Int = 875633588
2021-03-11 10:54:10,972 [main:49] - GENERATED IS CALL =false
2021-03-11 10:54:11,128 [main:55] - randomType = Sequence<UShort>
2021-03-11 10:54:11,129 [main:94] - GETTING Int from Array<Int?>
2021-03-11 10:54:11,143 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:54:11,143 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:54:11,274 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:11,276 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:54:11,406 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:11,409 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-287292610)?.plus(-6)
2021-03-11 10:54:11,409 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:54:11,409 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:54:11,541 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:11,544 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.compareTo(31)
2021-03-11 10:54:11,544 [main:101] - Case = [public inline fun <T> kotlin.Array<out T>.sumBy(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@50430cb2]]
2021-03-11 10:54:11,544 [main:137] - GENERATING call of type public inline fun <T> kotlin.Array<out T>.sumBy(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@50430cb2]
2021-03-11 10:54:11,679 [main:302] - generating value of type = Function1<T, Int> false depth = 0
2021-03-11 10:54:11,682 [main:302] - generating value of type = Int true depth = 1
2021-03-11 10:54:11,685 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).sumBy({a: T -> -500684080})
2021-03-11 10:54:11,685 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:54:11,685 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:54:11,817 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:11,820 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:54:11,820 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-1347506624)?.unaryPlus()
2021-03-11 10:54:11,820 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:54:11,820 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:54:11,950 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:11,953 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:54:12,084 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:12,087 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-537444052)?.rem(-83)
2021-03-11 10:54:12,087 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:54:12,087 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:54:12,226 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:12,229 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:54:12,360 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:12,363 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-1872593088)?.xor(404502133)
2021-03-11 10:54:12,363 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:54:12,363 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:54:12,363 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.unaryMinus()
2021-03-11 10:54:12,363 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:54:12,363 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:54:12,363 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.toInt()
2021-03-11 10:54:12,363 [main:101] - Case = [public fun <@kotlin.internal.OnlyInputTypes T> kotlin.Array<out T>.lastIndexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7f0e5754]]
2021-03-11 10:54:12,363 [main:137] - GENERATING call of type public fun <@kotlin.internal.OnlyInputTypes T> kotlin.Array<out T>.lastIndexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7f0e5754]
2021-03-11 10:54:12,497 [main:302] - generating value of type = T false depth = 0
2021-03-11 10:54:12,636 [main:43] - GENERATING CALL OF fun <T> minOf(a: Float, other: Float, comparator: kotlin.Comparator<Float>): T = TODO()
2021-03-11 10:54:12,640 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: Float, other: Float, comparator: kotlin.Comparator<Float>): T = TODO()
2021-03-11 10:54:12,928 [main:302] - generating value of type = Float true depth = 3
2021-03-11 10:54:12,931 [main:302] - generating value of type = Float true depth = 3
2021-03-11 10:54:12,933 [main:302] - generating value of type = Comparator<Float> false depth = 3
2021-03-11 10:54:13,071 [main:43] - GENERATING CALL OF fun <T> reverseOrder(): Comparator<Float> = TODO()
2021-03-11 10:54:13,075 [main:61] - WITHOUT TYPE PARAMS = fun <T> reverseOrder(): Comparator<Float> = TODO()
2021-03-11 10:54:13,214 [main:95] - GENERATED = reverseOrder<Float>()
2021-03-11 10:54:13,214 [main:95] - GENERATED = minOf<Float>(0.25302595f, 0.22559309f, reverseOrder<Float>())
2021-03-11 10:54:13,215 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).lastIndexOf(minOf<Float>(0.25302595f, 0.22559309f, reverseOrder<Float>()))
2021-03-11 10:54:13,215 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2760da68], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]]
2021-03-11 10:54:13,215 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2760da68]
2021-03-11 10:54:13,344 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:54:13,345 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:54:13,474 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:54:13,477 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).equals("aglvo").compareTo(true)
2021-03-11 10:54:13,477 [main:63] - replacement of sum of type Int is (arrayOfNulls<Int>(5)).equals("aglvo").compareTo(true)
2021-03-11 10:54:13,607 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:54:13,608 [main:66] - Compilation checking started
2021-03-11 10:54:13,979 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        (arrayOfNulls<Int>(5)).equals("aglvo").compareTo(true) = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:54:13,989 [main:56] - replacing (sum, Int)
2021-03-11 10:54:13,991 [main:38] - replacing sum Int
2021-03-11 10:54:13,991 [main:42] - Getting value of type Int
2021-03-11 10:54:14,124 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:14,126 [main:46] - GENERATED VALUE OF TYPE Int = 1240014880
2021-03-11 10:54:14,127 [main:49] - GENERATED IS CALL =false
2021-03-11 10:54:14,285 [main:55] - randomType = Function1<UShort, ULong>
2021-03-11 10:54:14,286 [main:94] - GETTING Int from MyIterator
2021-03-11 10:54:14,294 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:54:14,294 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:54:14,294 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.unaryMinus()
2021-03-11 10:54:14,294 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:54:14,294 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:54:14,294 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.takeHighestOneBit()
2021-03-11 10:54:14,294 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:54:14,294 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:54:14,422 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:14,425 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.ushr(-884516545)
2021-03-11 10:54:14,425 [main:101] - Case = [public final operator fun next(): kotlin.Int defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@8257a56]]
2021-03-11 10:54:14,425 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int defined in MyCollection4.MyIterator[SimpleFunctionDescriptorImpl@8257a56]
2021-03-11 10:54:14,425 [main:105] - GENERATED CALL = (MyCollection4().iterator()).next()
2021-03-11 10:54:14,425 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:54:14,425 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.absoluteValue
2021-03-11 10:54:14,426 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:54:14,426 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:54:14,426 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.inv()
2021-03-11 10:54:14,426 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:54:14,426 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:54:14,426 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.toInt()
2021-03-11 10:54:14,426 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:54:14,426 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:54:14,663 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:14,666 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.rotateLeft(1460373979)
2021-03-11 10:54:14,666 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:54:14,666 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.sign
2021-03-11 10:54:14,666 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:54:14,666 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:54:14,666 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.takeLowestOneBit()
2021-03-11 10:54:14,666 [main:63] - replacement of sum of type Int is (MyCollection4().iterator()).k.unaryMinus()
2021-03-11 10:54:14,796 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:54:14,797 [main:66] - Compilation checking started
2021-03-11 10:54:15,170 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    (MyCollection4().iterator()).k.unaryMinus() = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:54:15,183 [main:56] - replacing (sum, Int)
2021-03-11 10:54:15,185 [main:38] - replacing sum Int
2021-03-11 10:54:15,186 [main:42] - Getting value of type Int
2021-03-11 10:54:15,316 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:15,319 [main:46] - GENERATED VALUE OF TYPE Int = -217314879
2021-03-11 10:54:15,319 [main:49] - GENERATED IS CALL =false
2021-03-11 10:54:15,325 [main:55] - randomType = UByte
2021-03-11 10:54:15,454 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:54:15,488 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@13465ddd]
2021-03-11 10:54:15,488 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6cf21a44]
2021-03-11 10:54:15,624 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:15,627 [main:66] - Generated call from random type = (45.toUByte()).toByte().plus(-106)
2021-03-11 10:54:15,627 [main:63] - replacement of sum of type Int is (45.toUByte()).toByte().plus(-106)
2021-03-11 10:54:15,751 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:54:15,752 [main:66] - Compilation checking started
2021-03-11 10:54:16,132 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    (45.toUByte()).toByte().plus(-106) = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:54:16,141 [main:56] - replacing (sum, Int)
2021-03-11 10:54:16,143 [main:38] - replacing sum Int
2021-03-11 10:54:16,143 [main:42] - Getting value of type Int
2021-03-11 10:54:16,273 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:16,276 [main:46] - GENERATED VALUE OF TYPE Int = 2134763660
2021-03-11 10:54:16,276 [main:49] - GENERATED IS CALL =false
2021-03-11 10:54:16,434 [main:55] - randomType = HashSet<MyCollection4>
2021-03-11 10:54:16,563 [main:302] - generating value of type = HashSet<MyCollection4> false depth = 0
2021-03-11 10:54:16,696 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: MyCollection4): HashSet<MyCollection4> = TODO()
2021-03-11 10:54:16,700 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: MyCollection4): HashSet<MyCollection4> = TODO()
2021-03-11 10:54:16,831 [main:302] - generating value of type = MyCollection4 false depth = 3
2021-03-11 10:54:16,834 [main:112] - generating klass MyCollection4 text = class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:54:16,962 [main:194] - Type params = []
2021-03-11 10:54:17,093 [main:95] - GENERATED = linkedSetOf<MyCollection4>(MyCollection4())
2021-03-11 10:54:17,211 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:54:17,211 [main:66] - Generated call from random type = (linkedSetOf<MyCollection4>(MyCollection4())).size.inc()
2021-03-11 10:54:17,212 [main:94] - GETTING Int from MyIterator
2021-03-11 10:54:17,217 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:54:17,217 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:54:17,217 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.dec()
2021-03-11 10:54:17,217 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:54:17,217 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:54:17,346 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:17,349 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.rotateLeft(-1164447016)
2021-03-11 10:54:17,349 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:54:17,349 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:54:17,477 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:17,480 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.coerceAtLeast(-1989317366)
2021-03-11 10:54:17,480 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:54:17,480 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:54:17,480 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.toInt()
2021-03-11 10:54:17,480 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:54:17,480 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:54:17,608 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:17,612 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.compareTo(-69)
2021-03-11 10:54:17,612 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:54:17,612 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:54:17,612 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.countLeadingZeroBits()
2021-03-11 10:54:17,612 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:54:17,612 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:54:17,742 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:17,745 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.coerceAtMost(782841609)
2021-03-11 10:54:17,745 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:54:17,745 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:54:17,745 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.unaryPlus()
2021-03-11 10:54:17,745 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:54:17,745 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:54:17,874 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:17,876 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.plus(1)
2021-03-11 10:54:17,877 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:54:17,877 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:54:18,005 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:18,008 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.ushr(-833663345)
2021-03-11 10:54:18,008 [main:63] - replacement of sum of type Int is (MyCollection4().iterator()).k.rotateLeft(-1164447016)
2021-03-11 10:54:18,139 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:54:18,139 [main:66] - Compilation checking started
2021-03-11 10:54:18,541 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    (MyCollection4().iterator()).k.rotateLeft(-1164447016) = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:54:18,550 [main:56] - replacing (sum, Int)
2021-03-11 10:54:18,552 [main:38] - replacing sum Int
2021-03-11 10:54:18,552 [main:42] - Getting value of type Int
2021-03-11 10:54:18,683 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:18,685 [main:46] - GENERATED VALUE OF TYPE Int = -700570052
2021-03-11 10:54:18,686 [main:49] - GENERATED IS CALL =false
2021-03-11 10:54:18,698 [main:55] - randomType = MyCollection1
2021-03-11 10:54:18,825 [main:302] - generating value of type = MyCollection1 false depth = 0
2021-03-11 10:54:18,828 [main:112] - generating klass MyCollection1 text = class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}
2021-03-11 10:54:18,961 [main:194] - Type params = []
2021-03-11 10:54:19,104 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.collections.Iterable<T>.minWith(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1254eb07]
2021-03-11 10:54:19,234 [main:302] - generating value of type = Comparator<in T> false depth = 0
2021-03-11 10:54:19,382 [main:43] - GENERATING CALL OF fun <T, K> compareByDescending(comparator: kotlin.Comparator<MyCollection4>, selector: (T)->MyCollection4): Comparator<T> = TODO()
2021-03-11 10:54:19,386 [main:61] - WITHOUT TYPE PARAMS = fun <T, K> compareByDescending(comparator: kotlin.Comparator<MyCollection4>, selector: (T)->MyCollection4): Comparator<T> = TODO()
2021-03-11 10:54:19,827 [main:302] - generating value of type = Comparator<MyCollection4> false depth = 3
2021-03-11 10:54:20,033 [main:43] - GENERATING CALL OF fun <T> nullsFirst(comparator: kotlin.Comparator<MyCollection4>): Comparator<MyCollection4> = TODO()
2021-03-11 10:54:20,038 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsFirst(comparator: kotlin.Comparator<MyCollection4>): Comparator<MyCollection4> = TODO()
2021-03-11 10:54:20,328 [main:302] - generating value of type = Comparator<MyCollection4> false depth = 6
2021-03-11 10:54:20,466 [main:43] - GENERATING CALL OF fun <T> compareByDescending(selector: (MyCollection4)->kotlin.Comparable<*>?): Comparator<MyCollection4> = TODO()
2021-03-11 10:54:20,470 [main:61] - WITHOUT TYPE PARAMS = fun <T> compareByDescending(selector: (MyCollection4)->kotlin.Comparable<*>?): Comparator<MyCollection4> = TODO()
2021-03-11 10:54:20,759 [main:302] - generating value of type = Function1<MyCollection4, Comparable<*>?> false depth = 9
2021-03-11 10:54:20,762 [main:302] - generating value of type = Comparable<*> false depth = 10
2021-03-11 10:54:20,768 [main:95] - GENERATED = compareByDescending<MyCollection4>({a: MyCollection4 -> 40.toUByte()})
2021-03-11 10:54:20,768 [main:95] - GENERATED = nullsFirst<MyCollection4>(compareByDescending<MyCollection4>({a: MyCollection4 -> 40.toUByte()}))
2021-03-11 10:54:20,769 [main:385] - Cant generate call of fun <T, K> compareByDescending(comparator: kotlin.Comparator<MyCollection4>, selector: (T)->MyCollection4): Comparator<T> = TODO()
2021-03-11 10:54:20,769 [main:144] - CANT GENERATE PARAMS FOR @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.collections.Iterable<T>.minWith(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1254eb07]
2021-03-11 10:54:20,769 [main:66] - Generated call from random type = (MyCollection1()).null!!
2021-03-11 10:54:20,769 [main:94] - GETTING Int from MyIterator
2021-03-11 10:54:20,778 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:54:20,778 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:54:20,924 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:21,058 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:21,062 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.coerceIn(1728605516, 2115176810)
2021-03-11 10:54:21,062 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:54:21,062 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:54:21,191 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:21,194 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.or(1156037341)
2021-03-11 10:54:21,194 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:54:21,194 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:54:21,194 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.countOneBits()
2021-03-11 10:54:21,194 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:54:21,194 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:54:21,325 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:21,328 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.minus(49)
2021-03-11 10:54:21,328 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:54:21,328 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:54:21,528 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:21,531 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.compareTo(-66)
2021-03-11 10:54:21,531 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:54:21,531 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:54:21,531 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.countTrailingZeroBits()
2021-03-11 10:54:21,531 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:54:21,531 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:54:21,531 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.dec()
2021-03-11 10:54:21,531 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:54:21,531 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:54:21,664 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:21,667 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.and(-876512189)
2021-03-11 10:54:21,667 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:54:21,667 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:54:21,795 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:21,798 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.coerceAtMost(903258134)
2021-03-11 10:54:21,798 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection4.MyIterator[PropertyDescriptorImpl@6c735508], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:54:21,798 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:54:21,928 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:21,931 [main:105] - GENERATED CALL = (MyCollection4().iterator()).k.rem(-37)
2021-03-11 10:54:21,931 [main:63] - replacement of sum of type Int is (MyCollection4().iterator()).k.minus(49)
2021-03-11 10:54:22,059 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:54:22,060 [main:66] - Compilation checking started
2021-03-11 10:54:22,438 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    (MyCollection4().iterator()).k.minus(49) = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:54:22,447 [main:56] - replacing (sum, Int)
2021-03-11 10:54:22,449 [main:38] - replacing sum Int
2021-03-11 10:54:22,449 [main:42] - Getting value of type Int
2021-03-11 10:54:22,584 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:22,586 [main:46] - GENERATED VALUE OF TYPE Int = -431005048
2021-03-11 10:54:22,586 [main:49] - GENERATED IS CALL =false
2021-03-11 10:54:22,599 [main:55] - randomType = MyCollection3
2021-03-11 10:54:22,728 [main:302] - generating value of type = MyCollection3 false depth = 0
2021-03-11 10:54:22,730 [main:112] - generating klass MyCollection3 text = class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}
2021-03-11 10:54:22,859 [main:194] - Type params = []
2021-03-11 10:54:23,000 [main:137] - GENERATING call of type public final operator fun iterator(): MyCollection3.MyIterator defined in MyCollection3[SimpleFunctionDescriptorImpl@cce2d70]
2021-03-11 10:54:23,000 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@31b8dbe8]
2021-03-11 10:54:23,000 [main:66] - Generated call from random type = (MyCollection3()).iterator().next()!!
2021-03-11 10:54:23,000 [main:94] - GETTING Int from Int
2021-03-11 10:54:23,037 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:54:23,038 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:54:23,038 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:54:23,166 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:23,169 [main:105] - GENERATED CALL = (sum).toInt().rotateLeft(1717963631)
2021-03-11 10:54:23,169 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:54:23,169 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:54:23,169 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:54:23,295 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:23,298 [main:105] - GENERATED CALL = (sum).toInt().shr(58095429)
2021-03-11 10:54:23,298 [main:101] - Case = [public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:54:23,298 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:54:23,428 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:23,430 [main:105] - GENERATED CALL = (sum).times(1)
2021-03-11 10:54:23,431 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4d6e37cb]]
2021-03-11 10:54:23,431 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431]
2021-03-11 10:54:23,560 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:54:23,562 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4d6e37cb]
2021-03-11 10:54:23,696 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:23,700 [main:105] - GENERATED CALL = (sum).div(0.1663657990420544).compareTo(-67)
2021-03-11 10:54:23,700 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:54:23,700 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:54:23,700 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:54:23,700 [main:105] - GENERATED CALL = (sum).toInt().takeHighestOneBit()
2021-03-11 10:54:23,700 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3b9b155c]]
2021-03-11 10:54:23,700 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:54:23,700 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3b9b155c]
2021-03-11 10:54:23,700 [main:105] - GENERATED CALL = (sum).toShort().unaryMinus()
2021-03-11 10:54:23,700 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1547992c]]
2021-03-11 10:54:23,700 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e98c43e]
2021-03-11 10:54:23,700 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1547992c]
2021-03-11 10:54:23,831 [main:302] - generating value of type = Char true depth = 0
2021-03-11 10:54:23,834 [main:105] - GENERATED CALL = (sum).toChar().minus('㭪')
2021-03-11 10:54:23,834 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@63c4310c]]
2021-03-11 10:54:23,834 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:54:23,834 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@63c4310c]
2021-03-11 10:54:23,964 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:23,967 [main:105] - GENERATED CALL = (sum).toShort().compareTo(77)
2021-03-11 10:54:23,967 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:54:23,967 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:54:24,097 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:24,100 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:54:24,100 [main:105] - GENERATED CALL = (sum).compareTo(-852307892).inc()
2021-03-11 10:54:24,100 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:54:24,100 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:54:24,230 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:24,233 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:54:24,363 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:24,366 [main:105] - GENERATED CALL = (sum).compareTo(-1599363795).coerceAtMost(-705250974)
2021-03-11 10:54:24,366 [main:63] - replacement of sum of type Int is (sum).compareTo(-1599363795).coerceAtMost(-705250974)
2021-03-11 10:54:24,496 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:54:24,496 [main:66] - Compilation checking started
2021-03-11 10:54:24,875 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        (sum).compareTo(-1599363795).coerceAtMost(-705250974) = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:54:24,884 [main:56] - replacing (sum, Int)
2021-03-11 10:54:24,885 [main:38] - replacing sum Int
2021-03-11 10:54:24,885 [main:42] - Getting value of type Int
2021-03-11 10:54:25,016 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:25,019 [main:46] - GENERATED VALUE OF TYPE Int = 210382897
2021-03-11 10:54:25,019 [main:49] - GENERATED IS CALL =false
2021-03-11 10:54:25,024 [main:55] - randomType = UShort
2021-03-11 10:54:25,160 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 10:54:25,206 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@755ba434]
2021-03-11 10:54:25,206 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3af86106]
2021-03-11 10:54:25,335 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:25,338 [main:66] - Generated call from random type = (22224.toUShort()).toByte().minus(42)
2021-03-11 10:54:25,338 [main:63] - replacement of sum of type Int is (22224.toUShort()).toByte().minus(42)
2021-03-11 10:54:25,467 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:54:25,467 [main:66] - Compilation checking started
2021-03-11 10:54:25,842 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    (22224.toUShort()).toByte().minus(42) = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:54:25,851 [main:56] - replacing (sum, Int)
2021-03-11 10:54:25,853 [main:38] - replacing sum Int
2021-03-11 10:54:25,853 [main:42] - Getting value of type Int
2021-03-11 10:54:25,984 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:25,987 [main:46] - GENERATED VALUE OF TYPE Int = -1355404688
2021-03-11 10:54:25,987 [main:49] - GENERATED IS CALL =false
2021-03-11 10:54:26,146 [main:55] - randomType = MyCollection1?
2021-03-11 10:54:26,276 [main:302] - generating value of type = MyCollection1 false depth = 0
2021-03-11 10:54:26,279 [main:112] - generating klass MyCollection1 text = class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}
2021-03-11 10:54:26,413 [main:194] - Type params = []
2021-03-11 10:54:26,558 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.find(predicate: (T) -> kotlin.Boolean): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1410009a]
2021-03-11 10:54:26,690 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 10:54:26,694 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:54:26,697 [main:66] - Generated call from random type = (MyCollection1())?.find({a: T -> true})!!
2021-03-11 10:54:26,698 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:54:26,705 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]]
2021-03-11 10:54:26,705 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:54:26,706 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61254a73]
2021-03-11 10:54:26,706 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().takeLowestOneBit()
2021-03-11 10:54:26,706 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]]
2021-03-11 10:54:26,706 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:54:26,706 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c3f4aaa]
2021-03-11 10:54:26,836 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:26,841 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().shl(-1699212876)
2021-03-11 10:54:26,841 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:54:26,841 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:54:26,841 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:54:26,976 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:26,979 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().coerceAtMost(980210280)
2021-03-11 10:54:26,980 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:54:26,980 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:54:26,980 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:54:27,116 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:27,119 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().times(108)
2021-03-11 10:54:27,119 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:54:27,119 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:54:27,119 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:54:27,119 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().countTrailingZeroBits()
2021-03-11 10:54:27,119 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:54:27,119 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:54:27,119 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:54:27,119 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().unaryPlus()
2021-03-11 10:54:27,119 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:54:27,119 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:54:27,120 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:54:27,251 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:27,392 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:27,395 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().coerceIn(-1889513384, 1366218755)
2021-03-11 10:54:27,395 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:54:27,395 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:54:27,395 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:54:27,526 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:27,529 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().rotateLeft(164681462)
2021-03-11 10:54:27,529 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:54:27,529 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:54:27,529 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:54:27,668 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:27,672 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().minus(109)
2021-03-11 10:54:27,672 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:54:27,672 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:54:27,672 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:54:27,806 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:27,810 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().rotateRight(768489443)
2021-03-11 10:54:27,811 [main:63] - replacement of sum of type Int is (MyCollection1().iterator()).next().times(108)
2021-03-11 10:54:27,939 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:54:27,939 [main:66] - Compilation checking started
2021-03-11 10:54:28,368 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    (MyCollection1().iterator()).next().times(108) = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:54:28,378 [main:56] - replacing (sum, Int)
2021-03-11 10:54:28,380 [main:38] - replacing sum Int
2021-03-11 10:54:28,380 [main:42] - Getting value of type Int
2021-03-11 10:54:28,512 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:28,515 [main:46] - GENERATED VALUE OF TYPE Int = 456738538
2021-03-11 10:54:28,515 [main:49] - GENERATED IS CALL =false
2021-03-11 10:54:28,671 [main:55] - randomType = LinkedHashSet<UInt>
2021-03-11 10:54:28,803 [main:302] - generating value of type = LinkedHashSet<UInt> false depth = 0
2021-03-11 10:54:28,942 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<UInt> = TODO()
2021-03-11 10:54:28,946 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<UInt> = TODO()
2021-03-11 10:54:29,079 [main:95] - GENERATED = linkedSetOf<UInt>()
2021-03-11 10:54:29,239 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:54:29,369 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:29,372 [main:66] - Generated call from random type = (linkedSetOf<UInt>()).size.rotateLeft(559005965)
2021-03-11 10:54:29,372 [main:63] - replacement of sum of type Int is (linkedSetOf<UInt>()).size.rotateLeft(559005965)
2021-03-11 10:54:29,503 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:54:29,503 [main:66] - Compilation checking started
2021-03-11 10:54:29,898 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        (linkedSetOf<UInt>()).size.rotateLeft(559005965) = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:54:29,907 [main:56] - replacing (sum, Int)
2021-03-11 10:54:29,909 [main:38] - replacing sum Int
2021-03-11 10:54:29,909 [main:42] - Getting value of type Int
2021-03-11 10:54:30,042 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:30,044 [main:46] - GENERATED VALUE OF TYPE Int = 268537572
2021-03-11 10:54:30,044 [main:49] - GENERATED IS CALL =false
2021-03-11 10:54:30,050 [main:55] - randomType = Boolean
2021-03-11 10:54:30,181 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:54:30,193 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:54:30,323 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:54:30,326 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:54:30,326 [main:66] - Generated call from random type = (true).compareTo(false).toInt()
2021-03-11 10:54:30,327 [main:94] - GETTING Int from MyIterator
2021-03-11 10:54:30,333 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:54:30,333 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:54:30,334 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.toInt()
2021-03-11 10:54:30,334 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:54:30,334 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:54:30,334 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:54:30,463 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:30,466 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.plus(-35)
2021-03-11 10:54:30,466 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:54:30,466 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:54:30,466 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:54:30,595 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:30,598 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.and(-1770304956)
2021-03-11 10:54:30,598 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:54:30,598 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.sign
2021-03-11 10:54:30,598 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:54:30,598 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:54:30,599 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.unaryMinus()
2021-03-11 10:54:30,599 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:54:30,599 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:54:30,599 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.inc()
2021-03-11 10:54:30,599 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:54:30,599 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:54:30,734 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:30,737 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.ushr(1282219698)
2021-03-11 10:54:30,738 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:54:30,738 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:54:30,738 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:54:30,866 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:30,869 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.minus(88)
2021-03-11 10:54:30,869 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:54:30,869 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.absoluteValue
2021-03-11 10:54:30,870 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:54:30,870 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:54:30,870 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.takeHighestOneBit()
2021-03-11 10:54:30,870 [main:63] - replacement of sum of type Int is (MyCollection3().iterator()).k.unaryMinus()
2021-03-11 10:54:31,011 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:54:31,012 [main:66] - Compilation checking started
2021-03-11 10:54:31,390 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        (MyCollection3().iterator()).k.unaryMinus() = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:54:31,399 [main:56] - replacing (sum, Int)
2021-03-11 10:54:31,400 [main:38] - replacing sum Int
2021-03-11 10:54:31,400 [main:42] - Getting value of type Int
2021-03-11 10:54:31,528 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:31,531 [main:46] - GENERATED VALUE OF TYPE Int = -1806146956
2021-03-11 10:54:31,531 [main:49] - GENERATED IS CALL =false
2021-03-11 10:54:31,543 [main:55] - randomType = MyCollection2
2021-03-11 10:54:31,672 [main:302] - generating value of type = MyCollection2 false depth = 0
2021-03-11 10:54:31,675 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}
2021-03-11 10:54:31,811 [main:194] - Type params = []
2021-03-11 10:54:31,951 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.firstOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@39717093]
2021-03-11 10:54:31,951 [main:66] - Generated call from random type = (MyCollection2()).firstOrNull()!!
2021-03-11 10:54:31,951 [main:63] - replacement of sum of type Int is (MyCollection2()).firstOrNull()!!
2021-03-11 10:54:32,081 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-11 10:54:32,081 [main:66] - Compilation checking started
2021-03-11 10:54:32,477 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        (MyCollection2()).firstOrNull()!! = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:54:32,487 [main:56] - replacing (sum, Int)
2021-03-11 10:54:32,489 [main:38] - replacing sum Int
2021-03-11 10:54:32,489 [main:42] - Getting value of type Int
2021-03-11 10:54:32,622 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:32,625 [main:46] - GENERATED VALUE OF TYPE Int = 2011934489
2021-03-11 10:54:32,625 [main:49] - GENERATED IS CALL =false
2021-03-11 10:54:32,637 [main:55] - randomType = MyCollection2
2021-03-11 10:54:32,766 [main:302] - generating value of type = MyCollection2 false depth = 0
2021-03-11 10:54:32,769 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}
2021-03-11 10:54:32,897 [main:194] - Type params = []
2021-03-11 10:54:33,036 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.findLast(predicate: (T) -> kotlin.Boolean): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@373ac817]
2021-03-11 10:54:33,170 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 10:54:33,173 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:54:33,176 [main:66] - Generated call from random type = (MyCollection2()).findLast({a: T -> true})!!
2021-03-11 10:54:33,176 [main:94] - GETTING Int from Int
2021-03-11 10:54:33,220 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:54:33,220 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:54:33,220 [main:105] - GENERATED CALL = (el ?: 0).takeHighestOneBit()
2021-03-11 10:54:33,220 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:54:33,220 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:54:33,220 [main:105] - GENERATED CALL = (el ?: 0).countLeadingZeroBits()
2021-03-11 10:54:33,220 [main:101] - Case = [public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:54:33,220 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:54:33,220 [main:105] - GENERATED CALL = (el ?: 0).toInt()
2021-03-11 10:54:33,220 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]]
2021-03-11 10:54:33,220 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:54:33,349 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:33,352 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25370090]
2021-03-11 10:54:33,484 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:33,487 [main:105] - GENERATED CALL = (el ?: 0).compareTo(-131256140).and(-2074166541)
2021-03-11 10:54:33,487 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:54:33,487 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3f803037]
2021-03-11 10:54:33,487 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:54:33,619 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:33,622 [main:105] - GENERATED CALL = (el ?: 0).toInt().shr(-733155257)
2021-03-11 10:54:33,622 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:54:33,622 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:54:33,759 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:33,762 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:54:33,892 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:33,895 [main:105] - GENERATED CALL = (el ?: 0).compareTo(973348206).rotateRight(154100687)
2021-03-11 10:54:33,895 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@21bef933]]
2021-03-11 10:54:33,895 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:54:33,895 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@21bef933]
2021-03-11 10:54:34,024 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:34,027 [main:105] - GENERATED CALL = (el ?: 0).toByte().div(25)
2021-03-11 10:54:34,027 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3f4ea447]]
2021-03-11 10:54:34,027 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:54:34,155 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:34,158 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3f4ea447]
2021-03-11 10:54:34,159 [main:105] - GENERATED CALL = (el ?: 0).rangeTo(-24).random()
2021-03-11 10:54:34,159 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670], public final val first: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@46455b22]]
2021-03-11 10:54:34,159 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189d3670]
2021-03-11 10:54:34,287 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:34,290 [main:105] - GENERATED CALL = (el ?: 0).rangeTo(-8).first
2021-03-11 10:54:34,290 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@13c687d3]]
2021-03-11 10:54:34,290 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:54:34,291 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@13c687d3]
2021-03-11 10:54:34,419 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:34,422 [main:105] - GENERATED CALL = (el ?: 0).toFloat().compareTo(11)
2021-03-11 10:54:34,422 [main:63] - replacement of sum of type Int is (el ?: 0).compareTo(973348206).rotateRight(154100687)
2021-03-11 10:54:34,547 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:54:34,548 [main:66] - Compilation checking started
2021-03-11 10:54:34,911 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        (el ?: 0).compareTo(973348206).rotateRight(154100687) = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:54:34,920 [main:56] - replacing (sum, Int)
2021-03-11 10:54:34,922 [main:38] - replacing sum Int
2021-03-11 10:54:34,922 [main:42] - Getting value of type Int
2021-03-11 10:54:35,117 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:35,120 [main:46] - GENERATED VALUE OF TYPE Int = -928886616
2021-03-11 10:54:35,120 [main:49] - GENERATED IS CALL =false
2021-03-11 10:54:35,126 [main:55] - randomType = Long
2021-03-11 10:54:35,266 [main:302] - generating value of type = Long true depth = 0
2021-03-11 10:54:35,306 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@207d3866]
2021-03-11 10:54:35,307 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3af86106]
2021-03-11 10:54:35,439 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:35,442 [main:66] - Generated call from random type = (-4986732916716470430).toByte().minus(68)
2021-03-11 10:54:35,442 [main:94] - GETTING Int from Int
2021-03-11 10:54:35,482 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:54:35,482 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:54:35,613 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:35,615 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:54:35,748 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:35,753 [main:105] - GENERATED CALL = (i).compareTo(-507423920).coerceAtLeast(-1619125797)
2021-03-11 10:54:35,753 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@11d995f6]]
2021-03-11 10:54:35,753 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:54:35,753 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@11d995f6]
2021-03-11 10:54:35,753 [main:105] - GENERATED CALL = (i).toFloat().toBits()
2021-03-11 10:54:35,753 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12f06cb], public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@74f66b42]]
2021-03-11 10:54:35,753 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@12f06cb]
2021-03-11 10:54:35,753 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@74f66b42]
2021-03-11 10:54:35,754 [main:105] - GENERATED CALL = (i).toDouble().toInt()
2021-03-11 10:54:35,754 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ea49e27]]
2021-03-11 10:54:35,754 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f143fc]
2021-03-11 10:54:35,754 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ea49e27]
2021-03-11 10:54:35,754 [main:105] - GENERATED CALL = (i).toFloat().toRawBits()
2021-03-11 10:54:35,754 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:54:35,754 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:54:35,883 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:35,886 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:54:35,886 [main:105] - GENERATED CALL = (i).compareTo(101619362).takeHighestOneBit()
2021-03-11 10:54:35,886 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@78e981e4]]
2021-03-11 10:54:35,886 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61246366]
2021-03-11 10:54:35,886 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@78e981e4]
2021-03-11 10:54:36,014 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:36,017 [main:105] - GENERATED CALL = (i).toShort().times(63)
2021-03-11 10:54:36,017 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:54:36,017 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:54:36,146 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:36,149 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:54:36,280 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:36,283 [main:105] - GENERATED CALL = (i).compareTo(-1862136995).ushr(-1733601734)
2021-03-11 10:54:36,283 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:54:36,283 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@657b6510]
2021-03-11 10:54:36,417 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:36,420 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:54:36,550 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:36,553 [main:105] - GENERATED CALL = (i).compareTo(1902209940).xor(710359289)
2021-03-11 10:54:36,553 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@34c43638]]
2021-03-11 10:54:36,553 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4efe594a]
2021-03-11 10:54:36,553 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@34c43638]
2021-03-11 10:54:36,553 [main:105] - GENERATED CALL = (i).toByte().countLeadingZeroBits()
2021-03-11 10:54:36,553 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4d6e37cb]]
2021-03-11 10:54:36,553 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ee36431]
2021-03-11 10:54:36,690 [main:302] - generating value of type = Double true depth = 0
2021-03-11 10:54:36,695 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4d6e37cb]
2021-03-11 10:54:36,825 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:36,828 [main:105] - GENERATED CALL = (i).div(0.5986153348550195).compareTo(36)
2021-03-11 10:54:36,828 [main:63] - replacement of sum of type Int is (i).div(0.5986153348550195).compareTo(36)
2021-03-11 10:54:36,958 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:54:36,958 [main:66] - Compilation checking started
2021-03-11 10:54:37,339 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    (i).div(0.5986153348550195).compareTo(36) = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:54:37,349 [main:56] - replacing (sum, Int)
2021-03-11 10:54:37,350 [main:38] - replacing sum Int
2021-03-11 10:54:37,350 [main:42] - Getting value of type Int
2021-03-11 10:54:37,482 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:37,485 [main:46] - GENERATED VALUE OF TYPE Int = 155245163
2021-03-11 10:54:37,485 [main:49] - GENERATED IS CALL =false
2021-03-11 10:54:37,802 [main:55] - randomType = Pair<MyCollection2?, MyCollection3>
2021-03-11 10:54:37,931 [main:302] - generating value of type = Pair<MyCollection2?, MyCollection3> false depth = 0
2021-03-11 10:54:38,066 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: MyCollection2?, second: MyCollection3): Pair<MyCollection2?, MyCollection3> = TODO()
2021-03-11 10:54:38,070 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: MyCollection2?, second: MyCollection3): Pair<MyCollection2?, MyCollection3> = TODO()
2021-03-11 10:54:38,208 [main:302] - generating value of type = MyCollection2 false depth = 3
2021-03-11 10:54:38,212 [main:112] - generating klass MyCollection2 text = class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}
2021-03-11 10:54:38,346 [main:194] - Type params = []
2021-03-11 10:54:38,474 [main:302] - generating value of type = MyCollection3 false depth = 3
2021-03-11 10:54:38,477 [main:112] - generating klass MyCollection3 text = class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}
2021-03-11 10:54:38,609 [main:194] - Type params = []
2021-03-11 10:54:38,735 [main:95] - GENERATED = Pair<MyCollection2?, MyCollection3>(MyCollection2(), MyCollection3())
2021-03-11 10:54:38,750 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Pair[DeserializedSimpleFunctionDescriptor@11379244]
2021-03-11 10:54:38,879 [main:302] - generating value of type = Any false depth = 0
2021-03-11 10:54:38,879 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@57d94b26]
2021-03-11 10:54:39,008 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 10:54:39,011 [main:66] - Generated call from random type = (Pair<MyCollection2?, MyCollection3>(MyCollection2(), MyCollection3())).equals("uukci").compareTo(true)
2021-03-11 10:54:39,013 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:54:39,018 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]]
2021-03-11 10:54:39,019 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:54:39,019 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next()
2021-03-11 10:54:39,019 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]]
2021-03-11 10:54:39,019 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:54:39,019 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63f0caea]
2021-03-11 10:54:39,148 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:39,151 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().rotateRight(912196462)
2021-03-11 10:54:39,151 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:54:39,151 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:54:39,152 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:54:39,152 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().inv()
2021-03-11 10:54:39,152 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:54:39,152 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:54:39,152 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:54:39,152 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().countOneBits()
2021-03-11 10:54:39,152 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:54:39,152 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:54:39,152 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:54:39,277 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:39,280 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().minus(93)
2021-03-11 10:54:39,280 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@665d3519]]
2021-03-11 10:54:39,280 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:54:39,280 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().sign
2021-03-11 10:54:39,280 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:54:39,280 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:54:39,281 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:54:39,281 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().inc()
2021-03-11 10:54:39,281 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2f2d5bc]]
2021-03-11 10:54:39,281 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:54:39,281 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().absoluteValue
2021-03-11 10:54:39,281 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:54:39,281 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:54:39,281 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:54:39,409 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:39,412 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().rem(6)
2021-03-11 10:54:39,412 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]]
2021-03-11 10:54:39,412 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:54:39,412 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@531ec4fb]
2021-03-11 10:54:39,540 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:39,544 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().xor(-1343162075)
2021-03-11 10:54:39,544 [main:63] - replacement of sum of type Int is 155245163
2021-03-11 10:54:39,674 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 10:54:39,674 [main:66] - Compilation checking started
2021-03-11 10:54:40,037 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    155245163 = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:54:40,046 [main:56] - replacing (MyIterator(), MyIterator)
2021-03-11 10:54:40,046 [main:38] - replacing MyIterator() MyIterator
2021-03-11 10:54:40,046 [main:42] - Getting value of type MyIterator
2021-03-11 10:54:40,173 [main:302] - generating value of type = MyIterator false depth = 0
2021-03-11 10:54:40,175 [main:112] - generating klass MyIterator text = class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
2021-03-11 10:54:40,176 [main:46] - GENERATED VALUE OF TYPE MyIterator = 
2021-03-11 10:54:40,181 [main:55] - randomType = ULong
2021-03-11 10:54:40,308 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 10:54:40,347 [main:94] - GETTING MyIterator from MyIterator
2021-03-11 10:54:40,350 [main:63] - replacement of MyIterator() of type MyIterator is MyCollection4().iterator()
2021-03-11 10:54:40,478 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:54:40,478 [main:66] - Compilation checking started
2021-03-11 10:54:40,845 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyCollection4().iterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:54:40,855 [main:56] - replacing (15, Int)
2021-03-11 10:54:40,855 [main:38] - replacing 15 Int
2021-03-11 10:54:40,855 [main:42] - Getting value of type Int
2021-03-11 10:54:40,982 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:40,984 [main:46] - GENERATED VALUE OF TYPE Int = -210224580
2021-03-11 10:54:40,984 [main:49] - GENERATED IS CALL =false
2021-03-11 10:54:41,284 [main:55] - randomType = Sequence<Char?>
2021-03-11 10:54:41,285 [main:94] - GETTING Int from Array<Int?>
2021-03-11 10:54:41,303 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:54:41,303 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:54:41,436 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:41,439 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.rotateLeft(655874391)
2021-03-11 10:54:41,440 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:54:41,440 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:54:41,571 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:41,574 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:54:41,704 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:41,707 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-420675125)?.times(9)
2021-03-11 10:54:41,707 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:54:41,707 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:54:41,906 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:41,909 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.ushr(2103582810)
2021-03-11 10:54:41,909 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]]
2021-03-11 10:54:41,909 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:54:42,044 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:42,047 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f20e0b]
2021-03-11 10:54:42,178 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:42,181 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-1081583089)?.rem(-96)
2021-03-11 10:54:42,181 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:54:42,181 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:54:42,308 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:42,311 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.plus(21)
2021-03-11 10:54:42,311 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]]
2021-03-11 10:54:42,311 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:54:42,445 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:42,448 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c4ef349]
2021-03-11 10:54:42,448 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(1466636437)?.unaryMinus()
2021-03-11 10:54:42,448 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepHashCode(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@46619276]]
2021-03-11 10:54:42,448 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepHashCode(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@46619276]
2021-03-11 10:54:42,449 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).contentDeepHashCode()
2021-03-11 10:54:42,449 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]]
2021-03-11 10:54:42,449 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@718ad3fd]
2021-03-11 10:54:42,581 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:42,583 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43e6cb9e]
2021-03-11 10:54:42,584 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).get(-351762914)?.unaryPlus()
2021-03-11 10:54:42,584 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:54:42,584 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:54:42,584 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.inv()
2021-03-11 10:54:42,584 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@7f58ee61], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:54:42,584 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:54:42,584 [main:105] - GENERATED CALL = (arrayOfNulls<Int>(5)).size.countTrailingZeroBits()
2021-03-11 10:54:42,584 [main:63] - replacement of 15 of type Int is (arrayOfNulls<Int>(5)).size.rotateLeft(655874391)
2021-03-11 10:54:42,720 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:54:42,729 [main:56] - replacing (sum, Int)
2021-03-11 10:54:42,731 [main:38] - replacing sum Int
2021-03-11 10:54:42,731 [main:42] - Getting value of type Int
2021-03-11 10:54:42,872 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:42,875 [main:46] - GENERATED VALUE OF TYPE Int = -685403610
2021-03-11 10:54:42,875 [main:49] - GENERATED IS CALL =false
2021-03-11 10:54:42,880 [main:55] - randomType = Byte
2021-03-11 10:54:43,015 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:43,053 [main:137] - GENERATING call of type public abstract fun toByte(): kotlin.Byte defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@50cd40dd]
2021-03-11 10:54:43,053 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6b8bfcfc]
2021-03-11 10:54:43,182 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:43,185 [main:66] - Generated call from random type = (-112).toByte().compareTo(-4)
2021-03-11 10:54:43,186 [main:94] - GETTING Int from MyIterator
2021-03-11 10:54:43,193 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:54:43,193 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:54:43,193 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:54:43,324 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:43,327 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.shr(-823214078)
2021-03-11 10:54:43,327 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:54:43,327 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:54:43,459 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:43,462 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.minus(29)
2021-03-11 10:54:43,462 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:54:43,462 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:54:43,593 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:43,596 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.coerceAtMost(-625443133)
2021-03-11 10:54:43,596 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:54:43,597 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:54:43,731 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:43,734 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.ushr(566405298)
2021-03-11 10:54:43,734 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:54:43,734 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:54:43,735 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:54:43,867 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:43,870 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.div(94)
2021-03-11 10:54:43,870 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:54:43,870 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:54:44,007 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:44,010 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.div(-80)
2021-03-11 10:54:44,010 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:54:44,010 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:54:44,139 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:44,142 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.plus(-55)
2021-03-11 10:54:44,142 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:54:44,143 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:54:44,143 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.countTrailingZeroBits()
2021-03-11 10:54:44,143 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:54:44,143 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:54:44,143 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.inv()
2021-03-11 10:54:44,143 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:54:44,143 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:54:44,143 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.dec()
2021-03-11 10:54:44,143 [main:63] - replacement of sum of type Int is (-112).toByte().compareTo(-4)
2021-03-11 10:54:44,275 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:54:44,275 [main:66] - Compilation checking started
2021-03-11 10:54:44,649 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    (-112).toByte().compareTo(-4) = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:54:44,661 [main:56] - replacing (i, Int)
2021-03-11 10:54:44,663 [main:38] - replacing i Int
2021-03-11 10:54:44,663 [main:42] - Getting value of type Int
2021-03-11 10:54:44,798 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:44,801 [main:46] - GENERATED VALUE OF TYPE Int = -1183771452
2021-03-11 10:54:44,801 [main:49] - GENERATED IS CALL =false
2021-03-11 10:54:44,809 [main:55] - randomType = ULong
2021-03-11 10:54:44,950 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 10:54:44,988 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@2f422cb6]
2021-03-11 10:54:44,988 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UByte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@71d93d18]
2021-03-11 10:54:44,988 [main:66] - Generated call from random type = (6833993944042861385.toULong()).toUByte().countTrailingZeroBits()
2021-03-11 10:54:44,989 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:54:44,995 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]]
2021-03-11 10:54:44,995 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:54:44,995 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26c0c964]
2021-03-11 10:54:45,126 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:45,129 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().minus(-63)
2021-03-11 10:54:45,129 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]]
2021-03-11 10:54:45,129 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:54:45,130 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@42d0aa77]
2021-03-11 10:54:45,263 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:45,398 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:45,401 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().coerceIn(-933214024, 795559634)
2021-03-11 10:54:45,401 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:54:45,402 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:54:45,402 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:54:45,402 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().takeHighestOneBit()
2021-03-11 10:54:45,402 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]]
2021-03-11 10:54:45,402 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:54:45,402 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a248bc]
2021-03-11 10:54:45,402 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().toInt()
2021-03-11 10:54:45,402 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]]
2021-03-11 10:54:45,402 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:54:45,402 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55fd5bae]
2021-03-11 10:54:45,402 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().countLeadingZeroBits()
2021-03-11 10:54:45,402 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]]
2021-03-11 10:54:45,402 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:54:45,402 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef1c66]
2021-03-11 10:54:45,541 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:45,544 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().or(-254070569)
2021-03-11 10:54:45,545 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]]
2021-03-11 10:54:45,545 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:54:45,545 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next()
2021-03-11 10:54:45,545 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:54:45,545 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:54:45,545 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:54:45,684 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:45,688 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().plus(-58)
2021-03-11 10:54:45,688 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:54:45,688 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:54:45,688 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:54:45,829 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:45,833 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().div(17)
2021-03-11 10:54:45,834 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:54:45,834 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@554044c2]
2021-03-11 10:54:45,834 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:54:45,970 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:45,973 [main:105] - GENERATED CALL = (MyCollection1().iterator()).next().compareTo(-89)
2021-03-11 10:54:45,973 [main:63] - replacement of i of type Int is (6833993944042861385.toULong()).toUByte().countTrailingZeroBits()
2021-03-11 10:54:46,107 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:54:46,107 [main:66] - Compilation checking started
2021-03-11 10:54:46,480 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    (6833993944042861385.toULong()).toUByte().countTrailingZeroBits() = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:54:46,491 [main:56] - replacing (sum, Int)
2021-03-11 10:54:46,494 [main:38] - replacing sum Int
2021-03-11 10:54:46,494 [main:42] - Getting value of type Int
2021-03-11 10:54:46,634 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:46,636 [main:46] - GENERATED VALUE OF TYPE Int = -524404941
2021-03-11 10:54:46,637 [main:49] - GENERATED IS CALL =false
2021-03-11 10:54:46,648 [main:55] - randomType = MyCollection1
2021-03-11 10:54:46,784 [main:302] - generating value of type = MyCollection1 false depth = 0
2021-03-11 10:54:46,787 [main:112] - generating klass MyCollection1 text = class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}
2021-03-11 10:54:46,918 [main:194] - Type params = []
2021-03-11 10:54:47,069 [main:137] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@947e3ba]
2021-03-11 10:54:47,205 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 10:54:47,208 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 10:54:47,211 [main:66] - Generated call from random type = (MyCollection1()).indexOfLast({a: T -> false})
2021-03-11 10:54:47,212 [main:94] - GETTING Int from MyIterator
2021-03-11 10:54:47,219 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]]
2021-03-11 10:54:47,219 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77ce229]
2021-03-11 10:54:47,219 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.takeHighestOneBit()
2021-03-11 10:54:47,219 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]]
2021-03-11 10:54:47,219 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:54:47,220 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53477d08]
2021-03-11 10:54:47,220 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.dec()
2021-03-11 10:54:47,220 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:54:47,220 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:54:47,220 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:54:47,349 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:47,353 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.times(-104)
2021-03-11 10:54:47,354 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]]
2021-03-11 10:54:47,354 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2eb82078]
2021-03-11 10:54:47,491 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:47,494 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.div(-108)
2021-03-11 10:54:47,494 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:54:47,494 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:54:47,624 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:47,627 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.rotateLeft(341847769)
2021-03-11 10:54:47,627 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:54:47,627 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:54:47,758 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:47,761 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.coerceAtMost(-1230263681)
2021-03-11 10:54:47,761 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:54:47,761 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:54:47,761 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:54:47,890 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:47,893 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.plus(87)
2021-03-11 10:54:47,893 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]]
2021-03-11 10:54:47,893 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46e9388c]
2021-03-11 10:54:48,034 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:48,037 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.plus(27)
2021-03-11 10:54:48,038 [main:101] - Case = [public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]]
2021-03-11 10:54:48,038 [main:137] - GENERATING call of type public final operator fun next(): kotlin.Int? defined in MyCollection3.MyIterator[SimpleFunctionDescriptorImpl@1c37b804]
2021-03-11 10:54:48,038 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64357679]
2021-03-11 10:54:48,038 [main:105] - GENERATED CALL = (MyCollection3().iterator()).next()?.inv()
2021-03-11 10:54:48,038 [main:101] - Case = [public final var k: kotlin.Int defined in MyCollection3.MyIterator[PropertyDescriptorImpl@4d93b0cf], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]]
2021-03-11 10:54:48,038 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e90250b]
2021-03-11 10:54:48,170 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:48,174 [main:105] - GENERATED CALL = (MyCollection3().iterator()).k.shr(-739798178)
2021-03-11 10:54:48,174 [main:63] - replacement of sum of type Int is (MyCollection3().iterator()).next()?.times(-104)
2021-03-11 10:54:48,305 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 10:54:48,305 [main:66] - Compilation checking started
2021-03-11 10:54:48,680 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    (MyCollection3().iterator()).next()?.times(-104) = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:54:48,689 [main:56] - replacing (sum, Int)
2021-03-11 10:54:48,691 [main:38] - replacing sum Int
2021-03-11 10:54:48,691 [main:42] - Getting value of type Int
2021-03-11 10:54:48,824 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:48,827 [main:46] - GENERATED VALUE OF TYPE Int = 1059974916
2021-03-11 10:54:48,827 [main:49] - GENERATED IS CALL =false
2021-03-11 10:54:49,054 [main:55] - randomType = ArrayList<String>
2021-03-11 10:54:49,186 [main:302] - generating value of type = ArrayList<String> false depth = 0
2021-03-11 10:54:49,321 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: String): ArrayList<Strg> = TODO()
2021-03-11 10:54:49,324 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: String): ArrayList<Strg> = TODO()
2021-03-11 10:54:49,461 [main:302] - generating value of type = String true depth = 3
2021-03-11 10:54:49,465 [main:95] - GENERATED = arrayListOf<String>("rbaxs")
2021-03-11 10:54:49,623 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@2c91cb3c]
2021-03-11 10:54:49,624 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentHashCode(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6cbd4f7b]
2021-03-11 10:54:49,624 [main:66] - Generated call from random type = (arrayListOf<String>("rbaxs")).toArray().contentHashCode()
2021-03-11 10:54:49,625 [main:94] - GETTING Int from Iterator<Int>
2021-03-11 10:54:49,630 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]]
2021-03-11 10:54:49,630 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:54:49,630 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7746fcfb]
2021-03-11 10:54:49,759 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:49,763 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().coerceAtLeast(-1428306941)
2021-03-11 10:54:49,763 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]]
2021-03-11 10:54:49,763 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:54:49,763 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19bbfd7]
2021-03-11 10:54:49,892 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:49,895 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().ushr(979985216)
2021-03-11 10:54:49,895 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]]
2021-03-11 10:54:49,895 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:54:49,895 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9ad5ce]
2021-03-11 10:54:50,024 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:50,026 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().times(44)
2021-03-11 10:54:50,027 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]]
2021-03-11 10:54:50,027 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:54:50,027 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@520021aa]
2021-03-11 10:54:50,027 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().countOneBits()
2021-03-11 10:54:50,027 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]]
2021-03-11 10:54:50,027 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:54:50,027 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45d062be]
2021-03-11 10:54:50,157 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:50,160 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().rotateLeft(1556240060)
2021-03-11 10:54:50,160 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]]
2021-03-11 10:54:50,160 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:54:50,160 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50989536]
2021-03-11 10:54:50,290 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:50,294 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().coerceAtMost(-846910245)
2021-03-11 10:54:50,294 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]]
2021-03-11 10:54:50,294 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:54:50,294 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20054016]
2021-03-11 10:54:50,294 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().countTrailingZeroBits()
2021-03-11 10:54:50,294 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]]
2021-03-11 10:54:50,294 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:54:50,294 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3779b701]
2021-03-11 10:54:50,432 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 10:54:50,435 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().compareTo(-109)
2021-03-11 10:54:50,435 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]]
2021-03-11 10:54:50,435 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:54:50,435 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next()
2021-03-11 10:54:50,435 [main:101] - Case = [public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]]
2021-03-11 10:54:50,435 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Int defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@5f3e7957]
2021-03-11 10:54:50,435 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@438e8297]
2021-03-11 10:54:50,435 [main:105] - GENERATED CALL = (MyCollection2().iterator()).next().inc()
2021-03-11 10:54:50,435 [main:63] - replacement of sum of type Int is (MyCollection2().iterator()).next()
2021-03-11 10:54:50,569 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:54:50,570 [main:66] - Compilation checking started
2021-03-11 10:54:50,940 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    sum = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        (MyCollection2().iterator()).next() = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:54:50,950 [main:56] - replacing (sum, Int)
2021-03-11 10:54:50,952 [main:38] - replacing sum Int
2021-03-11 10:54:50,953 [main:42] - Getting value of type Int
2021-03-11 10:54:51,094 [main:302] - generating value of type = Int true depth = 0
2021-03-11 10:54:51,097 [main:46] - GENERATED VALUE OF TYPE Int = 1762563588
2021-03-11 10:54:51,097 [main:49] - GENERATED IS CALL =false
2021-03-11 10:54:51,102 [main:55] - randomType = UByte
2021-03-11 10:54:51,235 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 10:54:51,274 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@6296f9f2]
2021-03-11 10:54:51,274 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1679473f]
2021-03-11 10:54:51,274 [main:66] - Generated call from random type = (43.toUByte()).toShort().countTrailingZeroBits()
2021-03-11 10:54:51,274 [main:63] - replacement of sum of type Int is (43.toUByte()).toShort().countTrailingZeroBits()
2021-03-11 10:54:51,402 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:54:51,402 [main:66] - Compilation checking started
2021-03-11 10:54:51,778 [main:49] - Result = false
Text:
fun box() : String {
    var sum : Int = (MyCollection4().iterator()).k.dec()
    var i = (MyCollection4().iterator()).k.toInt()

    val c6 = MyCollection4()
    sum = (MyCollection1().iterator()).next().takeHighestOneBit()
    for (el in MyCollection4()) {
        sum = (sum).toInt().coerceAtMost(669460020)
    }
    if((arrayOfNulls<Int>(5)).isEmpty()) return (1854990690.toUInt()).toString(1777971562)

    val c5 = MyCollection3()
    sum = (sum).rangeTo(-15).endInclusive
    for (el in MyCollection3()) {
        sum = (MyCollection2().iterator()).next().xor(2070216314)
    }
    if((arrayOfNulls<Int>(5)).equals("lzzva").not()) return (-64).toByte().toString(343823569)

    val c1: Iterable<Int> = MyCollection1()
    sum = (MyCollection4()).iterator().k
    for (el in List<Int>(-1073909037, {a: Int -> -1805396255})) {
        sum = (sum).rangeTo(51).step
    }
    if((MyCollection2().iterator()).equals("vgzgb")) return (arrayOfNulls<Int>(5)).contentDeepToString()

    val c2 = MyCollection1()
    sum = (MyCollection3().iterator()).k.minus(-127)
    for (el in MyCollection1()) {
        (MyCollection4().iterator()).k = (sum).compareTo(506027150).and(1958798101)
    }
    if((MyCollection2()).equals("jxqtc").not()) return (sum).toString(977265761)

    val c3: Iterable<Int> = MyCollection2()
    sum = -1204451167
    for (el in buildList<Int>(-1712682870, { repeat(682400588, {a: Int -> repeat(1762795233, {a: Int -> check(true, { })})})})) {
        sum = (-823968379311769247).div(0.40827715f).toBits()
    }
    if((arrayOfNulls<Int>(5)).set(-1620387049, 1313127116).equals("ffzrk")) return (i).toChar().lowercase()

    val c4 = MyCollection2()
    (43.toUByte()).toShort().countTrailingZeroBits() = (MyCollection1().iterator()).next().countOneBits()
    for (el in MyCollection2()) {
        sum = i
    }
    if((MyCollection3().iterator()).k.equals("rchjc")) return (MyCollection4().iterator()).k.toString(-518875094)

    val a : Array<Int> = emptyArray<Int>()
    for(el in (MyCollection4().iterator()).k.rangeTo(44)) {
       arrayOfNulls<Int>(-27459892)[1175736283] = (MyCollection4().iterator()).k.or(-1064130264)
    }
    sum = (-37).compareTo(59).rotateLeft(1790833613)
    for (el in Array<Int>(1069181161, {a: Int -> 494887268})) {
        sum = (4668175306131058804.toULong()).toUShort().countTrailingZeroBits()
    }
    if((5736058657525924703.toULong())?.toDouble().isFinite()) return "tmipc"

    val b : Array<Int?> = arrayOfNulls<Int?>(-435848346)
    i = 0
    while((ArrayDeque<LinkedHashMap<String, UInt>>(hashSetOf<LinkedHashMap<String, UInt>>())).subList(1060866697, -602053813).contains(LinkedHashMap<String, UInt>(HashMap<String, UInt>()))) {
       arrayOfNulls<Int>(5)[(MyCollection1().iterator()).next().countTrailingZeroBits()] = (MyCollection1().iterator()).next().shl(283661372)
    }
    sum = 1790450647
    for (el in (arrayOfNulls<Int>(5)).sliceArray(hashSetOf<Int>())) {
        sum = (sum).div(0.9398365332054531).compareTo(-40)
    }
    System.out?.println((MyCollection3().iterator()).k.coerceAtLeast(498139411))
    if((MyCollection2().iterator()).next().equals(null)) return "ngeaj"

    return "cytwx"
}

class MyCollection1(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
}

class MyCollection2(): Iterable<Int> {
    override fun iterator(): Iterator<Int> = MyIterator()

    class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().rotateRight(-495292391)

        override fun next() : Int = (MyCollection4().iterator()).k.coerceAtMost(1579195166)
        override fun hasNext() : Boolean = (MyCollection3().iterator()).hasNext()
    }
}

class MyCollection3() {
    operator fun iterator() = MyIterator()

    class MyIterator() {
        var k : Int = (hashMapOf<Int, Double>()).size.inc()

        operator fun next() : Int? = (MyCollection2().iterator()).next()
        operator fun hasNext() : Boolean = (MyCollection4().iterator()).hasNext().and(false)
    }
}

class MyCollection4() {
    operator fun iterator() = MyCollection3().iterator()

    class MyIterator() {
        var k : Int = 410181921

        operator fun next() : Int = (MyCollection2().iterator()).next().xor(-1722704191)
        operator fun hasNext() = (MyCollection1()).equals("ugviy").equals("rwrdq")
    }
}


2021-03-11 10:54:51,788 [main:56] - replacing (MyIterator(), MyIterator)
2021-03-11 10:54:51,788 [main:38] - replacing MyIterator() MyIterator
2021-03-11 10:54:51,788 [main:42] - Getting value of type MyIterator
2021-03-11 10:54:51,918 [main:302] - generating value of type = MyIterator false depth = 0
2021-03-11 10:54:51,921 [main:112] - generating klass MyIterator text = class MyIterator(): Iterator<Int> {
        var k : Int = (MyCollection2().iterator()).next().coerceIn(955862882, 1622947535)

        override fun next() : Int = (38.toUByte()).compareTo(7.toUByte()).rotateRight(-1509514949)
        override fun hasNext() = (MyCollection3().iterator()).k.equals("dstyd")
    }
2021-03-11 10:54:51,921 [main:46] - GENERATED VALUE OF TYPE MyIterator = 
2021-03-11 10:54:52,093 [main:55] - randomType = Sequence<MyCollection2>
2021-03-11 10:54:52,094 [main:94] - GETTING MyIterator from Int
2021-03-11 10:54:52,128 [main:94] - GETTING MyIterator from MyIterator
2021-03-11 10:54:52,133 [main:63] - replacement of MyIterator() of type MyIterator is MyCollection3().iterator()
2021-03-11 10:54:52,265 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 10:54:52,265 [main:66] - Compilation checking started
